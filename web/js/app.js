"use strict";
(function(root, module) {
    if (typeof define === 'function' && define.amd) {
        define(['exports'], function(exports)  {
            module(root, exports);
        });
    } else if (typeof exports === 'object' && exports !== null && typeof exports.nodeName !== 'string') {
        module(global, exports);
    } else {
        module(root, root);
    }
}(typeof self !== 'undefined' ? self : this, function($rt_globals, $rt_exports) {
    var $rt_seed = 2463534242;
    function $rt_nextId() {
        var x = $rt_seed;
        x ^= x << 13;
        x ^= x >>> 17;
        x ^= x << 5;
        $rt_seed = x;
        return x;
    }
    function $rt_compare(a, b) {
        return a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1;
    }
    function $rt_isInstance(obj, cls) {
        return obj instanceof $rt_objcls() && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls);
    }
    function $rt_isAssignable(from, to) {
        if (from === to) {
            return true;
        }
        if (to.$meta.item !== null) {
            return from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
        }
        var supertypes = from.$meta.supertypes;
        for (var i = 0;i < supertypes.length;i = i + 1 | 0) {
            if ($rt_isAssignable(supertypes[i], to)) {
                return true;
            }
        }
        return false;
    }
    function $rt_castToInterface(obj, cls) {
        if (obj !== null && !$rt_isInstance(obj, cls)) {
            $rt_throwCCE();
        }
        return obj;
    }
    function $rt_castToClass(obj, cls) {
        if (obj !== null && !(obj instanceof cls)) {
            $rt_throwCCE();
        }
        return obj;
    }
    $rt_globals.Array.prototype.fill = $rt_globals.Array.prototype.fill || function(value, start, end) {
        var len = this.length;
        if (!len) return this;
        start = start | 0;
        var i = start < 0 ? $rt_globals.Math.max(len + start, 0) : $rt_globals.Math.min(start, len);
        end = end === $rt_globals.undefined ? len : end | 0;
        end = end < 0 ? $rt_globals.Math.max(len + end, 0) : $rt_globals.Math.min(end, len);
        for (;i < end;i++) {
            this[i] = value;
        }
        return this;
    };
    function $rt_createArray(cls, sz) {
        var data = new $rt_globals.Array(sz);
        data.fill(null);
        return new $rt_array(cls, data);
    }
    function $rt_createArrayFromData(cls, init) {
        return $rt_wrapArray(cls, init);
    }
    function $rt_wrapArray(cls, data) {
        return new $rt_array(cls, data);
    }
    function $rt_createUnfilledArray(cls, sz) {
        return new $rt_array(cls, new $rt_globals.Array(sz));
    }
    function $rt_createNumericArray(cls, nativeArray) {
        return new $rt_array(cls, nativeArray);
    }
    var $rt_createLongArray;
    var $rt_createLongArrayFromData;
    if (typeof $rt_globals.BigInt64Array !== 'function') {
        $rt_createLongArray = function(sz) {
            var data = new $rt_globals.Array(sz);
            var arr = new $rt_array($rt_longcls(), data);
            data.fill(Long_ZERO);
            return arr;
        };
        $rt_createLongArrayFromData = function(init) {
            return new $rt_array($rt_longcls(), init);
        };
    } else {
        $rt_createLongArray = function(sz) {
            return $rt_createNumericArray($rt_longcls(), new $rt_globals.BigInt64Array(sz));
        };
        $rt_createLongArrayFromData = function(data) {
            var buffer = new $rt_globals.BigInt64Array(data.length);
            buffer.set(data);
            return $rt_createNumericArray($rt_longcls(), buffer);
        };
    }
    function $rt_createCharArray(sz) {
        return $rt_createNumericArray($rt_charcls(), new $rt_globals.Uint16Array(sz));
    }
    function $rt_createCharArrayFromData(data) {
        var buffer = new $rt_globals.Uint16Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_charcls(), buffer);
    }
    function $rt_createByteArray(sz) {
        return $rt_createNumericArray($rt_bytecls(), new $rt_globals.Int8Array(sz));
    }
    function $rt_createByteArrayFromData(data) {
        var buffer = new $rt_globals.Int8Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_bytecls(), buffer);
    }
    function $rt_createShortArray(sz) {
        return $rt_createNumericArray($rt_shortcls(), new $rt_globals.Int16Array(sz));
    }
    function $rt_createShortArrayFromData(data) {
        var buffer = new $rt_globals.Int16Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_shortcls(), buffer);
    }
    function $rt_createIntArray(sz) {
        return $rt_createNumericArray($rt_intcls(), new $rt_globals.Int32Array(sz));
    }
    function $rt_createIntArrayFromData(data) {
        var buffer = new $rt_globals.Int32Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_intcls(), buffer);
    }
    function $rt_createBooleanArray(sz) {
        return $rt_createNumericArray($rt_booleancls(), new $rt_globals.Int8Array(sz));
    }
    function $rt_createBooleanArrayFromData(data) {
        var buffer = new $rt_globals.Int8Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_booleancls(), buffer);
    }
    function $rt_createFloatArray(sz) {
        return $rt_createNumericArray($rt_floatcls(), new $rt_globals.Float32Array(sz));
    }
    function $rt_createFloatArrayFromData(data) {
        var buffer = new $rt_globals.Float32Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_floatcls(), buffer);
    }
    function $rt_createDoubleArray(sz) {
        return $rt_createNumericArray($rt_doublecls(), new $rt_globals.Float64Array(sz));
    }
    function $rt_createDoubleArrayFromData(data) {
        var buffer = new $rt_globals.Float64Array(data.length);
        buffer.set(data);
        return $rt_createNumericArray($rt_doublecls(), buffer);
    }
    function $rt_arraycls(cls) {
        var result = cls.$array;
        if (result === null) {
            var arraycls = {  };
            var name = "[" + cls.$meta.binaryName;
            arraycls.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false, simpleName : null, declaringClass : null, enclosingClass : null };
            arraycls.classObject = null;
            arraycls.$array = null;
            result = arraycls;
            cls.$array = arraycls;
        }
        return result;
    }
    function $rt_createcls() {
        return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
    }
    function $rt_createPrimitiveCls(name, binaryName) {
        var cls = $rt_createcls();
        cls.$meta.primitive = true;
        cls.$meta.name = name;
        cls.$meta.binaryName = binaryName;
        cls.$meta.enum = false;
        cls.$meta.item = null;
        cls.$meta.simpleName = null;
        cls.$meta.declaringClass = null;
        cls.$meta.enclosingClass = null;
        return cls;
    }
    var $rt_booleanclsCache = null;
    function $rt_booleancls() {
        if ($rt_booleanclsCache === null) {
            $rt_booleanclsCache = $rt_createPrimitiveCls("boolean", "Z");
        }
        return $rt_booleanclsCache;
    }
    var $rt_charclsCache = null;
    function $rt_charcls() {
        if ($rt_charclsCache === null) {
            $rt_charclsCache = $rt_createPrimitiveCls("char", "C");
        }
        return $rt_charclsCache;
    }
    var $rt_byteclsCache = null;
    function $rt_bytecls() {
        if ($rt_byteclsCache === null) {
            $rt_byteclsCache = $rt_createPrimitiveCls("byte", "B");
        }
        return $rt_byteclsCache;
    }
    var $rt_shortclsCache = null;
    function $rt_shortcls() {
        if ($rt_shortclsCache === null) {
            $rt_shortclsCache = $rt_createPrimitiveCls("short", "S");
        }
        return $rt_shortclsCache;
    }
    var $rt_intclsCache = null;
    function $rt_intcls() {
        if ($rt_intclsCache === null) {
            $rt_intclsCache = $rt_createPrimitiveCls("int", "I");
        }
        return $rt_intclsCache;
    }
    var $rt_longclsCache = null;
    function $rt_longcls() {
        if ($rt_longclsCache === null) {
            $rt_longclsCache = $rt_createPrimitiveCls("long", "J");
        }
        return $rt_longclsCache;
    }
    var $rt_floatclsCache = null;
    function $rt_floatcls() {
        if ($rt_floatclsCache === null) {
            $rt_floatclsCache = $rt_createPrimitiveCls("float", "F");
        }
        return $rt_floatclsCache;
    }
    var $rt_doubleclsCache = null;
    function $rt_doublecls() {
        if ($rt_doubleclsCache === null) {
            $rt_doubleclsCache = $rt_createPrimitiveCls("double", "D");
        }
        return $rt_doubleclsCache;
    }
    var $rt_voidclsCache = null;
    function $rt_voidcls() {
        if ($rt_voidclsCache === null) {
            $rt_voidclsCache = $rt_createPrimitiveCls("void", "V");
        }
        return $rt_voidclsCache;
    }
    function $rt_throw(ex) {
        throw $rt_exception(ex);
    }
    var $rt_javaExceptionProp = $rt_globals.Symbol("javaException");
    function $rt_exception(ex) {
        var err = ex.$jsException;
        if (!err) {
            var javaCause = $rt_throwableCause(ex);
            var jsCause = javaCause !== null ? javaCause.$jsException : $rt_globals.undefined;
            var cause = typeof jsCause === "object" ? { cause : jsCause } : $rt_globals.undefined;
            err = new JavaError("Java exception thrown", cause);
            if (typeof $rt_globals.Error.captureStackTrace === "function") {
                $rt_globals.Error.captureStackTrace(err);
            }
            err[$rt_javaExceptionProp] = ex;
            ex.$jsException = err;
            $rt_fillStack(err, ex);
        }
        return err;
    }
    function $rt_fillStack(err, ex) {
        if (typeof $rt_decodeStack === "function" && err.stack) {
            var stack = $rt_decodeStack(err.stack);
            var javaStack = $rt_createArray($rt_stecls(), stack.length);
            var elem;
            var noStack = false;
            for (var i = 0;i < stack.length;++i) {
                var element = stack[i];
                elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
                if (elem == null) {
                    noStack = true;
                    break;
                }
                javaStack.data[i] = elem;
            }
            if (!noStack) {
                $rt_setStack(ex, javaStack);
            }
        }
    }
    function $rt_createMultiArray(cls, dimensions) {
        var first = 0;
        for (var i = dimensions.length - 1;i >= 0;i = i - 1 | 0) {
            if (dimensions[i] === 0) {
                first = i;
                break;
            }
        }
        if (first > 0) {
            for (i = 0;i < first;i = i + 1 | 0) {
                cls = $rt_arraycls(cls);
            }
            if (first === dimensions.length - 1) {
                return $rt_createArray(cls, dimensions[first]);
            }
        }
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, first));
        var firstDim = dimensions[first] | 0;
        for (i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createArray(cls, firstDim);
        }
        return $rt_createMultiArrayImpl(cls, arrays, dimensions, first);
    }
    function $rt_createByteMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_bytecls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createByteArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_bytecls(), arrays, dimensions);
    }
    function $rt_createCharMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_charcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createCharArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_charcls(), arrays, dimensions, 0);
    }
    function $rt_createBooleanMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_booleancls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createBooleanArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_booleancls(), arrays, dimensions, 0);
    }
    function $rt_createShortMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_shortcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createShortArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_shortcls(), arrays, dimensions, 0);
    }
    function $rt_createIntMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_intcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createIntArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_intcls(), arrays, dimensions, 0);
    }
    function $rt_createLongMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_longcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createLongArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_longcls(), arrays, dimensions, 0);
    }
    function $rt_createFloatMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_floatcls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createFloatArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_floatcls(), arrays, dimensions, 0);
    }
    function $rt_createDoubleMultiArray(dimensions) {
        var arrays = new $rt_globals.Array($rt_primitiveArrayCount(dimensions, 0));
        if (arrays.length === 0) {
            return $rt_createMultiArray($rt_doublecls(), dimensions);
        }
        var firstDim = dimensions[0] | 0;
        for (var i = 0;i < arrays.length;i = i + 1 | 0) {
            arrays[i] = $rt_createDoubleArray(firstDim);
        }
        return $rt_createMultiArrayImpl($rt_doublecls(), arrays, dimensions, 0);
    }
    function $rt_primitiveArrayCount(dimensions, start) {
        var val = dimensions[start + 1] | 0;
        for (var i = start + 2;i < dimensions.length;i = i + 1 | 0) {
            val = val * (dimensions[i] | 0) | 0;
            if (val === 0) {
                break;
            }
        }
        return val;
    }
    function $rt_createMultiArrayImpl(cls, arrays, dimensions, start) {
        var limit = arrays.length;
        for (var i = start + 1 | 0;i < dimensions.length;i = i + 1 | 0) {
            cls = $rt_arraycls(cls);
            var dim = dimensions[i];
            var index = 0;
            var packedIndex = 0;
            while (index < limit) {
                var arr = $rt_createUnfilledArray(cls, dim);
                for (var j = 0;j < dim;j = j + 1 | 0) {
                    arr.data[j] = arrays[index];
                    index = index + 1 | 0;
                }
                arrays[packedIndex] = arr;
                packedIndex = packedIndex + 1 | 0;
            }
            limit = packedIndex;
        }
        return arrays[0];
    }
    function $rt_assertNotNaN(value) {
        if (typeof value === 'number' && $rt_globals.isNaN(value)) {
            throw "NaN";
        }
        return value;
    }
    function $rt_createOutputFunction(printFunction) {
        var buffer = "";
        var utf8Buffer = 0;
        var utf8Remaining = 0;
        function putCodePoint(ch) {
            if (ch === 0xA) {
                printFunction(buffer);
                buffer = "";
            } else if (ch < 0x10000) {
                buffer += $rt_globals.String.fromCharCode(ch);
            } else {
                ch = ch - 0x10000 | 0;
                var hi = (ch >> 10) + 0xD800;
                var lo = (ch & 0x3FF) + 0xDC00;
                buffer += $rt_globals.String.fromCharCode(hi, lo);
            }
        }
        return function(ch) {
            if ((ch & 0x80) === 0) {
                putCodePoint(ch);
            } else if ((ch & 0xC0) === 0x80) {
                if (utf8Buffer > 0) {
                    utf8Remaining <<= 6;
                    utf8Remaining |= ch & 0x3F;
                    if ( --utf8Buffer === 0) {
                        putCodePoint(utf8Remaining);
                    }
                }
            } else if ((ch & 0xE0) === 0xC0) {
                utf8Remaining = ch & 0x1F;
                utf8Buffer = 1;
            } else if ((ch & 0xF0) === 0xE0) {
                utf8Remaining = ch & 0x0F;
                utf8Buffer = 2;
            } else if ((ch & 0xF8) === 0xF0) {
                utf8Remaining = ch & 0x07;
                utf8Buffer = 3;
            }
        };
    }
    var $rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : typeof $rt_globals.console === "object" ? $rt_createOutputFunction(function(msg) {
        $rt_globals.console.info(msg);
    }) : function() {
    };
    var $rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : typeof $rt_globals.console === "object" ? $rt_createOutputFunction(function(msg) {
        $rt_globals.console.error(msg);
    }) : function() {
    };
    var $rt_packageData = null;
    function $rt_packages(data) {
        var i = 0;
        var packages = new $rt_globals.Array(data.length);
        for (var j = 0;j < data.length;++j) {
            var prefixIndex = data[i++];
            var prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
            packages[j] = prefix + data[i++] + ".";
        }
        $rt_packageData = packages;
    }
    function $rt_metadata(data) {
        var packages = $rt_packageData;
        var i = 0;
        while (i < data.length) {
            var cls = data[i++];
            cls.$meta = {  };
            var m = cls.$meta;
            var className = data[i++];
            m.name = className !== 0 ? className : null;
            if (m.name !== null) {
                var packageIndex = data[i++];
                if (packageIndex >= 0) {
                    m.name = packages[packageIndex] + m.name;
                }
            }
            m.binaryName = "L" + m.name + ";";
            var superclass = data[i++];
            m.superclass = superclass !== 0 ? superclass : null;
            m.supertypes = data[i++];
            if (m.superclass) {
                m.supertypes.push(m.superclass);
                cls.prototype = $rt_globals.Object.create(m.superclass.prototype);
            } else {
                cls.prototype = {  };
            }
            var flags = data[i++];
            m.enum = (flags & 8) !== 0;
            m.flags = flags;
            m.primitive = false;
            m.item = null;
            cls.prototype.constructor = cls;
            cls.classObject = null;
            m.accessLevel = data[i++];
            var innerClassInfo = data[i++];
            if (innerClassInfo === 0) {
                m.simpleName = null;
                m.declaringClass = null;
                m.enclosingClass = null;
            } else {
                var enclosingClass = innerClassInfo[0];
                m.enclosingClass = enclosingClass !== 0 ? enclosingClass : null;
                var declaringClass = innerClassInfo[1];
                m.declaringClass = declaringClass !== 0 ? declaringClass : null;
                var simpleName = innerClassInfo[2];
                m.simpleName = simpleName !== 0 ? simpleName : null;
            }
            var clinit = data[i++];
            cls.$clinit = clinit !== 0 ? clinit : function() {
            };
            var virtualMethods = data[i++];
            if (virtualMethods !== 0) {
                for (var j = 0;j < virtualMethods.length;j += 2) {
                    var name = virtualMethods[j];
                    var func = virtualMethods[j + 1];
                    if (typeof name === 'string') {
                        name = [name];
                    }
                    for (var k = 0;k < name.length;++k) {
                        cls.prototype[name[k]] = func;
                    }
                }
            }
            cls.$array = null;
        }
    }
    function $rt_wrapFunction0(f) {
        return function() {
            return f(this);
        };
    }
    function $rt_wrapFunction1(f) {
        return function(p1) {
            return f(this, p1);
        };
    }
    function $rt_wrapFunction2(f) {
        return function(p1, p2) {
            return f(this, p1, p2);
        };
    }
    function $rt_wrapFunction3(f) {
        return function(p1, p2, p3) {
            return f(this, p1, p2, p3, p3);
        };
    }
    function $rt_wrapFunction4(f) {
        return function(p1, p2, p3, p4) {
            return f(this, p1, p2, p3, p4);
        };
    }
    function $rt_threadStarter(f) {
        return function() {
            var args = $rt_globals.Array.prototype.slice.apply(arguments);
            $rt_startThread(function() {
                f.apply(this, args);
            });
        };
    }
    function $rt_mainStarter(f) {
        return function(args, callback) {
            if (!args) {
                args = [];
            }
            var javaArgs = $rt_createArray($rt_objcls(), args.length);
            for (var i = 0;i < args.length;++i) {
                javaArgs.data[i] = $rt_str(args[i]);
            }
            $rt_startThread(function() {
                f.call(null, javaArgs);
            }, callback);
        };
    }
    var $rt_stringPool_instance;
    function $rt_stringPool(strings) {
        $rt_stringPool_instance = new $rt_globals.Array(strings.length);
        for (var i = 0;i < strings.length;++i) {
            $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
        }
    }
    function $rt_s(index) {
        return $rt_stringPool_instance[index];
    }
    function $rt_eraseClinit(target) {
        return target.$clinit = function() {
        };
    }
    var $rt_numberConversionBuffer = new $rt_globals.ArrayBuffer(16);
    var $rt_numberConversionView = new $rt_globals.DataView($rt_numberConversionBuffer);
    var $rt_numberConversionFloatArray = new $rt_globals.Float32Array($rt_numberConversionBuffer);
    var $rt_numberConversionDoubleArray = new $rt_globals.Float64Array($rt_numberConversionBuffer);
    var $rt_numberConversionIntArray = new $rt_globals.Int32Array($rt_numberConversionBuffer);
    var $rt_doubleToRawLongBits;
    var $rt_longBitsToDouble;
    if (typeof $rt_globals.BigInt !== 'function') {
        $rt_doubleToRawLongBits = function(n) {
            $rt_numberConversionView.setFloat64(0, n, true);
            return new Long($rt_numberConversionView.getInt32(0, true), $rt_numberConversionView.getInt32(4, true));
        };
        $rt_longBitsToDouble = function(n) {
            $rt_numberConversionView.setInt32(0, n.lo, true);
            $rt_numberConversionView.setInt32(4, n.hi, true);
            return $rt_numberConversionView.getFloat64(0, true);
        };
    } else if (typeof $rt_globals.BigInt64Array !== 'function') {
        $rt_doubleToRawLongBits = function(n) {
            $rt_numberConversionView.setFloat64(0, n, true);
            var lo = $rt_numberConversionView.getInt32(0, true);
            var hi = $rt_numberConversionView.getInt32(4, true);
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(32, $rt_globals.BigInt(lo)) | $rt_globals.BigInt(hi) << $rt_globals.BigInt(32));
        };
        $rt_longBitsToDouble = function(n) {
            $rt_numberConversionView.setFloat64(0, n, true);
            var lo = $rt_numberConversionView.getInt32(0, true);
            var hi = $rt_numberConversionView.getInt32(4, true);
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(32, $rt_globals.BigInt(lo)) | $rt_globals.BigInt(hi) << $rt_globals.BigInt(32));
        };
    } else {
        var $rt_numberConversionLongArray = new $rt_globals.BigInt64Array($rt_numberConversionBuffer);
        $rt_doubleToRawLongBits = function(n) {
            $rt_numberConversionDoubleArray[0] = n;
            return $rt_numberConversionLongArray[0];
        };
        $rt_longBitsToDouble = function(n) {
            $rt_numberConversionLongArray[0] = n;
            return $rt_numberConversionDoubleArray[0];
        };
    }
    function $rt_floatToRawIntBits(n) {
        $rt_numberConversionFloatArray[0] = n;
        return $rt_numberConversionIntArray[0];
    }
    function $rt_intBitsToFloat(n) {
        $rt_numberConversionIntArray[0] = n;
        return $rt_numberConversionFloatArray[0];
    }
    function $rt_equalDoubles(a, b) {
        if (a !== a) {
            return b !== b;
        }
        $rt_numberConversionDoubleArray[0] = a;
        $rt_numberConversionDoubleArray[1] = b;
        return $rt_numberConversionIntArray[0] === $rt_numberConversionIntArray[2] && $rt_numberConversionIntArray[1] === $rt_numberConversionIntArray[3];
    }
    var JavaError;
    if (typeof $rt_globals.Reflect === 'object') {
        var defaultMessage = $rt_globals.Symbol("defaultMessage");
        JavaError = function JavaError(message, cause) {
            var self = $rt_globals.Reflect.construct($rt_globals.Error, [$rt_globals.undefined, cause], JavaError);
            $rt_globals.Object.setPrototypeOf(self, JavaError.prototype);
            self[defaultMessage] = message;
            return self;
        };
        JavaError.prototype = $rt_globals.Object.create($rt_globals.Error.prototype, { constructor : { configurable : true, writable : true, value : JavaError }, message : { get : function() {
            try {
                var javaException = this[$rt_javaExceptionProp];
                if (typeof javaException === 'object') {
                    var javaMessage = $rt_throwableMessage(javaException);
                    if (typeof javaMessage === "object") {
                        return javaMessage !== null ? javaMessage.toString() : null;
                    }
                }
                return this[defaultMessage];
            } catch (e){
                return "Exception occurred trying to extract Java exception message: " + e;
            }
        } } });
    } else {
        JavaError = $rt_globals.Error;
    }
    function $rt_javaException(e) {
        return e instanceof $rt_globals.Error && typeof e[$rt_javaExceptionProp] === 'object' ? e[$rt_javaExceptionProp] : null;
    }
    function $rt_jsException(e) {
        return typeof e.$jsException === 'object' ? e.$jsException : null;
    }
    function $rt_wrapException(err) {
        var ex = err[$rt_javaExceptionProp];
        if (!ex) {
            ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
            err[$rt_javaExceptionProp] = ex;
            ex.$jsException = err;
            $rt_fillStack(err, ex);
        }
        return ex;
    }
    function $dbg_class(obj) {
        var cls = obj.constructor;
        var arrayDegree = 0;
        while (cls.$meta && cls.$meta.item) {
            ++arrayDegree;
            cls = cls.$meta.item;
        }
        var clsName = "";
        if (cls === $rt_booleancls()) {
            clsName = "boolean";
        } else if (cls === $rt_bytecls()) {
            clsName = "byte";
        } else if (cls === $rt_shortcls()) {
            clsName = "short";
        } else if (cls === $rt_charcls()) {
            clsName = "char";
        } else if (cls === $rt_intcls()) {
            clsName = "int";
        } else if (cls === $rt_longcls()) {
            clsName = "long";
        } else if (cls === $rt_floatcls()) {
            clsName = "float";
        } else if (cls === $rt_doublecls()) {
            clsName = "double";
        } else {
            clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
        }
        while (arrayDegree-- > 0) {
            clsName += "[]";
        }
        return clsName;
    }
    function Long(lo, hi) {
        this.lo = lo | 0;
        this.hi = hi | 0;
    }
    Long.prototype.__teavm_class__ = function() {
        return "long";
    };
    function Long_isPositive(a) {
        return (a.hi & 0x80000000) === 0;
    }
    function Long_isNegative(a) {
        return (a.hi & 0x80000000) !== 0;
    }
    var Long_MAX_NORMAL = 1 << 18;
    var Long_ZERO;
    var Long_create;
    var Long_fromInt;
    var Long_fromNumber;
    var Long_toNumber;
    var Long_hi;
    var Long_lo;
    if (typeof $rt_globals.BigInt !== "function") {
        Long.prototype.toString = function() {
            var result = [];
            var n = this;
            var positive = Long_isPositive(n);
            if (!positive) {
                n = Long_neg(n);
            }
            var radix = new Long(10, 0);
            do  {
                var divRem = Long_divRem(n, radix);
                result.push($rt_globals.String.fromCharCode(48 + divRem[1].lo));
                n = divRem[0];
            }while (n.lo !== 0 || n.hi !== 0);
            result = (result.reverse()).join('');
            return positive ? result : "-" + result;
        };
        Long.prototype.valueOf = function() {
            return Long_toNumber(this);
        };
        Long_ZERO = new Long(0, 0);
        Long_fromInt = function(val) {
            return new Long(val,  -(val < 0) | 0);
        };
        Long_fromNumber = function(val) {
            if (val >= 0) {
                return new Long(val | 0, val / 0x100000000 | 0);
            } else {
                return Long_neg(new Long( -val | 0,  -val / 0x100000000 | 0));
            }
        };
        Long_create = function(lo, hi) {
            return new Long(lo, hi);
        };
        Long_toNumber = function(val) {
            return 0x100000000 * val.hi + (val.lo >>> 0);
        };
        Long_hi = function(val) {
            return val.hi;
        };
        Long_lo = function(val) {
            return val.lo;
        };
    } else {
        Long_ZERO = $rt_globals.BigInt(0);
        Long_create = function(lo, hi) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, $rt_globals.BigInt(lo)) | $rt_globals.BigInt.asUintN(64, $rt_globals.BigInt(hi) << $rt_globals.BigInt(32)));
        };
        Long_fromInt = function(val) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt(val | 0));
        };
        Long_fromNumber = function(val) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt(val >= 0 ? $rt_globals.Math.floor(val) : $rt_globals.Math.ceil(val)));
        };
        Long_toNumber = function(val) {
            return $rt_globals.Number(val);
        };
        Long_hi = function(val) {
            return $rt_globals.Number($rt_globals.BigInt.asIntN(64, val >> $rt_globals.BigInt(32))) | 0;
        };
        Long_lo = function(val) {
            return $rt_globals.Number($rt_globals.BigInt.asIntN(32, val)) | 0;
        };
    }
    var $rt_imul = $rt_globals.Math.imul || function(a, b) {
        var ah = a >>> 16 & 0xFFFF;
        var al = a & 0xFFFF;
        var bh = b >>> 16 & 0xFFFF;
        var bl = b & 0xFFFF;
        return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
    var $rt_udiv = function(a, b) {
        return (a >>> 0) / (b >>> 0) >>> 0;
    };
    var $rt_umod = function(a, b) {
        return (a >>> 0) % (b >>> 0) >>> 0;
    };
    var $rt_ucmp = function(a, b) {
        a >>>= 0;
        b >>>= 0;
        return a < b ?  -1 : a > b ? 1 : 0;
    };
    function $rt_checkBounds(index, array) {
        if (index < 0 || index >= array.length) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_checkUpperBound(index, array) {
        if (index >= array.length) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_checkLowerBound(index) {
        if (index < 0) {
            $rt_throwAIOOBE();
        }
        return index;
    }
    function $rt_classWithoutFields(superclass) {
        if (superclass === 0) {
            return function() {
            };
        }
        if (superclass === void 0) {
            superclass = $rt_objcls();
        }
        return function() {
            superclass.call(this);
        };
    }
    function $rt_setCloneMethod(target, f) {
        target.$clone = f;
    }
    function $rt_cls(cls) {
        return jl_Class_getClass(cls);
    }
    function $rt_str(str) {
        if (str === null) {
            return null;
        }
        var characters = $rt_createCharArray(str.length);
        var charsBuffer = characters.data;
        for (var i = 0; i < str.length; i = (i + 1) | 0) {
            charsBuffer[i] = str.charCodeAt(i) & 0xFFFF;
        }
        return jl_String__init_(characters);
    }
    function $rt_ustr(str) {
        if (str === null) {
            return null;
        }
        var data = str.$characters.data;
        var result = "";
        for (var i = 0; i < data.length; i = (i + 1) | 0) {
            result += String.fromCharCode(data[i]);
        }
        return result;
    }
    function $rt_objcls() { return jl_Object; }
    function $rt_stecls() {
        return jl_Object;
    }
    function $rt_throwableMessage(t) {
        return jl_Throwable_getMessage(t);
    }
    function $rt_throwableCause(t) {
        return jl_Throwable_getCause(t);
    }
    function $rt_nullCheck(val) {
        if (val === null) {
            $rt_throw(jl_NullPointerException__init_());
        }
        return val;
    }
    function $rt_intern(str) {
        return str;
    }
    function $rt_getThread() {
        return jl_Thread_currentThread();
    }
    function $rt_setThread(t) {
        return jl_Thread_setCurrentThread(t);
    }
    function $rt_createException(message) {
        return jl_RuntimeException__init_(message);
    }
    function $rt_createStackElement(className, methodName, fileName, lineNumber) {
        return null;
    }
    function $rt_setStack(e, stack) {
    }
    function $rt_throwAIOOBE() {
    }
    function $rt_throwCCE() {
    }
    var $java = Object.create(null);
    function jl_Object() {
        this.$monitor = null;
        this.$id$ = 0;
    }
    function jl_Object__init_() {
        var var_0 = new jl_Object();
        jl_Object__init_0(var_0);
        return var_0;
    }
    function jl_Object_monitorEnterSync($o) {
        var var$2, var$3;
        if ($o.$monitor === null)
            jl_Object_createMonitor($o);
        var$2 = $o.$monitor;
        var$3 = var$2.$owner;
        if (var$3 === null)
            var$2.$owner = jl_Thread_currentThread();
        else if (var$3 !== jl_Thread_currentThread()) {
            var$2 = new jl_IllegalStateException;
            jl_Throwable__init_(var$2, $rt_s(0));
            $rt_throw(var$2);
        }
        $o = $o.$monitor;
        $o.$count = $o.$count + 1 | 0;
    }
    function jl_Object_monitorExitSync($o) {
        var var$2, var$3;
        if (!jl_Object_isEmptyMonitor($o) && $o.$monitor.$owner === jl_Thread_currentThread()) {
            var$2 = $o.$monitor;
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (!var$3)
                var$2.$owner = null;
            jl_Object_isEmptyMonitor($o);
            return;
        }
        $o = new jl_IllegalMonitorStateException;
        jl_Throwable__init_0($o);
        $rt_throw($o);
    }
    function jl_Object_monitorEnter($o) {
        var var$2;
        if ($o.$monitor === null)
            jl_Object_createMonitor($o);
        var$2 = $o.$monitor;
        if (var$2.$owner === null)
            var$2.$owner = jl_Thread_currentThread();
        if ($o.$monitor.$owner !== jl_Thread_currentThread())
            jl_Object_monitorEnterWait$_asyncCall_$($o, 1);
        else {
            $o = $o.$monitor;
            $o.$count = $o.$count + 1 | 0;
        }
    }
    function jl_Object_createMonitor($o) {
        var var$2;
        var$2 = new jl_Object$Monitor;
        var$2.$owner = jl_Thread_currentThread();
        $o.$monitor = var$2;
    }
    function jl_Object_monitorEnterWait($o, $count, $callback) {
        var $thread_0, $monitor, var$6;
        $thread_0 = jl_Thread_currentThread();
        $monitor = $o.$monitor;
        if ($monitor === null) {
            jl_Object_createMonitor($o);
            jl_Thread_setCurrentThread($thread_0);
            $o = $o.$monitor;
            $o.$count = $o.$count + $count | 0;
            otpp_AsyncCallbackWrapper_complete($callback, null);
            return;
        }
        if ($monitor.$owner === null) {
            $monitor.$owner = $thread_0;
            jl_Thread_setCurrentThread($thread_0);
            $o = $o.$monitor;
            $o.$count = $o.$count + $count | 0;
            otpp_AsyncCallbackWrapper_complete($callback, null);
            return;
        }
        if ($monitor.$enteringThreads === null)
            $monitor.$enteringThreads = otp_Platform_createQueueJs$js_body$_30();
        $monitor = $monitor.$enteringThreads;
        var$6 = new jl_Object$monitorEnterWait$lambda$_6_0;
        var$6.$_0 = $thread_0;
        var$6.$_1 = $o;
        var$6.$_2 = $count;
        var$6.$_3 = $callback;
        $callback = var$6;
        $monitor.push($callback);
    }
    function jl_Object_monitorExit($o) {
        var var$2, var$3;
        if (!jl_Object_isEmptyMonitor($o) && $o.$monitor.$owner === jl_Thread_currentThread()) {
            var$2 = $o.$monitor;
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (var$3 <= 0) {
                var$2.$owner = null;
                var$2 = var$2.$enteringThreads;
                if (var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2)) {
                    var$2 = new jl_Object$monitorExit$lambda$_8_0;
                    var$2.$_00 = $o;
                    otp_Platform_postpone(var$2);
                } else
                    jl_Object_isEmptyMonitor($o);
            }
            return;
        }
        $o = new jl_IllegalMonitorStateException;
        jl_Throwable__init_0($o);
        $rt_throw($o);
    }
    function jl_Object_isEmptyMonitor($this) {
        var $monitor, var$2;
        $monitor = $this.$monitor;
        if ($monitor === null)
            return 1;
        a: {
            if ($monitor.$owner === null) {
                var$2 = $monitor.$enteringThreads;
                if (!(var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2))) {
                    $monitor = $monitor.$notifyListeners;
                    if ($monitor === null)
                        break a;
                    if (otp_PlatformQueue_isEmpty$static($monitor))
                        break a;
                }
            }
            return 0;
        }
        $this.$monitor = null;
        return 1;
    }
    function jl_Object__init_0($this) {}
    function jl_Object_getClass($this) {
        return jl_Class_getClass($this.constructor);
    }
    function jl_Object_equals($this, $other) {
        return $this !== $other ? 0 : 1;
    }
    function jl_Object_toString($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
        var$1 = jl_Class_getName(jl_Object_getClass($this));
        var$2 = jl_Object_identity($this);
        if (!var$2)
            var$3 = $rt_s(1);
        else {
            var$4 = (((32 - jl_Integer_numberOfLeadingZeros(var$2) | 0) + 4 | 0) - 1 | 0) / 4 | 0;
            var$5 = $rt_createCharArray(var$4);
            var$6 = var$5.data;
            var$7 = (var$4 - 1 | 0) * 4 | 0;
            var$8 = 0;
            while (var$7 >= 0) {
                var$4 = var$8 + 1 | 0;
                var$6[var$8] = jl_Character_forDigit((var$2 >>> var$7 | 0) & 15, 16);
                var$7 = var$7 - 4 | 0;
                var$8 = var$4;
            }
            var$3 = jl_String__init_(var$5);
        }
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        var$1 = jl_StringBuilder_append(var$9, var$1);
        jl_AbstractStringBuilder_append(var$1, 64);
        jl_StringBuilder_append(var$1, var$3);
        return jl_AbstractStringBuilder_toString(var$9);
    }
    function jl_Object_identity($this) {
        var $platformThis, var$2;
        $platformThis = $this;
        if (!$platformThis.$id$) {
            var$2 = $rt_nextId();
            $platformThis.$id$ = var$2;
        }
        return $this.$id$;
    }
    function jl_Object_clone($this) {
        var $result, var$2, var$3;
        if (!$rt_isInstance($this, jl_Cloneable) && $this.constructor.$meta.item === null) {
            $result = new jl_CloneNotSupportedException;
            jl_Throwable__init_0($result);
            $rt_throw($result);
        }
        $result = otp_Platform_clone($this);
        var$2 = $result;
        var$3 = $rt_nextId();
        var$2.$id$ = var$3;
        return $result;
    }
    function jl_Object_notifyAll($this) {
        var $listeners, $listener;
        $listeners = $this.$monitor;
        if (!($listeners !== null && $listeners.$owner === jl_Thread_currentThread() ? 1 : 0)) {
            $listeners = new jl_IllegalMonitorStateException;
            jl_Throwable__init_0($listeners);
            $rt_throw($listeners);
        }
        $listeners = $this.$monitor.$notifyListeners;
        if ($listeners === null)
            return;
        while (!otp_PlatformQueue_isEmpty$static($listeners)) {
            $listener = otp_PlatformQueue_remove$static($listeners);
            if (!$listener.$expired())
                otp_Platform_postpone($listener);
        }
        $this.$monitor.$notifyListeners = null;
    }
    function jl_Object_monitorEnterWait$_asyncCall_$(var$1, var$2) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        thread.suspend(function() {
            try {
                jl_Object_monitorEnterWait(var$1, var$2, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
        return null;
    }
    var nPm_Client = $rt_classWithoutFields();
    function nPm_Client_main($args) {
        var $e, $minecraft, var$4, var$5, var$6, var$7, var$8, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();$minecraft = $thread.pop();$e = $thread.pop();$args = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            jl_Integer__clinit_();
            m_WebGL__clinit_();
            nPm_LWJGLUtil__clinit_();
            cmmll_LiquidType__clinit_();
            nPm_AssetRepository__clinit_();
            jl_Character__clinit_();
            otcic_StdoutOutputStream__clinit_();
            oli_Mouse__clinit_();
            cmmi_Item__clinit_();
            cmmp_Player__clinit_();
            cmu_MathHelper__clinit_();
            ju_Collections__clinit_();
            cjj_Inflate__clinit_();
            olo_Sync__clinit_();
            ju_Comparator$NaturalOrder__clinit_();
            otcic_StderrOutputStream__clinit_();
            jnc_CoderResult__clinit_();
            ji_FileInputStream__clinit_();
            m_ProgramGL__clinit_();
            cjj_InfBlocks__clinit_();
            cjj_InfTree__clinit_();
            cjj_InfCodes__clinit_();
            ji_FileOutputStream__clinit_();
            jur_AbstractSet__clinit_();
            jl_Float__clinit_();
            cjj_CRC32__clinit_();
            jl_AbstractStringBuilder$Constants__clinit_();
            otcit_FloatAnalyzer__clinit_();
            jl_Long__clinit_();
            otci_Base64Impl__clinit_();
            a: {
                try {
                    m_WebGL_main($args);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            $e = $rt_s(2);
            $ptr = 1;
        case 1:
            nPm_LWJGLUtil_downloadAssetPack$_asyncCall_$($e);
            if ($rt_suspending()) {
                break main;
            }
            a: {
                try {
                    nPm_AssetRepository_install(nPm_LWJGLUtil_loadedPackage);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ji_IOException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            try {
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ol_LWJGLException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            jl_Throwable_printStackTrace($e);
            $minecraft = new cmm_Minecraft;
            var$4 = olo_Display_getWidth();
            var$5 = olo_Display_getHeight();
            var$6 = olo_Display_isFullscreen();
            $e = new cmmg_SurvivalGameMode;
            $e.$minecraft = $minecraft;
            $e.$instantBreak = 0;
            $minecraft.$gamemode = $e;
            $minecraft.$fullscreen = 0;
            $e = new cmm_Timer;
            $e.$speed = 1.0;
            $e.$elapsedDelta = 0.0;
            $e.$adjustment = 1.0;
            $e.$tps = 20.0;
            $e.$lastSysClock = jl_System_currentTimeMillis();
            $e.$lastHRClock = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
            $minecraft.$timer = $e;
            $minecraft.$session = null;
            $minecraft.$levelLoaded = 0;
            $minecraft.$waiting = 0;
            $minecraft.$currentScreen = null;
            var$7 = new cmm_ProgressBarDisplay;
            var$7.$text = $rt_s(3);
            var$7.$title = $rt_s(3);
            var$7.$start = jl_System_currentTimeMillis();
            var$7.$minecraft0 = $minecraft;
            $minecraft.$progressBar = var$7;
            var$8 = new cmmr_Renderer;
            var$8.$fogColorMultiplier = 1.0;
            var$8.$displayActive = 0;
            var$8.$fogEnd = 0.0;
            var$8.$entity = null;
            var$8.$random = new ju_Random;
            var$8.$unused1 = 0;
            var$8.$unused2 = 0;
            var$8.$buffer = ol_BufferUtils_createFloatBuffer(16);
            var$8.$minecraft1 = $minecraft;
            $e = new cmmr_HeldBlock;
            $e.$block = null;
            $e.$pos = 0.0;
            $e.$lastPos = 0.0;
            $e.$offset = 0;
            $e.$moving = 0;
            $e.$minecraft2 = $minecraft;
            var$8.$heldBlock = $e;
            $minecraft.$renderer = var$8;
            $minecraft.$online = 0;
            $minecraft.$ticks = 0;
            $minecraft.$blockHitTime = 0;
            $minecraft.$levelName = null;
            $minecraft.$levelId = 0;
            cmmm_HumanoidModel__init_(new cmmm_HumanoidModel, 0.0);
            $minecraft.$selected = null;
            $minecraft.$running = 0;
            $minecraft.$debug = $rt_s(3);
            $minecraft.$hasMouse = 0;
            $minecraft.$lastClick = 0;
            $minecraft.$raining = 0;
            $e = new cmm_SleepForeverThread;
            jl_Thread__init_($e);
            $e.$daemon = 1;
            jl_Thread_start($e);
            $minecraft.$width = var$4;
            $minecraft.$height = var$5;
            $minecraft.$fullscreen = var$6;
            $e = new cmm_SessionData;
            cmm_SessionData_$callClinit();
            $e.$username = $rt_s(4);
            $e.$sessionId = $rt_s(5);
            $minecraft.$session = $e;
            $ptr = 3;
            continue main;
        case 2:
            a: {
                try {
                    olo_Display_create();
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            $minecraft = new cmm_Minecraft;
            var$4 = olo_Display_getWidth();
            var$5 = olo_Display_getHeight();
            var$6 = olo_Display_isFullscreen();
            $e = new cmmg_SurvivalGameMode;
            $e.$minecraft = $minecraft;
            $e.$instantBreak = 0;
            $minecraft.$gamemode = $e;
            $minecraft.$fullscreen = 0;
            $e = new cmm_Timer;
            $e.$speed = 1.0;
            $e.$elapsedDelta = 0.0;
            $e.$adjustment = 1.0;
            $e.$tps = 20.0;
            $e.$lastSysClock = jl_System_currentTimeMillis();
            $e.$lastHRClock = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
            $minecraft.$timer = $e;
            $minecraft.$session = null;
            $minecraft.$levelLoaded = 0;
            $minecraft.$waiting = 0;
            $minecraft.$currentScreen = null;
            var$7 = new cmm_ProgressBarDisplay;
            var$7.$text = $rt_s(3);
            var$7.$title = $rt_s(3);
            var$7.$start = jl_System_currentTimeMillis();
            var$7.$minecraft0 = $minecraft;
            $minecraft.$progressBar = var$7;
            var$8 = new cmmr_Renderer;
            var$8.$fogColorMultiplier = 1.0;
            var$8.$displayActive = 0;
            var$8.$fogEnd = 0.0;
            var$8.$entity = null;
            var$8.$random = new ju_Random;
            var$8.$unused1 = 0;
            var$8.$unused2 = 0;
            var$8.$buffer = ol_BufferUtils_createFloatBuffer(16);
            var$8.$minecraft1 = $minecraft;
            $e = new cmmr_HeldBlock;
            $e.$block = null;
            $e.$pos = 0.0;
            $e.$lastPos = 0.0;
            $e.$offset = 0;
            $e.$moving = 0;
            $e.$minecraft2 = $minecraft;
            var$8.$heldBlock = $e;
            $minecraft.$renderer = var$8;
            $minecraft.$online = 0;
            $minecraft.$ticks = 0;
            $minecraft.$blockHitTime = 0;
            $minecraft.$levelName = null;
            $minecraft.$levelId = 0;
            cmmm_HumanoidModel__init_(new cmmm_HumanoidModel, 0.0);
            $minecraft.$selected = null;
            $minecraft.$running = 0;
            $minecraft.$debug = $rt_s(3);
            $minecraft.$hasMouse = 0;
            $minecraft.$lastClick = 0;
            $minecraft.$raining = 0;
            $e = new cmm_SleepForeverThread;
            jl_Thread__init_($e);
            $e.$daemon = 1;
            jl_Thread_start($e);
            $minecraft.$width = var$4;
            $minecraft.$height = var$5;
            $minecraft.$fullscreen = var$6;
            $e = new cmm_SessionData;
            cmm_SessionData_$callClinit();
            $e.$username = $rt_s(4);
            $e.$sessionId = $rt_s(5);
            $minecraft.$session = $e;
            $ptr = 3;
        case 3:
            cmm_Minecraft_run($minecraft);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($args, $e, $minecraft, var$4, var$5, var$6, var$7, var$8, $ptr);
    }
    var jlr_AnnotatedElement = $rt_classWithoutFields(0);
    var jlr_Type = $rt_classWithoutFields(0);
    function jl_Class() {
        var a = this; jl_Object.call(a);
        a.$name = null;
        a.$platformClass = null;
    }
    function jl_Class_getClass($cls) {
        var $result, var$3;
        if ($cls === null)
            return null;
        $result = $cls.classObject;
        if ($result === null) {
            $result = new jl_Class;
            $result.$platformClass = $cls;
            var$3 = $result;
            $cls.classObject = var$3;
        }
        return $result;
    }
    function jl_Class_isAssignableFrom($this, $obj) {
        return otp_Platform_isAssignable($obj.$platformClass, $this.$platformClass);
    }
    function jl_Class_getName($this) {
        if ($this.$name === null)
            $this.$name = $rt_str($this.$platformClass.$meta.name);
        return $this.$name;
    }
    function jl_Class_isPrimitive($this) {
        return $this.$platformClass.$meta.primitive ? 1 : 0;
    }
    function jl_Class_getComponentType($this) {
        return jl_Class_getClass(otp_Platform_getArrayItem($this.$platformClass));
    }
    function jl_Class_getClassLoader($this) {
        jl_ClassLoader_$callClinit();
        return jl_ClassLoader_systemClassLoader;
    }
    function jl_Class_getResourceAsStream($this, $name) {
        var $cls, $index, var$4, var$5, var$6, var$7;
        if (jl_String_startsWith($name, $rt_s(6)))
            return jl_ClassLoader_getResourceAsStream(jl_Class_getClassLoader($this), jl_String_substring($name, 1));
        $cls = $this;
        while (otp_Platform_getArrayItem($cls.$platformClass) === null ? 0 : 1) {
            $cls = jl_Class_getComponentType($cls);
        }
        $cls = jl_Class_getName($cls);
        $index = jl_String_lastIndexOf($cls, 46);
        if ($index >= 0) {
            $cls = jl_String_substring0($cls, 0, $index + 1 | 0);
            var$4 = $rt_createCharArray(jl_String_length($cls));
            var$5 = var$4.data;
            var$6 = 0;
            while (var$6 < jl_String_length($cls)) {
                var$5[var$6] = jl_String_charAt($cls, var$6) != 46 ? jl_String_charAt($cls, var$6) : 47;
                var$6 = var$6 + 1 | 0;
            }
            $cls = jl_String__init_0();
            $cls.$characters = var$4;
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_StringBuilder_append(jl_StringBuilder_append(var$7, $cls), $name);
            $name = jl_AbstractStringBuilder_toString(var$7);
        }
        return jl_ClassLoader_getResourceAsStream(jl_Class_getClassLoader($this), $name);
    }
    var otji_JS = $rt_classWithoutFields();
    function otji_JS_function(var$1, var$2) {
        var name = 'jso$functor$' + var$2;
        if (!var$1[name]) {
            var fn = function() {
                return var$1[var$2].apply(var$1, arguments);
            };
            var$1[name] = function() {
                return fn;
            };
        }
        return var$1[name]();
    }
    function otji_JS_functionAsObject(var$1, var$2) {
        if (typeof var$1 !== "function") return var$1;
        var result = {};
        result[var$2] = var$1;
        return result;
    }
    var otp_Platform = $rt_classWithoutFields();
    function otp_Platform_clone(var$1) {
        var copy = new var$1.constructor();
        for (var field in var$1) {
            if (!var$1.hasOwnProperty(field)) {
                continue;
            }
            copy[field] = var$1[field];
        }
        return copy;
    }
    function otp_Platform_isAssignable($from, $to) {
        var $supertypes, $i;
        if ($from === $to)
            return 1;
        $supertypes = $from.$meta.supertypes;
        $i = 0;
        while ($i < $supertypes.length) {
            if (otp_Platform_isAssignable($supertypes[$i], $to))
                return 1;
            $i = $i + 1 | 0;
        }
        return 0;
    }
    function otp_Platform_startThread(var$1) {
        return setTimeout(function() {
            $rt_threadStarter(otp_Platform_launchThread)(var$1);
        }, 0);
    }
    function otp_Platform_launchThread($runnable) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$runnable = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $ptr = 1;
        case 1:
            $runnable.$run();
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($runnable, $ptr);
    }
    function otp_Platform_postpone($runnable) {
        otp_Platform_schedule($runnable, 0);
    }
    function otp_Platform_schedule(var$1, var$2) {
        return setTimeout(function() {
            otp_Platform_launchThread(var$1);
        }, var$2);
    }
    function otp_Platform_getArrayItem($cls) {
        return $cls.$meta.item;
    }
    function otp_Platform_createQueueJs$js_body$_30() {
        return [];
    }
    function jl_Throwable() {
        var a = this; jl_Object.call(a);
        a.$message = null;
        a.$cause = null;
        a.$suppressionEnabled = 0;
        a.$writableStackTrace = 0;
        a.$stackTrace = null;
    }
    function jl_Throwable__init_1() {
        var var_0 = new jl_Throwable();
        jl_Throwable__init_0(var_0);
        return var_0;
    }
    function jl_Throwable__init_2(var_0) {
        var var_1 = new jl_Throwable();
        jl_Throwable__init_(var_1, var_0);
        return var_1;
    }
    function jl_Throwable__init_3(var_0) {
        var var_1 = new jl_Throwable();
        jl_Throwable__init_4(var_1, var_0);
        return var_1;
    }
    function jl_Throwable__init_0($this) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
    }
    function jl_Throwable__init_($this, $message) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
        $this.$message = $message;
    }
    function jl_Throwable__init_4($this, $cause) {
        $this.$suppressionEnabled = 1;
        $this.$writableStackTrace = 1;
        $this.$cause = $cause;
    }
    function jl_Throwable_fillInStackTrace($this) {
        return $this;
    }
    function jl_Throwable_getMessage($this) {
        return $this.$message;
    }
    function jl_Throwable_getLocalizedMessage($this) {
        return $this.$getMessage();
    }
    function jl_Throwable_getCause($this) {
        var var$1;
        var$1 = $this.$cause;
        if (var$1 === $this)
            var$1 = null;
        return var$1;
    }
    function jl_Throwable_printStackTrace($this) {
        jl_Throwable_printStackTrace0($this, jl_System_err());
    }
    function jl_Throwable_printStackTrace0($this, $stream) {
        var $message, var$3, var$4, var$5, var$6, $element;
        ji_PrintStream_print($stream, jl_Class_getName(jl_Object_getClass($this)));
        $message = $this.$getMessage();
        if ($message !== null) {
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(7)), $message);
            ji_PrintStream_print($stream, jl_AbstractStringBuilder_toString(var$3));
        }
        a: {
            var$4 = $stream.$buffer0;
            var$4.data[0] = 10;
            ji_PrintStream_print0($stream, var$4, 0, 1);
            var$4 = $this.$stackTrace;
            if (var$4 !== null) {
                var$4 = var$4.data;
                var$5 = var$4.length;
                var$6 = 0;
                while (true) {
                    if (var$6 >= var$5)
                        break a;
                    $element = var$4[var$6];
                    ji_PrintStream_print($stream, $rt_s(8));
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append($stream.$sb, $element), 10);
                    ji_PrintStream_printSB($stream);
                    var$6 = var$6 + 1 | 0;
                }
            }
        }
        var$3 = $this.$cause;
        if (var$3 !== null && var$3 !== $this) {
            ji_PrintStream_print($stream, $rt_s(9));
            jl_Throwable_printStackTrace0($this.$cause, $stream);
        }
    }
    var jl_Exception = $rt_classWithoutFields(jl_Throwable);
    var jl_RuntimeException = $rt_classWithoutFields(jl_Exception);
    function jl_RuntimeException__init_(var_0) {
        var var_1 = new jl_RuntimeException();
        jl_RuntimeException__init_0(var_1, var_0);
        return var_1;
    }
    function jl_RuntimeException__init_0($this, $message) {
        jl_Throwable__init_($this, $message);
    }
    var jl_ClassCastException = $rt_classWithoutFields(jl_RuntimeException);
    var ji_Serializable = $rt_classWithoutFields(0);
    var jl_Comparable = $rt_classWithoutFields(0);
    var jl_CharSequence = $rt_classWithoutFields(0);
    function jl_String() {
        var a = this; jl_Object.call(a);
        a.$characters = null;
        a.$hashCode = 0;
    }
    var jl_String_EMPTY_CHARS = null;
    var jl_String_EMPTY = null;
    var jl_String_CASE_INSENSITIVE_ORDER = null;
    function jl_String_$callClinit() {
        jl_String_$callClinit = $rt_eraseClinit(jl_String);
        jl_String__clinit_();
    }
    function jl_String__init_0() {
        var var_0 = new jl_String();
        jl_String__init_1(var_0);
        return var_0;
    }
    function jl_String__init_2(var_0) {
        var var_1 = new jl_String();
        jl_String__init_3(var_1, var_0);
        return var_1;
    }
    function jl_String__init_(var_0) {
        var var_1 = new jl_String();
        jl_String__init_4(var_1, var_0);
        return var_1;
    }
    function jl_String__init_5(var_0, var_1, var_2) {
        var var_3 = new jl_String();
        jl_String__init_6(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jl_String__init_1($this) {
        jl_String_$callClinit();
        $this.$characters = jl_String_EMPTY_CHARS;
    }
    function jl_String__init_3($this, $other) {
        jl_String_$callClinit();
        $this.$characters = $other.$characters;
    }
    function jl_String__init_4($this, $characters) {
        jl_String_$callClinit();
        jl_String__init_6($this, $characters, 0, $characters.data.length);
    }
    function jl_String__init_6($this, $value, $offset, $count) {
        var var$4;
        jl_String_$callClinit();
        var$4 = $rt_createCharArray($count);
        $this.$characters = var$4;
        jl_System_fastArraycopy($value, $offset, var$4, 0, $count);
    }
    function jl_String_charAt($this, $index) {
        var var$2, var$3;
        if ($index >= 0) {
            var$2 = $this.$characters.data;
            if ($index < var$2.length)
                return var$2[$index];
        }
        var$3 = new jl_StringIndexOutOfBoundsException;
        jl_Throwable__init_0(var$3);
        $rt_throw(var$3);
    }
    function jl_String_length($this) {
        return $this.$characters.data.length;
    }
    function jl_String_isEmpty($this) {
        return $this.$characters.data.length ? 0 : 1;
    }
    function jl_String_startsWith0($this, $prefix, $toffset) {
        var $i, var$4, var$5;
        if (($toffset + jl_String_length($prefix) | 0) > jl_String_length($this))
            return 0;
        $i = 0;
        while ($i < jl_String_length($prefix)) {
            var$4 = jl_String_charAt($prefix, $i);
            var$5 = $toffset + 1 | 0;
            if (var$4 != jl_String_charAt($this, $toffset))
                return 0;
            $i = $i + 1 | 0;
            $toffset = var$5;
        }
        return 1;
    }
    function jl_String_startsWith($this, $prefix) {
        if ($this === $prefix)
            return 1;
        return jl_String_startsWith0($this, $prefix, 0);
    }
    function jl_String_indexOf($this, $ch, $fromIndex) {
        var $i, $bmpChar, var$5, $hi, $lo;
        $i = jl_Math_max(0, $fromIndex);
        if ($ch < 65536) {
            $bmpChar = $ch & 65535;
            while (true) {
                var$5 = $this.$characters.data;
                if ($i >= var$5.length)
                    return (-1);
                if (var$5[$i] == $bmpChar)
                    break;
                $i = $i + 1 | 0;
            }
            return $i;
        }
        $hi = jl_Character_highSurrogate($ch);
        $lo = jl_Character_lowSurrogate($ch);
        while (true) {
            var$5 = $this.$characters.data;
            if ($i >= (var$5.length - 1 | 0))
                return (-1);
            if (var$5[$i] == $hi && var$5[$i + 1 | 0] == $lo)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    function jl_String_indexOf0($this, $ch) {
        return jl_String_indexOf($this, $ch, 0);
    }
    function jl_String_lastIndexOf0($this, $ch, $fromIndex) {
        var $i, $bmpChar, $hi, $lo, var$7;
        $i = jl_Math_min($fromIndex, jl_String_length($this) - 1 | 0);
        if ($ch < 65536) {
            $bmpChar = $ch & 65535;
            while (true) {
                if ($i < 0)
                    return (-1);
                if ($this.$characters.data[$i] == $bmpChar)
                    break;
                $i = $i + (-1) | 0;
            }
            return $i;
        }
        $hi = jl_Character_highSurrogate($ch);
        $lo = jl_Character_lowSurrogate($ch);
        while (true) {
            if ($i < 1)
                return (-1);
            var$7 = $this.$characters.data;
            if (var$7[$i] == $lo) {
                $ch = $i - 1 | 0;
                if (var$7[$ch] == $hi)
                    break;
            }
            $i = $i + (-1) | 0;
        }
        return $ch;
    }
    function jl_String_lastIndexOf($this, $ch) {
        return jl_String_lastIndexOf0($this, $ch, jl_String_length($this) - 1 | 0);
    }
    function jl_String_indexOf1($this, $str, $fromIndex) {
        var $i, $toIndex, $j;
        $i = jl_Math_max(0, $fromIndex);
        $toIndex = jl_String_length($this) - jl_String_length($str) | 0;
        a: while (true) {
            if ($i > $toIndex)
                return (-1);
            $j = 0;
            while (true) {
                if ($j >= jl_String_length($str))
                    break a;
                if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                    break;
                $j = $j + 1 | 0;
            }
            $i = $i + 1 | 0;
        }
        return $i;
    }
    function jl_String_lastIndexOf1($this, $str, $fromIndex) {
        var $i, $j;
        $i = jl_Math_min($fromIndex, jl_String_length($this) - jl_String_length($str) | 0);
        a: while (true) {
            if ($i < 0)
                return (-1);
            $j = 0;
            while (true) {
                if ($j >= jl_String_length($str))
                    break a;
                if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                    break;
                $j = $j + 1 | 0;
            }
            $i = $i + (-1) | 0;
        }
        return $i;
    }
    function jl_String_substring0($this, $beginIndex, $endIndex) {
        var var$3, var$4;
        var$3 = $rt_compare($beginIndex, $endIndex);
        if (var$3 > 0) {
            var$4 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$4);
            $rt_throw(var$4);
        }
        if (!var$3) {
            jl_String_$callClinit();
            return jl_String_EMPTY;
        }
        if (!$beginIndex && $endIndex == jl_String_length($this))
            return $this;
        return jl_String__init_5($this.$characters, $beginIndex, $endIndex - $beginIndex | 0);
    }
    function jl_String_substring($this, $beginIndex) {
        return jl_String_substring0($this, $beginIndex, jl_String_length($this));
    }
    function jl_String_subSequence($this, $beginIndex, $endIndex) {
        return jl_String_substring0($this, $beginIndex, $endIndex);
    }
    function jl_String_replace($this, $target, $replacement) {
        var $sb, $sz, $i, $j;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $sz = jl_String_length($this) - jl_String_length($target) | 0;
        $i = 0;
        while ($i <= $sz) {
            $j = 0;
            a: {
                while (true) {
                    if ($j >= jl_String_length($target)) {
                        jl_StringBuilder_append($sb, $replacement);
                        $i = $i + (jl_String_length($target) - 1 | 0) | 0;
                        break a;
                    }
                    if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($target, $j))
                        break;
                    $j = $j + 1 | 0;
                }
                jl_AbstractStringBuilder_append($sb, jl_String_charAt($this, $i));
            }
            $i = $i + 1 | 0;
        }
        jl_StringBuilder_append($sb, jl_String_substring($this, $i));
        return jl_AbstractStringBuilder_toString($sb);
    }
    function jl_String_trim($this) {
        var $lower, $upper;
        $lower = 0;
        $upper = jl_String_length($this) - 1 | 0;
        a: {
            while ($lower <= $upper) {
                if (jl_String_charAt($this, $lower) > 32)
                    break a;
                $lower = $lower + 1 | 0;
            }
        }
        while ($lower <= $upper && jl_String_charAt($this, $upper) <= 32) {
            $upper = $upper + (-1) | 0;
        }
        return jl_String_substring0($this, $lower, $upper + 1 | 0);
    }
    function jl_String_toCharArray($this) {
        var var$1, $array, var$3, $i, var$5;
        var$1 = $this.$characters.data;
        $array = $rt_createCharArray(var$1.length);
        var$3 = $array.data;
        $i = 0;
        var$5 = var$3.length;
        while ($i < var$5) {
            var$3[$i] = var$1[$i];
            $i = $i + 1 | 0;
        }
        return $array;
    }
    function jl_String_valueOf($c) {
        var var$2, var$3;
        jl_String_$callClinit();
        var$2 = new jl_String;
        var$3 = $rt_createCharArray(1);
        var$3.data[0] = $c;
        jl_String__init_4(var$2, var$3);
        return var$2;
    }
    function jl_String_valueOf0($i) {
        var var$2;
        jl_String_$callClinit();
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, $i));
    }
    function jl_String_equals($this, $other) {
        var $str, $i;
        if ($this === $other)
            return 1;
        if (!($other instanceof jl_String))
            return 0;
        $str = $other;
        if (jl_String_length($str) != jl_String_length($this))
            return 0;
        $i = 0;
        while ($i < jl_String_length($str)) {
            if (jl_String_charAt($this, $i) != jl_String_charAt($str, $i))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function jl_String_hashCode($this) {
        var var$1, var$2, var$3, $c;
        a: {
            if (!$this.$hashCode) {
                var$1 = $this.$characters.data;
                var$2 = var$1.length;
                var$3 = 0;
                while (true) {
                    if (var$3 >= var$2)
                        break a;
                    $c = var$1[var$3];
                    $this.$hashCode = (31 * $this.$hashCode | 0) + $c | 0;
                    var$3 = var$3 + 1 | 0;
                }
            }
        }
        return $this.$hashCode;
    }
    function jl_String_split($this, $regex) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
        if ($regex === null) {
            $regex = new jl_NullPointerException;
            jl_Throwable__init_($regex, $rt_s(10));
            $rt_throw($regex);
        }
        jur_AbstractSet_counter = 1;
        var$2 = new jur_Pattern;
        var$2.$backRefs = $rt_createArray(jur_FSet, 10);
        var$2.$globalGroupIndex = (-1);
        var$2.$compCount = (-1);
        var$2.$consCount = (-1);
        var$3 = new jur_Lexer;
        var$3.$mode = 1;
        var$3.$orig = $regex;
        var$3.$pattern = $rt_createCharArray(jl_String_length($regex) + 2 | 0);
        jl_System_fastArraycopy(jl_String_toCharArray($regex), 0, var$3.$pattern, 0, jl_String_length($regex));
        var$4 = var$3.$pattern.data;
        var$5 = var$4.length;
        var$4[var$5 - 1 | 0] = 0;
        var$4[var$5 - 2 | 0] = 0;
        var$3.$patternFullLength = var$5;
        var$3.$flags = 0;
        jur_Lexer_movePointer(var$3);
        jur_Lexer_movePointer(var$3);
        var$2.$lexemes = var$3;
        var$2.$flags0 = 0;
        var$2.$start1 = jur_Pattern_processExpression(var$2, (-1), 0, null);
        if (!jur_Lexer_isEmpty(var$2.$lexemes)) {
            $regex = new jur_PatternSyntaxException;
            var$2 = var$2.$lexemes;
            jur_PatternSyntaxException__init_($regex, $rt_s(3), var$2.$orig, var$2.$curToc);
            $rt_throw($regex);
        }
        if (var$2.$needsBackRefReplacement)
            var$2.$start1.$processSecondPass();
        $regex = ju_ArrayList__init_();
        var$3 = new jur_Matcher;
        var$3.$leftBound = (-1);
        var$3.$rightBound = (-1);
        var$3.$pat = var$2;
        var$3.$start2 = var$2.$start1;
        var$3.$string = $this;
        var$3.$leftBound = 0;
        var$6 = jl_String_length($this);
        var$3.$rightBound = var$6;
        var$7 = new jur_MatchResultImpl;
        var$8 = var$3.$leftBound;
        var$9 = var$2.$globalGroupIndex;
        var$5 = var$2.$compCount + 1 | 0;
        var$10 = var$2.$consCount + 1 | 0;
        var$7.$previousMatch = (-1);
        var$11 = var$9 + 1 | 0;
        var$7.$groupCount = var$11;
        var$7.$groupBounds = $rt_createIntArray(var$11 * 2 | 0);
        var$4 = $rt_createIntArray(var$10);
        var$7.$consumers = var$4;
        ju_Arrays_fill(var$4, (-1));
        if (var$5 > 0)
            var$7.$compQuantCounters = $rt_createIntArray(var$5);
        ju_Arrays_fill(var$7.$groupBounds, (-1));
        jur_MatchResultImpl_reset(var$7, $this, var$8, var$6);
        var$3.$matchResult = var$7;
        var$7.$anchoringBounds = 1;
        var$5 = 0;
        var$9 = 0;
        if (!jl_String_length($this)) {
            var$4 = $rt_createArray(jl_String, 1);
            var$4.data[0] = $rt_s(3);
        } else {
            while (true) {
                var$11 = jl_String_length(var$3.$string);
                if (!jur_Matcher_hasTransparentBounds(var$3))
                    var$11 = var$3.$rightBound;
                var$2 = var$3.$matchResult;
                if (var$2.$startIndex >= 0 && jur_MatchResultImpl_mode(var$2) == 1) {
                    var$2 = var$3.$matchResult;
                    var$2.$startIndex = jur_MatchResultImpl_end(var$2);
                    if (jur_MatchResultImpl_end(var$3.$matchResult) == jur_MatchResultImpl_start(var$3.$matchResult)) {
                        var$2 = var$3.$matchResult;
                        var$2.$startIndex = var$2.$startIndex + 1 | 0;
                    }
                    var$6 = var$3.$matchResult.$startIndex;
                    var$6 = var$6 <= var$11 && jur_Matcher_find(var$3, var$6) ? 1 : 0;
                } else
                    var$6 = jur_Matcher_find(var$3, var$3.$leftBound);
                if (!var$6)
                    break;
                var$5 = var$5 + 1 | 0;
                ju_ArrayList_add($regex, jl_String_subSequence($this, var$9, jur_Matcher_start(var$3)));
                var$9 = jur_Matcher_end(var$3);
            }
            ju_ArrayList_add($regex, jl_String_subSequence($this, var$9, jl_String_length($this)));
            var$12 = var$5 + 1 | 0;
            a: {
                while (true) {
                    var$12 = var$12 + (-1) | 0;
                    if (var$12 < 0)
                        break;
                    if (jl_String_length(ju_ArrayList_get($regex, var$12)))
                        break a;
                    ju_ArrayList_remove($regex, var$12);
                }
            }
            if (var$12 < 0)
                var$12 = 0;
            var$4 = ju_AbstractCollection_toArray($regex, $rt_createArray(jl_String, var$12));
        }
        return var$4;
    }
    function jl_String__clinit_() {
        jl_String_EMPTY_CHARS = $rt_createCharArray(0);
        jl_String_EMPTY = jl_String__init_0();
        jl_String_CASE_INSENSITIVE_ORDER = new jl_String$_clinit_$lambda$_93_0;
    }
    var jl_Error = $rt_classWithoutFields(jl_Throwable);
    var jl_LinkageError = $rt_classWithoutFields(jl_Error);
    var jl_NoClassDefFoundError = $rt_classWithoutFields(jl_LinkageError);
    var jl_Number = $rt_classWithoutFields();
    function jl_Integer() {
        jl_Number.call(this);
        this.$value = 0;
    }
    var jl_Integer_TYPE = null;
    var jl_Integer_integerCache = null;
    function jl_Integer__init_(var_0) {
        var var_1 = new jl_Integer();
        jl_Integer__init_0(var_1, var_0);
        return var_1;
    }
    function jl_Integer__init_0($this, $value) {
        $this.$value = $value;
    }
    function jl_Integer_toString($i) {
        return (jl_AbstractStringBuilder_append0(jl_AbstractStringBuilder__init_0(20), $i, 10)).$toString();
    }
    function jl_Integer_parseInt($s, $radix) {
        var var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
        if ($s === null) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s, $rt_s(11));
            $rt_throw($s);
        }
        var$3 = jl_String_length($s);
        if (0 == var$3) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s, $rt_s(12));
            $rt_throw($s);
        }
        if ($radix >= 2 && $radix <= 36) {
            a: {
                var$4 = 0;
                switch (jl_String_charAt($s, 0)) {
                    case 43:
                        break;
                    case 45:
                        var$4 = 1;
                        var$5 = 1;
                        break a;
                    default:
                        var$5 = 0;
                        break a;
                }
                var$5 = 1;
            }
            var$6 = 0;
            if (var$5 == var$3) {
                $s = new jl_NumberFormatException;
                jl_Throwable__init_0($s);
                $rt_throw($s);
            }
            b: {
                c: {
                    while (var$5 < var$3) {
                        var$7 = var$5 + 1 | 0;
                        var$8 = jl_Character_getNumericValue(jl_String_charAt($s, var$5));
                        if (var$8 < 0) {
                            var$9 = new jl_NumberFormatException;
                            var$10 = jl_String_substring0($s, 0, var$3);
                            $s = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($s);
                            jl_StringBuilder_append(jl_StringBuilder_append($s, $rt_s(13)), var$10);
                            jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString($s));
                            $rt_throw(var$9);
                        }
                        if (var$8 >= $radix) {
                            var$9 = new jl_NumberFormatException;
                            var$11 = jl_String_substring0($s, 0, var$3);
                            $s = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($s);
                            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($s, $rt_s(14)), $radix), $rt_s(7)), var$11);
                            jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString($s));
                            $rt_throw(var$9);
                        }
                        var$6 = $rt_imul($radix, var$6) + var$8 | 0;
                        if (var$6 < 0) {
                            if (var$7 != var$3)
                                break b;
                            if (var$6 != (-2147483648))
                                break b;
                            if (!var$4)
                                break b;
                            var$6 = (-2147483648);
                            break c;
                        }
                        var$5 = var$7;
                    }
                    if (var$4)
                        var$6 =  -var$6 | 0;
                }
                return var$6;
            }
            var$9 = new jl_NumberFormatException;
            var$10 = jl_String_substring0($s, 0, var$3);
            $s = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($s);
            jl_StringBuilder_append(jl_StringBuilder_append($s, $rt_s(15)), var$10);
            jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString($s));
            $rt_throw(var$9);
        }
        $s = new jl_NumberFormatException;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(16)), $radix);
        jl_Throwable__init_($s, jl_AbstractStringBuilder_toString(var$9));
        $rt_throw($s);
    }
    function jl_Integer_parseInt0($s) {
        return jl_Integer_parseInt($s, 10);
    }
    function jl_Integer_valueOf($i) {
        var var$2, var$3;
        if ($i >= (-128) && $i <= 127) {
            a: {
                if (jl_Integer_integerCache === null) {
                    jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
                    var$2 = 0;
                    while (true) {
                        var$3 = jl_Integer_integerCache.data;
                        if (var$2 >= var$3.length)
                            break a;
                        var$3[var$2] = jl_Integer__init_(var$2 - 128 | 0);
                        var$2 = var$2 + 1 | 0;
                    }
                }
            }
            return jl_Integer_integerCache.data[$i + 128 | 0];
        }
        return jl_Integer__init_($i);
    }
    function jl_Integer_intValue($this) {
        return $this.$value;
    }
    function jl_Integer_hashCode($this) {
        return $this.$value;
    }
    function jl_Integer_equals($this, $other) {
        if ($this === $other)
            return 1;
        return $other instanceof jl_Integer && $other.$value == $this.$value ? 1 : 0;
    }
    function jl_Integer_numberOfLeadingZeros($i) {
        var $n, var$3;
        if (!$i)
            return 32;
        $n = 0;
        var$3 = $i >>> 16 | 0;
        if (var$3)
            $n = 16;
        else
            var$3 = $i;
        $i = var$3 >>> 8 | 0;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 8;
        var$3 = $i >>> 4 | 0;
        if (!var$3)
            var$3 = $i;
        else
            $n = $n | 4;
        $i = var$3 >>> 2 | 0;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 2;
        if ($i >>> 1 | 0)
            $n = $n | 1;
        return (32 - $n | 0) - 1 | 0;
    }
    function jl_Integer_numberOfTrailingZeros($i) {
        var $n, var$3;
        if (!$i)
            return 32;
        $n = 0;
        var$3 = $i << 16;
        if (var$3)
            $n = 16;
        else
            var$3 = $i;
        $i = var$3 << 8;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 8;
        var$3 = $i << 4;
        if (!var$3)
            var$3 = $i;
        else
            $n = $n | 4;
        $i = var$3 << 2;
        if (!$i)
            $i = var$3;
        else
            $n = $n | 2;
        if ($i << 1)
            $n = $n | 1;
        return (32 - $n | 0) - 1 | 0;
    }
    function jl_Integer__clinit_() {
        jl_Integer_TYPE = $rt_cls($rt_intcls());
    }
    function jl_AbstractStringBuilder() {
        var a = this; jl_Object.call(a);
        a.$buffer1 = null;
        a.$length0 = 0;
    }
    function jl_AbstractStringBuilder__init_1() {
        var var_0 = new jl_AbstractStringBuilder();
        jl_AbstractStringBuilder__init_(var_0);
        return var_0;
    }
    function jl_AbstractStringBuilder__init_0(var_0) {
        var var_1 = new jl_AbstractStringBuilder();
        jl_AbstractStringBuilder__init_2(var_1, var_0);
        return var_1;
    }
    function jl_AbstractStringBuilder__init_($this) {
        jl_AbstractStringBuilder__init_2($this, 16);
    }
    function jl_AbstractStringBuilder__init_2($this, $capacity) {
        $this.$buffer1 = $rt_createCharArray($capacity);
    }
    function jl_AbstractStringBuilder_append0($this, $value, $radix) {
        return jl_AbstractStringBuilder_insert($this, $this.$length0, $value, $radix);
    }
    function jl_AbstractStringBuilder_insert($this, $target, $value, $radix) {
        var $positive, var$5, var$6, $pos, $sz, $posLimit, var$10;
        $positive = 1;
        if ($value < 0) {
            $positive = 0;
            $value =  -$value | 0;
        }
        a: {
            if ($rt_ucmp($value, $radix) < 0) {
                if ($positive)
                    jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
                else {
                    jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                    var$5 = $this.$buffer1.data;
                    var$6 = $target + 1 | 0;
                    var$5[$target] = 45;
                    $target = var$6;
                }
                $this.$buffer1.data[$target] = jl_Character_forDigit($value, $radix);
            } else {
                $pos = 1;
                $sz = 1;
                $posLimit = $rt_udiv((-1), $radix);
                b: {
                    while (true) {
                        var$10 = $rt_imul($pos, $radix);
                        if ($rt_ucmp(var$10, $value) > 0) {
                            var$10 = $pos;
                            break b;
                        }
                        $sz = $sz + 1 | 0;
                        if ($rt_ucmp(var$10, $posLimit) > 0)
                            break;
                        $pos = var$10;
                    }
                }
                if (!$positive)
                    $sz = $sz + 1 | 0;
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
                if ($positive)
                    $positive = $target;
                else {
                    var$5 = $this.$buffer1.data;
                    $positive = $target + 1 | 0;
                    var$5[$target] = 45;
                }
                while (true) {
                    if (!var$10)
                        break a;
                    var$5 = $this.$buffer1.data;
                    $target = $positive + 1 | 0;
                    var$5[$positive] = jl_Character_forDigit($rt_udiv($value, var$10), $radix);
                    $value = $rt_umod($value, var$10);
                    var$10 = $rt_udiv(var$10, $radix);
                    $positive = $target;
                }
            }
        }
        return $this;
    }
    function jl_AbstractStringBuilder_insert0($this, $target, $value) {
        var $mantissa, var$4, $number, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $intDigit, $i;
        $mantissa = $rt_compare($value, 0.0);
        if (!$mantissa) {
            if (1.0 / $value === Infinity) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
                var$4 = $this.$buffer1.data;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 48;
                $target = $mantissa + 1 | 0;
                var$4[$mantissa] = 46;
                var$4[$target] = 48;
                return $this;
            }
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
            var$4 = $this.$buffer1.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 48;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 46;
            var$4[$mantissa] = 48;
            return $this;
        }
        if ($rt_globals.isNaN($value) ? 1 : 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer1.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 78;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 97;
            var$4[$target] = 78;
            return $this;
        }
        if (!$rt_globals.isFinite($value) ? 1 : 0) {
            if ($mantissa > 0) {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
                $mantissa = $target;
            } else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
                var$4 = $this.$buffer1.data;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 45;
            }
            var$4 = $this.$buffer1.data;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 73;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 110;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 102;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 110;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 105;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 116;
            var$4[$target] = 121;
            return $this;
        }
        $number = jl_AbstractStringBuilder$Constants_floatAnalysisResult;
        otcit_FloatAnalyzer_analyze($value, $number);
        $mantissa = $number.$mantissa;
        $exp = $number.$exponent;
        $negative = $number.$sign;
        $intPart = 1;
        $sz = 1;
        if ($negative)
            $sz = 2;
        $digits = 9;
        $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
        if ($zeros > 0)
            $digits = $digits - $zeros | 0;
        $leadingZeros = 0;
        $leadingZero = 0;
        if ($exp < 7 && $exp >= (-3)) {
            if ($exp >= 0) {
                $intPart = $exp + 1 | 0;
                $digits = jl_Math_max($digits, $intPart + 1 | 0);
                $exp = 0;
            } else {
                $intPart = 0;
                $leadingZeros = ( -$exp | 0) - 1 | 0;
                $leadingZero = 1;
                $sz = $sz + 1 | 0;
                $exp = 0;
            }
        }
        if ($exp) {
            $sz = $sz + 2 | 0;
            if (!($exp > (-10) && $exp < 10))
                $sz = $sz + 1 | 0;
            if ($exp < 0)
                $sz = $sz + 1 | 0;
        }
        if ($exp && $digits == $intPart)
            $digits = $digits + 1 | 0;
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
        if (!$negative)
            $negative = $target;
        else {
            var$4 = $this.$buffer1.data;
            $negative = $target + 1 | 0;
            var$4[$target] = 45;
        }
        $pos = 100000000;
        if ($leadingZero) {
            var$4 = $this.$buffer1.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = 48;
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
            while (true) {
                $target = $leadingZeros + (-1) | 0;
                if ($leadingZeros <= 0)
                    break;
                $intDigit = $negative + 1 | 0;
                var$4[$negative] = 48;
                $leadingZeros = $target;
                $negative = $intDigit;
            }
        }
        $i = 0;
        while ($i < $digits) {
            if ($pos <= 0)
                $intDigit = 0;
            else {
                $intDigit = $mantissa / $pos | 0;
                $mantissa = $mantissa % $pos | 0;
            }
            var$4 = $this.$buffer1.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = (48 + $intDigit | 0) & 65535;
            $intPart = $intPart + (-1) | 0;
            if ($intPart)
                $negative = $target;
            else {
                $negative = $target + 1 | 0;
                var$4[$target] = 46;
            }
            $pos = $pos / 10 | 0;
            $i = $i + 1 | 0;
        }
        if ($exp) {
            var$4 = $this.$buffer1.data;
            $target = $negative + 1 | 0;
            var$4[$negative] = 69;
            if ($exp >= 0)
                $mantissa = $target;
            else {
                $exp =  -$exp | 0;
                $mantissa = $target + 1 | 0;
                var$4[$target] = 45;
            }
            if ($exp < 10)
                $intDigit = $mantissa;
            else {
                $intDigit = $mantissa + 1 | 0;
                var$4[$mantissa] = (48 + ($exp / 10 | 0) | 0) & 65535;
            }
            var$4[$intDigit] = (48 + ($exp % 10 | 0) | 0) & 65535;
        }
        return $this;
    }
    function jl_AbstractStringBuilder_trailingDecimalZeros($n) {
        var $result, $zeros, var$4;
        if (!($n % 1000000000 | 0))
            return 9;
        $result = 0;
        $zeros = 1;
        if (!($n % 100000000 | 0)) {
            $result = 8;
            $zeros = 100000000;
        }
        var$4 = $zeros * 10000 | 0;
        if ($n % var$4 | 0)
            var$4 = $zeros;
        else
            $result = $result | 4;
        $zeros = var$4 * 100 | 0;
        if ($n % $zeros | 0)
            $zeros = var$4;
        else
            $result = $result | 2;
        if (!($n % ($zeros * 10 | 0) | 0))
            $result = $result | 1;
        return $result;
    }
    function jl_AbstractStringBuilder_append($this, $c) {
        return $this.$insert0($this.$length0, $c);
    }
    function jl_AbstractStringBuilder_insert1($this, $index, $c) {
        jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
        $this.$buffer1.data[$index] = $c;
        return $this;
    }
    function jl_AbstractStringBuilder_ensureCapacity($this, $capacity) {
        var var$2, $newLength;
        var$2 = $this.$buffer1.data.length;
        if (var$2 >= $capacity)
            return;
        $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max(var$2 * 2 | 0, 5));
        $this.$buffer1 = ju_Arrays_copyOf($this.$buffer1, $newLength);
    }
    function jl_AbstractStringBuilder_toString($this) {
        return jl_String__init_5($this.$buffer1, 0, $this.$length0);
    }
    function jl_AbstractStringBuilder_append1($this, $chars, $offset, $len) {
        return $this.$insert1($this.$length0, $chars, $offset, $len);
    }
    function jl_AbstractStringBuilder_insert2($this, $index, $chars, $offset, $len) {
        var var$5, var$6, var$7, var$8;
        jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
        var$5 = $len + $offset | 0;
        while ($offset < var$5) {
            var$6 = $chars.data;
            var$7 = $this.$buffer1.data;
            $len = $index + 1 | 0;
            var$8 = $offset + 1 | 0;
            var$7[$index] = var$6[$offset];
            $index = $len;
            $offset = var$8;
        }
        return $this;
    }
    function jl_AbstractStringBuilder_append2($this, $chars) {
        return $this.$append3($chars, 0, $chars.data.length);
    }
    function jl_AbstractStringBuilder_insertSpace($this, $start, $end) {
        var var$3, $sz, $i, var$6;
        var$3 = $this.$length0;
        $sz = var$3 - $start | 0;
        $this.$ensureCapacity((var$3 + $end | 0) - $start | 0);
        $i = $sz - 1 | 0;
        while ($i >= 0) {
            var$6 = $this.$buffer1.data;
            var$6[$end + $i | 0] = var$6[$start + $i | 0];
            $i = $i + (-1) | 0;
        }
        $this.$length0 = $this.$length0 + ($end - $start | 0) | 0;
    }
    var jl_Appendable = $rt_classWithoutFields(0);
    var jl_StringBuilder = $rt_classWithoutFields(jl_AbstractStringBuilder);
    function jl_StringBuilder__init_() {
        var var_0 = new jl_StringBuilder();
        jl_StringBuilder__init_0(var_0);
        return var_0;
    }
    function jl_StringBuilder__init_0($this) {
        jl_AbstractStringBuilder__init_($this);
    }
    function jl_StringBuilder_append($this, $obj) {
        var var$2;
        var$2 = $this.$length0;
        if ($obj === null)
            $obj = $rt_s(17);
        jl_StringBuilder_insert($this, var$2, $obj);
        return $this;
    }
    function jl_StringBuilder_append1($this, $string) {
        jl_StringBuilder_insert($this, $this.$length0, $string);
        return $this;
    }
    function jl_StringBuilder_append0($this, $value) {
        jl_AbstractStringBuilder_append0($this, $value, 10);
        return $this;
    }
    function jl_StringBuilder_append2($this, $value) {
        jl_AbstractStringBuilder_insert0($this, $this.$length0, $value);
        return $this;
    }
    function jl_StringBuilder_append3($this, $c) {
        jl_AbstractStringBuilder_append($this, $c);
        return $this;
    }
    function jl_StringBuilder_append4($this, $b) {
        jl_StringBuilder_insert($this, $this.$length0, !$b ? $rt_s(18) : $rt_s(19));
        return $this;
    }
    function jl_StringBuilder_delete($this, $start, $end) {
        var var$3, var$4, var$5, var$6, var$7, var$8;
        if ($start >= 0) {
            var$3 = $rt_compare($start, $end);
            if (var$3 <= 0) {
                var$4 = $this.$length0;
                if ($start <= var$4) {
                    if (var$3) {
                        if ($end > var$4)
                            $end = var$4;
                        var$5 = var$4 - $end | 0;
                        $this.$length0 = var$4 - ($end - $start | 0) | 0;
                        var$4 = 0;
                        while (var$4 < var$5) {
                            var$6 = $this.$buffer1.data;
                            var$3 = $start + 1 | 0;
                            var$7 = $end + 1 | 0;
                            var$6[$start] = var$6[$end];
                            var$4 = var$4 + 1 | 0;
                            $start = var$3;
                            $end = var$7;
                        }
                    }
                    return $this;
                }
            }
        }
        var$8 = new jl_StringIndexOutOfBoundsException;
        jl_Throwable__init_0(var$8);
        $rt_throw(var$8);
    }
    function jl_StringBuilder_deleteCharAt($this, $index) {
        var var$2, var$3, var$4, var$5;
        if ($index >= 0) {
            var$2 = $this.$length0;
            if ($index < var$2) {
                var$2 = var$2 - 1 | 0;
                $this.$length0 = var$2;
                while ($index < var$2) {
                    var$3 = $this.$buffer1.data;
                    var$4 = $index + 1 | 0;
                    var$3[$index] = var$3[var$4];
                    $index = var$4;
                }
                return $this;
            }
        }
        var$5 = new jl_StringIndexOutOfBoundsException;
        jl_Throwable__init_0(var$5);
        $rt_throw(var$5);
    }
    function jl_StringBuilder_insert0($this, var$1, var$2, var$3, var$4) {
        jl_AbstractStringBuilder_insert2($this, var$1, var$2, var$3, var$4);
        return $this;
    }
    function jl_StringBuilder_append5($this, var$1, var$2, var$3) {
        jl_AbstractStringBuilder_append1($this, var$1, var$2, var$3);
        return $this;
    }
    function jl_StringBuilder_length($this) {
        return $this.$length0;
    }
    function jl_StringBuilder_toString($this) {
        return jl_AbstractStringBuilder_toString($this);
    }
    function jl_StringBuilder_ensureCapacity($this, var$1) {
        jl_AbstractStringBuilder_ensureCapacity($this, var$1);
    }
    function jl_StringBuilder_insert1($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert1($this, var$1, var$2);
        return $this;
    }
    function jl_StringBuilder_insert($this, var$1, var$2) {
        var var$3, var$4, var$5;
        if (var$1 >= 0 && var$1 <= $this.$length0) {
            a: {
                if (var$2 === null)
                    var$2 = $rt_s(17);
                else if (jl_String_isEmpty(var$2))
                    break a;
                jl_AbstractStringBuilder_ensureCapacity($this, $this.$length0 + jl_String_length(var$2) | 0);
                var$3 = $this.$length0 - 1 | 0;
                while (var$3 >= var$1) {
                    $this.$buffer1.data[var$3 + jl_String_length(var$2) | 0] = $this.$buffer1.data[var$3];
                    var$3 = var$3 + (-1) | 0;
                }
                $this.$length0 = $this.$length0 + jl_String_length(var$2) | 0;
                var$3 = 0;
                while (var$3 < jl_String_length(var$2)) {
                    var$4 = $this.$buffer1.data;
                    var$5 = var$1 + 1 | 0;
                    var$4[var$1] = jl_String_charAt(var$2, var$3);
                    var$3 = var$3 + 1 | 0;
                    var$1 = var$5;
                }
            }
            return $this;
        }
        var$2 = new jl_StringIndexOutOfBoundsException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    var jl_IncompatibleClassChangeError = $rt_classWithoutFields(jl_LinkageError);
    var jl_NoSuchFieldError = $rt_classWithoutFields(jl_IncompatibleClassChangeError);
    function jl_NoSuchFieldError__init_(var_0) {
        var var_1 = new jl_NoSuchFieldError();
        jl_NoSuchFieldError__init_0(var_1, var_0);
        return var_1;
    }
    function jl_NoSuchFieldError__init_0($this, $message) {
        jl_Throwable__init_($this, $message);
    }
    var jl_NoSuchMethodError = $rt_classWithoutFields(jl_IncompatibleClassChangeError);
    function jl_NoSuchMethodError__init_(var_0) {
        var var_1 = new jl_NoSuchMethodError();
        jl_NoSuchMethodError__init_0(var_1, var_0);
        return var_1;
    }
    function jl_NoSuchMethodError__init_0($this, $message) {
        jl_Throwable__init_($this, $message);
    }
    var m_WebGL = $rt_classWithoutFields();
    var m_WebGL_document = null;
    var m_WebGL_parent = null;
    var m_WebGL_canvas = null;
    var m_WebGL_webgl = null;
    var m_WebGL_backBuffer = null;
    var m_WebGL_backBufferColor = null;
    var m_WebGL_backBufferDepth = null;
    var m_WebGL_window = null;
    var m_WebGL_width = 0;
    var m_WebGL_height = 0;
    var m_WebGL_backBufferWidth = 0;
    var m_WebGL_backBufferHeight = 0;
    function m_WebGL_main($args) {
        var var$2, var$3, $s, $canvasStyle, $ratio;
        var$2 = $rt_globals.window;
        m_WebGL_window = var$2;
        var$2 = var$2.document;
        m_WebGL_document = var$2;
        var$3 = var$2.body;
        m_WebGL_parent = var$3;
        $s = $rt_str(var$3.getAttribute("style"));
        var$2 = m_WebGL_parent;
        if ($s === null)
            $s = $rt_s(3);
        $canvasStyle = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($canvasStyle);
        jl_StringBuilder_append(jl_StringBuilder_append($canvasStyle, $s), $rt_s(20));
        $canvasStyle = jl_AbstractStringBuilder_toString($canvasStyle);
        var$2.setAttribute("style", $rt_ustr($canvasStyle));
        m_WebGL_canvas = m_WebGL_document.createElement("canvas");
        $ratio = m_WebGL_window.devicePixelRatio;
        m_WebGL_width = m_WebGL_parent.clientWidth * $ratio | 0;
        m_WebGL_height = m_WebGL_parent.clientHeight * $ratio | 0;
        var$2 = m_WebGL_canvas;
        var$3 = m_WebGL_width;
        var$2.width = var$3;
        var$2 = m_WebGL_canvas;
        var$3 = m_WebGL_height;
        var$2.height = var$3;
        var$2 = m_WebGL_parent;
        var$3 = m_WebGL_canvas;
        var$2.appendChild(var$3);
        $canvasStyle = m_WebGL_canvas.style;
        $canvasStyle.setProperty("width", "100%");
        $canvasStyle.setProperty("height", "100%");
        $canvasStyle.setProperty("image-rendering", "pixelated");
        var$2 = m_WebGL_canvas;
        $s = m_WebGL_WebGLConfig$js_body$_2();
        var$2 = var$2.getContext("webgl2", $s);
        m_WebGL_webgl = var$2;
        if (var$2 === null) {
            var$2 = new ol_LWJGLException;
            jl_Throwable__init_(var$2, $rt_s(21));
            $rt_throw(var$2);
        }
        m_WebGL_setCurrentContext$js_body$_11(var$2);
        var$2 = new m_FramebufferGL;
        $s = m_WebGL_webgl.createFramebuffer();
        var$2.$obj = $s;
        m_WebGL_backBuffer = var$2;
        m_WebGL_webgl.bindFramebuffer(36160, $s);
        var$2 = m_WebGL_createRenderBuffer();
        m_WebGL_backBufferColor = var$2;
        m_WebGL_bindRenderbuffer(var$2);
        m_WebGL_framebufferRenderbuffer(36064, m_WebGL_backBufferColor);
        var$2 = m_WebGL_createRenderBuffer();
        m_WebGL_backBufferDepth = var$2;
        m_WebGL_bindRenderbuffer(var$2);
        m_WebGL_framebufferRenderbuffer(36096, m_WebGL_backBufferDepth);
        m_WebGL_resizeBackBuffer(m_WebGL_width, m_WebGL_height);
        m_WebGL_webgl.getExtension("EXT_texture_filter_anisotropic");
    }
    function m_WebGL_resizeBackBuffer($w, $h) {
        if (!($w == m_WebGL_backBufferWidth && $h == m_WebGL_backBufferHeight)) {
            m_WebGL_bindRenderbuffer(m_WebGL_backBufferColor);
            m_WebGL_renderbufferStorage(32856, $w, $h);
            m_WebGL_bindRenderbuffer(m_WebGL_backBufferDepth);
            m_WebGL_renderbufferStorage(36012, $w, $h);
            m_WebGL_backBufferWidth = $w;
            m_WebGL_backBufferHeight = $h;
        }
    }
    function m_WebGL_createRenderBuffer() {
        var var$1;
        var$1 = new m_RenderbufferGL;
        var$1.$obj0 = m_WebGL_webgl.createRenderbuffer();
        return var$1;
    }
    function m_WebGL_bindRenderbuffer($p1) {
        var var$2;
        var$2 = m_WebGL_webgl;
        $p1 = $p1 !== null ? $p1.$obj0 : null;
        var$2.bindRenderbuffer(36161, $p1);
    }
    function m_WebGL_framebufferRenderbuffer($p1, $p2) {
        var var$3;
        var$3 = m_WebGL_webgl;
        $p2 = $p2 !== null ? $p2.$obj0 : null;
        var$3.framebufferRenderbuffer(36160, $p1, 36161, $p2);
    }
    function m_WebGL_renderbufferStorage($p1, $p2, $p3) {
        m_WebGL_webgl.renderbufferStorage(36161, $p1, $p2, $p3);
    }
    function m_WebGL__clinit_() {
        m_WebGL_document = null;
        m_WebGL_parent = null;
        m_WebGL_canvas = null;
        m_WebGL_webgl = null;
        m_WebGL_backBuffer = null;
        m_WebGL_backBufferColor = null;
        m_WebGL_backBufferDepth = null;
        m_WebGL_window = null;
        m_WebGL_width = 0;
        m_WebGL_height = 0;
        m_WebGL_backBufferWidth = (-1);
        m_WebGL_backBufferHeight = (-1);
    }
    function m_WebGL_WebGLConfig$js_body$_2() {
        return { antialias : false, depth : true, powerPreference : "high-performance", desynchronized : true, preserveDrawingBuffer : false, premultipliedAlpha : false, alpha : false };
    }
    function m_WebGL_setCurrentContext$js_body$_11(var$1) {
        $rt_globals.window.currentContext = var$1;
    }
    var ol_LWJGLException = $rt_classWithoutFields(jl_Exception);
    var nPm_LWJGLUtil = $rt_classWithoutFields();
    var nPm_LWJGLUtil_imageLoadCanvas = null;
    var nPm_LWJGLUtil_imageLoadContext = null;
    var nPm_LWJGLUtil_loadedPackage = null;
    function nPm_LWJGLUtil_getResourceAsStream($var1) {
        var var$2;
        if (nPm_AssetRepository_getResource($var1) === null)
            ji_PrintStream_println(jl_System_out(), $rt_s(22));
        var$2 = nPm_AssetRepository_getResource($var1);
        return var$2 === null ? null : ji_ByteArrayInputStream__init_(var$2);
    }
    function nPm_LWJGLUtil_loadPNG0($data, $ret) {
        var var$3, $src, var$5;
        var$3 = m_WebGL_document.createElement("img");
        $src = new nPm_LWJGLUtil$1;
        $src.$val$toLoad = var$3;
        $src.$val$ret = $ret;
        var$3.addEventListener("load", otji_JS_function($src, "handleEvent"));
        var$5 = new nPm_LWJGLUtil$2;
        var$5.$val$toLoad0 = var$3;
        var$5.$val$ret0 = $ret;
        var$3.addEventListener("error", otji_JS_function(var$5, "handleEvent"));
        $src = $rt_str(nPm_LWJGLUtil_getDataURL$js_body$_11($data, "image/png"));
        if ($src === null)
            otpp_AsyncCallbackWrapper_complete($ret, null);
        else {
            $data = $rt_ustr($src);
            var$3.src = $data;
        }
    }
    function nPm_LWJGLUtil_downloadAssetPack($assetPackageURI, $cb) {
        var $request, var$4;
        $request = new $rt_globals.XMLHttpRequest();
        var$4 = "arraybuffer";
        $request.responseType = var$4;
        $request.open("GET", $rt_ustr($assetPackageURI), !!1);
        $assetPackageURI = new nPm_LWJGLUtil$3;
        $assetPackageURI.$val$request = $request;
        $assetPackageURI.$val$cb = $cb;
        $assetPackageURI = otji_JS_function($assetPackageURI, "stateChanged");
        $request.onreadystatechange = $assetPackageURI;
        $request.send();
    }
    function nPm_LWJGLUtil__clinit_() {
        nPm_LWJGLUtil_imageLoadCanvas = null;
        nPm_LWJGLUtil_imageLoadContext = null;
        nPm_LWJGLUtil_loadedPackage = null;
    }
    function nPm_LWJGLUtil_loadPNG0$_asyncCall_$(var$1) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        thread.suspend(function() {
            try {
                nPm_LWJGLUtil_loadPNG0(var$1, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
        return null;
    }
    function nPm_LWJGLUtil_downloadAssetPack$_asyncCall_$(var$1) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        thread.suspend(function() {
            try {
                nPm_LWJGLUtil_downloadAssetPack(var$1, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
        return null;
    }
    function nPm_LWJGLUtil_getDataURL$js_body$_11(var$1, var$2) {
        return $rt_globals.URL.createObjectURL(new $rt_globals.Blob([var$1], { type : var$2 }));
    }
    var jl_Runnable = $rt_classWithoutFields(0);
    function cmm_Minecraft() {
        var a = this; jl_Object.call(a);
        a.$gamemode = null;
        a.$fullscreen = 0;
        a.$width = 0;
        a.$height = 0;
        a.$timer = null;
        a.$level = null;
        a.$levelRenderer = null;
        a.$player = null;
        a.$particleManager = null;
        a.$session = null;
        a.$levelLoaded = 0;
        a.$waiting = 0;
        a.$textureManager = null;
        a.$fontRenderer = null;
        a.$currentScreen = null;
        a.$progressBar = null;
        a.$renderer = null;
        a.$ticks = 0;
        a.$blockHitTime = 0;
        a.$levelName = null;
        a.$levelId = 0;
        a.$hud = null;
        a.$selected = null;
        a.$settings = null;
        a.$running = 0;
        a.$debug = null;
        a.$hasMouse = 0;
        a.$lastClick = 0;
        a.$raining = 0;
        a.$online = 0;
    }
    function cmm_Minecraft_setCurrentScreen($this, $var1) {
        var var$2, $var2, $var3;
        var$2 = $this.$currentScreen;
        if (!(var$2 instanceof cmmg_ErrorScreen)) {
            if (var$2 !== null)
                var$2.$onClose();
            if ($var1 === null && $this.$player.$health <= 0) {
                $var1 = new cmmg_GameOverScreen;
                cmmg_GuiScreen__init_($var1);
            }
            $this.$currentScreen = $var1;
            if ($var1 === null)
                cmm_Minecraft_grabMouse($this);
            else {
                if ($this.$hasMouse) {
                    cmmp_Player_releaseAllKeys($this.$player);
                    $this.$hasMouse = 0;
                    if (!$this.$levelLoaded)
                        oli_Mouse_setGrabbed(0);
                }
                $var2 = $this.$width * 240 | 0;
                $var3 = $this.$height;
                cmmg_GuiScreen_open($var1, $this, $var2 / $var3 | 0, ($var3 * 240 | 0) / $var3 | 0);
            }
        }
    }
    function cmm_Minecraft_checkGLError($var0) {
        var var$2, $var2, var$4, var$5;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl.getError();
        if (var$2 == 37442)
            var$2 = (-100);
        if (var$2) {
            a: {
                switch (var$2) {
                    case -100:
                        break;
                    case 1280:
                        $var2 = $rt_s(23);
                        break a;
                    case 1281:
                        $var2 = $rt_s(24);
                        break a;
                    case 1282:
                        $var2 = $rt_s(25);
                        break a;
                    case 1285:
                        $var2 = $rt_s(26);
                        break a;
                    default:
                        $var2 = $rt_s(27);
                        break a;
                }
                $var2 = $rt_s(28);
            }
            ji_PrintStream_println(jl_System_out(), $rt_s(29));
            var$4 = jl_System_out();
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(30)), $var0);
            ji_PrintStream_println(var$4, jl_AbstractStringBuilder_toString(var$5));
            $var0 = jl_System_out();
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(var$4, var$2), $rt_s(7)), $var2);
            ji_PrintStream_println($var0, jl_AbstractStringBuilder_toString(var$4));
        }
    }
    function cmm_Minecraft_run($this) {
        var $e, $var57, $var13, $var115, $var3, $var112, $var15, var$8, $var63, $var18, $var20, $var24, $var24_0, $var33, $var81, $var64, $var65, $var66, $var86, $var91, $var94, $var83, $var70, $var126, $var29, $var30, $var31, $var32, $var69, $var74, $var34, $var87, $var36, $var71, $var35, $var37, $var77, $var119, $var89, $var93, $var26, $var117, $var124, $var116, $var76, $var101, $var98, var$48, $var104, $var120, $var110, $var122, $var125, $var125_0, $var38, $var114, $var103, $var121, $var92, $var68, $var10001,
        $var113, $var111, $var109, $var108, $var84, $var123, $var10000, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var10000 = $thread.pop();$var123 = $thread.pop();$var84 = $thread.pop();$var108 = $thread.pop();$var109 = $thread.pop();$var111 = $thread.pop();$var113 = $thread.pop();$var10001 = $thread.pop();$var68 = $thread.pop();$var92 = $thread.pop();$var121 = $thread.pop();$var103 = $thread.pop();$var114 = $thread.pop();$var38 = $thread.pop();$var125_0 = $thread.pop();$var125 = $thread.pop();$var122 = $thread.pop();$var110 = $thread.pop();$var120 = $thread.pop();$var104 = $thread.pop();var$48
            = $thread.pop();$var98 = $thread.pop();$var101 = $thread.pop();$var76 = $thread.pop();$var116 = $thread.pop();$var124 = $thread.pop();$var117 = $thread.pop();$var26 = $thread.pop();$var93 = $thread.pop();$var89 = $thread.pop();$var119 = $thread.pop();$var77 = $thread.pop();$var37 = $thread.pop();$var35 = $thread.pop();$var71 = $thread.pop();$var36 = $thread.pop();$var87 = $thread.pop();$var34 = $thread.pop();$var74 = $thread.pop();$var69 = $thread.pop();$var32 = $thread.pop();$var31 = $thread.pop();$var30
            = $thread.pop();$var29 = $thread.pop();$var126 = $thread.pop();$var70 = $thread.pop();$var83 = $thread.pop();$var94 = $thread.pop();$var91 = $thread.pop();$var86 = $thread.pop();$var66 = $thread.pop();$var65 = $thread.pop();$var64 = $thread.pop();$var81 = $thread.pop();$var33 = $thread.pop();$var24_0 = $thread.pop();$var24 = $thread.pop();$var20 = $thread.pop();$var18 = $thread.pop();$var63 = $thread.pop();var$8 = $thread.pop();$var15 = $thread.pop();$var112 = $thread.pop();$var3 = $thread.pop();$var115
            = $thread.pop();$var13 = $thread.pop();$var57 = $thread.pop();$e = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                $this.$running = 1;
                if (!$this.$fullscreen) {
                    try {
                        olo_Display_setDisplayMode(olo_DisplayMode__init_($this.$width, $this.$height));
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ol_LWJGLException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                } else {
                    b: {
                        try {
                            olo_Display_setFullscreen(1);
                            break b;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof ol_LWJGLException) {
                                $e = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        $e.$printStackTrace();
                    }
                    $this.$width = olo_DisplayMode_getWidth(olo_Display_getDisplayMode());
                    $this.$height = olo_DisplayMode_getHeight(olo_Display_getDisplayMode());
                }
            }
            olo_Display_setTitle($rt_s(31));
            try {
                $ptr = 1;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ol_LWJGLException) {
                    $var57 = $$je;
                } else {
                    throw $$e;
                }
            }
            jl_Throwable_printStackTrace($var57);
            try {
                $var13 = Long_fromInt(1000);
                $ptr = 2;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                } else {
                    throw $$e;
                }
            }
            try {
                $ptr = 3;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ol_LWJGLException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            jl_Throwable_printStackTrace($e);
            c: {
                try {
                    oli_Keyboard_create();
                    oli_Mouse_create();
                    break c;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            cmm_Minecraft_checkGLError($rt_s(32));
            olo_GL11_glEnable(3553);
            olo_GL11_glShadeModel(7425);
            olo_GL11_glClearDepth(1.0);
            olo_GL11_glEnable(2929);
            olo_GL11_glDepthFunc(515);
            olo_GL11_glEnable(3008);
            olo_GL11_glAlphaFunc(516, 0.0);
            olo_GL11_glCullFace(1029);
            olo_GL11_glMatrixMode(5889);
            olo_GL11_glLoadIdentity();
            olo_GL11_glMatrixMode(5888);
            cmm_Minecraft_checkGLError($rt_s(33));
            $var115 = cmm_GameSettings__init_($this, ji_File__init_($rt_s(34)));
            $this.$settings = $var115;
            $e = cmmr_TextureManager__init_($var115);
            $this.$textureManager = $e;
            cmmr_TextureManager_registerAnimation($e, cmmrt_TextureLavaFX__init_());
            cmmr_TextureManager_registerAnimation($this.$textureManager, cmmrt_TextureWaterFX__init_());
            $e = new cmmg_FontRenderer;
            $var3 = $this.$settings;
            $var115 = $rt_s(35);
            $var112 = $this.$textureManager;
            $ptr = 4;
            continue main;
        case 1:
            a: {
                try {
                    olo_Display_create();
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $var57 = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($var57);
                try {
                    $var13 = Long_fromInt(1000);
                    $ptr = 2;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                    } else {
                        throw $$e;
                    }
                }
                try {
                    $ptr = 3;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            d: {
                try {
                    oli_Keyboard_create();
                    oli_Mouse_create();
                    break d;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            cmm_Minecraft_checkGLError($rt_s(32));
            olo_GL11_glEnable(3553);
            olo_GL11_glShadeModel(7425);
            olo_GL11_glClearDepth(1.0);
            olo_GL11_glEnable(2929);
            olo_GL11_glDepthFunc(515);
            olo_GL11_glEnable(3008);
            olo_GL11_glAlphaFunc(516, 0.0);
            olo_GL11_glCullFace(1029);
            olo_GL11_glMatrixMode(5889);
            olo_GL11_glLoadIdentity();
            olo_GL11_glMatrixMode(5888);
            cmm_Minecraft_checkGLError($rt_s(33));
            $var115 = cmm_GameSettings__init_($this, ji_File__init_($rt_s(34)));
            $this.$settings = $var115;
            $e = cmmr_TextureManager__init_($var115);
            $this.$textureManager = $e;
            cmmr_TextureManager_registerAnimation($e, cmmrt_TextureLavaFX__init_());
            cmmr_TextureManager_registerAnimation($this.$textureManager, cmmrt_TextureWaterFX__init_());
            $e = new cmmg_FontRenderer;
            $var3 = $this.$settings;
            $var115 = $rt_s(35);
            $var112 = $this.$textureManager;
            $ptr = 4;
            continue main;
        case 2:
            a: {
                try {
                    jl_Thread_sleep($var13);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                    } else {
                        throw $$e;
                    }
                }
            }
            try {
                $ptr = 3;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ol_LWJGLException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            jl_Throwable_printStackTrace($e);
            d: {
                try {
                    oli_Keyboard_create();
                    oli_Mouse_create();
                    break d;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            cmm_Minecraft_checkGLError($rt_s(32));
            olo_GL11_glEnable(3553);
            olo_GL11_glShadeModel(7425);
            olo_GL11_glClearDepth(1.0);
            olo_GL11_glEnable(2929);
            olo_GL11_glDepthFunc(515);
            olo_GL11_glEnable(3008);
            olo_GL11_glAlphaFunc(516, 0.0);
            olo_GL11_glCullFace(1029);
            olo_GL11_glMatrixMode(5889);
            olo_GL11_glLoadIdentity();
            olo_GL11_glMatrixMode(5888);
            cmm_Minecraft_checkGLError($rt_s(33));
            $var115 = cmm_GameSettings__init_($this, ji_File__init_($rt_s(34)));
            $this.$settings = $var115;
            $e = cmmr_TextureManager__init_($var115);
            $this.$textureManager = $e;
            cmmr_TextureManager_registerAnimation($e, cmmrt_TextureLavaFX__init_());
            cmmr_TextureManager_registerAnimation($this.$textureManager, cmmrt_TextureWaterFX__init_());
            $e = new cmmg_FontRenderer;
            $var3 = $this.$settings;
            $var115 = $rt_s(35);
            $var112 = $this.$textureManager;
            $ptr = 4;
            continue main;
        case 3:
            a: {
                try {
                    olo_Display_create();
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            d: {
                try {
                    oli_Keyboard_create();
                    oli_Mouse_create();
                    break d;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ol_LWJGLException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($e);
            }
            cmm_Minecraft_checkGLError($rt_s(32));
            olo_GL11_glEnable(3553);
            olo_GL11_glShadeModel(7425);
            olo_GL11_glClearDepth(1.0);
            olo_GL11_glEnable(2929);
            olo_GL11_glDepthFunc(515);
            olo_GL11_glEnable(3008);
            olo_GL11_glAlphaFunc(516, 0.0);
            olo_GL11_glCullFace(1029);
            olo_GL11_glMatrixMode(5889);
            olo_GL11_glLoadIdentity();
            olo_GL11_glMatrixMode(5888);
            cmm_Minecraft_checkGLError($rt_s(33));
            $var115 = cmm_GameSettings__init_($this, ji_File__init_($rt_s(34)));
            $this.$settings = $var115;
            $e = cmmr_TextureManager__init_($var115);
            $this.$textureManager = $e;
            cmmr_TextureManager_registerAnimation($e, cmmrt_TextureLavaFX__init_());
            cmmr_TextureManager_registerAnimation($this.$textureManager, cmmrt_TextureWaterFX__init_());
            $e = new cmmg_FontRenderer;
            $var3 = $this.$settings;
            $var115 = $rt_s(35);
            $var112 = $this.$textureManager;
            $ptr = 4;
        case 4:
            cmmg_FontRenderer__init_($e, $var3, $var115, $var112);
            if ($rt_suspending()) {
                break main;
            }
            $this.$fontRenderer = $e;
            jn_IntBuffer_limit(jn_IntBuffer_clear(ol_BufferUtils_createIntBuffer(256)), 256);
            $this.$levelRenderer = cmmr_LevelRenderer__init_($this, $this.$textureManager);
            cmmi_Item_initModels();
            cmmm_Mob_modelCache = cmmm_ModelManager__init_();
            olo_GL11_glViewport(0, 0, $this.$width, $this.$height);
            if ($this.$running) {
                olo_GL11_glClearColor(1.0, 0.0, 0.0, 0.0);
                olo_GL11_glClear(16640);
                $ptr = 5;
                continue main;
            }
            if ($this.$level === null) {
                $var15 = 1;
                $ptr = 7;
                continue main;
            }
            $this.$particleManager = cmmp_ParticleManager__init_($this.$level, $this.$textureManager);
            cmm_Minecraft_checkGLError($rt_s(36));
            $this.$hud = cmmg_HUDScreen__init_($this, $this.$width, $this.$height);
            $var13 = jl_System_currentTimeMillis();
            $var15 = 0;
            while ($this.$running) {
                if ($this.$waiting) {
                    try {
                        var$8 = Long_fromInt(100);
                        $ptr = 8;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                    continue;
                }
                if (olo_Display_isCloseRequested())
                    $this.$running = 0;
                $var63 = $this.$timer;
                var$8 = jl_System_currentTimeMillis();
                $var18 = Long_sub(var$8, $var63.$lastSysClock);
                $var20 = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
                if (Long_gt($var18, Long_fromInt(1000))) {
                    $var24 = Long_toNumber($var18) / Long_toNumber(Long_sub($var20, $var63.$lastHRClock));
                    $var24_0 = $var63.$adjustment;
                    $var63.$adjustment = $var24_0 + ($var24 - $var24_0) * 0.20000000298023224;
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                if (Long_lt($var18, Long_ZERO)) {
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                $var24 = Long_toNumber($var20) / 1000.0;
                $var24_0 = ($var24 - $var63.$lastHR) * $var63.$adjustment;
                $var63.$lastHR = $var24;
                if ($var24_0 < 0.0)
                    $var24_0 = 0.0;
                if ($var24_0 > 1.0)
                    $var24_0 = 1.0;
                $var33 = $var63.$elapsedDelta + $var24_0 * $var63.$speed * $var63.$tps;
                $var63.$elapsedDelta = $var33;
                $var81 = $var33 | 0;
                $var63.$elapsedTicks = $var81;
                if ($var81 > 100)
                    $var63.$elapsedTicks = 100;
                $var33 = $var33 - $var63.$elapsedTicks;
                $var63.$elapsedDelta = $var33;
                $var63.$delta = $var33;
                $var64 = 0;
                if ($var64 < $this.$timer.$elapsedTicks) {
                    $this.$ticks = $this.$ticks + 1 | 0;
                    $ptr = 9;
                    continue main;
                }
                cmm_Minecraft_checkGLError($rt_s(37));
                olo_GL11_glEnable(3553);
                if (!$this.$online) {
                    cmmg_SurvivalGameMode_applyCracks($this.$gamemode, $this.$timer.$delta);
                    $var65 = $this.$timer.$delta;
                    $var66 = $this.$renderer;
                    if ($var66.$displayActive && !olo_Display_isActive())
                        cmm_Minecraft_pause($var66.$minecraft1);
                    $var66.$displayActive = olo_Display_isActive();
                    $e = $var66.$minecraft1;
                    if ($e.$hasMouse) {
                        $var81 = 0;
                        $var86 = 0;
                        if (!$e.$levelLoaded) {
                            $var81 = oli_Mouse_getDX();
                            $var86 = oli_Mouse_getDY();
                        }
                        $var91 = 1;
                        $e = $var66.$minecraft1;
                        if ($e.$settings.$invertMouse)
                            $var91 = (-1);
                        cmm_Entity_turn($e.$player, $var81, $rt_imul($var86, $var91));
                    }
                    $e = $var66.$minecraft1;
                    if (!$e.$online) {
                        $var81 = $e.$width * 240 | 0;
                        $var86 = $e.$height;
                        $var81 = $var81 / $var86 | 0;
                        $var86 = ($var86 * 240 | 0) / $var86 | 0;
                        $var94 = $rt_imul(oli_Mouse_getX(), $var81) / $var66.$minecraft1.$width | 0;
                        $var81 = $rt_imul(oli_Mouse_getY(), $var86);
                        $e = $var66.$minecraft1;
                        $var83 = $e.$height;
                        $var70 = ($var86 - ($var81 / $var83 | 0) | 0) - 1 | 0;
                        if ($e.$level === null) {
                            olo_GL11_glViewport(0, 0, $e.$width, $var83);
                            olo_GL11_glClearColor(0.0, 0.0, 0.0, 0.0);
                            olo_GL11_glClear(16640);
                            olo_GL11_glMatrixMode(5889);
                            olo_GL11_glLoadIdentity();
                            olo_GL11_glMatrixMode(5888);
                            olo_GL11_glLoadIdentity();
                            cmmr_Renderer_enableGuiMode($var66);
                            $e = $var66.$minecraft1.$currentScreen;
                            if ($e === null) {
                                $ptr = 11;
                                continue main;
                            }
                            $ptr = 13;
                            continue main;
                        }
                        $var126 = $e.$player;
                        $var33 = $var126.$xRotO;
                        $var29 = $var33 + ($var126.$xRot - $var33) * $var65;
                        $var33 = $var126.$yRotO;
                        $var30 = $var33 + ($var126.$yRot - $var33) * $var65;
                        $var31 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        $var33 =  -$var30 * 0.01745329238474369 - 3.1415927410125732;
                        $var32 = cmu_MathHelper_cos($var33);
                        $var69 = cmu_MathHelper_sin($var33);
                        $var33 =  -$var29 * 0.01745329238474369;
                        $var74 = cmu_MathHelper_cos($var33);
                        $var33 = cmu_MathHelper_sin($var33);
                        $var34 = $var69 * $var74;
                        $var87 = $var32 * $var74;
                        $var36 = cmmg_SurvivalGameMode_getReachDistance($var66.$minecraft1.$gamemode);
                        $var71 = cmmm_Vec3D_add($var31, $var34 * $var36, $var33 * $var36, $var87 * $var36);
                        $e = $var66.$minecraft1;
                        $e.$selected = cmml_Level_clip($e.$level, $var31, $var71);
                        $e = $var66.$minecraft1.$selected;
                        if ($e !== null)
                            $var36 = cmmm_Vec3D_distance($e.$vec, cmmr_Renderer_getPlayerVector($var66, $var65));
                        $var115 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        if ($var66.$minecraft1.$gamemode instanceof cmmg_CreativeGameMode)
                            $var36 = 32.0;
                        $var34 = $var34 * $var36;
                        $var33 = $var33 * $var36;
                        $var35 = $var87 * $var36;
                        $var112 = cmmm_Vec3D_add($var115, $var34, $var33, $var35);
                        $var66.$entity = null;
                        $var37 = cmml_BlockMap_getEntities($var66.$minecraft1.$level.$blockMap, $var126, cmmp_AABB_expand($var126.$bb, $var34, $var33, $var35));
                        $var35 = 0.0;
                        $var86 = 0;
                        while ($var86 < ju_ArrayList_size($var37)) {
                            $e = ju_ArrayList_get($var37, $var86);
                            if ($e.$isPickable()) {
                                $var3 = cmmp_AABB_clip(cmmp_AABB_grow($e.$bb, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612), $var115, $var112);
                                if ($var3 !== null) {
                                    $var33 = cmmm_Vec3D_distance($var115, $var3.$vec);
                                    if (!($var33 >= $var35 && $var35 !== 0.0)) {
                                        $var66.$entity = $e;
                                        $var35 = $var33;
                                    }
                                }
                            }
                            $var86 = $var86 + 1 | 0;
                        }
                        $var115 = $var66.$entity;
                        if ($var115 !== null) {
                            $e = $var66.$minecraft1;
                            if (!($e.$gamemode instanceof cmmg_CreativeGameMode))
                                $e.$selected = cmm_MovingObjectPosition__init_($var115);
                        }
                        $var77 = 0;
                        if ($var77 >= 2) {
                            olo_GL11_glColorMask(1, 1, 1, 0);
                            $e = $var66.$minecraft1;
                            $var3 = $e.$hud;
                            $var81 = $e.$currentScreen === null ? 0 : 1;
                            $ptr = 14;
                            continue main;
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            if ($var77)
                                olo_GL11_glColorMask(1, 0, 0, 0);
                            else
                                olo_GL11_glColorMask(0, 1, 1, 0);
                        }
                        $e = $var66.$minecraft1;
                        $var126 = $e.$player;
                        $var119 = $e.$level;
                        $var89 = $e.$levelRenderer;
                        $var93 = $e.$particleManager;
                        olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                        $e = $var66.$minecraft1;
                        $var26 = $e.$level;
                        $var3 = $e.$player;
                        $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                        $var81 = $var26.$skyColor;
                        $var34 = ($var81 >> 16 & 255) / 255.0;
                        $var117 = ($var81 >> 8 & 255) / 255.0;
                        $var35 = ($var81 & 255) / 255.0;
                        $var81 = $var26.$fogColor;
                        $var87 = ($var81 >> 16 & 255) / 255.0;
                        $var66.$fogRed = $var87;
                        $var124 = ($var81 >> 8 & 255) / 255.0;
                        $var66.$fogBlue = $var124;
                        $var29 = ($var81 & 255) / 255.0;
                        $var66.$fogGreen = $var29;
                        $var34 = $var87 + ($var34 - $var87) * $var33;
                        $var66.$fogRed = $var34;
                        $var87 = $var124 + ($var117 - $var124) * $var33;
                        $var66.$fogBlue = $var87;
                        $var33 = $var29 + ($var35 - $var29) * $var33;
                        $var66.$fogGreen = $var33;
                        $var35 = $var66.$fogColorMultiplier;
                        $var66.$fogRed = $var34 * $var35;
                        $var66.$fogBlue = $var87 * $var35;
                        $var66.$fogGreen = $var33 * $var35;
                        cmmlt_Block_$callClinit();
                        $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                        if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                            $e = $var115.$getLiquidType();
                            if ($e === cmmll_LiquidType_WATER) {
                                $var66.$fogRed = 0.019999999552965164;
                                $var66.$fogBlue = 0.019999999552965164;
                                $var66.$fogGreen = 0.20000000298023224;
                            } else if ($e === cmmll_LiquidType_LAVA) {
                                $var66.$fogRed = 0.6000000238418579;
                                $var66.$fogBlue = 0.10000000149011612;
                                $var66.$fogGreen = 0.0;
                            }
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            $var33 = $var66.$fogRed * 30.0;
                            $var34 = $var66.$fogBlue;
                            $var35 = $var33 + $var34 * 59.0;
                            $var87 = $var66.$fogGreen;
                            $var35 = ($var35 + $var87 * 11.0) / 100.0;
                            $var34 = ($var33 + $var34 * 70.0) / 100.0;
                            $var33 = ($var33 + $var87 * 70.0) / 100.0;
                            $var66.$fogRed = $var35;
                            $var66.$fogBlue = $var34;
                            $var66.$fogGreen = $var33;
                        }
                        olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                        olo_GL11_glClear(16640);
                        $var66.$fogColorMultiplier = 1.0;
                        olo_GL11_glEnable(2884);
                        $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                        olo_GL11_glMatrixMode(5889);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                        $e = $var66.$minecraft1;
                        $var116 = $e.$player;
                        $var35 = 70.0;
                        if ($var116.$health <= 0)
                            $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                        olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                        olo_GL11_glMatrixMode(5888);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                        cmmr_Renderer_hurtEffect($var66, $var65);
                        if ($var66.$minecraft1.$settings.$viewBobbing)
                            cmmr_Renderer_applyBobbing($var66, $var65);
                        $e = $var66.$minecraft1.$player;
                        olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                        $var33 = $e.$xRotO;
                        olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                        $var33 = $e.$yRotO;
                        olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                        $var33 = $e.$xo;
                        $var33 = $var33 + ($e.$x - $var33) * $var65;
                        $var34 = $e.$yo;
                        $var34 = $var34 + ($e.$y - $var34) * $var65;
                        $var35 = $e.$zo;
                        olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                        $var76 = cmmr_FrustrumImpl_update();
                        $var101 = $var66.$minecraft1.$levelRenderer;
                        $var98 = 0;
                        while (true) {
                            var$48 = $var101.$chunkCache.data;
                            if ($var98 >= var$48.length)
                                break;
                            cmmr_Chunk_clip(var$48[$var98], $var76);
                            $var98 = $var98 + 1 | 0;
                        }
                        $var3 = $var66.$minecraft1.$levelRenderer;
                        ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                        $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                        $var86 = ju_ArrayList_size($var3.$chunks);
                        if ($var86 > 3)
                            $var86 = 3;
                        $var104 = 0;
                        while ($var104 < $var86) {
                            $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                            cmmr_Chunk_update($e);
                            $e.$loaded = 0;
                            $var104 = $var104 + 1 | 0;
                        }
                        cmmr_Renderer_updateFog($var66);
                        olo_GL11_glEnable(2912);
                        $var81 = 0;
                        $ptr = 15;
                        continue main;
                    }
                }
                if ($this.$settings.$limitFramerate) {
                    try {
                        var$8 = Long_fromInt(5);
                        $ptr = 10;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                cmm_Minecraft_checkGLError($rt_s(38));
                $var15 = $var15 + 1 | 0;
                while (true) {
                    var$8 = jl_System_currentTimeMillis();
                    $var18 = Long_add($var13, Long_fromInt(1000));
                    if (Long_lt(var$8, $var18))
                        break;
                    cmmr_Chunk_$callClinit();
                    $var81 = cmmr_Chunk_chunkUpdates;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0($e, $var15), $rt_s(39)), $var81), $rt_s(40));
                    $this.$debug = jl_StringBuilder_toString($e);
                    cmmr_Chunk_chunkUpdates = 0;
                    $var15 = 0;
                    $var13 = $var18;
                }
            }
            return;
        case 5:
            olo_Display_update();
            if ($rt_suspending()) {
                break main;
            }
            $var15 = 60;
            $ptr = 6;
        case 6:
            olo_Display_sync($var15);
            if ($rt_suspending()) {
                break main;
            }
            if ($this.$running) {
                olo_GL11_glClearColor(1.0, 0.0, 0.0, 0.0);
                olo_GL11_glClear(16640);
                $ptr = 5;
                continue main;
            }
            if ($this.$level === null) {
                $var15 = 1;
                $ptr = 7;
                continue main;
            }
            $this.$particleManager = cmmp_ParticleManager__init_($this.$level, $this.$textureManager);
            cmm_Minecraft_checkGLError($rt_s(36));
            $this.$hud = cmmg_HUDScreen__init_($this, $this.$width, $this.$height);
            $var13 = jl_System_currentTimeMillis();
            $var15 = 0;
            while ($this.$running) {
                if ($this.$waiting) {
                    try {
                        var$8 = Long_fromInt(100);
                        $ptr = 8;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                    continue;
                }
                if (olo_Display_isCloseRequested())
                    $this.$running = 0;
                $var63 = $this.$timer;
                var$8 = jl_System_currentTimeMillis();
                $var18 = Long_sub(var$8, $var63.$lastSysClock);
                $var20 = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
                if (Long_gt($var18, Long_fromInt(1000))) {
                    $var24 = Long_toNumber($var18) / Long_toNumber(Long_sub($var20, $var63.$lastHRClock));
                    $var24_0 = $var63.$adjustment;
                    $var63.$adjustment = $var24_0 + ($var24 - $var24_0) * 0.20000000298023224;
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                if (Long_lt($var18, Long_ZERO)) {
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                $var24 = Long_toNumber($var20) / 1000.0;
                $var24_0 = ($var24 - $var63.$lastHR) * $var63.$adjustment;
                $var63.$lastHR = $var24;
                if ($var24_0 < 0.0)
                    $var24_0 = 0.0;
                if ($var24_0 > 1.0)
                    $var24_0 = 1.0;
                $var33 = $var63.$elapsedDelta + $var24_0 * $var63.$speed * $var63.$tps;
                $var63.$elapsedDelta = $var33;
                $var81 = $var33 | 0;
                $var63.$elapsedTicks = $var81;
                if ($var81 > 100)
                    $var63.$elapsedTicks = 100;
                $var33 = $var33 - $var63.$elapsedTicks;
                $var63.$elapsedDelta = $var33;
                $var63.$delta = $var33;
                $var64 = 0;
                if ($var64 < $this.$timer.$elapsedTicks) {
                    $this.$ticks = $this.$ticks + 1 | 0;
                    $ptr = 9;
                    continue main;
                }
                cmm_Minecraft_checkGLError($rt_s(37));
                olo_GL11_glEnable(3553);
                if (!$this.$online) {
                    cmmg_SurvivalGameMode_applyCracks($this.$gamemode, $this.$timer.$delta);
                    $var65 = $this.$timer.$delta;
                    $var66 = $this.$renderer;
                    if ($var66.$displayActive && !olo_Display_isActive())
                        cmm_Minecraft_pause($var66.$minecraft1);
                    $var66.$displayActive = olo_Display_isActive();
                    $e = $var66.$minecraft1;
                    if ($e.$hasMouse) {
                        $var81 = 0;
                        $var86 = 0;
                        if (!$e.$levelLoaded) {
                            $var81 = oli_Mouse_getDX();
                            $var86 = oli_Mouse_getDY();
                        }
                        $var91 = 1;
                        $e = $var66.$minecraft1;
                        if ($e.$settings.$invertMouse)
                            $var91 = (-1);
                        cmm_Entity_turn($e.$player, $var81, $rt_imul($var86, $var91));
                    }
                    $e = $var66.$minecraft1;
                    if (!$e.$online) {
                        $var81 = $e.$width * 240 | 0;
                        $var86 = $e.$height;
                        $var81 = $var81 / $var86 | 0;
                        $var86 = ($var86 * 240 | 0) / $var86 | 0;
                        $var94 = $rt_imul(oli_Mouse_getX(), $var81) / $var66.$minecraft1.$width | 0;
                        $var81 = $rt_imul(oli_Mouse_getY(), $var86);
                        $e = $var66.$minecraft1;
                        $var83 = $e.$height;
                        $var70 = ($var86 - ($var81 / $var83 | 0) | 0) - 1 | 0;
                        if ($e.$level === null) {
                            olo_GL11_glViewport(0, 0, $e.$width, $var83);
                            olo_GL11_glClearColor(0.0, 0.0, 0.0, 0.0);
                            olo_GL11_glClear(16640);
                            olo_GL11_glMatrixMode(5889);
                            olo_GL11_glLoadIdentity();
                            olo_GL11_glMatrixMode(5888);
                            olo_GL11_glLoadIdentity();
                            cmmr_Renderer_enableGuiMode($var66);
                            $e = $var66.$minecraft1.$currentScreen;
                            if ($e === null) {
                                $ptr = 11;
                                continue main;
                            }
                            $ptr = 13;
                            continue main;
                        }
                        $var126 = $e.$player;
                        $var33 = $var126.$xRotO;
                        $var29 = $var33 + ($var126.$xRot - $var33) * $var65;
                        $var33 = $var126.$yRotO;
                        $var30 = $var33 + ($var126.$yRot - $var33) * $var65;
                        $var31 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        $var33 =  -$var30 * 0.01745329238474369 - 3.1415927410125732;
                        $var32 = cmu_MathHelper_cos($var33);
                        $var69 = cmu_MathHelper_sin($var33);
                        $var33 =  -$var29 * 0.01745329238474369;
                        $var74 = cmu_MathHelper_cos($var33);
                        $var33 = cmu_MathHelper_sin($var33);
                        $var34 = $var69 * $var74;
                        $var87 = $var32 * $var74;
                        $var36 = cmmg_SurvivalGameMode_getReachDistance($var66.$minecraft1.$gamemode);
                        $var71 = cmmm_Vec3D_add($var31, $var34 * $var36, $var33 * $var36, $var87 * $var36);
                        $e = $var66.$minecraft1;
                        $e.$selected = cmml_Level_clip($e.$level, $var31, $var71);
                        $e = $var66.$minecraft1.$selected;
                        if ($e !== null)
                            $var36 = cmmm_Vec3D_distance($e.$vec, cmmr_Renderer_getPlayerVector($var66, $var65));
                        $var115 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        if ($var66.$minecraft1.$gamemode instanceof cmmg_CreativeGameMode)
                            $var36 = 32.0;
                        $var34 = $var34 * $var36;
                        $var33 = $var33 * $var36;
                        $var35 = $var87 * $var36;
                        $var112 = cmmm_Vec3D_add($var115, $var34, $var33, $var35);
                        $var66.$entity = null;
                        $var37 = cmml_BlockMap_getEntities($var66.$minecraft1.$level.$blockMap, $var126, cmmp_AABB_expand($var126.$bb, $var34, $var33, $var35));
                        $var35 = 0.0;
                        $var86 = 0;
                        while ($var86 < ju_ArrayList_size($var37)) {
                            $e = ju_ArrayList_get($var37, $var86);
                            if ($e.$isPickable()) {
                                $var3 = cmmp_AABB_clip(cmmp_AABB_grow($e.$bb, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612), $var115, $var112);
                                if ($var3 !== null) {
                                    $var33 = cmmm_Vec3D_distance($var115, $var3.$vec);
                                    if (!($var33 >= $var35 && $var35 !== 0.0)) {
                                        $var66.$entity = $e;
                                        $var35 = $var33;
                                    }
                                }
                            }
                            $var86 = $var86 + 1 | 0;
                        }
                        $var115 = $var66.$entity;
                        if ($var115 !== null) {
                            $e = $var66.$minecraft1;
                            if (!($e.$gamemode instanceof cmmg_CreativeGameMode))
                                $e.$selected = cmm_MovingObjectPosition__init_($var115);
                        }
                        $var77 = 0;
                        if ($var77 >= 2) {
                            olo_GL11_glColorMask(1, 1, 1, 0);
                            $e = $var66.$minecraft1;
                            $var3 = $e.$hud;
                            $var81 = $e.$currentScreen === null ? 0 : 1;
                            $ptr = 14;
                            continue main;
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            if ($var77)
                                olo_GL11_glColorMask(1, 0, 0, 0);
                            else
                                olo_GL11_glColorMask(0, 1, 1, 0);
                        }
                        $e = $var66.$minecraft1;
                        $var126 = $e.$player;
                        $var119 = $e.$level;
                        $var89 = $e.$levelRenderer;
                        $var93 = $e.$particleManager;
                        olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                        $e = $var66.$minecraft1;
                        $var26 = $e.$level;
                        $var3 = $e.$player;
                        $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                        $var81 = $var26.$skyColor;
                        $var34 = ($var81 >> 16 & 255) / 255.0;
                        $var117 = ($var81 >> 8 & 255) / 255.0;
                        $var35 = ($var81 & 255) / 255.0;
                        $var81 = $var26.$fogColor;
                        $var87 = ($var81 >> 16 & 255) / 255.0;
                        $var66.$fogRed = $var87;
                        $var124 = ($var81 >> 8 & 255) / 255.0;
                        $var66.$fogBlue = $var124;
                        $var29 = ($var81 & 255) / 255.0;
                        $var66.$fogGreen = $var29;
                        $var34 = $var87 + ($var34 - $var87) * $var33;
                        $var66.$fogRed = $var34;
                        $var87 = $var124 + ($var117 - $var124) * $var33;
                        $var66.$fogBlue = $var87;
                        $var33 = $var29 + ($var35 - $var29) * $var33;
                        $var66.$fogGreen = $var33;
                        $var35 = $var66.$fogColorMultiplier;
                        $var66.$fogRed = $var34 * $var35;
                        $var66.$fogBlue = $var87 * $var35;
                        $var66.$fogGreen = $var33 * $var35;
                        cmmlt_Block_$callClinit();
                        $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                        if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                            $e = $var115.$getLiquidType();
                            if ($e === cmmll_LiquidType_WATER) {
                                $var66.$fogRed = 0.019999999552965164;
                                $var66.$fogBlue = 0.019999999552965164;
                                $var66.$fogGreen = 0.20000000298023224;
                            } else if ($e === cmmll_LiquidType_LAVA) {
                                $var66.$fogRed = 0.6000000238418579;
                                $var66.$fogBlue = 0.10000000149011612;
                                $var66.$fogGreen = 0.0;
                            }
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            $var33 = $var66.$fogRed * 30.0;
                            $var34 = $var66.$fogBlue;
                            $var35 = $var33 + $var34 * 59.0;
                            $var87 = $var66.$fogGreen;
                            $var35 = ($var35 + $var87 * 11.0) / 100.0;
                            $var34 = ($var33 + $var34 * 70.0) / 100.0;
                            $var33 = ($var33 + $var87 * 70.0) / 100.0;
                            $var66.$fogRed = $var35;
                            $var66.$fogBlue = $var34;
                            $var66.$fogGreen = $var33;
                        }
                        olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                        olo_GL11_glClear(16640);
                        $var66.$fogColorMultiplier = 1.0;
                        olo_GL11_glEnable(2884);
                        $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                        olo_GL11_glMatrixMode(5889);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                        $e = $var66.$minecraft1;
                        $var116 = $e.$player;
                        $var35 = 70.0;
                        if ($var116.$health <= 0)
                            $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                        olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                        olo_GL11_glMatrixMode(5888);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                        cmmr_Renderer_hurtEffect($var66, $var65);
                        if ($var66.$minecraft1.$settings.$viewBobbing)
                            cmmr_Renderer_applyBobbing($var66, $var65);
                        $e = $var66.$minecraft1.$player;
                        olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                        $var33 = $e.$xRotO;
                        olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                        $var33 = $e.$yRotO;
                        olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                        $var33 = $e.$xo;
                        $var33 = $var33 + ($e.$x - $var33) * $var65;
                        $var34 = $e.$yo;
                        $var34 = $var34 + ($e.$y - $var34) * $var65;
                        $var35 = $e.$zo;
                        olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                        $var76 = cmmr_FrustrumImpl_update();
                        $var101 = $var66.$minecraft1.$levelRenderer;
                        $var98 = 0;
                        while (true) {
                            var$48 = $var101.$chunkCache.data;
                            if ($var98 >= var$48.length)
                                break;
                            cmmr_Chunk_clip(var$48[$var98], $var76);
                            $var98 = $var98 + 1 | 0;
                        }
                        $var3 = $var66.$minecraft1.$levelRenderer;
                        ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                        $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                        $var86 = ju_ArrayList_size($var3.$chunks);
                        if ($var86 > 3)
                            $var86 = 3;
                        $var104 = 0;
                        while ($var104 < $var86) {
                            $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                            cmmr_Chunk_update($e);
                            $e.$loaded = 0;
                            $var104 = $var104 + 1 | 0;
                        }
                        cmmr_Renderer_updateFog($var66);
                        olo_GL11_glEnable(2912);
                        $var81 = 0;
                        $ptr = 15;
                        continue main;
                    }
                }
                if ($this.$settings.$limitFramerate) {
                    try {
                        var$8 = Long_fromInt(5);
                        $ptr = 10;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                cmm_Minecraft_checkGLError($rt_s(38));
                $var15 = $var15 + 1 | 0;
                while (true) {
                    var$8 = jl_System_currentTimeMillis();
                    $var18 = Long_add($var13, Long_fromInt(1000));
                    if (Long_lt(var$8, $var18))
                        break;
                    cmmr_Chunk_$callClinit();
                    $var81 = cmmr_Chunk_chunkUpdates;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0($e, $var15), $rt_s(39)), $var81), $rt_s(40));
                    $this.$debug = jl_StringBuilder_toString($e);
                    cmmr_Chunk_chunkUpdates = 0;
                    $var15 = 0;
                    $var13 = $var18;
                }
            }
            return;
        case 7:
            cmm_Minecraft_generateLevel($this, $var15);
            if ($rt_suspending()) {
                break main;
            }
            $this.$particleManager = cmmp_ParticleManager__init_($this.$level, $this.$textureManager);
            cmm_Minecraft_checkGLError($rt_s(36));
            $this.$hud = cmmg_HUDScreen__init_($this, $this.$width, $this.$height);
            $var13 = jl_System_currentTimeMillis();
            $var15 = 0;
            while ($this.$running) {
                if ($this.$waiting) {
                    try {
                        var$8 = Long_fromInt(100);
                        $ptr = 8;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                    continue;
                }
                if (olo_Display_isCloseRequested())
                    $this.$running = 0;
                $var63 = $this.$timer;
                var$8 = jl_System_currentTimeMillis();
                $var18 = Long_sub(var$8, $var63.$lastSysClock);
                $var20 = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
                if (Long_gt($var18, Long_fromInt(1000))) {
                    $var24 = Long_toNumber($var18) / Long_toNumber(Long_sub($var20, $var63.$lastHRClock));
                    $var24_0 = $var63.$adjustment;
                    $var63.$adjustment = $var24_0 + ($var24 - $var24_0) * 0.20000000298023224;
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                if (Long_lt($var18, Long_ZERO)) {
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                $var24 = Long_toNumber($var20) / 1000.0;
                $var24_0 = ($var24 - $var63.$lastHR) * $var63.$adjustment;
                $var63.$lastHR = $var24;
                if ($var24_0 < 0.0)
                    $var24_0 = 0.0;
                if ($var24_0 > 1.0)
                    $var24_0 = 1.0;
                $var33 = $var63.$elapsedDelta + $var24_0 * $var63.$speed * $var63.$tps;
                $var63.$elapsedDelta = $var33;
                $var81 = $var33 | 0;
                $var63.$elapsedTicks = $var81;
                if ($var81 > 100)
                    $var63.$elapsedTicks = 100;
                $var33 = $var33 - $var63.$elapsedTicks;
                $var63.$elapsedDelta = $var33;
                $var63.$delta = $var33;
                $var64 = 0;
                if ($var64 < $this.$timer.$elapsedTicks) {
                    $this.$ticks = $this.$ticks + 1 | 0;
                    $ptr = 9;
                    continue main;
                }
                cmm_Minecraft_checkGLError($rt_s(37));
                olo_GL11_glEnable(3553);
                if (!$this.$online) {
                    cmmg_SurvivalGameMode_applyCracks($this.$gamemode, $this.$timer.$delta);
                    $var65 = $this.$timer.$delta;
                    $var66 = $this.$renderer;
                    if ($var66.$displayActive && !olo_Display_isActive())
                        cmm_Minecraft_pause($var66.$minecraft1);
                    $var66.$displayActive = olo_Display_isActive();
                    $e = $var66.$minecraft1;
                    if ($e.$hasMouse) {
                        $var81 = 0;
                        $var86 = 0;
                        if (!$e.$levelLoaded) {
                            $var81 = oli_Mouse_getDX();
                            $var86 = oli_Mouse_getDY();
                        }
                        $var91 = 1;
                        $e = $var66.$minecraft1;
                        if ($e.$settings.$invertMouse)
                            $var91 = (-1);
                        cmm_Entity_turn($e.$player, $var81, $rt_imul($var86, $var91));
                    }
                    $e = $var66.$minecraft1;
                    if (!$e.$online) {
                        $var81 = $e.$width * 240 | 0;
                        $var86 = $e.$height;
                        $var81 = $var81 / $var86 | 0;
                        $var86 = ($var86 * 240 | 0) / $var86 | 0;
                        $var94 = $rt_imul(oli_Mouse_getX(), $var81) / $var66.$minecraft1.$width | 0;
                        $var81 = $rt_imul(oli_Mouse_getY(), $var86);
                        $e = $var66.$minecraft1;
                        $var83 = $e.$height;
                        $var70 = ($var86 - ($var81 / $var83 | 0) | 0) - 1 | 0;
                        if ($e.$level === null) {
                            olo_GL11_glViewport(0, 0, $e.$width, $var83);
                            olo_GL11_glClearColor(0.0, 0.0, 0.0, 0.0);
                            olo_GL11_glClear(16640);
                            olo_GL11_glMatrixMode(5889);
                            olo_GL11_glLoadIdentity();
                            olo_GL11_glMatrixMode(5888);
                            olo_GL11_glLoadIdentity();
                            cmmr_Renderer_enableGuiMode($var66);
                            $e = $var66.$minecraft1.$currentScreen;
                            if ($e === null) {
                                $ptr = 11;
                                continue main;
                            }
                            $ptr = 13;
                            continue main;
                        }
                        $var126 = $e.$player;
                        $var33 = $var126.$xRotO;
                        $var29 = $var33 + ($var126.$xRot - $var33) * $var65;
                        $var33 = $var126.$yRotO;
                        $var30 = $var33 + ($var126.$yRot - $var33) * $var65;
                        $var31 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        $var33 =  -$var30 * 0.01745329238474369 - 3.1415927410125732;
                        $var32 = cmu_MathHelper_cos($var33);
                        $var69 = cmu_MathHelper_sin($var33);
                        $var33 =  -$var29 * 0.01745329238474369;
                        $var74 = cmu_MathHelper_cos($var33);
                        $var33 = cmu_MathHelper_sin($var33);
                        $var34 = $var69 * $var74;
                        $var87 = $var32 * $var74;
                        $var36 = cmmg_SurvivalGameMode_getReachDistance($var66.$minecraft1.$gamemode);
                        $var71 = cmmm_Vec3D_add($var31, $var34 * $var36, $var33 * $var36, $var87 * $var36);
                        $e = $var66.$minecraft1;
                        $e.$selected = cmml_Level_clip($e.$level, $var31, $var71);
                        $e = $var66.$minecraft1.$selected;
                        if ($e !== null)
                            $var36 = cmmm_Vec3D_distance($e.$vec, cmmr_Renderer_getPlayerVector($var66, $var65));
                        $var115 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        if ($var66.$minecraft1.$gamemode instanceof cmmg_CreativeGameMode)
                            $var36 = 32.0;
                        $var34 = $var34 * $var36;
                        $var33 = $var33 * $var36;
                        $var35 = $var87 * $var36;
                        $var112 = cmmm_Vec3D_add($var115, $var34, $var33, $var35);
                        $var66.$entity = null;
                        $var37 = cmml_BlockMap_getEntities($var66.$minecraft1.$level.$blockMap, $var126, cmmp_AABB_expand($var126.$bb, $var34, $var33, $var35));
                        $var35 = 0.0;
                        $var86 = 0;
                        while ($var86 < ju_ArrayList_size($var37)) {
                            $e = ju_ArrayList_get($var37, $var86);
                            if ($e.$isPickable()) {
                                $var3 = cmmp_AABB_clip(cmmp_AABB_grow($e.$bb, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612), $var115, $var112);
                                if ($var3 !== null) {
                                    $var33 = cmmm_Vec3D_distance($var115, $var3.$vec);
                                    if (!($var33 >= $var35 && $var35 !== 0.0)) {
                                        $var66.$entity = $e;
                                        $var35 = $var33;
                                    }
                                }
                            }
                            $var86 = $var86 + 1 | 0;
                        }
                        $var115 = $var66.$entity;
                        if ($var115 !== null) {
                            $e = $var66.$minecraft1;
                            if (!($e.$gamemode instanceof cmmg_CreativeGameMode))
                                $e.$selected = cmm_MovingObjectPosition__init_($var115);
                        }
                        $var77 = 0;
                        if ($var77 >= 2) {
                            olo_GL11_glColorMask(1, 1, 1, 0);
                            $e = $var66.$minecraft1;
                            $var3 = $e.$hud;
                            $var81 = $e.$currentScreen === null ? 0 : 1;
                            $ptr = 14;
                            continue main;
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            if ($var77)
                                olo_GL11_glColorMask(1, 0, 0, 0);
                            else
                                olo_GL11_glColorMask(0, 1, 1, 0);
                        }
                        $e = $var66.$minecraft1;
                        $var126 = $e.$player;
                        $var119 = $e.$level;
                        $var89 = $e.$levelRenderer;
                        $var93 = $e.$particleManager;
                        olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                        $e = $var66.$minecraft1;
                        $var26 = $e.$level;
                        $var3 = $e.$player;
                        $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                        $var81 = $var26.$skyColor;
                        $var34 = ($var81 >> 16 & 255) / 255.0;
                        $var117 = ($var81 >> 8 & 255) / 255.0;
                        $var35 = ($var81 & 255) / 255.0;
                        $var81 = $var26.$fogColor;
                        $var87 = ($var81 >> 16 & 255) / 255.0;
                        $var66.$fogRed = $var87;
                        $var124 = ($var81 >> 8 & 255) / 255.0;
                        $var66.$fogBlue = $var124;
                        $var29 = ($var81 & 255) / 255.0;
                        $var66.$fogGreen = $var29;
                        $var34 = $var87 + ($var34 - $var87) * $var33;
                        $var66.$fogRed = $var34;
                        $var87 = $var124 + ($var117 - $var124) * $var33;
                        $var66.$fogBlue = $var87;
                        $var33 = $var29 + ($var35 - $var29) * $var33;
                        $var66.$fogGreen = $var33;
                        $var35 = $var66.$fogColorMultiplier;
                        $var66.$fogRed = $var34 * $var35;
                        $var66.$fogBlue = $var87 * $var35;
                        $var66.$fogGreen = $var33 * $var35;
                        cmmlt_Block_$callClinit();
                        $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                        if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                            $e = $var115.$getLiquidType();
                            if ($e === cmmll_LiquidType_WATER) {
                                $var66.$fogRed = 0.019999999552965164;
                                $var66.$fogBlue = 0.019999999552965164;
                                $var66.$fogGreen = 0.20000000298023224;
                            } else if ($e === cmmll_LiquidType_LAVA) {
                                $var66.$fogRed = 0.6000000238418579;
                                $var66.$fogBlue = 0.10000000149011612;
                                $var66.$fogGreen = 0.0;
                            }
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            $var33 = $var66.$fogRed * 30.0;
                            $var34 = $var66.$fogBlue;
                            $var35 = $var33 + $var34 * 59.0;
                            $var87 = $var66.$fogGreen;
                            $var35 = ($var35 + $var87 * 11.0) / 100.0;
                            $var34 = ($var33 + $var34 * 70.0) / 100.0;
                            $var33 = ($var33 + $var87 * 70.0) / 100.0;
                            $var66.$fogRed = $var35;
                            $var66.$fogBlue = $var34;
                            $var66.$fogGreen = $var33;
                        }
                        olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                        olo_GL11_glClear(16640);
                        $var66.$fogColorMultiplier = 1.0;
                        olo_GL11_glEnable(2884);
                        $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                        olo_GL11_glMatrixMode(5889);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                        $e = $var66.$minecraft1;
                        $var116 = $e.$player;
                        $var35 = 70.0;
                        if ($var116.$health <= 0)
                            $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                        olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                        olo_GL11_glMatrixMode(5888);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                        cmmr_Renderer_hurtEffect($var66, $var65);
                        if ($var66.$minecraft1.$settings.$viewBobbing)
                            cmmr_Renderer_applyBobbing($var66, $var65);
                        $e = $var66.$minecraft1.$player;
                        olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                        $var33 = $e.$xRotO;
                        olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                        $var33 = $e.$yRotO;
                        olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                        $var33 = $e.$xo;
                        $var33 = $var33 + ($e.$x - $var33) * $var65;
                        $var34 = $e.$yo;
                        $var34 = $var34 + ($e.$y - $var34) * $var65;
                        $var35 = $e.$zo;
                        olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                        $var76 = cmmr_FrustrumImpl_update();
                        $var101 = $var66.$minecraft1.$levelRenderer;
                        $var98 = 0;
                        while (true) {
                            var$48 = $var101.$chunkCache.data;
                            if ($var98 >= var$48.length)
                                break;
                            cmmr_Chunk_clip(var$48[$var98], $var76);
                            $var98 = $var98 + 1 | 0;
                        }
                        $var3 = $var66.$minecraft1.$levelRenderer;
                        ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                        $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                        $var86 = ju_ArrayList_size($var3.$chunks);
                        if ($var86 > 3)
                            $var86 = 3;
                        $var104 = 0;
                        while ($var104 < $var86) {
                            $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                            cmmr_Chunk_update($e);
                            $e.$loaded = 0;
                            $var104 = $var104 + 1 | 0;
                        }
                        cmmr_Renderer_updateFog($var66);
                        olo_GL11_glEnable(2912);
                        $var81 = 0;
                        $ptr = 15;
                        continue main;
                    }
                }
                if ($this.$settings.$limitFramerate) {
                    try {
                        var$8 = Long_fromInt(5);
                        $ptr = 10;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                cmm_Minecraft_checkGLError($rt_s(38));
                $var15 = $var15 + 1 | 0;
                while (true) {
                    var$8 = jl_System_currentTimeMillis();
                    $var18 = Long_add($var13, Long_fromInt(1000));
                    if (Long_lt(var$8, $var18))
                        break;
                    cmmr_Chunk_$callClinit();
                    $var81 = cmmr_Chunk_chunkUpdates;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0($e, $var15), $rt_s(39)), $var81), $rt_s(40));
                    $this.$debug = jl_StringBuilder_toString($e);
                    cmmr_Chunk_chunkUpdates = 0;
                    $var15 = 0;
                    $var13 = $var18;
                }
            }
            return;
        case 8:
            a: {
                try {
                    jl_Thread_sleep(var$8);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            while ($this.$running) {
                if ($this.$waiting) {
                    try {
                        var$8 = Long_fromInt(100);
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                    continue;
                }
                if (olo_Display_isCloseRequested())
                    $this.$running = 0;
                $var63 = $this.$timer;
                var$8 = jl_System_currentTimeMillis();
                $var18 = Long_sub(var$8, $var63.$lastSysClock);
                $var20 = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
                if (Long_gt($var18, Long_fromInt(1000))) {
                    $var24 = Long_toNumber($var18) / Long_toNumber(Long_sub($var20, $var63.$lastHRClock));
                    $var24_0 = $var63.$adjustment;
                    $var63.$adjustment = $var24_0 + ($var24 - $var24_0) * 0.20000000298023224;
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                if (Long_lt($var18, Long_ZERO)) {
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                $var24 = Long_toNumber($var20) / 1000.0;
                $var24_0 = ($var24 - $var63.$lastHR) * $var63.$adjustment;
                $var63.$lastHR = $var24;
                if ($var24_0 < 0.0)
                    $var24_0 = 0.0;
                if ($var24_0 > 1.0)
                    $var24_0 = 1.0;
                $var33 = $var63.$elapsedDelta + $var24_0 * $var63.$speed * $var63.$tps;
                $var63.$elapsedDelta = $var33;
                $var81 = $var33 | 0;
                $var63.$elapsedTicks = $var81;
                if ($var81 > 100)
                    $var63.$elapsedTicks = 100;
                $var33 = $var33 - $var63.$elapsedTicks;
                $var63.$elapsedDelta = $var33;
                $var63.$delta = $var33;
                $var64 = 0;
                if ($var64 < $this.$timer.$elapsedTicks) {
                    $this.$ticks = $this.$ticks + 1 | 0;
                    $ptr = 9;
                    continue main;
                }
                cmm_Minecraft_checkGLError($rt_s(37));
                olo_GL11_glEnable(3553);
                if (!$this.$online) {
                    cmmg_SurvivalGameMode_applyCracks($this.$gamemode, $this.$timer.$delta);
                    $var65 = $this.$timer.$delta;
                    $var66 = $this.$renderer;
                    if ($var66.$displayActive && !olo_Display_isActive())
                        cmm_Minecraft_pause($var66.$minecraft1);
                    $var66.$displayActive = olo_Display_isActive();
                    $e = $var66.$minecraft1;
                    if ($e.$hasMouse) {
                        $var81 = 0;
                        $var86 = 0;
                        if (!$e.$levelLoaded) {
                            $var81 = oli_Mouse_getDX();
                            $var86 = oli_Mouse_getDY();
                        }
                        $var91 = 1;
                        $e = $var66.$minecraft1;
                        if ($e.$settings.$invertMouse)
                            $var91 = (-1);
                        cmm_Entity_turn($e.$player, $var81, $rt_imul($var86, $var91));
                    }
                    $e = $var66.$minecraft1;
                    if (!$e.$online) {
                        $var81 = $e.$width * 240 | 0;
                        $var86 = $e.$height;
                        $var81 = $var81 / $var86 | 0;
                        $var86 = ($var86 * 240 | 0) / $var86 | 0;
                        $var94 = $rt_imul(oli_Mouse_getX(), $var81) / $var66.$minecraft1.$width | 0;
                        $var81 = $rt_imul(oli_Mouse_getY(), $var86);
                        $e = $var66.$minecraft1;
                        $var83 = $e.$height;
                        $var70 = ($var86 - ($var81 / $var83 | 0) | 0) - 1 | 0;
                        if ($e.$level === null) {
                            olo_GL11_glViewport(0, 0, $e.$width, $var83);
                            olo_GL11_glClearColor(0.0, 0.0, 0.0, 0.0);
                            olo_GL11_glClear(16640);
                            olo_GL11_glMatrixMode(5889);
                            olo_GL11_glLoadIdentity();
                            olo_GL11_glMatrixMode(5888);
                            olo_GL11_glLoadIdentity();
                            cmmr_Renderer_enableGuiMode($var66);
                            $e = $var66.$minecraft1.$currentScreen;
                            if ($e === null) {
                                $ptr = 11;
                                continue main;
                            }
                            $ptr = 13;
                            continue main;
                        }
                        $var126 = $e.$player;
                        $var33 = $var126.$xRotO;
                        $var29 = $var33 + ($var126.$xRot - $var33) * $var65;
                        $var33 = $var126.$yRotO;
                        $var30 = $var33 + ($var126.$yRot - $var33) * $var65;
                        $var31 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        $var33 =  -$var30 * 0.01745329238474369 - 3.1415927410125732;
                        $var32 = cmu_MathHelper_cos($var33);
                        $var69 = cmu_MathHelper_sin($var33);
                        $var33 =  -$var29 * 0.01745329238474369;
                        $var74 = cmu_MathHelper_cos($var33);
                        $var33 = cmu_MathHelper_sin($var33);
                        $var34 = $var69 * $var74;
                        $var87 = $var32 * $var74;
                        $var36 = cmmg_SurvivalGameMode_getReachDistance($var66.$minecraft1.$gamemode);
                        $var71 = cmmm_Vec3D_add($var31, $var34 * $var36, $var33 * $var36, $var87 * $var36);
                        $e = $var66.$minecraft1;
                        $e.$selected = cmml_Level_clip($e.$level, $var31, $var71);
                        $e = $var66.$minecraft1.$selected;
                        if ($e !== null)
                            $var36 = cmmm_Vec3D_distance($e.$vec, cmmr_Renderer_getPlayerVector($var66, $var65));
                        $var115 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        if ($var66.$minecraft1.$gamemode instanceof cmmg_CreativeGameMode)
                            $var36 = 32.0;
                        $var34 = $var34 * $var36;
                        $var33 = $var33 * $var36;
                        $var35 = $var87 * $var36;
                        $var112 = cmmm_Vec3D_add($var115, $var34, $var33, $var35);
                        $var66.$entity = null;
                        $var37 = cmml_BlockMap_getEntities($var66.$minecraft1.$level.$blockMap, $var126, cmmp_AABB_expand($var126.$bb, $var34, $var33, $var35));
                        $var35 = 0.0;
                        $var86 = 0;
                        while ($var86 < ju_ArrayList_size($var37)) {
                            $e = ju_ArrayList_get($var37, $var86);
                            if ($e.$isPickable()) {
                                $var3 = cmmp_AABB_clip(cmmp_AABB_grow($e.$bb, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612), $var115, $var112);
                                if ($var3 !== null) {
                                    $var33 = cmmm_Vec3D_distance($var115, $var3.$vec);
                                    if (!($var33 >= $var35 && $var35 !== 0.0)) {
                                        $var66.$entity = $e;
                                        $var35 = $var33;
                                    }
                                }
                            }
                            $var86 = $var86 + 1 | 0;
                        }
                        $var115 = $var66.$entity;
                        if ($var115 !== null) {
                            $e = $var66.$minecraft1;
                            if (!($e.$gamemode instanceof cmmg_CreativeGameMode))
                                $e.$selected = cmm_MovingObjectPosition__init_($var115);
                        }
                        $var77 = 0;
                        if ($var77 >= 2) {
                            olo_GL11_glColorMask(1, 1, 1, 0);
                            $e = $var66.$minecraft1;
                            $var3 = $e.$hud;
                            $var81 = $e.$currentScreen === null ? 0 : 1;
                            $ptr = 14;
                            continue main;
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            if ($var77)
                                olo_GL11_glColorMask(1, 0, 0, 0);
                            else
                                olo_GL11_glColorMask(0, 1, 1, 0);
                        }
                        $e = $var66.$minecraft1;
                        $var126 = $e.$player;
                        $var119 = $e.$level;
                        $var89 = $e.$levelRenderer;
                        $var93 = $e.$particleManager;
                        olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                        $e = $var66.$minecraft1;
                        $var26 = $e.$level;
                        $var3 = $e.$player;
                        $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                        $var81 = $var26.$skyColor;
                        $var34 = ($var81 >> 16 & 255) / 255.0;
                        $var117 = ($var81 >> 8 & 255) / 255.0;
                        $var35 = ($var81 & 255) / 255.0;
                        $var81 = $var26.$fogColor;
                        $var87 = ($var81 >> 16 & 255) / 255.0;
                        $var66.$fogRed = $var87;
                        $var124 = ($var81 >> 8 & 255) / 255.0;
                        $var66.$fogBlue = $var124;
                        $var29 = ($var81 & 255) / 255.0;
                        $var66.$fogGreen = $var29;
                        $var34 = $var87 + ($var34 - $var87) * $var33;
                        $var66.$fogRed = $var34;
                        $var87 = $var124 + ($var117 - $var124) * $var33;
                        $var66.$fogBlue = $var87;
                        $var33 = $var29 + ($var35 - $var29) * $var33;
                        $var66.$fogGreen = $var33;
                        $var35 = $var66.$fogColorMultiplier;
                        $var66.$fogRed = $var34 * $var35;
                        $var66.$fogBlue = $var87 * $var35;
                        $var66.$fogGreen = $var33 * $var35;
                        cmmlt_Block_$callClinit();
                        $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                        if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                            $e = $var115.$getLiquidType();
                            if ($e === cmmll_LiquidType_WATER) {
                                $var66.$fogRed = 0.019999999552965164;
                                $var66.$fogBlue = 0.019999999552965164;
                                $var66.$fogGreen = 0.20000000298023224;
                            } else if ($e === cmmll_LiquidType_LAVA) {
                                $var66.$fogRed = 0.6000000238418579;
                                $var66.$fogBlue = 0.10000000149011612;
                                $var66.$fogGreen = 0.0;
                            }
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            $var33 = $var66.$fogRed * 30.0;
                            $var34 = $var66.$fogBlue;
                            $var35 = $var33 + $var34 * 59.0;
                            $var87 = $var66.$fogGreen;
                            $var35 = ($var35 + $var87 * 11.0) / 100.0;
                            $var34 = ($var33 + $var34 * 70.0) / 100.0;
                            $var33 = ($var33 + $var87 * 70.0) / 100.0;
                            $var66.$fogRed = $var35;
                            $var66.$fogBlue = $var34;
                            $var66.$fogGreen = $var33;
                        }
                        olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                        olo_GL11_glClear(16640);
                        $var66.$fogColorMultiplier = 1.0;
                        olo_GL11_glEnable(2884);
                        $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                        olo_GL11_glMatrixMode(5889);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                        $e = $var66.$minecraft1;
                        $var116 = $e.$player;
                        $var35 = 70.0;
                        if ($var116.$health <= 0)
                            $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                        olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                        olo_GL11_glMatrixMode(5888);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                        cmmr_Renderer_hurtEffect($var66, $var65);
                        if ($var66.$minecraft1.$settings.$viewBobbing)
                            cmmr_Renderer_applyBobbing($var66, $var65);
                        $e = $var66.$minecraft1.$player;
                        olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                        $var33 = $e.$xRotO;
                        olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                        $var33 = $e.$yRotO;
                        olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                        $var33 = $e.$xo;
                        $var33 = $var33 + ($e.$x - $var33) * $var65;
                        $var34 = $e.$yo;
                        $var34 = $var34 + ($e.$y - $var34) * $var65;
                        $var35 = $e.$zo;
                        olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                        $var76 = cmmr_FrustrumImpl_update();
                        $var101 = $var66.$minecraft1.$levelRenderer;
                        $var98 = 0;
                        while (true) {
                            var$48 = $var101.$chunkCache.data;
                            if ($var98 >= var$48.length)
                                break;
                            cmmr_Chunk_clip(var$48[$var98], $var76);
                            $var98 = $var98 + 1 | 0;
                        }
                        $var3 = $var66.$minecraft1.$levelRenderer;
                        ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                        $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                        $var86 = ju_ArrayList_size($var3.$chunks);
                        if ($var86 > 3)
                            $var86 = 3;
                        $var104 = 0;
                        while ($var104 < $var86) {
                            $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                            cmmr_Chunk_update($e);
                            $e.$loaded = 0;
                            $var104 = $var104 + 1 | 0;
                        }
                        cmmr_Renderer_updateFog($var66);
                        olo_GL11_glEnable(2912);
                        $var81 = 0;
                        $ptr = 15;
                        continue main;
                    }
                }
                if ($this.$settings.$limitFramerate) {
                    try {
                        var$8 = Long_fromInt(5);
                        $ptr = 10;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                cmm_Minecraft_checkGLError($rt_s(38));
                $var15 = $var15 + 1 | 0;
                while (true) {
                    var$8 = jl_System_currentTimeMillis();
                    $var18 = Long_add($var13, Long_fromInt(1000));
                    if (Long_lt(var$8, $var18))
                        break;
                    cmmr_Chunk_$callClinit();
                    $var81 = cmmr_Chunk_chunkUpdates;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0($e, $var15), $rt_s(39)), $var81), $rt_s(40));
                    $this.$debug = jl_StringBuilder_toString($e);
                    cmmr_Chunk_chunkUpdates = 0;
                    $var15 = 0;
                    $var13 = $var18;
                }
            }
            return;
        case 9:
            cmm_Minecraft_tick($this);
            if ($rt_suspending()) {
                break main;
            }
            $var64 = $var64 + 1 | 0;
            d: while (true) {
                if ($var64 < $this.$timer.$elapsedTicks) {
                    $this.$ticks = $this.$ticks + 1 | 0;
                    continue main;
                }
                cmm_Minecraft_checkGLError($rt_s(37));
                olo_GL11_glEnable(3553);
                if (!$this.$online) {
                    cmmg_SurvivalGameMode_applyCracks($this.$gamemode, $this.$timer.$delta);
                    $var65 = $this.$timer.$delta;
                    $var66 = $this.$renderer;
                    if ($var66.$displayActive && !olo_Display_isActive())
                        cmm_Minecraft_pause($var66.$minecraft1);
                    $var66.$displayActive = olo_Display_isActive();
                    $e = $var66.$minecraft1;
                    if ($e.$hasMouse) {
                        $var81 = 0;
                        $var86 = 0;
                        if (!$e.$levelLoaded) {
                            $var81 = oli_Mouse_getDX();
                            $var86 = oli_Mouse_getDY();
                        }
                        $var91 = 1;
                        $e = $var66.$minecraft1;
                        if ($e.$settings.$invertMouse)
                            $var91 = (-1);
                        cmm_Entity_turn($e.$player, $var81, $rt_imul($var86, $var91));
                    }
                    $e = $var66.$minecraft1;
                    if (!$e.$online) {
                        $var81 = $e.$width * 240 | 0;
                        $var86 = $e.$height;
                        $var81 = $var81 / $var86 | 0;
                        $var86 = ($var86 * 240 | 0) / $var86 | 0;
                        $var94 = $rt_imul(oli_Mouse_getX(), $var81) / $var66.$minecraft1.$width | 0;
                        $var81 = $rt_imul(oli_Mouse_getY(), $var86);
                        $e = $var66.$minecraft1;
                        $var83 = $e.$height;
                        $var70 = ($var86 - ($var81 / $var83 | 0) | 0) - 1 | 0;
                        if ($e.$level === null) {
                            olo_GL11_glViewport(0, 0, $e.$width, $var83);
                            olo_GL11_glClearColor(0.0, 0.0, 0.0, 0.0);
                            olo_GL11_glClear(16640);
                            olo_GL11_glMatrixMode(5889);
                            olo_GL11_glLoadIdentity();
                            olo_GL11_glMatrixMode(5888);
                            olo_GL11_glLoadIdentity();
                            cmmr_Renderer_enableGuiMode($var66);
                            $e = $var66.$minecraft1.$currentScreen;
                            if ($e === null) {
                                $ptr = 11;
                                continue main;
                            }
                            $ptr = 13;
                            continue main;
                        }
                        $var126 = $e.$player;
                        $var33 = $var126.$xRotO;
                        $var29 = $var33 + ($var126.$xRot - $var33) * $var65;
                        $var33 = $var126.$yRotO;
                        $var30 = $var33 + ($var126.$yRot - $var33) * $var65;
                        $var31 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        $var33 =  -$var30 * 0.01745329238474369 - 3.1415927410125732;
                        $var32 = cmu_MathHelper_cos($var33);
                        $var69 = cmu_MathHelper_sin($var33);
                        $var33 =  -$var29 * 0.01745329238474369;
                        $var74 = cmu_MathHelper_cos($var33);
                        $var33 = cmu_MathHelper_sin($var33);
                        $var34 = $var69 * $var74;
                        $var87 = $var32 * $var74;
                        $var36 = cmmg_SurvivalGameMode_getReachDistance($var66.$minecraft1.$gamemode);
                        $var71 = cmmm_Vec3D_add($var31, $var34 * $var36, $var33 * $var36, $var87 * $var36);
                        $e = $var66.$minecraft1;
                        $e.$selected = cmml_Level_clip($e.$level, $var31, $var71);
                        $e = $var66.$minecraft1.$selected;
                        if ($e !== null)
                            $var36 = cmmm_Vec3D_distance($e.$vec, cmmr_Renderer_getPlayerVector($var66, $var65));
                        $var115 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        if ($var66.$minecraft1.$gamemode instanceof cmmg_CreativeGameMode)
                            $var36 = 32.0;
                        $var34 = $var34 * $var36;
                        $var33 = $var33 * $var36;
                        $var35 = $var87 * $var36;
                        $var112 = cmmm_Vec3D_add($var115, $var34, $var33, $var35);
                        $var66.$entity = null;
                        $var37 = cmml_BlockMap_getEntities($var66.$minecraft1.$level.$blockMap, $var126, cmmp_AABB_expand($var126.$bb, $var34, $var33, $var35));
                        $var35 = 0.0;
                        $var86 = 0;
                        while ($var86 < ju_ArrayList_size($var37)) {
                            $e = ju_ArrayList_get($var37, $var86);
                            if ($e.$isPickable()) {
                                $var3 = cmmp_AABB_clip(cmmp_AABB_grow($e.$bb, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612), $var115, $var112);
                                if ($var3 !== null) {
                                    $var33 = cmmm_Vec3D_distance($var115, $var3.$vec);
                                    if (!($var33 >= $var35 && $var35 !== 0.0)) {
                                        $var66.$entity = $e;
                                        $var35 = $var33;
                                    }
                                }
                            }
                            $var86 = $var86 + 1 | 0;
                        }
                        $var115 = $var66.$entity;
                        if ($var115 !== null) {
                            $e = $var66.$minecraft1;
                            if (!($e.$gamemode instanceof cmmg_CreativeGameMode))
                                $e.$selected = cmm_MovingObjectPosition__init_($var115);
                        }
                        $var77 = 0;
                        if ($var77 >= 2) {
                            olo_GL11_glColorMask(1, 1, 1, 0);
                            $e = $var66.$minecraft1;
                            $var3 = $e.$hud;
                            $var81 = $e.$currentScreen === null ? 0 : 1;
                            $ptr = 14;
                            continue main;
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            if ($var77)
                                olo_GL11_glColorMask(1, 0, 0, 0);
                            else
                                olo_GL11_glColorMask(0, 1, 1, 0);
                        }
                        $e = $var66.$minecraft1;
                        $var126 = $e.$player;
                        $var119 = $e.$level;
                        $var89 = $e.$levelRenderer;
                        $var93 = $e.$particleManager;
                        olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                        $e = $var66.$minecraft1;
                        $var26 = $e.$level;
                        $var3 = $e.$player;
                        $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                        $var81 = $var26.$skyColor;
                        $var34 = ($var81 >> 16 & 255) / 255.0;
                        $var117 = ($var81 >> 8 & 255) / 255.0;
                        $var35 = ($var81 & 255) / 255.0;
                        $var81 = $var26.$fogColor;
                        $var87 = ($var81 >> 16 & 255) / 255.0;
                        $var66.$fogRed = $var87;
                        $var124 = ($var81 >> 8 & 255) / 255.0;
                        $var66.$fogBlue = $var124;
                        $var29 = ($var81 & 255) / 255.0;
                        $var66.$fogGreen = $var29;
                        $var34 = $var87 + ($var34 - $var87) * $var33;
                        $var66.$fogRed = $var34;
                        $var87 = $var124 + ($var117 - $var124) * $var33;
                        $var66.$fogBlue = $var87;
                        $var33 = $var29 + ($var35 - $var29) * $var33;
                        $var66.$fogGreen = $var33;
                        $var35 = $var66.$fogColorMultiplier;
                        $var66.$fogRed = $var34 * $var35;
                        $var66.$fogBlue = $var87 * $var35;
                        $var66.$fogGreen = $var33 * $var35;
                        cmmlt_Block_$callClinit();
                        $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                        if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                            $e = $var115.$getLiquidType();
                            if ($e === cmmll_LiquidType_WATER) {
                                $var66.$fogRed = 0.019999999552965164;
                                $var66.$fogBlue = 0.019999999552965164;
                                $var66.$fogGreen = 0.20000000298023224;
                            } else if ($e === cmmll_LiquidType_LAVA) {
                                $var66.$fogRed = 0.6000000238418579;
                                $var66.$fogBlue = 0.10000000149011612;
                                $var66.$fogGreen = 0.0;
                            }
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            $var33 = $var66.$fogRed * 30.0;
                            $var34 = $var66.$fogBlue;
                            $var35 = $var33 + $var34 * 59.0;
                            $var87 = $var66.$fogGreen;
                            $var35 = ($var35 + $var87 * 11.0) / 100.0;
                            $var34 = ($var33 + $var34 * 70.0) / 100.0;
                            $var33 = ($var33 + $var87 * 70.0) / 100.0;
                            $var66.$fogRed = $var35;
                            $var66.$fogBlue = $var34;
                            $var66.$fogGreen = $var33;
                        }
                        olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                        olo_GL11_glClear(16640);
                        $var66.$fogColorMultiplier = 1.0;
                        olo_GL11_glEnable(2884);
                        $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                        olo_GL11_glMatrixMode(5889);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                        $e = $var66.$minecraft1;
                        $var116 = $e.$player;
                        $var35 = 70.0;
                        if ($var116.$health <= 0)
                            $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                        olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                        olo_GL11_glMatrixMode(5888);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                        cmmr_Renderer_hurtEffect($var66, $var65);
                        if ($var66.$minecraft1.$settings.$viewBobbing)
                            cmmr_Renderer_applyBobbing($var66, $var65);
                        $e = $var66.$minecraft1.$player;
                        olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                        $var33 = $e.$xRotO;
                        olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                        $var33 = $e.$yRotO;
                        olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                        $var33 = $e.$xo;
                        $var33 = $var33 + ($e.$x - $var33) * $var65;
                        $var34 = $e.$yo;
                        $var34 = $var34 + ($e.$y - $var34) * $var65;
                        $var35 = $e.$zo;
                        olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                        $var76 = cmmr_FrustrumImpl_update();
                        $var101 = $var66.$minecraft1.$levelRenderer;
                        $var98 = 0;
                        while (true) {
                            var$48 = $var101.$chunkCache.data;
                            if ($var98 >= var$48.length)
                                break;
                            cmmr_Chunk_clip(var$48[$var98], $var76);
                            $var98 = $var98 + 1 | 0;
                        }
                        $var3 = $var66.$minecraft1.$levelRenderer;
                        ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                        $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                        $var86 = ju_ArrayList_size($var3.$chunks);
                        if ($var86 > 3)
                            $var86 = 3;
                        $var104 = 0;
                        while ($var104 < $var86) {
                            $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                            cmmr_Chunk_update($e);
                            $e.$loaded = 0;
                            $var104 = $var104 + 1 | 0;
                        }
                        cmmr_Renderer_updateFog($var66);
                        olo_GL11_glEnable(2912);
                        $var81 = 0;
                        $ptr = 15;
                        continue main;
                    }
                }
                if ($this.$settings.$limitFramerate) {
                    try {
                        var$8 = Long_fromInt(5);
                        $ptr = 10;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                cmm_Minecraft_checkGLError($rt_s(38));
                $var15 = $var15 + 1 | 0;
                while (true) {
                    var$8 = jl_System_currentTimeMillis();
                    $var18 = Long_add($var13, Long_fromInt(1000));
                    if (Long_lt(var$8, $var18))
                        break;
                    cmmr_Chunk_$callClinit();
                    $var81 = cmmr_Chunk_chunkUpdates;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0($e, $var15), $rt_s(39)), $var81), $rt_s(40));
                    $this.$debug = jl_StringBuilder_toString($e);
                    cmmr_Chunk_chunkUpdates = 0;
                    $var15 = 0;
                    $var13 = $var18;
                }
                while (true) {
                    if (!$this.$running)
                        break d;
                    if (!$this.$waiting)
                        break;
                    try {
                        var$8 = Long_fromInt(100);
                        $ptr = 8;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                if (olo_Display_isCloseRequested())
                    $this.$running = 0;
                $var63 = $this.$timer;
                var$8 = jl_System_currentTimeMillis();
                $var18 = Long_sub(var$8, $var63.$lastSysClock);
                $var20 = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
                if (Long_gt($var18, Long_fromInt(1000))) {
                    $var24 = Long_toNumber($var18) / Long_toNumber(Long_sub($var20, $var63.$lastHRClock));
                    $var24_0 = $var63.$adjustment;
                    $var63.$adjustment = $var24_0 + ($var24 - $var24_0) * 0.20000000298023224;
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                if (Long_lt($var18, Long_ZERO)) {
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                $var24 = Long_toNumber($var20) / 1000.0;
                $var24_0 = ($var24 - $var63.$lastHR) * $var63.$adjustment;
                $var63.$lastHR = $var24;
                if ($var24_0 < 0.0)
                    $var24_0 = 0.0;
                if ($var24_0 > 1.0)
                    $var24_0 = 1.0;
                $var33 = $var63.$elapsedDelta + $var24_0 * $var63.$speed * $var63.$tps;
                $var63.$elapsedDelta = $var33;
                $var81 = $var33 | 0;
                $var63.$elapsedTicks = $var81;
                if ($var81 > 100)
                    $var63.$elapsedTicks = 100;
                $var33 = $var33 - $var63.$elapsedTicks;
                $var63.$elapsedDelta = $var33;
                $var63.$delta = $var33;
                $var64 = 0;
            }
            return;
        case 10:
            a: {
                try {
                    jl_Thread_sleep(var$8);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            e: while (true) {
                cmm_Minecraft_checkGLError($rt_s(38));
                $var15 = $var15 + 1 | 0;
                while (true) {
                    var$8 = jl_System_currentTimeMillis();
                    $var18 = Long_add($var13, Long_fromInt(1000));
                    if (Long_lt(var$8, $var18))
                        break;
                    cmmr_Chunk_$callClinit();
                    $var81 = cmmr_Chunk_chunkUpdates;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0($e, $var15), $rt_s(39)), $var81), $rt_s(40));
                    $this.$debug = jl_StringBuilder_toString($e);
                    cmmr_Chunk_chunkUpdates = 0;
                    $var15 = 0;
                    $var13 = $var18;
                }
                while (true) {
                    if (!$this.$running)
                        break e;
                    if (!$this.$waiting)
                        break;
                    try {
                        var$8 = Long_fromInt(100);
                        $ptr = 8;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                if (olo_Display_isCloseRequested())
                    $this.$running = 0;
                $var63 = $this.$timer;
                var$8 = jl_System_currentTimeMillis();
                $var18 = Long_sub(var$8, $var63.$lastSysClock);
                $var20 = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
                if (Long_gt($var18, Long_fromInt(1000))) {
                    $var24 = Long_toNumber($var18) / Long_toNumber(Long_sub($var20, $var63.$lastHRClock));
                    $var24_0 = $var63.$adjustment;
                    $var63.$adjustment = $var24_0 + ($var24 - $var24_0) * 0.20000000298023224;
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                if (Long_lt($var18, Long_ZERO)) {
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                $var24 = Long_toNumber($var20) / 1000.0;
                $var24_0 = ($var24 - $var63.$lastHR) * $var63.$adjustment;
                $var63.$lastHR = $var24;
                if ($var24_0 < 0.0)
                    $var24_0 = 0.0;
                if ($var24_0 > 1.0)
                    $var24_0 = 1.0;
                $var33 = $var63.$elapsedDelta + $var24_0 * $var63.$speed * $var63.$tps;
                $var63.$elapsedDelta = $var33;
                $var81 = $var33 | 0;
                $var63.$elapsedTicks = $var81;
                if ($var81 > 100)
                    $var63.$elapsedTicks = 100;
                $var33 = $var33 - $var63.$elapsedTicks;
                $var63.$elapsedDelta = $var33;
                $var63.$delta = $var33;
                $var64 = 0;
                if ($var64 < $this.$timer.$elapsedTicks) {
                    $this.$ticks = $this.$ticks + 1 | 0;
                    $ptr = 9;
                    continue main;
                }
                cmm_Minecraft_checkGLError($rt_s(37));
                olo_GL11_glEnable(3553);
                if (!$this.$online) {
                    cmmg_SurvivalGameMode_applyCracks($this.$gamemode, $this.$timer.$delta);
                    $var65 = $this.$timer.$delta;
                    $var66 = $this.$renderer;
                    if ($var66.$displayActive && !olo_Display_isActive())
                        cmm_Minecraft_pause($var66.$minecraft1);
                    $var66.$displayActive = olo_Display_isActive();
                    $e = $var66.$minecraft1;
                    if ($e.$hasMouse) {
                        $var81 = 0;
                        $var86 = 0;
                        if (!$e.$levelLoaded) {
                            $var81 = oli_Mouse_getDX();
                            $var86 = oli_Mouse_getDY();
                        }
                        $var91 = 1;
                        $e = $var66.$minecraft1;
                        if ($e.$settings.$invertMouse)
                            $var91 = (-1);
                        cmm_Entity_turn($e.$player, $var81, $rt_imul($var86, $var91));
                    }
                    $e = $var66.$minecraft1;
                    if (!$e.$online) {
                        $var81 = $e.$width * 240 | 0;
                        $var86 = $e.$height;
                        $var81 = $var81 / $var86 | 0;
                        $var86 = ($var86 * 240 | 0) / $var86 | 0;
                        $var94 = $rt_imul(oli_Mouse_getX(), $var81) / $var66.$minecraft1.$width | 0;
                        $var81 = $rt_imul(oli_Mouse_getY(), $var86);
                        $e = $var66.$minecraft1;
                        $var83 = $e.$height;
                        $var70 = ($var86 - ($var81 / $var83 | 0) | 0) - 1 | 0;
                        if ($e.$level === null) {
                            olo_GL11_glViewport(0, 0, $e.$width, $var83);
                            olo_GL11_glClearColor(0.0, 0.0, 0.0, 0.0);
                            olo_GL11_glClear(16640);
                            olo_GL11_glMatrixMode(5889);
                            olo_GL11_glLoadIdentity();
                            olo_GL11_glMatrixMode(5888);
                            olo_GL11_glLoadIdentity();
                            cmmr_Renderer_enableGuiMode($var66);
                            $e = $var66.$minecraft1.$currentScreen;
                            if ($e === null) {
                                $ptr = 11;
                                continue main;
                            }
                            $ptr = 13;
                            continue main;
                        }
                        $var126 = $e.$player;
                        $var33 = $var126.$xRotO;
                        $var29 = $var33 + ($var126.$xRot - $var33) * $var65;
                        $var33 = $var126.$yRotO;
                        $var30 = $var33 + ($var126.$yRot - $var33) * $var65;
                        $var31 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        $var33 =  -$var30 * 0.01745329238474369 - 3.1415927410125732;
                        $var32 = cmu_MathHelper_cos($var33);
                        $var69 = cmu_MathHelper_sin($var33);
                        $var33 =  -$var29 * 0.01745329238474369;
                        $var74 = cmu_MathHelper_cos($var33);
                        $var33 = cmu_MathHelper_sin($var33);
                        $var34 = $var69 * $var74;
                        $var87 = $var32 * $var74;
                        $var36 = cmmg_SurvivalGameMode_getReachDistance($var66.$minecraft1.$gamemode);
                        $var71 = cmmm_Vec3D_add($var31, $var34 * $var36, $var33 * $var36, $var87 * $var36);
                        $e = $var66.$minecraft1;
                        $e.$selected = cmml_Level_clip($e.$level, $var31, $var71);
                        $e = $var66.$minecraft1.$selected;
                        if ($e !== null)
                            $var36 = cmmm_Vec3D_distance($e.$vec, cmmr_Renderer_getPlayerVector($var66, $var65));
                        $var115 = cmmr_Renderer_getPlayerVector($var66, $var65);
                        if ($var66.$minecraft1.$gamemode instanceof cmmg_CreativeGameMode)
                            $var36 = 32.0;
                        $var34 = $var34 * $var36;
                        $var33 = $var33 * $var36;
                        $var35 = $var87 * $var36;
                        $var112 = cmmm_Vec3D_add($var115, $var34, $var33, $var35);
                        $var66.$entity = null;
                        $var37 = cmml_BlockMap_getEntities($var66.$minecraft1.$level.$blockMap, $var126, cmmp_AABB_expand($var126.$bb, $var34, $var33, $var35));
                        $var35 = 0.0;
                        $var86 = 0;
                        while ($var86 < ju_ArrayList_size($var37)) {
                            $e = ju_ArrayList_get($var37, $var86);
                            if ($e.$isPickable()) {
                                $var3 = cmmp_AABB_clip(cmmp_AABB_grow($e.$bb, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612), $var115, $var112);
                                if ($var3 !== null) {
                                    $var33 = cmmm_Vec3D_distance($var115, $var3.$vec);
                                    if (!($var33 >= $var35 && $var35 !== 0.0)) {
                                        $var66.$entity = $e;
                                        $var35 = $var33;
                                    }
                                }
                            }
                            $var86 = $var86 + 1 | 0;
                        }
                        $var115 = $var66.$entity;
                        if ($var115 !== null) {
                            $e = $var66.$minecraft1;
                            if (!($e.$gamemode instanceof cmmg_CreativeGameMode))
                                $e.$selected = cmm_MovingObjectPosition__init_($var115);
                        }
                        $var77 = 0;
                        if ($var77 >= 2) {
                            olo_GL11_glColorMask(1, 1, 1, 0);
                            $e = $var66.$minecraft1;
                            $var3 = $e.$hud;
                            $var81 = $e.$currentScreen === null ? 0 : 1;
                            $ptr = 14;
                            continue main;
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            if ($var77)
                                olo_GL11_glColorMask(1, 0, 0, 0);
                            else
                                olo_GL11_glColorMask(0, 1, 1, 0);
                        }
                        $e = $var66.$minecraft1;
                        $var126 = $e.$player;
                        $var119 = $e.$level;
                        $var89 = $e.$levelRenderer;
                        $var93 = $e.$particleManager;
                        olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                        $e = $var66.$minecraft1;
                        $var26 = $e.$level;
                        $var3 = $e.$player;
                        $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                        $var81 = $var26.$skyColor;
                        $var34 = ($var81 >> 16 & 255) / 255.0;
                        $var117 = ($var81 >> 8 & 255) / 255.0;
                        $var35 = ($var81 & 255) / 255.0;
                        $var81 = $var26.$fogColor;
                        $var87 = ($var81 >> 16 & 255) / 255.0;
                        $var66.$fogRed = $var87;
                        $var124 = ($var81 >> 8 & 255) / 255.0;
                        $var66.$fogBlue = $var124;
                        $var29 = ($var81 & 255) / 255.0;
                        $var66.$fogGreen = $var29;
                        $var34 = $var87 + ($var34 - $var87) * $var33;
                        $var66.$fogRed = $var34;
                        $var87 = $var124 + ($var117 - $var124) * $var33;
                        $var66.$fogBlue = $var87;
                        $var33 = $var29 + ($var35 - $var29) * $var33;
                        $var66.$fogGreen = $var33;
                        $var35 = $var66.$fogColorMultiplier;
                        $var66.$fogRed = $var34 * $var35;
                        $var66.$fogBlue = $var87 * $var35;
                        $var66.$fogGreen = $var33 * $var35;
                        cmmlt_Block_$callClinit();
                        $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                        if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                            $e = $var115.$getLiquidType();
                            if ($e === cmmll_LiquidType_WATER) {
                                $var66.$fogRed = 0.019999999552965164;
                                $var66.$fogBlue = 0.019999999552965164;
                                $var66.$fogGreen = 0.20000000298023224;
                            } else if ($e === cmmll_LiquidType_LAVA) {
                                $var66.$fogRed = 0.6000000238418579;
                                $var66.$fogBlue = 0.10000000149011612;
                                $var66.$fogGreen = 0.0;
                            }
                        }
                        if ($var66.$minecraft1.$settings.$anaglyph) {
                            $var33 = $var66.$fogRed * 30.0;
                            $var34 = $var66.$fogBlue;
                            $var35 = $var33 + $var34 * 59.0;
                            $var87 = $var66.$fogGreen;
                            $var35 = ($var35 + $var87 * 11.0) / 100.0;
                            $var34 = ($var33 + $var34 * 70.0) / 100.0;
                            $var33 = ($var33 + $var87 * 70.0) / 100.0;
                            $var66.$fogRed = $var35;
                            $var66.$fogBlue = $var34;
                            $var66.$fogGreen = $var33;
                        }
                        olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                        olo_GL11_glClear(16640);
                        $var66.$fogColorMultiplier = 1.0;
                        olo_GL11_glEnable(2884);
                        $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                        olo_GL11_glMatrixMode(5889);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                        $e = $var66.$minecraft1;
                        $var116 = $e.$player;
                        $var35 = 70.0;
                        if ($var116.$health <= 0)
                            $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                        olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                        olo_GL11_glMatrixMode(5888);
                        olo_GL11_glLoadIdentity();
                        if ($var66.$minecraft1.$settings.$anaglyph)
                            olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                        cmmr_Renderer_hurtEffect($var66, $var65);
                        if ($var66.$minecraft1.$settings.$viewBobbing)
                            cmmr_Renderer_applyBobbing($var66, $var65);
                        $e = $var66.$minecraft1.$player;
                        olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                        $var33 = $e.$xRotO;
                        olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                        $var33 = $e.$yRotO;
                        olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                        $var33 = $e.$xo;
                        $var33 = $var33 + ($e.$x - $var33) * $var65;
                        $var34 = $e.$yo;
                        $var34 = $var34 + ($e.$y - $var34) * $var65;
                        $var35 = $e.$zo;
                        olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                        $var76 = cmmr_FrustrumImpl_update();
                        $var101 = $var66.$minecraft1.$levelRenderer;
                        $var98 = 0;
                        while (true) {
                            var$48 = $var101.$chunkCache.data;
                            if ($var98 >= var$48.length)
                                break;
                            cmmr_Chunk_clip(var$48[$var98], $var76);
                            $var98 = $var98 + 1 | 0;
                        }
                        $var3 = $var66.$minecraft1.$levelRenderer;
                        ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                        $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                        $var86 = ju_ArrayList_size($var3.$chunks);
                        if ($var86 > 3)
                            $var86 = 3;
                        $var104 = 0;
                        while ($var104 < $var86) {
                            $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                            cmmr_Chunk_update($e);
                            $e.$loaded = 0;
                            $var104 = $var104 + 1 | 0;
                        }
                        cmmr_Renderer_updateFog($var66);
                        olo_GL11_glEnable(2912);
                        $var81 = 0;
                        $ptr = 15;
                        continue main;
                    }
                }
                if (!$this.$settings.$limitFramerate)
                    continue;
                try {
                    var$8 = Long_fromInt(5);
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
            return;
        case 11:
            jl_Thread_yield();
            if ($rt_suspending()) {
                break main;
            }
            $ptr = 12;
        case 12:
            olo_Display_update();
            if ($rt_suspending()) {
                break main;
            }
            d: while (true) {
                if ($this.$settings.$limitFramerate) {
                    try {
                        var$8 = Long_fromInt(5);
                        $ptr = 10;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                cmm_Minecraft_checkGLError($rt_s(38));
                $var15 = $var15 + 1 | 0;
                while (true) {
                    var$8 = jl_System_currentTimeMillis();
                    $var18 = Long_add($var13, Long_fromInt(1000));
                    if (Long_lt(var$8, $var18))
                        break;
                    cmmr_Chunk_$callClinit();
                    $var81 = cmmr_Chunk_chunkUpdates;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0($e, $var15), $rt_s(39)), $var81), $rt_s(40));
                    $this.$debug = jl_StringBuilder_toString($e);
                    cmmr_Chunk_chunkUpdates = 0;
                    $var15 = 0;
                    $var13 = $var18;
                }
                while (true) {
                    if (!$this.$running)
                        break d;
                    if (!$this.$waiting)
                        break;
                    try {
                        var$8 = Long_fromInt(100);
                        $ptr = 8;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    $e.$printStackTrace();
                }
                if (olo_Display_isCloseRequested())
                    $this.$running = 0;
                $var63 = $this.$timer;
                var$8 = jl_System_currentTimeMillis();
                $var18 = Long_sub(var$8, $var63.$lastSysClock);
                $var20 = Long_div(jl_System_nanoTime(), Long_fromInt(1000000));
                if (Long_gt($var18, Long_fromInt(1000))) {
                    $var24 = Long_toNumber($var18) / Long_toNumber(Long_sub($var20, $var63.$lastHRClock));
                    $var24_0 = $var63.$adjustment;
                    $var63.$adjustment = $var24_0 + ($var24 - $var24_0) * 0.20000000298023224;
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                if (Long_lt($var18, Long_ZERO)) {
                    $var63.$lastSysClock = var$8;
                    $var63.$lastHRClock = $var20;
                }
                $var24 = Long_toNumber($var20) / 1000.0;
                $var24_0 = ($var24 - $var63.$lastHR) * $var63.$adjustment;
                $var63.$lastHR = $var24;
                if ($var24_0 < 0.0)
                    $var24_0 = 0.0;
                if ($var24_0 > 1.0)
                    $var24_0 = 1.0;
                $var33 = $var63.$elapsedDelta + $var24_0 * $var63.$speed * $var63.$tps;
                $var63.$elapsedDelta = $var33;
                $var81 = $var33 | 0;
                $var63.$elapsedTicks = $var81;
                if ($var81 > 100)
                    $var63.$elapsedTicks = 100;
                $var33 = $var33 - $var63.$elapsedTicks;
                $var63.$elapsedDelta = $var33;
                $var63.$delta = $var33;
                $var64 = 0;
                if ($var64 < $this.$timer.$elapsedTicks) {
                    $this.$ticks = $this.$ticks + 1 | 0;
                    $ptr = 9;
                    continue main;
                }
                cmm_Minecraft_checkGLError($rt_s(37));
                olo_GL11_glEnable(3553);
                if ($this.$online)
                    continue;
                cmmg_SurvivalGameMode_applyCracks($this.$gamemode, $this.$timer.$delta);
                $var65 = $this.$timer.$delta;
                $var66 = $this.$renderer;
                if ($var66.$displayActive && !olo_Display_isActive())
                    cmm_Minecraft_pause($var66.$minecraft1);
                $var66.$displayActive = olo_Display_isActive();
                $e = $var66.$minecraft1;
                if ($e.$hasMouse) {
                    $var81 = 0;
                    $var86 = 0;
                    if (!$e.$levelLoaded) {
                        $var81 = oli_Mouse_getDX();
                        $var86 = oli_Mouse_getDY();
                    }
                    $var91 = 1;
                    $e = $var66.$minecraft1;
                    if ($e.$settings.$invertMouse)
                        $var91 = (-1);
                    cmm_Entity_turn($e.$player, $var81, $rt_imul($var86, $var91));
                }
                $e = $var66.$minecraft1;
                if ($e.$online)
                    continue;
                else {
                    $var81 = $e.$width * 240 | 0;
                    $var86 = $e.$height;
                    $var81 = $var81 / $var86 | 0;
                    $var86 = ($var86 * 240 | 0) / $var86 | 0;
                    $var94 = $rt_imul(oli_Mouse_getX(), $var81) / $var66.$minecraft1.$width | 0;
                    $var81 = $rt_imul(oli_Mouse_getY(), $var86);
                    $e = $var66.$minecraft1;
                    $var83 = $e.$height;
                    $var70 = ($var86 - ($var81 / $var83 | 0) | 0) - 1 | 0;
                    if ($e.$level === null) {
                        olo_GL11_glViewport(0, 0, $e.$width, $var83);
                        olo_GL11_glClearColor(0.0, 0.0, 0.0, 0.0);
                        olo_GL11_glClear(16640);
                        olo_GL11_glMatrixMode(5889);
                        olo_GL11_glLoadIdentity();
                        olo_GL11_glMatrixMode(5888);
                        olo_GL11_glLoadIdentity();
                        cmmr_Renderer_enableGuiMode($var66);
                        $e = $var66.$minecraft1.$currentScreen;
                        if ($e === null) {
                            $ptr = 11;
                            continue main;
                        }
                        $ptr = 13;
                        continue main;
                    }
                    $var126 = $e.$player;
                    $var33 = $var126.$xRotO;
                    $var29 = $var33 + ($var126.$xRot - $var33) * $var65;
                    $var33 = $var126.$yRotO;
                    $var30 = $var33 + ($var126.$yRot - $var33) * $var65;
                    $var31 = cmmr_Renderer_getPlayerVector($var66, $var65);
                    $var33 =  -$var30 * 0.01745329238474369 - 3.1415927410125732;
                    $var32 = cmu_MathHelper_cos($var33);
                    $var69 = cmu_MathHelper_sin($var33);
                    $var33 =  -$var29 * 0.01745329238474369;
                    $var74 = cmu_MathHelper_cos($var33);
                    $var33 = cmu_MathHelper_sin($var33);
                    $var34 = $var69 * $var74;
                    $var87 = $var32 * $var74;
                    $var36 = cmmg_SurvivalGameMode_getReachDistance($var66.$minecraft1.$gamemode);
                    $var71 = cmmm_Vec3D_add($var31, $var34 * $var36, $var33 * $var36, $var87 * $var36);
                    $e = $var66.$minecraft1;
                    $e.$selected = cmml_Level_clip($e.$level, $var31, $var71);
                    $e = $var66.$minecraft1.$selected;
                    if ($e !== null)
                        $var36 = cmmm_Vec3D_distance($e.$vec, cmmr_Renderer_getPlayerVector($var66, $var65));
                    $var115 = cmmr_Renderer_getPlayerVector($var66, $var65);
                    if ($var66.$minecraft1.$gamemode instanceof cmmg_CreativeGameMode)
                        $var36 = 32.0;
                    $var34 = $var34 * $var36;
                    $var33 = $var33 * $var36;
                    $var35 = $var87 * $var36;
                    $var112 = cmmm_Vec3D_add($var115, $var34, $var33, $var35);
                    $var66.$entity = null;
                    $var37 = cmml_BlockMap_getEntities($var66.$minecraft1.$level.$blockMap, $var126, cmmp_AABB_expand($var126.$bb, $var34, $var33, $var35));
                    $var35 = 0.0;
                    $var86 = 0;
                    while ($var86 < ju_ArrayList_size($var37)) {
                        $e = ju_ArrayList_get($var37, $var86);
                        if ($e.$isPickable()) {
                            $var3 = cmmp_AABB_clip(cmmp_AABB_grow($e.$bb, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612), $var115, $var112);
                            if ($var3 !== null) {
                                $var33 = cmmm_Vec3D_distance($var115, $var3.$vec);
                                if (!($var33 >= $var35 && $var35 !== 0.0)) {
                                    $var66.$entity = $e;
                                    $var35 = $var33;
                                }
                            }
                        }
                        $var86 = $var86 + 1 | 0;
                    }
                    $var115 = $var66.$entity;
                    if ($var115 !== null) {
                        $e = $var66.$minecraft1;
                        if (!($e.$gamemode instanceof cmmg_CreativeGameMode))
                            $e.$selected = cmm_MovingObjectPosition__init_($var115);
                    }
                    $var77 = 0;
                    if ($var77 >= 2) {
                        olo_GL11_glColorMask(1, 1, 1, 0);
                        $e = $var66.$minecraft1;
                        $var3 = $e.$hud;
                        $var81 = $e.$currentScreen === null ? 0 : 1;
                        $ptr = 14;
                        continue main;
                    }
                    if ($var66.$minecraft1.$settings.$anaglyph) {
                        if ($var77)
                            olo_GL11_glColorMask(1, 0, 0, 0);
                        else
                            olo_GL11_glColorMask(0, 1, 1, 0);
                    }
                    $e = $var66.$minecraft1;
                    $var126 = $e.$player;
                    $var119 = $e.$level;
                    $var89 = $e.$levelRenderer;
                    $var93 = $e.$particleManager;
                    olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                    $e = $var66.$minecraft1;
                    $var26 = $e.$level;
                    $var3 = $e.$player;
                    $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                    $var81 = $var26.$skyColor;
                    $var34 = ($var81 >> 16 & 255) / 255.0;
                    $var117 = ($var81 >> 8 & 255) / 255.0;
                    $var35 = ($var81 & 255) / 255.0;
                    $var81 = $var26.$fogColor;
                    $var87 = ($var81 >> 16 & 255) / 255.0;
                    $var66.$fogRed = $var87;
                    $var124 = ($var81 >> 8 & 255) / 255.0;
                    $var66.$fogBlue = $var124;
                    $var29 = ($var81 & 255) / 255.0;
                    $var66.$fogGreen = $var29;
                    $var34 = $var87 + ($var34 - $var87) * $var33;
                    $var66.$fogRed = $var34;
                    $var87 = $var124 + ($var117 - $var124) * $var33;
                    $var66.$fogBlue = $var87;
                    $var33 = $var29 + ($var35 - $var29) * $var33;
                    $var66.$fogGreen = $var33;
                    $var35 = $var66.$fogColorMultiplier;
                    $var66.$fogRed = $var34 * $var35;
                    $var66.$fogBlue = $var87 * $var35;
                    $var66.$fogGreen = $var33 * $var35;
                    cmmlt_Block_$callClinit();
                    $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                    if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                        $e = $var115.$getLiquidType();
                        if ($e === cmmll_LiquidType_WATER) {
                            $var66.$fogRed = 0.019999999552965164;
                            $var66.$fogBlue = 0.019999999552965164;
                            $var66.$fogGreen = 0.20000000298023224;
                        } else if ($e === cmmll_LiquidType_LAVA) {
                            $var66.$fogRed = 0.6000000238418579;
                            $var66.$fogBlue = 0.10000000149011612;
                            $var66.$fogGreen = 0.0;
                        }
                    }
                    if ($var66.$minecraft1.$settings.$anaglyph) {
                        $var33 = $var66.$fogRed * 30.0;
                        $var34 = $var66.$fogBlue;
                        $var35 = $var33 + $var34 * 59.0;
                        $var87 = $var66.$fogGreen;
                        $var35 = ($var35 + $var87 * 11.0) / 100.0;
                        $var34 = ($var33 + $var34 * 70.0) / 100.0;
                        $var33 = ($var33 + $var87 * 70.0) / 100.0;
                        $var66.$fogRed = $var35;
                        $var66.$fogBlue = $var34;
                        $var66.$fogGreen = $var33;
                    }
                    olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                    olo_GL11_glClear(16640);
                    $var66.$fogColorMultiplier = 1.0;
                    olo_GL11_glEnable(2884);
                    $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                    olo_GL11_glMatrixMode(5889);
                    olo_GL11_glLoadIdentity();
                    if ($var66.$minecraft1.$settings.$anaglyph)
                        olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                    $e = $var66.$minecraft1;
                    $var116 = $e.$player;
                    $var35 = 70.0;
                    if ($var116.$health <= 0)
                        $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                    olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                    olo_GL11_glMatrixMode(5888);
                    olo_GL11_glLoadIdentity();
                    if ($var66.$minecraft1.$settings.$anaglyph)
                        olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                    cmmr_Renderer_hurtEffect($var66, $var65);
                    if ($var66.$minecraft1.$settings.$viewBobbing)
                        cmmr_Renderer_applyBobbing($var66, $var65);
                    $e = $var66.$minecraft1.$player;
                    olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                    $var33 = $e.$xRotO;
                    olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                    $var33 = $e.$yRotO;
                    olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                    $var33 = $e.$xo;
                    $var33 = $var33 + ($e.$x - $var33) * $var65;
                    $var34 = $e.$yo;
                    $var34 = $var34 + ($e.$y - $var34) * $var65;
                    $var35 = $e.$zo;
                    olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                    $var76 = cmmr_FrustrumImpl_update();
                    $var101 = $var66.$minecraft1.$levelRenderer;
                    $var98 = 0;
                    while (true) {
                        var$48 = $var101.$chunkCache.data;
                        if ($var98 >= var$48.length)
                            break;
                        cmmr_Chunk_clip(var$48[$var98], $var76);
                        $var98 = $var98 + 1 | 0;
                    }
                    $var3 = $var66.$minecraft1.$levelRenderer;
                    ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                    $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                    $var86 = ju_ArrayList_size($var3.$chunks);
                    if ($var86 > 3)
                        $var86 = 3;
                    $var104 = 0;
                    while ($var104 < $var86) {
                        $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                        cmmr_Chunk_update($e);
                        $e.$loaded = 0;
                        $var104 = $var104 + 1 | 0;
                    }
                    cmmr_Renderer_updateFog($var66);
                    olo_GL11_glEnable(2912);
                    $var81 = 0;
                    $ptr = 15;
                    continue main;
                }
            }
            return;
        case 13:
            $e.$render($var94, $var70);
            if ($rt_suspending()) {
                break main;
            }
            $ptr = 11;
            continue main;
        case 14:
            cmmg_HUDScreen_render($var3, $var65, $var81, $var94, $var70);
            if ($rt_suspending()) {
                break main;
            }
            $e = $var66.$minecraft1.$currentScreen;
            if ($e === null) {
                $ptr = 11;
                continue main;
            }
            $ptr = 13;
            continue main;
        case 15:
            a: {
                cmmr_LevelRenderer_sortChunks($var89, $var126, $var81);
                if ($rt_suspending()) {
                    break main;
                }
                if (cmml_Level_isSolid($var119, $var126.$x, $var126.$y, $var126.$z, 0.10000000149011612)) {
                    $var120 = $var126.$x | 0;
                    $var83 = $var126.$y | 0;
                    $var110 = $var126.$z | 0;
                    $var122 = $var120 - 1 | 0;
                    $var86 = $var120 + 1 | 0;
                    $var125 = $var83 - 1 | 0;
                    $var83 = $var83 + 1 | 0;
                    $var120 = $var110 - 1 | 0;
                    $var91 = $var110 + 1 | 0;
                    while (true) {
                        if ($var122 > $var86)
                            break a;
                        $var125_0 = $var125;
                        while ($var125_0 <= $var83) {
                            $var38 = $var120;
                            while ($var38 <= $var91) {
                                $var81 = cmml_Level_getTile($var89.$level0, $var122, $var125_0, $var38);
                                if ($var81 && cmmlt_Block_blocks.data[$var81].$isSolid0()) {
                                    olo_GL11_glColor4f(0.20000000298023224, 0.20000000298023224, 0.20000000298023224, 1.0);
                                    olo_GL11_glDepthFunc(513);
                                    cmmr_ShapeRenderer_$callClinit();
                                    $var115 = cmmr_ShapeRenderer_instance;
                                    cmmr_ShapeRenderer_begin($var115);
                                    $var114 = 0;
                                    while ($var114 < 6) {
                                        cmmlt_Block_blocks.data[$var81].$renderInside($var115, $var122, $var125_0, $var38, $var114);
                                        $var114 = $var114 + 1 | 0;
                                    }
                                    cmmr_ShapeRenderer_end($var115);
                                    olo_GL11_glCullFace(1028);
                                    cmmr_ShapeRenderer_begin($var115);
                                    $var110 = 0;
                                    while ($var110 < 6) {
                                        cmmlt_Block_blocks.data[$var81].$renderInside($var115, $var122, $var125_0, $var38, $var110);
                                        $var110 = $var110 + 1 | 0;
                                    }
                                    cmmr_ShapeRenderer_end($var115);
                                    olo_GL11_glCullFace(1029);
                                    olo_GL11_glDepthFunc(515);
                                }
                                $var38 = $var38 + 1 | 0;
                            }
                            $var125_0 = $var125_0 + 1 | 0;
                        }
                        $var122 = $var122 + 1 | 0;
                    }
                }
            }
            cmmr_Renderer_setLighting($var66, 1);
            $var103 = cmmr_Renderer_getPlayerVector($var66, $var65);
            $e = $var89.$level0.$blockMap;
            $var3 = $var89.$textureManager0;
            $ptr = 16;
        case 16:
            cmml_BlockMap_render($e, $var103, $var76, $var3, $var65);
            if ($rt_suspending()) {
                break main;
            }
            cmmr_Renderer_setLighting($var66, 0);
            cmmr_Renderer_updateFog($var66);
            $var33 =  -cmu_MathHelper_cos($var126.$yRot * 3.1415927410125732 / 180.0);
            $var34 =  -cmu_MathHelper_sin($var126.$yRot * 3.1415927410125732 / 180.0);
            $var35 =  -$var34 * cmu_MathHelper_sin($var126.$xRot * 3.1415927410125732 / 180.0);
            $var87 = $var33 * cmu_MathHelper_sin($var126.$xRot * 3.1415927410125732 / 180.0);
            $var124 = cmu_MathHelper_cos($var126.$xRot * 3.1415927410125732 / 180.0);
            $var83 = 0;
            while (true) {
                if ($var83 >= 2) {
                    $var81 = 3553;
                    $e = $var89.$textureManager0;
                    $var3 = $rt_s(41);
                    $ptr = 17;
                    continue main;
                }
                if (ju_ArrayList_size($var93.$particles.data[$var83])) {
                    if (!$var83) {
                        $e = $var93.$textureManager1;
                        $var3 = $rt_s(42);
                        $ptr = 19;
                        continue main;
                    }
                    if ($var83 == 1)
                        break;
                    olo_GL11_glBindTexture(3553, 0);
                    cmmr_ShapeRenderer_$callClinit();
                    $var121 = cmmr_ShapeRenderer_instance;
                    cmmr_ShapeRenderer_begin($var121);
                    $var120 = 0;
                    while ($var120 < ju_ArrayList_size($var93.$particles.data[$var83])) {
                        (ju_ArrayList_get($var93.$particles.data[$var83], $var120)).$render2($var121, $var65, $var33, $var124, $var34, $var35, $var87);
                        $var120 = $var120 + 1 | 0;
                    }
                    cmmr_ShapeRenderer_end($var121);
                }
                $var83 = $var83 + 1 | 0;
            }
            $e = $var93.$textureManager1;
            $var3 = $rt_s(43);
            $ptr = 20;
            continue main;
        case 17:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var86 = $tmp;
            olo_GL11_glBindTexture($var81, $var86);
            olo_GL11_glEnable(3553);
            olo_GL11_glCallList($var89.$listId);
            cmmr_Renderer_updateFog($var66);
            $var81 = 3553;
            $e = $var89.$textureManager0;
            $var3 = $rt_s(44);
            $ptr = 18;
        case 18:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var86 = $tmp;
            olo_GL11_glBindTexture($var81, $var86);
            olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
            $e = $var89.$level0;
            $var81 = $e.$cloudColor;
            $var33 = ($var81 >> 16 & 255) / 255.0;
            $var34 = ($var81 >> 8 & 255) / 255.0;
            $var35 = ($var81 & 255) / 255.0;
            if ($var89.$minecraft3.$settings.$anaglyph) {
                $var87 = $var33 * 30.0;
                $var33 = ($var87 + $var34 * 59.0 + $var35 * 11.0) / 100.0;
                $var34 = ($var87 + $var34 * 70.0) / 100.0;
                $var35 = ($var87 + $var35 * 70.0) / 100.0;
            }
            cmmr_ShapeRenderer_$callClinit();
            $var115 = cmmr_ShapeRenderer_instance;
            $var124 = $e.$depth + 2 | 0;
            $var29 = ($var89.$ticks0 + $var65) * 4.8828125E-4 * 0.029999999329447746;
            cmmr_ShapeRenderer_begin($var115);
            cmmr_ShapeRenderer_color($var115, $var33, $var34, $var35);
            $var81 = (-2048);
            while ($var81 < ($var89.$level0.$width0 + 2048 | 0)) {
                $var125 = (-2048);
                while ($var125 < ($var89.$level0.$height0 + 2048 | 0)) {
                    $var33 = $var81;
                    $var125_0 = $var125 + 512 | 0;
                    $var34 = $var125_0;
                    $var35 = $var33 * 4.8828125E-4 + $var29;
                    $var30 = $var34 * 4.8828125E-4;
                    cmmr_ShapeRenderer_vertexUV($var115, $var33, $var124, $var34, $var35, $var30);
                    $var92 = $var81 + 512 | 0;
                    $var32 = $var92 * 4.8828125E-4 + $var29;
                    cmmr_ShapeRenderer_vertexUV($var115, $var92, $var124, $var34, $var32, $var30);
                    $var69 = $var125;
                    $var74 = $var69 * 4.8828125E-4;
                    cmmr_ShapeRenderer_vertexUV($var115, $var92, $var124, $var69, $var32, $var74);
                    cmmr_ShapeRenderer_vertexUV($var115, $var33, $var124, $var69, $var35, $var74);
                    cmmr_ShapeRenderer_vertexUV($var115, $var33, $var124, $var69, $var35, $var74);
                    cmmr_ShapeRenderer_vertexUV($var115, $var92, $var124, $var69, $var32, $var74);
                    cmmr_ShapeRenderer_vertexUV($var115, $var92, $var124, $var34, $var32, $var30);
                    cmmr_ShapeRenderer_vertexUV($var115, $var33, $var124, $var34, $var35, $var30);
                    $var125 = $var125_0;
                }
                $var81 = $var81 + 512 | 0;
            }
            cmmr_ShapeRenderer_end($var115);
            olo_GL11_glDisable(3553);
            cmmr_ShapeRenderer_begin($var115);
            $var81 = $var89.$level0.$skyColor;
            $var33 = ($var81 >> 16 & 255) / 255.0;
            $var34 = ($var81 >> 8 & 255) / 255.0;
            $var35 = ($var81 & 255) / 255.0;
            if ($var89.$minecraft3.$settings.$anaglyph) {
                $var87 = $var33 * 30.0;
                $var33 = ($var87 + $var34 * 59.0 + $var35 * 11.0) / 100.0;
                $var34 = ($var87 + $var34 * 70.0) / 100.0;
                $var35 = ($var87 + $var35 * 70.0) / 100.0;
            }
            cmmr_ShapeRenderer_color($var115, $var33, $var34, $var35);
            $var33 = $var89.$level0.$depth + 10 | 0;
            $var125 = (-2048);
            while ($var125 < ($var89.$level0.$width0 + 2048 | 0)) {
                $var68 = (-2048);
                while ($var68 < ($var89.$level0.$height0 + 2048 | 0)) {
                    $var34 = $var125;
                    $var35 = $var68;
                    cmmr_ShapeRenderer_vertex($var115, $var34, $var33, $var35);
                    $var87 = $var125 + 512 | 0;
                    cmmr_ShapeRenderer_vertex($var115, $var87, $var33, $var35);
                    $var68 = $var68 + 512 | 0;
                    $var35 = $var68;
                    cmmr_ShapeRenderer_vertex($var115, $var87, $var33, $var35);
                    cmmr_ShapeRenderer_vertex($var115, $var34, $var33, $var35);
                }
                $var125 = $var125 + 512 | 0;
            }
            cmmr_ShapeRenderer_end($var115);
            olo_GL11_glEnable(3553);
            cmmr_Renderer_updateFog($var66);
            if ($var66.$minecraft1.$selected !== null) {
                olo_GL11_glDisable(3008);
                $var10001 = $var66.$minecraft1.$selected;
                cmmp_Inventory_getSelected($var126.$inventory);
                $var113 = cmmr_ShapeRenderer_instance;
                olo_GL11_glEnable(3042);
                olo_GL11_glEnable(3008);
                olo_GL11_glBlendFunc(770, 1);
                olo_GL11_glColor4f(1.0, 1.0, 1.0, (cmu_MathHelper_sin(Long_toNumber(jl_System_currentTimeMillis()) / 100.0) * 0.20000000298023224 + 0.4000000059604645) * 0.5);
                if ($var89.$cracks > 0.0) {
                    olo_GL11_glBlendFunc(774, 768);
                    $e = $var89.$textureManager0;
                    $var3 = $rt_s(43);
                    $ptr = 23;
                    continue main;
                }
                olo_GL11_glDisable(3042);
                olo_GL11_glDisable(3008);
                $e = $var66.$minecraft1.$selected;
                cmmp_Inventory_getSelected($var126.$inventory);
                olo_GL11_glEnable(3042);
                olo_GL11_glBlendFunc(770, 771);
                olo_GL11_glColor4f(0.0, 0.0, 0.0, 0.4000000059604645);
                olo_GL11_glLineWidth(2.0);
                olo_GL11_glDisable(3553);
                olo_GL11_glDepthMask(0);
                $var81 = cmml_Level_getTile($var89.$level0, $e.$x0, $e.$y0, $e.$z0);
                if ($var81 > 0) {
                    $var111 = cmmp_AABB_grow(cmmlt_Block_getSelectionBox(cmmlt_Block_blocks.data[$var81], $e.$x0, $e.$y0, $e.$z0), 0.0020000000949949026, 0.0020000000949949026, 0.0020000000949949026);
                    olo_GL11_glBegin(3);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z1);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z1);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z00);
                    olo_GL11_glEnd();
                    olo_GL11_glBegin(3);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z1);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z1);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z00);
                    olo_GL11_glEnd();
                    olo_GL11_glBegin(1);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z00);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z1);
                    olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z1);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z1);
                    olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z1);
                    olo_GL11_glEnd();
                }
                olo_GL11_glDepthMask(1);
                olo_GL11_glEnable(3553);
                olo_GL11_glDisable(3042);
                olo_GL11_glEnable(3008);
            }
            olo_GL11_glBlendFunc(770, 771);
            cmmr_Renderer_updateFog($var66);
            olo_GL11_glEnable(3553);
            olo_GL11_glEnable(3042);
            $var81 = 3553;
            $e = $var89.$textureManager0;
            $var3 = $rt_s(45);
            $ptr = 21;
            continue main;
        case 19:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var110 = $tmp;
            while ($var83 != 1) {
                olo_GL11_glBindTexture(3553, $var110);
                cmmr_ShapeRenderer_$callClinit();
                $var121 = cmmr_ShapeRenderer_instance;
                cmmr_ShapeRenderer_begin($var121);
                $var120 = 0;
                while ($var120 < ju_ArrayList_size($var93.$particles.data[$var83])) {
                    (ju_ArrayList_get($var93.$particles.data[$var83], $var120)).$render2($var121, $var65, $var33, $var124, $var34, $var35, $var87);
                    $var120 = $var120 + 1 | 0;
                }
                cmmr_ShapeRenderer_end($var121);
                while (true) {
                    $var83 = $var83 + 1 | 0;
                    if ($var83 >= 2) {
                        $var81 = 3553;
                        $e = $var89.$textureManager0;
                        $var3 = $rt_s(41);
                        $ptr = 17;
                        continue main;
                    }
                    if (!ju_ArrayList_size($var93.$particles.data[$var83]))
                        continue;
                    else
                        break;
                }
                $var110 = 0;
                if (!$var83) {
                    $e = $var93.$textureManager1;
                    $var3 = $rt_s(42);
                    continue main;
                }
            }
            $e = $var93.$textureManager1;
            $var3 = $rt_s(43);
            $ptr = 20;
        case 20:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var110 = $tmp;
            while (true) {
                olo_GL11_glBindTexture(3553, $var110);
                cmmr_ShapeRenderer_$callClinit();
                $var121 = cmmr_ShapeRenderer_instance;
                cmmr_ShapeRenderer_begin($var121);
                $var120 = 0;
                while ($var120 < ju_ArrayList_size($var93.$particles.data[$var83])) {
                    (ju_ArrayList_get($var93.$particles.data[$var83], $var120)).$render2($var121, $var65, $var33, $var124, $var34, $var35, $var87);
                    $var120 = $var120 + 1 | 0;
                }
                cmmr_ShapeRenderer_end($var121);
                while (true) {
                    $var83 = $var83 + 1 | 0;
                    if ($var83 >= 2) {
                        $var81 = 3553;
                        $e = $var89.$textureManager0;
                        $var3 = $rt_s(41);
                        $ptr = 17;
                        continue main;
                    }
                    if (!ju_ArrayList_size($var93.$particles.data[$var83]))
                        continue;
                    else
                        break;
                }
                $var110 = 0;
                if (!$var83) {
                    $e = $var93.$textureManager1;
                    $var3 = $rt_s(42);
                    $ptr = 19;
                    continue main;
                }
                if ($var83 == 1)
                    break;
            }
            $e = $var93.$textureManager1;
            $var3 = $rt_s(43);
            continue main;
        case 21:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var86 = $tmp;
            olo_GL11_glBindTexture($var81, $var86);
            olo_GL11_glCallList($var89.$listId + 1 | 0);
            olo_GL11_glDisable(3042);
            olo_GL11_glEnable(3042);
            olo_GL11_glColorMask(0, 0, 0, 0);
            $var81 = 1;
            $ptr = 22;
        case 22:
            $tmp = cmmr_LevelRenderer_sortChunks($var89, $var126, $var81);
            if ($rt_suspending()) {
                break main;
            }
            $var120 = $tmp;
            olo_GL11_glColorMask(1, 1, 1, 1);
            if ($var66.$minecraft1.$settings.$anaglyph) {
                if ($var77)
                    olo_GL11_glColorMask(1, 0, 0, 0);
                else
                    olo_GL11_glColorMask(0, 1, 1, 0);
            }
            if ($var120 > 0) {
                $var81 = 3553;
                $e = $var89.$textureManager0;
                $var3 = $rt_s(43);
                $ptr = 24;
                continue main;
            }
            olo_GL11_glDepthMask(1);
            olo_GL11_glDisable(3042);
            olo_GL11_glDisable(2912);
            $e = $var66.$minecraft1;
            if ($e.$raining) {
                $var3 = $e.$player;
                $var109 = $e.$level;
                $var86 = $var3.$x | 0;
                $var108 = $var3.$y | 0;
                $var114 = $var3.$z | 0;
                $var84 = cmmr_ShapeRenderer_instance;
                olo_GL11_glDisable(2884);
                olo_GL11_glNormal3f(0.0, 1.0, 0.0);
                olo_GL11_glEnable(3042);
                olo_GL11_glBlendFunc(770, 771);
                $var81 = 3553;
                $e = $var66.$minecraft1.$textureManager;
                $var115 = $rt_s(46);
                $ptr = 25;
                continue main;
            }
            $e = $var66.$entity;
            if ($e !== null)
                cmm_Entity_renderHover($e, $var66.$minecraft1.$textureManager, $var65);
            olo_GL11_glClear(256);
            olo_GL11_glLoadIdentity();
            if ($var66.$minecraft1.$settings.$anaglyph)
                olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
            cmmr_Renderer_hurtEffect($var66, $var65);
            if ($var66.$minecraft1.$settings.$viewBobbing)
                cmmr_Renderer_applyBobbing($var66, $var65);
            $var112 = $var66.$heldBlock;
            $var33 = $var112.$lastPos;
            $var33 = $var33 + ($var112.$pos - $var33) * $var65;
            $e = $var112.$minecraft2.$player;
            olo_GL11_glPushMatrix();
            $var34 = $e.$xRotO;
            olo_GL11_glRotatef($var34 + ($e.$xRot - $var34) * $var65, 1.0, 0.0, 0.0);
            $var34 = $e.$yRotO;
            olo_GL11_glRotatef($var34 + ($e.$yRot - $var34) * $var65, 0.0, 1.0, 0.0);
            cmmr_Renderer_setLighting($var112.$minecraft2.$renderer, 1);
            olo_GL11_glPopMatrix();
            olo_GL11_glPushMatrix();
            if ($var112.$moving) {
                $var34 = ($var112.$offset + $var65) / 7.0;
                $var35 = cmu_MathHelper_sin($var34 * 3.1415927410125732);
                olo_GL11_glTranslatef( -cmu_MathHelper_sin(cmu_MathHelper_sqrt($var34) * 3.1415927410125732) * 0.4000000059604645, cmu_MathHelper_sin(cmu_MathHelper_sqrt($var34) * 3.1415927410125732 * 2.0) * 0.20000000298023224,  -$var35 * 0.20000000298023224);
            }
            olo_GL11_glTranslatef(0.5600000023841858, (-0.5199999809265137) - (1.0 - $var33) * 0.6000000238418579, (-0.7199999690055847));
            olo_GL11_glRotatef(45.0, 0.0, 1.0, 0.0);
            olo_GL11_glEnable(2977);
            if ($var112.$moving) {
                $var33 = ($var112.$offset + $var65) / 7.0;
                $var34 = cmu_MathHelper_sin($var33 * $var33 * 3.1415927410125732);
                olo_GL11_glRotatef(cmu_MathHelper_sin(cmu_MathHelper_sqrt($var33) * 3.1415927410125732) * 80.0, 0.0, 1.0, 0.0);
                olo_GL11_glRotatef( -$var34 * 20.0, 1.0, 0.0, 0.0);
            }
            $var33 = cmml_Level_getBrightness($var112.$minecraft2.$level, $e.$x | 0, $e.$y | 0, $e.$z | 0);
            olo_GL11_glColor4f($var33, $var33, $var33, 1.0);
            $var123 = cmmr_ShapeRenderer_instance;
            if ($var112.$block === null) {
                $var3 = $var112.$minecraft2.$textureManager;
                $ptr = 26;
                continue main;
            }
            olo_GL11_glScalef(0.4000000059604645, 0.4000000059604645, 0.4000000059604645);
            olo_GL11_glTranslatef((-0.5), (-0.5), (-0.5));
            $var81 = 3553;
            $e = $var112.$minecraft2.$textureManager;
            $var3 = $rt_s(43);
            $ptr = 27;
            continue main;
        case 23:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var108 = $tmp;
            olo_GL11_glBindTexture(3553, $var108);
            olo_GL11_glColor4f(1.0, 1.0, 1.0, 0.5);
            olo_GL11_glPushMatrix();
            $var81 = cmml_Level_getTile($var89.$level0, $var10001.$x0, $var10001.$y0, $var10001.$z0);
            $var10000 = $var81 <= 0 ? null : cmmlt_Block_blocks.data[$var81];
            $var33 = ($var10000.$x10 + $var10000.$x2) / 2.0;
            $var34 = ($var10000.$y10 + $var10000.$y2) / 2.0;
            $var35 = ($var10000.$z10 + $var10000.$z2) / 2.0;
            olo_GL11_glTranslatef($var10001.$x0 + $var33, $var10001.$y0 + $var34, $var10001.$z0 + $var35);
            olo_GL11_glScalef(1.0099999904632568, 1.0099999904632568, 1.0099999904632568);
            olo_GL11_glTranslatef( -($var10001.$x0 + $var33),  -($var10001.$y0 + $var34),  -($var10001.$z0 + $var35));
            cmmr_ShapeRenderer_begin($var113);
            cmmr_ShapeRenderer_noColor($var113);
            olo_GL11_glDepthMask(0);
            $var81 = 0;
            while ($var81 < 6) {
                cmmlt_Block_renderSide($var10000, $var113, $var10001.$x0, $var10001.$y0, $var10001.$z0, $var81, 240 + ($var89.$cracks * 10.0 | 0) | 0);
                $var81 = $var81 + 1 | 0;
            }
            cmmr_ShapeRenderer_end($var113);
            olo_GL11_glDepthMask(1);
            olo_GL11_glPopMatrix();
            olo_GL11_glDisable(3042);
            olo_GL11_glDisable(3008);
            $e = $var66.$minecraft1.$selected;
            cmmp_Inventory_getSelected($var126.$inventory);
            olo_GL11_glEnable(3042);
            olo_GL11_glBlendFunc(770, 771);
            olo_GL11_glColor4f(0.0, 0.0, 0.0, 0.4000000059604645);
            olo_GL11_glLineWidth(2.0);
            olo_GL11_glDisable(3553);
            olo_GL11_glDepthMask(0);
            $var81 = cmml_Level_getTile($var89.$level0, $e.$x0, $e.$y0, $e.$z0);
            if ($var81 > 0) {
                $var111 = cmmp_AABB_grow(cmmlt_Block_getSelectionBox(cmmlt_Block_blocks.data[$var81], $e.$x0, $e.$y0, $e.$z0), 0.0020000000949949026, 0.0020000000949949026, 0.0020000000949949026);
                olo_GL11_glBegin(3);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z1);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z1);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z00);
                olo_GL11_glEnd();
                olo_GL11_glBegin(3);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z1);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z1);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z00);
                olo_GL11_glEnd();
                olo_GL11_glBegin(1);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z00);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y00, $var111.$z1);
                olo_GL11_glVertex3f($var111.$x1, $var111.$y1, $var111.$z1);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y00, $var111.$z1);
                olo_GL11_glVertex3f($var111.$x00, $var111.$y1, $var111.$z1);
                olo_GL11_glEnd();
            }
            olo_GL11_glDepthMask(1);
            olo_GL11_glEnable(3553);
            olo_GL11_glDisable(3042);
            olo_GL11_glEnable(3008);
            olo_GL11_glBlendFunc(770, 771);
            cmmr_Renderer_updateFog($var66);
            olo_GL11_glEnable(3553);
            olo_GL11_glEnable(3042);
            $var81 = 3553;
            $e = $var89.$textureManager0;
            $var3 = $rt_s(45);
            $ptr = 21;
            continue main;
        case 24:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var86 = $tmp;
            olo_GL11_glBindTexture($var81, $var86);
            olo_GL11_glCallLists($var89.$buffer2);
            olo_GL11_glDepthMask(1);
            olo_GL11_glDisable(3042);
            olo_GL11_glDisable(2912);
            $e = $var66.$minecraft1;
            if ($e.$raining) {
                $var3 = $e.$player;
                $var109 = $e.$level;
                $var86 = $var3.$x | 0;
                $var108 = $var3.$y | 0;
                $var114 = $var3.$z | 0;
                $var84 = cmmr_ShapeRenderer_instance;
                olo_GL11_glDisable(2884);
                olo_GL11_glNormal3f(0.0, 1.0, 0.0);
                olo_GL11_glEnable(3042);
                olo_GL11_glBlendFunc(770, 771);
                $var81 = 3553;
                $e = $var66.$minecraft1.$textureManager;
                $var115 = $rt_s(46);
                $ptr = 25;
                continue main;
            }
            $e = $var66.$entity;
            if ($e !== null)
                cmm_Entity_renderHover($e, $var66.$minecraft1.$textureManager, $var65);
            olo_GL11_glClear(256);
            olo_GL11_glLoadIdentity();
            if ($var66.$minecraft1.$settings.$anaglyph)
                olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
            cmmr_Renderer_hurtEffect($var66, $var65);
            if ($var66.$minecraft1.$settings.$viewBobbing)
                cmmr_Renderer_applyBobbing($var66, $var65);
            $var112 = $var66.$heldBlock;
            $var33 = $var112.$lastPos;
            $var33 = $var33 + ($var112.$pos - $var33) * $var65;
            $e = $var112.$minecraft2.$player;
            olo_GL11_glPushMatrix();
            $var34 = $e.$xRotO;
            olo_GL11_glRotatef($var34 + ($e.$xRot - $var34) * $var65, 1.0, 0.0, 0.0);
            $var34 = $e.$yRotO;
            olo_GL11_glRotatef($var34 + ($e.$yRot - $var34) * $var65, 0.0, 1.0, 0.0);
            cmmr_Renderer_setLighting($var112.$minecraft2.$renderer, 1);
            olo_GL11_glPopMatrix();
            olo_GL11_glPushMatrix();
            if ($var112.$moving) {
                $var34 = ($var112.$offset + $var65) / 7.0;
                $var35 = cmu_MathHelper_sin($var34 * 3.1415927410125732);
                olo_GL11_glTranslatef( -cmu_MathHelper_sin(cmu_MathHelper_sqrt($var34) * 3.1415927410125732) * 0.4000000059604645, cmu_MathHelper_sin(cmu_MathHelper_sqrt($var34) * 3.1415927410125732 * 2.0) * 0.20000000298023224,  -$var35 * 0.20000000298023224);
            }
            olo_GL11_glTranslatef(0.5600000023841858, (-0.5199999809265137) - (1.0 - $var33) * 0.6000000238418579, (-0.7199999690055847));
            olo_GL11_glRotatef(45.0, 0.0, 1.0, 0.0);
            olo_GL11_glEnable(2977);
            if ($var112.$moving) {
                $var33 = ($var112.$offset + $var65) / 7.0;
                $var34 = cmu_MathHelper_sin($var33 * $var33 * 3.1415927410125732);
                olo_GL11_glRotatef(cmu_MathHelper_sin(cmu_MathHelper_sqrt($var33) * 3.1415927410125732) * 80.0, 0.0, 1.0, 0.0);
                olo_GL11_glRotatef( -$var34 * 20.0, 1.0, 0.0, 0.0);
            }
            $var33 = cmml_Level_getBrightness($var112.$minecraft2.$level, $e.$x | 0, $e.$y | 0, $e.$z | 0);
            olo_GL11_glColor4f($var33, $var33, $var33, 1.0);
            $var123 = cmmr_ShapeRenderer_instance;
            if ($var112.$block === null) {
                $var3 = $var112.$minecraft2.$textureManager;
                $ptr = 26;
                continue main;
            }
            olo_GL11_glScalef(0.4000000059604645, 0.4000000059604645, 0.4000000059604645);
            olo_GL11_glTranslatef((-0.5), (-0.5), (-0.5));
            $var81 = 3553;
            $e = $var112.$minecraft2.$textureManager;
            $var3 = $rt_s(43);
            $ptr = 27;
            continue main;
        case 25:
            $tmp = cmmr_TextureManager_load($e, $var115);
            if ($rt_suspending()) {
                break main;
            }
            $var83 = $tmp;
            olo_GL11_glBindTexture($var81, $var83);
            $var110 = $var86 - 5 | 0;
            $var86 = $var86 + 5 | 0;
            $var83 = $var114 - 5 | 0;
            $var125 = $var114 + 5 | 0;
            $var120 = $var108 - 5 | 0;
            $var91 = $var108 + 5 | 0;
            while ($var110 <= $var86) {
                $var122 = $var83;
                while ($var122 <= $var125) {
                    $var81 = cmml_Level_getHighestTile($var109, $var110, $var122);
                    $var108 = $var120 < $var81 ? $var81 : $var120;
                    if ($var91 >= $var81)
                        $var81 = $var91;
                    if ($var108 != $var81) {
                        $var34 = (((($var66.$levelTicks + ($var110 * 3121 | 0) | 0) + $rt_imul($var122, 418711) | 0) % 32 | 0) + $var65) / 32.0;
                        $var29 = $var110;
                        $var124 = $var29 + 0.5 - $var3.$x;
                        $var30 = $var122;
                        $var33 = $var30 + 0.5 - $var3.$z;
                        $var92 = cmu_MathHelper_sqrt($var124 * $var124 + $var33 * $var33) / 5.0;
                        olo_GL11_glColor4f(1.0, 1.0, 1.0, (1.0 - $var92 * $var92) * 0.699999988079071);
                        cmmr_ShapeRenderer_begin($var84);
                        $var92 = $var108;
                        $var87 = $var92 * 2.0 / 8.0;
                        $var32 = $var34 * 2.0;
                        $var69 = $var87 + $var32;
                        cmmr_ShapeRenderer_vertexUV($var84, $var29, $var92, $var30, 0.0, $var69);
                        $var74 = $var110 + 1 | 0;
                        $var33 = $var122 + 1 | 0;
                        cmmr_ShapeRenderer_vertexUV($var84, $var74, $var92, $var33, 2.0, $var69);
                        $var34 = $var81;
                        $var87 = $var34 * 2.0 / 8.0 + $var32;
                        cmmr_ShapeRenderer_vertexUV($var84, $var74, $var34, $var33, 2.0, $var87);
                        cmmr_ShapeRenderer_vertexUV($var84, $var29, $var34, $var30, 0.0, $var87);
                        cmmr_ShapeRenderer_vertexUV($var84, $var29, $var92, $var33, 0.0, $var69);
                        cmmr_ShapeRenderer_vertexUV($var84, $var74, $var92, $var30, 2.0, $var69);
                        cmmr_ShapeRenderer_vertexUV($var84, $var74, $var34, $var30, 2.0, $var87);
                        cmmr_ShapeRenderer_vertexUV($var84, $var29, $var34, $var33, 0.0, $var87);
                        cmmr_ShapeRenderer_end($var84);
                    }
                    $var122 = $var122 + 1 | 0;
                }
                $var110 = $var110 + 1 | 0;
            }
            olo_GL11_glEnable(2884);
            olo_GL11_glDisable(3042);
            $e = $var66.$entity;
            if ($e !== null)
                cmm_Entity_renderHover($e, $var66.$minecraft1.$textureManager, $var65);
            olo_GL11_glClear(256);
            olo_GL11_glLoadIdentity();
            if ($var66.$minecraft1.$settings.$anaglyph)
                olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
            cmmr_Renderer_hurtEffect($var66, $var65);
            if ($var66.$minecraft1.$settings.$viewBobbing)
                cmmr_Renderer_applyBobbing($var66, $var65);
            $var112 = $var66.$heldBlock;
            $var33 = $var112.$lastPos;
            $var33 = $var33 + ($var112.$pos - $var33) * $var65;
            $e = $var112.$minecraft2.$player;
            olo_GL11_glPushMatrix();
            $var34 = $e.$xRotO;
            olo_GL11_glRotatef($var34 + ($e.$xRot - $var34) * $var65, 1.0, 0.0, 0.0);
            $var34 = $e.$yRotO;
            olo_GL11_glRotatef($var34 + ($e.$yRot - $var34) * $var65, 0.0, 1.0, 0.0);
            cmmr_Renderer_setLighting($var112.$minecraft2.$renderer, 1);
            olo_GL11_glPopMatrix();
            olo_GL11_glPushMatrix();
            if ($var112.$moving) {
                $var34 = ($var112.$offset + $var65) / 7.0;
                $var35 = cmu_MathHelper_sin($var34 * 3.1415927410125732);
                olo_GL11_glTranslatef( -cmu_MathHelper_sin(cmu_MathHelper_sqrt($var34) * 3.1415927410125732) * 0.4000000059604645, cmu_MathHelper_sin(cmu_MathHelper_sqrt($var34) * 3.1415927410125732 * 2.0) * 0.20000000298023224,  -$var35 * 0.20000000298023224);
            }
            olo_GL11_glTranslatef(0.5600000023841858, (-0.5199999809265137) - (1.0 - $var33) * 0.6000000238418579, (-0.7199999690055847));
            olo_GL11_glRotatef(45.0, 0.0, 1.0, 0.0);
            olo_GL11_glEnable(2977);
            if ($var112.$moving) {
                $var33 = ($var112.$offset + $var65) / 7.0;
                $var34 = cmu_MathHelper_sin($var33 * $var33 * 3.1415927410125732);
                olo_GL11_glRotatef(cmu_MathHelper_sin(cmu_MathHelper_sqrt($var33) * 3.1415927410125732) * 80.0, 0.0, 1.0, 0.0);
                olo_GL11_glRotatef( -$var34 * 20.0, 1.0, 0.0, 0.0);
            }
            $var33 = cmml_Level_getBrightness($var112.$minecraft2.$level, $e.$x | 0, $e.$y | 0, $e.$z | 0);
            olo_GL11_glColor4f($var33, $var33, $var33, 1.0);
            $var123 = cmmr_ShapeRenderer_instance;
            if ($var112.$block === null) {
                $var3 = $var112.$minecraft2.$textureManager;
                $ptr = 26;
                continue main;
            }
            olo_GL11_glScalef(0.4000000059604645, 0.4000000059604645, 0.4000000059604645);
            olo_GL11_glTranslatef((-0.5), (-0.5), (-0.5));
            $var81 = 3553;
            $e = $var112.$minecraft2.$textureManager;
            $var3 = $rt_s(43);
            $ptr = 27;
            continue main;
        case 26:
            cmmp_Player_bindTexture($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            olo_GL11_glScalef(1.0, (-1.0), (-1.0));
            olo_GL11_glTranslatef(0.0, 0.20000000298023224, 0.0);
            olo_GL11_glRotatef((-120.0), 0.0, 0.0, 1.0);
            olo_GL11_glScalef(1.0, 1.0, 1.0);
            $e = (cmmp_Player_getModel($var112.$minecraft2.$player)).$leftArm;
            if (!$e.$hasList)
                cmmm_ModelPart_generateList($e, 0.0625);
            olo_GL11_glCallList($e.$list);
            olo_GL11_glDisable(2977);
            olo_GL11_glPopMatrix();
            cmmr_Renderer_setLighting($var112.$minecraft2.$renderer, 0);
            if ($var66.$minecraft1.$settings.$anaglyph) {
                $var77 = $var77 + 1 | 0;
                if ($var77 < 2) {
                    if ($var66.$minecraft1.$settings.$anaglyph) {
                        if ($var77)
                            olo_GL11_glColorMask(1, 0, 0, 0);
                        else
                            olo_GL11_glColorMask(0, 1, 1, 0);
                    }
                    $e = $var66.$minecraft1;
                    $var126 = $e.$player;
                    $var119 = $e.$level;
                    $var89 = $e.$levelRenderer;
                    $var93 = $e.$particleManager;
                    olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                    $e = $var66.$minecraft1;
                    $var26 = $e.$level;
                    $var3 = $e.$player;
                    $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                    $var81 = $var26.$skyColor;
                    $var34 = ($var81 >> 16 & 255) / 255.0;
                    $var117 = ($var81 >> 8 & 255) / 255.0;
                    $var35 = ($var81 & 255) / 255.0;
                    $var81 = $var26.$fogColor;
                    $var87 = ($var81 >> 16 & 255) / 255.0;
                    $var66.$fogRed = $var87;
                    $var124 = ($var81 >> 8 & 255) / 255.0;
                    $var66.$fogBlue = $var124;
                    $var29 = ($var81 & 255) / 255.0;
                    $var66.$fogGreen = $var29;
                    $var34 = $var87 + ($var34 - $var87) * $var33;
                    $var66.$fogRed = $var34;
                    $var87 = $var124 + ($var117 - $var124) * $var33;
                    $var66.$fogBlue = $var87;
                    $var33 = $var29 + ($var35 - $var29) * $var33;
                    $var66.$fogGreen = $var33;
                    $var35 = $var66.$fogColorMultiplier;
                    $var66.$fogRed = $var34 * $var35;
                    $var66.$fogBlue = $var87 * $var35;
                    $var66.$fogGreen = $var33 * $var35;
                    cmmlt_Block_$callClinit();
                    $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                    if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                        $e = $var115.$getLiquidType();
                        if ($e === cmmll_LiquidType_WATER) {
                            $var66.$fogRed = 0.019999999552965164;
                            $var66.$fogBlue = 0.019999999552965164;
                            $var66.$fogGreen = 0.20000000298023224;
                        } else if ($e === cmmll_LiquidType_LAVA) {
                            $var66.$fogRed = 0.6000000238418579;
                            $var66.$fogBlue = 0.10000000149011612;
                            $var66.$fogGreen = 0.0;
                        }
                    }
                    if ($var66.$minecraft1.$settings.$anaglyph) {
                        $var33 = $var66.$fogRed * 30.0;
                        $var34 = $var66.$fogBlue;
                        $var35 = $var33 + $var34 * 59.0;
                        $var87 = $var66.$fogGreen;
                        $var35 = ($var35 + $var87 * 11.0) / 100.0;
                        $var34 = ($var33 + $var34 * 70.0) / 100.0;
                        $var33 = ($var33 + $var87 * 70.0) / 100.0;
                        $var66.$fogRed = $var35;
                        $var66.$fogBlue = $var34;
                        $var66.$fogGreen = $var33;
                    }
                    olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                    olo_GL11_glClear(16640);
                    $var66.$fogColorMultiplier = 1.0;
                    olo_GL11_glEnable(2884);
                    $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                    olo_GL11_glMatrixMode(5889);
                    olo_GL11_glLoadIdentity();
                    if ($var66.$minecraft1.$settings.$anaglyph)
                        olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                    $e = $var66.$minecraft1;
                    $var116 = $e.$player;
                    $var35 = 70.0;
                    if ($var116.$health <= 0)
                        $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                    olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                    olo_GL11_glMatrixMode(5888);
                    olo_GL11_glLoadIdentity();
                    if ($var66.$minecraft1.$settings.$anaglyph)
                        olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                    cmmr_Renderer_hurtEffect($var66, $var65);
                    if ($var66.$minecraft1.$settings.$viewBobbing)
                        cmmr_Renderer_applyBobbing($var66, $var65);
                    $e = $var66.$minecraft1.$player;
                    olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                    $var33 = $e.$xRotO;
                    olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                    $var33 = $e.$yRotO;
                    olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                    $var33 = $e.$xo;
                    $var33 = $var33 + ($e.$x - $var33) * $var65;
                    $var34 = $e.$yo;
                    $var34 = $var34 + ($e.$y - $var34) * $var65;
                    $var35 = $e.$zo;
                    olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                    $var76 = cmmr_FrustrumImpl_update();
                    $var101 = $var66.$minecraft1.$levelRenderer;
                    $var98 = 0;
                    while (true) {
                        var$48 = $var101.$chunkCache.data;
                        if ($var98 >= var$48.length)
                            break;
                        cmmr_Chunk_clip(var$48[$var98], $var76);
                        $var98 = $var98 + 1 | 0;
                    }
                    $var3 = $var66.$minecraft1.$levelRenderer;
                    ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                    $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                    $var86 = ju_ArrayList_size($var3.$chunks);
                    if ($var86 > 3)
                        $var86 = 3;
                    $var104 = 0;
                    while ($var104 < $var86) {
                        $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                        cmmr_Chunk_update($e);
                        $e.$loaded = 0;
                        $var104 = $var104 + 1 | 0;
                    }
                    cmmr_Renderer_updateFog($var66);
                    olo_GL11_glEnable(2912);
                    $var81 = 0;
                    $ptr = 15;
                    continue main;
                }
                olo_GL11_glColorMask(1, 1, 1, 0);
            }
            $e = $var66.$minecraft1;
            $var3 = $e.$hud;
            $var81 = $e.$currentScreen === null ? 0 : 1;
            $ptr = 14;
            continue main;
        case 27:
            $tmp = cmmr_TextureManager_load($e, $var3);
            if ($rt_suspending()) {
                break main;
            }
            $var86 = $tmp;
            olo_GL11_glBindTexture($var81, $var86);
            $var112.$block.$renderPreview($var123);
            olo_GL11_glDisable(2977);
            olo_GL11_glPopMatrix();
            cmmr_Renderer_setLighting($var112.$minecraft2.$renderer, 0);
            if ($var66.$minecraft1.$settings.$anaglyph) {
                $var77 = $var77 + 1 | 0;
                if ($var77 < 2) {
                    if ($var66.$minecraft1.$settings.$anaglyph) {
                        if ($var77)
                            olo_GL11_glColorMask(1, 0, 0, 0);
                        else
                            olo_GL11_glColorMask(0, 1, 1, 0);
                    }
                    $e = $var66.$minecraft1;
                    $var126 = $e.$player;
                    $var119 = $e.$level;
                    $var89 = $e.$levelRenderer;
                    $var93 = $e.$particleManager;
                    olo_GL11_glViewport(0, 0, $e.$width, $e.$height);
                    $e = $var66.$minecraft1;
                    $var26 = $e.$level;
                    $var3 = $e.$player;
                    $var33 = 1.0 - jl_Math_pow(1.0 / (4 - $e.$settings.$viewDistance | 0), 0.25);
                    $var81 = $var26.$skyColor;
                    $var34 = ($var81 >> 16 & 255) / 255.0;
                    $var117 = ($var81 >> 8 & 255) / 255.0;
                    $var35 = ($var81 & 255) / 255.0;
                    $var81 = $var26.$fogColor;
                    $var87 = ($var81 >> 16 & 255) / 255.0;
                    $var66.$fogRed = $var87;
                    $var124 = ($var81 >> 8 & 255) / 255.0;
                    $var66.$fogBlue = $var124;
                    $var29 = ($var81 & 255) / 255.0;
                    $var66.$fogGreen = $var29;
                    $var34 = $var87 + ($var34 - $var87) * $var33;
                    $var66.$fogRed = $var34;
                    $var87 = $var124 + ($var117 - $var124) * $var33;
                    $var66.$fogBlue = $var87;
                    $var33 = $var29 + ($var35 - $var29) * $var33;
                    $var66.$fogGreen = $var33;
                    $var35 = $var66.$fogColorMultiplier;
                    $var66.$fogRed = $var34 * $var35;
                    $var66.$fogBlue = $var87 * $var35;
                    $var66.$fogGreen = $var33 * $var35;
                    cmmlt_Block_$callClinit();
                    $var115 = cmmlt_Block_blocks.data[cmml_Level_getTile($var26, $var3.$x | 0, $var3.$y + 0.11999999731779099 | 0, $var3.$z | 0)];
                    if ($var115 !== null && $var115.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                        $e = $var115.$getLiquidType();
                        if ($e === cmmll_LiquidType_WATER) {
                            $var66.$fogRed = 0.019999999552965164;
                            $var66.$fogBlue = 0.019999999552965164;
                            $var66.$fogGreen = 0.20000000298023224;
                        } else if ($e === cmmll_LiquidType_LAVA) {
                            $var66.$fogRed = 0.6000000238418579;
                            $var66.$fogBlue = 0.10000000149011612;
                            $var66.$fogGreen = 0.0;
                        }
                    }
                    if ($var66.$minecraft1.$settings.$anaglyph) {
                        $var33 = $var66.$fogRed * 30.0;
                        $var34 = $var66.$fogBlue;
                        $var35 = $var33 + $var34 * 59.0;
                        $var87 = $var66.$fogGreen;
                        $var35 = ($var35 + $var87 * 11.0) / 100.0;
                        $var34 = ($var33 + $var34 * 70.0) / 100.0;
                        $var33 = ($var33 + $var87 * 70.0) / 100.0;
                        $var66.$fogRed = $var35;
                        $var66.$fogBlue = $var34;
                        $var66.$fogGreen = $var33;
                    }
                    olo_GL11_glClearColor($var66.$fogRed, $var66.$fogBlue, $var66.$fogGreen, 0.0);
                    olo_GL11_glClear(16640);
                    $var66.$fogColorMultiplier = 1.0;
                    olo_GL11_glEnable(2884);
                    $var66.$fogEnd = 512 >> ($var66.$minecraft1.$settings.$viewDistance << 1);
                    olo_GL11_glMatrixMode(5889);
                    olo_GL11_glLoadIdentity();
                    if ($var66.$minecraft1.$settings.$anaglyph)
                        olo_GL11_glTranslatef(( -(($var77 << 1) - 1 | 0) | 0) * 0.07000000029802322, 0.0, 0.0);
                    $e = $var66.$minecraft1;
                    $var116 = $e.$player;
                    $var35 = 70.0;
                    if ($var116.$health <= 0)
                        $var35 = $var35 / ((1.0 - 500.0 / ($var116.$deathTime + $var65 + 500.0)) * 2.0 + 1.0);
                    olo_GL11_gluPerspective($var35, $e.$width / $e.$height, 0.05000000074505806, $var66.$fogEnd);
                    olo_GL11_glMatrixMode(5888);
                    olo_GL11_glLoadIdentity();
                    if ($var66.$minecraft1.$settings.$anaglyph)
                        olo_GL11_glTranslatef((($var77 << 1) - 1 | 0) * 0.10000000149011612, 0.0, 0.0);
                    cmmr_Renderer_hurtEffect($var66, $var65);
                    if ($var66.$minecraft1.$settings.$viewBobbing)
                        cmmr_Renderer_applyBobbing($var66, $var65);
                    $e = $var66.$minecraft1.$player;
                    olo_GL11_glTranslatef(0.0, 0.0, (-0.10000000149011612));
                    $var33 = $e.$xRotO;
                    olo_GL11_glRotatef($var33 + ($e.$xRot - $var33) * $var65, 1.0, 0.0, 0.0);
                    $var33 = $e.$yRotO;
                    olo_GL11_glRotatef($var33 + ($e.$yRot - $var33) * $var65, 0.0, 1.0, 0.0);
                    $var33 = $e.$xo;
                    $var33 = $var33 + ($e.$x - $var33) * $var65;
                    $var34 = $e.$yo;
                    $var34 = $var34 + ($e.$y - $var34) * $var65;
                    $var35 = $e.$zo;
                    olo_GL11_glTranslatef( -$var33,  -$var34,  -($var35 + ($e.$z - $var35) * $var65));
                    $var76 = cmmr_FrustrumImpl_update();
                    $var101 = $var66.$minecraft1.$levelRenderer;
                    $var98 = 0;
                    while (true) {
                        var$48 = $var101.$chunkCache.data;
                        if ($var98 >= var$48.length)
                            break;
                        cmmr_Chunk_clip(var$48[$var98], $var76);
                        $var98 = $var98 + 1 | 0;
                    }
                    $var3 = $var66.$minecraft1.$levelRenderer;
                    ju_Collections_sort($var3.$chunks, cmmr_ChunkDirtyDistanceComparator__init_($var126));
                    $var81 = ju_ArrayList_size($var3.$chunks) - 1 | 0;
                    $var86 = ju_ArrayList_size($var3.$chunks);
                    if ($var86 > 3)
                        $var86 = 3;
                    $var104 = 0;
                    while ($var104 < $var86) {
                        $e = ju_ArrayList_remove($var3.$chunks, $var81 - $var104 | 0);
                        cmmr_Chunk_update($e);
                        $e.$loaded = 0;
                        $var104 = $var104 + 1 | 0;
                    }
                    cmmr_Renderer_updateFog($var66);
                    olo_GL11_glEnable(2912);
                    $var81 = 0;
                    $ptr = 15;
                    continue main;
                }
                olo_GL11_glColorMask(1, 1, 1, 0);
            }
            $e = $var66.$minecraft1;
            $var3 = $e.$hud;
            $var81 = $e.$currentScreen === null ? 0 : 1;
            $ptr = 14;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $e, $var57, $var13, $var115, $var3, $var112, $var15, var$8, $var63, $var18, $var20, $var24, $var24_0, $var33, $var81, $var64, $var65, $var66, $var86, $var91, $var94, $var83, $var70, $var126, $var29, $var30, $var31, $var32, $var69, $var74, $var34, $var87, $var36, $var71, $var35, $var37, $var77, $var119, $var89, $var93, $var26, $var117, $var124, $var116, $var76, $var101, $var98, var$48, $var104, $var120, $var110, $var122, $var125, $var125_0, $var38, $var114, $var103, $var121,
        $var92, $var68, $var10001, $var113, $var111, $var109, $var108, $var84, $var123, $var10000, $ptr);
    }
    function cmm_Minecraft_grabMouse($this) {
        if (!$this.$hasMouse) {
            $this.$hasMouse = 1;
            oli_Mouse_setGrabbed(1);
            cmm_Minecraft_setCurrentScreen($this, null);
            $this.$lastClick = $this.$ticks + 10000 | 0;
        }
    }
    function cmm_Minecraft_pause($this) {
        var var$1;
        if ($this.$currentScreen === null) {
            var$1 = new cmmg_PauseScreen;
            cmmg_GuiScreen__init_(var$1);
            cmm_Minecraft_setCurrentScreen($this, var$1);
        }
    }
    function cmm_Minecraft_onMouseClick($this, $var1) {
        var $var2, $var3, $var6, var$5, $var4, $var5, var$8;
        a: {
            if (!(!$var1 && $this.$blockHitTime > 0)) {
                if (!$var1) {
                    $var2 = $this.$renderer.$heldBlock;
                    $var2.$offset = (-1);
                    $var2.$moving = 1;
                }
                if ($var1 == 1) {
                    $var3 = cmmp_Inventory_getSelected($this.$player.$inventory);
                    if ($var3 > 0) {
                        $var6 = $this.$gamemode;
                        $var2 = $this.$player;
                        cmmlt_Block_$callClinit();
                        var$5 = cmmlt_Block_blocks.data[$var3];
                        if (var$5 === cmmlt_Block_RED_MUSHROOM && cmmp_Inventory_removeResource($var6.$minecraft.$player.$inventory, $var3)) {
                            cmmp_Player_hurt($var2, null, 3);
                            $var3 = 1;
                        } else if (var$5 === cmmlt_Block_BROWN_MUSHROOM && cmmp_Inventory_removeResource($var6.$minecraft.$player.$inventory, $var3)) {
                            $var4 = $var2.$health;
                            if ($var4 > 0) {
                                $var3 = $var4 + 5 | 0;
                                $var2.$health = $var3;
                                if ($var3 > 20)
                                    $var2.$health = 20;
                                $var2.$invulnerableTime = $var2.$invulnerableDuration / 2 | 0;
                            }
                            $var3 = 1;
                        } else
                            $var3 = 0;
                        if ($var3) {
                            $this.$renderer.$heldBlock.$pos = 0.0;
                            break a;
                        }
                    }
                }
                $var6 = $this.$selected;
                if ($var6 !== null) {
                    $var3 = $var6.$entityPos;
                    if ($var3 == 1) {
                        if ($var1)
                            break a;
                        $var6.$entity0.$hurt($this.$player, 4);
                        return;
                    }
                    if (!$var3) {
                        $var3 = $var6.$x0;
                        $var4 = $var6.$y0;
                        $var5 = $var6.$z0;
                        if ($var1) {
                            var$8 = $var6.$face;
                            if (!var$8)
                                $var4 = $var4 + (-1) | 0;
                            if (var$8 == 1)
                                $var4 = $var4 + 1 | 0;
                            if (var$8 == 2)
                                $var5 = $var5 + (-1) | 0;
                            if (var$8 == 3)
                                $var5 = $var5 + 1 | 0;
                            if (var$8 == 4)
                                $var3 = $var3 + (-1) | 0;
                            if (var$8 == 5)
                                $var3 = $var3 + 1 | 0;
                        }
                        cmmlt_Block_$callClinit();
                        $var6 = cmmlt_Block_blocks.data[cmml_Level_getTile($this.$level, $var3, $var4, $var5)];
                        if (!$var1) {
                            if ($var6 === cmmlt_Block_BEDROCK && $this.$player.$userType < 100)
                                break a;
                            $var6 = $this.$gamemode;
                            $var1 = cmml_Level_getTile($var6.$minecraft.$level, $var3, $var4, $var5);
                            if ($var1 > 0 && !cmmlt_Block_blocks.data[$var1].$hardness)
                                cmmg_SurvivalGameMode_breakBlock($var6, $var3, $var4, $var5);
                            return;
                        }
                        $var1 = cmmp_Inventory_getSelected($this.$player.$inventory);
                        if ($var1 <= 0)
                            return;
                        $var6 = cmmlt_Block_blocks.data[cmml_Level_getTile($this.$level, $var3, $var4, $var5)];
                        if (!($var6 !== null && $var6 !== cmmlt_Block_WATER && $var6 !== cmmlt_Block_STATIONARY_WATER && $var6 !== cmmlt_Block_LAVA && $var6 !== cmmlt_Block_STATIONARY_LAVA)) {
                            $var6 = cmmlt_Block_blocks.data[$var1].$getCollisionBox($var3, $var4, $var5);
                            if ($var6 !== null) {
                                $var2 = $this.$player.$bb;
                                if ($var6.$x1 > $var2.$x00 && $var6.$x00 < $var2.$x1 ? ($var6.$y1 > $var2.$y00 && $var6.$y00 < $var2.$y1 ? ($var6.$z1 > $var2.$z00 && $var6.$z00 < $var2.$z1 ? 1 : 0) : 0) : 0)
                                    break a;
                                if (!cmml_Level_isFree($this.$level, $var6))
                                    break a;
                            }
                            if (!cmmp_Inventory_removeResource($this.$gamemode.$minecraft.$player.$inventory, $var1))
                                return;
                            cmml_Level_netSetTile($this.$level, $var3, $var4, $var5, $var1);
                            $this.$renderer.$heldBlock.$pos = 0.0;
                            cmmlt_Block_blocks.data[$var1].$onPlace($this.$level, $var3, $var4, $var5);
                        }
                    }
                } else if (!$var1 && !($this.$gamemode instanceof cmmg_CreativeGameMode))
                    $this.$blockHitTime = 10;
            }
        }
    }
    function cmm_Minecraft_tick($this) {
        var $var17, $var16, $var19, $var26, $var40, $var25, $var29, $var41, $var4, $var43, $var48, $var62, $var56, var$14, $var32, $var46, $var45, $var8, $var60, $var52, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var52 = $thread.pop();$var60 = $thread.pop();$var8 = $thread.pop();$var45 = $thread.pop();$var46 = $thread.pop();$var32 = $thread.pop();var$14 = $thread.pop();$var56 = $thread.pop();$var62 = $thread.pop();$var48 = $thread.pop();$var43 = $thread.pop();$var4 = $thread.pop();$var41 = $thread.pop();$var29 = $thread.pop();$var25 = $thread.pop();$var40 = $thread.pop();$var26 = $thread.pop();$var19 = $thread.pop();$var16 = $thread.pop();$var17 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $var17 = $this.$gamemode;
            $ptr = 1;
        case 1:
            cmmg_SurvivalGameMode_spawnMob($var17);
            if ($rt_suspending()) {
                break main;
            }
            $var17 = $this.$hud;
            $var17.$ticks1 = $var17.$ticks1 + 1 | 0;
            $var16 = 0;
            while ($var16 < ju_ArrayList_size($var17.$chat)) {
                $var19 = ju_ArrayList_get($var17.$chat, $var16);
                $var19.$time = $var19.$time + 1 | 0;
                $var16 = $var16 + 1 | 0;
            }
            $var16 = 3553;
            $var17 = $this.$textureManager;
            $var19 = $rt_s(43);
            $ptr = 2;
        case 2:
            $tmp = cmmr_TextureManager_load($var17, $var19);
            if ($rt_suspending()) {
                break main;
            }
            $var26 = $tmp;
            olo_GL11_glBindTexture($var16, $var26);
            $var19 = $this.$textureManager;
            $var16 = 0;
            while ($var16 < ju_ArrayList_size($var19.$animations)) {
                $var17 = ju_ArrayList_get($var19.$animations, $var16);
                $var17.$anaglyph0 = $var19.$settings0.$anaglyph;
                $var17.$animate();
                jn_ByteBuffer_clear($var19.$textureBuffer);
                jn_ByteBuffer_put($var19.$textureBuffer, $var17.$textureData);
                jn_ByteBuffer_limit(jn_ByteBuffer_position($var19.$textureBuffer, 0), $var17.$textureData.data.length);
                $var40 = $var17.$textureId;
                olo_GL11_glTexSubImage2D(3553, 0, ($var40 % 16 | 0) << 4, ($var40 / 16 | 0) << 4, 16, 16, 6408, 5121, $var19.$textureBuffer);
                $var16 = $var16 + 1 | 0;
            }
            if ($this.$currentScreen === null) {
                $var17 = $this.$player;
                if ($var17 !== null && $var17.$health <= 0)
                    cmm_Minecraft_setCurrentScreen($this, null);
            }
            a: {
                $var17 = $this.$currentScreen;
                if (!($var17 !== null && !$var17.$grabsMouse)) {
                    while (true) {
                        if (!oli_Mouse_next()) {
                            $var16 = $this.$blockHitTime;
                            if ($var16 > 0)
                                $this.$blockHitTime = $var16 - 1 | 0;
                            while (oli_Keyboard_next()) {
                                cmmp_Player_setKey($this.$player, oli_Keyboard_getEventKey(), oli_Keyboard_getEventKeyState());
                                if (!oli_Keyboard_getEventKeyState())
                                    continue;
                                $var17 = $this.$currentScreen;
                                if ($var17 !== null)
                                    cmmg_GuiScreen_keyboardEvent($var17);
                                if ($this.$currentScreen === null) {
                                    if (oli_Keyboard_getEventKey() == 1)
                                        cmm_Minecraft_pause($this);
                                    if ($this.$gamemode instanceof cmmg_CreativeGameMode) {
                                        if (oli_Keyboard_getEventKey() == $this.$settings.$loadLocationKey.$key)
                                            cmmp_Player_resetPos($this.$player);
                                        if (oli_Keyboard_getEventKey() == $this.$settings.$saveLocationKey.$key) {
                                            $var17 = $this.$level;
                                            $var19 = $this.$player;
                                            cmml_Level_setSpawnPos($var17, $var19.$x | 0, $var19.$y | 0, $var19.$z | 0, $var19.$yRot);
                                            cmmp_Player_resetPos($this.$player);
                                        }
                                    }
                                    oli_Keyboard_getEventKey();
                                    if (oli_Keyboard_getEventKey() == 63)
                                        $this.$raining = $this.$raining ? 0 : 1;
                                    if (oli_Keyboard_getEventKey() == 15 && $this.$gamemode instanceof cmmg_SurvivalGameMode) {
                                        $var17 = $this.$player;
                                        if ($var17.$arrows > 0) {
                                            $var19 = $this.$level;
                                            cmml_Level_addEntity($var19, cmmi_Arrow__init_($var19, $var17, $var17.$x, $var17.$y, $var17.$z, $var17.$yRot, $var17.$xRot, 1.2000000476837158));
                                            $var17 = $this.$player;
                                            $var17.$arrows = $var17.$arrows - 1 | 0;
                                        }
                                    }
                                    if (oli_Keyboard_getEventKey() == $this.$settings.$buildKey.$key)
                                        cmmg_GameMode_openInventory($this.$gamemode);
                                    if (oli_Keyboard_getEventKey() == $this.$settings.$chatKey.$key) {
                                        cmmp_Player_releaseAllKeys($this.$player);
                                        cmm_Minecraft_setCurrentScreen($this, cmmg_ChatInputScreen__init_());
                                    }
                                }
                                $var25 = 0;
                                while ($var25 < 9) {
                                    if (oli_Keyboard_getEventKey() == ($var25 + 2 | 0))
                                        $this.$player.$inventory.$selected0 = $var25;
                                    $var25 = $var25 + 1 | 0;
                                }
                                $var16 = oli_Keyboard_getEventKey();
                                $var17 = $this.$settings;
                                if ($var16 != $var17.$toggleFogKey.$key)
                                    continue;
                                else {
                                    $var16 = 4;
                                    $var26 = !oli_Keyboard_isKeyDown(42) && !oli_Keyboard_isKeyDown(54) ? 1 : (-1);
                                    $ptr = 5;
                                    continue main;
                                }
                            }
                            if ($this.$currentScreen === null) {
                                if (oli_Mouse_isButtonDown(0) && ($this.$ticks - $this.$lastClick | 0) >= $this.$timer.$tps / 4.0 && $this.$hasMouse) {
                                    cmm_Minecraft_onMouseClick($this, 0);
                                    $this.$lastClick = $this.$ticks;
                                }
                                if (oli_Mouse_isButtonDown(1) && ($this.$ticks - $this.$lastClick | 0) >= $this.$timer.$tps / 4.0 && $this.$hasMouse) {
                                    cmm_Minecraft_onMouseClick($this, 1);
                                    $this.$lastClick = $this.$ticks;
                                }
                            }
                            $var26 = $this.$currentScreen === null && oli_Mouse_isButtonDown(0) && $this.$hasMouse ? 1 : 0;
                            $var17 = $this.$gamemode;
                            if ($var17.$instantBreak)
                                break a;
                            if ($this.$blockHitTime > 0)
                                break a;
                            if ($var26) {
                                $var19 = $this.$selected;
                                if ($var19 !== null && !$var19.$entityPos) {
                                    cmmg_SurvivalGameMode_hitBlock($var17, $var19.$x0, $var19.$y0, $var19.$z0, $var19.$face);
                                    break a;
                                }
                            }
                            cmmg_SurvivalGameMode_resetHits($var17);
                            break a;
                        }
                        $var16 = oli_Mouse_getEventDWheel();
                        if ($var16)
                            cmmp_Inventory_swapPaint($this.$player.$inventory, $var16);
                        if ($this.$currentScreen === null) {
                            if (!$this.$hasMouse && oli_Mouse_getEventButtonState())
                                cmm_Minecraft_grabMouse($this);
                            else {
                                if (!oli_Mouse_getEventButton() && oli_Mouse_getEventButtonState()) {
                                    cmm_Minecraft_onMouseClick($this, 0);
                                    $this.$lastClick = $this.$ticks;
                                }
                                if (oli_Mouse_getEventButton() == 1 && oli_Mouse_getEventButtonState()) {
                                    cmm_Minecraft_onMouseClick($this, 1);
                                    $this.$lastClick = $this.$ticks;
                                }
                                if (oli_Mouse_getEventButton() == 2 && oli_Mouse_getEventButtonState()) {
                                    $var17 = $this.$selected;
                                    if ($var17 !== null) {
                                        $var16 = cmml_Level_getTile($this.$level, $var17.$x0, $var17.$y0, $var17.$z0);
                                        cmmlt_Block_$callClinit();
                                        if ($var16 == cmmlt_Block_GRASS.$id)
                                            $var16 = cmmlt_Block_DIRT.$id;
                                        if ($var16 == cmmlt_Block_DOUBLE_SLAB.$id)
                                            $var16 = cmmlt_Block_SLAB.$id;
                                        if ($var16 == cmmlt_Block_BEDROCK.$id)
                                            $var16 = cmmlt_Block_STONE.$id;
                                        cmmp_Inventory_grabTexture($this.$player.$inventory, $var16, $this.$gamemode instanceof cmmg_CreativeGameMode);
                                    }
                                }
                            }
                        }
                        $var17 = $this.$currentScreen;
                        if ($var17 === null)
                            continue;
                        else
                            break;
                    }
                    $ptr = 4;
                    continue main;
                }
            }
            $var17 = $this.$currentScreen;
            if ($var17 !== null)
                $this.$lastClick = $this.$ticks + 10000 | 0;
            if ($var17 === null) {
                if ($this.$level !== null) {
                    $var29 = $this.$renderer;
                    $var29.$levelTicks = $var29.$levelTicks + 1 | 0;
                    $var41 = $var29.$heldBlock;
                    $var41.$lastPos = $var41.$pos;
                    if ($var41.$moving) {
                        $var16 = $var41.$offset + 1 | 0;
                        $var41.$offset = $var16;
                        if ($var16 == 7) {
                            $var41.$offset = 0;
                            $var41.$moving = 0;
                        }
                    }
                    $var4 = cmmp_Inventory_getSelected($var41.$minecraft2.$player.$inventory);
                    $var43 = null;
                    if ($var4 > 0) {
                        cmmlt_Block_$callClinit();
                        $var43 = cmmlt_Block_blocks.data[$var4];
                    }
                    $var48 = 0.4000000059604645;
                    $var62 = $var43 !== $var41.$block ? 0.0 : 1.0;
                    $var56 = $var41.$pos;
                    $var62 = $var62 - $var56;
                    var$14 = (-0.4000000059604645);
                    if ($var62 >= var$14)
                        var$14 = $var62;
                    if (var$14 <= $var48)
                        $var48 = var$14;
                    $var48 = $var56 + $var48;
                    $var41.$pos = $var48;
                    if ($var48 < 0.10000000149011612)
                        $var41.$block = $var43;
                    b: {
                        $var17 = $var29.$minecraft1;
                        if ($var17.$raining) {
                            $var19 = $var17.$player;
                            $var32 = $var17.$level;
                            $var40 = $var19.$x | 0;
                            $var46 = $var19.$y | 0;
                            $var45 = $var19.$z | 0;
                            $var8 = 0;
                            $var26 = $var46 + 4 | 0;
                            $var4 = $var46 - 4 | 0;
                            while (true) {
                                if ($var8 >= 50)
                                    break b;
                                $var60 = ($var40 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                                $var52 = ($var45 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                                $var16 = cmml_Level_getHighestTile($var32, $var60, $var52);
                                if ($var16 <= $var26 && $var16 >= $var4) {
                                    $var56 = ju_Random_nextFloat($var29.$random);
                                    $var62 = ju_Random_nextFloat($var29.$random);
                                    cmmp_ParticleManager_spawnParticle($var29.$minecraft1.$particleManager, cmmp_WaterDropParticle__init_($var32, $var60 + $var56, $var16 + 0.10000000149011612, $var52 + $var62));
                                }
                                $var8 = $var8 + 1 | 0;
                            }
                        }
                    }
                    $var17 = $this.$levelRenderer;
                    $var17.$ticks0 = $var17.$ticks0 + 1 | 0;
                    cmml_Level_tickEntities($this.$level);
                    cmml_Level_tick($this.$level);
                    cmmp_ParticleManager_tick($this.$particleManager);
                }
                return;
            }
            $ptr = 3;
        case 3:
            cmmg_GuiScreen_doInput($var17);
            if ($rt_suspending()) {
                break main;
            }
            $var17 = $this.$currentScreen;
            if ($var17 !== null)
                $var17.$tick();
            if ($this.$level !== null) {
                $var29 = $this.$renderer;
                $var29.$levelTicks = $var29.$levelTicks + 1 | 0;
                $var41 = $var29.$heldBlock;
                $var41.$lastPos = $var41.$pos;
                if ($var41.$moving) {
                    $var16 = $var41.$offset + 1 | 0;
                    $var41.$offset = $var16;
                    if ($var16 == 7) {
                        $var41.$offset = 0;
                        $var41.$moving = 0;
                    }
                }
                $var4 = cmmp_Inventory_getSelected($var41.$minecraft2.$player.$inventory);
                $var43 = null;
                if ($var4 > 0) {
                    cmmlt_Block_$callClinit();
                    $var43 = cmmlt_Block_blocks.data[$var4];
                }
                $var48 = 0.4000000059604645;
                $var62 = $var43 !== $var41.$block ? 0.0 : 1.0;
                $var56 = $var41.$pos;
                $var62 = $var62 - $var56;
                var$14 = (-0.4000000059604645);
                if ($var62 >= var$14)
                    var$14 = $var62;
                if (var$14 <= $var48)
                    $var48 = var$14;
                $var48 = $var56 + $var48;
                $var41.$pos = $var48;
                if ($var48 < 0.10000000149011612)
                    $var41.$block = $var43;
                c: {
                    $var17 = $var29.$minecraft1;
                    if ($var17.$raining) {
                        $var19 = $var17.$player;
                        $var32 = $var17.$level;
                        $var40 = $var19.$x | 0;
                        $var46 = $var19.$y | 0;
                        $var45 = $var19.$z | 0;
                        $var8 = 0;
                        $var26 = $var46 + 4 | 0;
                        $var4 = $var46 - 4 | 0;
                        while (true) {
                            if ($var8 >= 50)
                                break c;
                            $var60 = ($var40 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                            $var52 = ($var45 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                            $var16 = cmml_Level_getHighestTile($var32, $var60, $var52);
                            if ($var16 <= $var26 && $var16 >= $var4) {
                                $var56 = ju_Random_nextFloat($var29.$random);
                                $var62 = ju_Random_nextFloat($var29.$random);
                                cmmp_ParticleManager_spawnParticle($var29.$minecraft1.$particleManager, cmmp_WaterDropParticle__init_($var32, $var60 + $var56, $var16 + 0.10000000149011612, $var52 + $var62));
                            }
                            $var8 = $var8 + 1 | 0;
                        }
                    }
                }
                $var17 = $this.$levelRenderer;
                $var17.$ticks0 = $var17.$ticks0 + 1 | 0;
                cmml_Level_tickEntities($this.$level);
                cmml_Level_tick($this.$level);
                cmmp_ParticleManager_tick($this.$particleManager);
            }
            return;
        case 4:
            cmmg_GuiScreen_mouseEvent($var17);
            if ($rt_suspending()) {
                break main;
            }
            while (true) {
                if (!oli_Mouse_next()) {
                    $var16 = $this.$blockHitTime;
                    if ($var16 > 0)
                        $this.$blockHitTime = $var16 - 1 | 0;
                    while (true) {
                        if (!oli_Keyboard_next()) {
                            if ($this.$currentScreen === null) {
                                if (oli_Mouse_isButtonDown(0) && ($this.$ticks - $this.$lastClick | 0) >= $this.$timer.$tps / 4.0 && $this.$hasMouse) {
                                    cmm_Minecraft_onMouseClick($this, 0);
                                    $this.$lastClick = $this.$ticks;
                                }
                                if (oli_Mouse_isButtonDown(1) && ($this.$ticks - $this.$lastClick | 0) >= $this.$timer.$tps / 4.0 && $this.$hasMouse) {
                                    cmm_Minecraft_onMouseClick($this, 1);
                                    $this.$lastClick = $this.$ticks;
                                }
                            }
                            $var26 = $this.$currentScreen === null && oli_Mouse_isButtonDown(0) && $this.$hasMouse ? 1 : 0;
                            d: {
                                $var17 = $this.$gamemode;
                                if (!$var17.$instantBreak && $this.$blockHitTime <= 0) {
                                    if ($var26) {
                                        $var19 = $this.$selected;
                                        if ($var19 !== null && !$var19.$entityPos) {
                                            cmmg_SurvivalGameMode_hitBlock($var17, $var19.$x0, $var19.$y0, $var19.$z0, $var19.$face);
                                            break d;
                                        }
                                    }
                                    cmmg_SurvivalGameMode_resetHits($var17);
                                }
                            }
                            $var17 = $this.$currentScreen;
                            if ($var17 !== null)
                                $this.$lastClick = $this.$ticks + 10000 | 0;
                            if ($var17 === null) {
                                if ($this.$level !== null) {
                                    $var29 = $this.$renderer;
                                    $var29.$levelTicks = $var29.$levelTicks + 1 | 0;
                                    $var41 = $var29.$heldBlock;
                                    $var41.$lastPos = $var41.$pos;
                                    if ($var41.$moving) {
                                        $var16 = $var41.$offset + 1 | 0;
                                        $var41.$offset = $var16;
                                        if ($var16 == 7) {
                                            $var41.$offset = 0;
                                            $var41.$moving = 0;
                                        }
                                    }
                                    $var4 = cmmp_Inventory_getSelected($var41.$minecraft2.$player.$inventory);
                                    $var43 = null;
                                    if ($var4 > 0) {
                                        cmmlt_Block_$callClinit();
                                        $var43 = cmmlt_Block_blocks.data[$var4];
                                    }
                                    $var48 = 0.4000000059604645;
                                    $var62 = $var43 !== $var41.$block ? 0.0 : 1.0;
                                    $var56 = $var41.$pos;
                                    $var62 = $var62 - $var56;
                                    var$14 = (-0.4000000059604645);
                                    if ($var62 >= var$14)
                                        var$14 = $var62;
                                    if (var$14 <= $var48)
                                        $var48 = var$14;
                                    $var48 = $var56 + $var48;
                                    $var41.$pos = $var48;
                                    if ($var48 < 0.10000000149011612)
                                        $var41.$block = $var43;
                                    b: {
                                        $var17 = $var29.$minecraft1;
                                        if ($var17.$raining) {
                                            $var19 = $var17.$player;
                                            $var32 = $var17.$level;
                                            $var40 = $var19.$x | 0;
                                            $var46 = $var19.$y | 0;
                                            $var45 = $var19.$z | 0;
                                            $var8 = 0;
                                            $var26 = $var46 + 4 | 0;
                                            $var4 = $var46 - 4 | 0;
                                            while (true) {
                                                if ($var8 >= 50)
                                                    break b;
                                                $var60 = ($var40 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                                                $var52 = ($var45 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                                                $var16 = cmml_Level_getHighestTile($var32, $var60, $var52);
                                                if ($var16 <= $var26 && $var16 >= $var4) {
                                                    $var56 = ju_Random_nextFloat($var29.$random);
                                                    $var62 = ju_Random_nextFloat($var29.$random);
                                                    cmmp_ParticleManager_spawnParticle($var29.$minecraft1.$particleManager, cmmp_WaterDropParticle__init_($var32, $var60 + $var56, $var16 + 0.10000000149011612, $var52 + $var62));
                                                }
                                                $var8 = $var8 + 1 | 0;
                                            }
                                        }
                                    }
                                    $var17 = $this.$levelRenderer;
                                    $var17.$ticks0 = $var17.$ticks0 + 1 | 0;
                                    cmml_Level_tickEntities($this.$level);
                                    cmml_Level_tick($this.$level);
                                    cmmp_ParticleManager_tick($this.$particleManager);
                                }
                                return;
                            }
                            $ptr = 3;
                            continue main;
                        }
                        cmmp_Player_setKey($this.$player, oli_Keyboard_getEventKey(), oli_Keyboard_getEventKeyState());
                        if (!oli_Keyboard_getEventKeyState())
                            continue;
                        $var17 = $this.$currentScreen;
                        if ($var17 !== null)
                            cmmg_GuiScreen_keyboardEvent($var17);
                        if ($this.$currentScreen === null) {
                            if (oli_Keyboard_getEventKey() == 1)
                                cmm_Minecraft_pause($this);
                            if ($this.$gamemode instanceof cmmg_CreativeGameMode) {
                                if (oli_Keyboard_getEventKey() == $this.$settings.$loadLocationKey.$key)
                                    cmmp_Player_resetPos($this.$player);
                                if (oli_Keyboard_getEventKey() == $this.$settings.$saveLocationKey.$key) {
                                    $var17 = $this.$level;
                                    $var19 = $this.$player;
                                    cmml_Level_setSpawnPos($var17, $var19.$x | 0, $var19.$y | 0, $var19.$z | 0, $var19.$yRot);
                                    cmmp_Player_resetPos($this.$player);
                                }
                            }
                            oli_Keyboard_getEventKey();
                            if (oli_Keyboard_getEventKey() == 63)
                                $this.$raining = $this.$raining ? 0 : 1;
                            if (oli_Keyboard_getEventKey() == 15 && $this.$gamemode instanceof cmmg_SurvivalGameMode) {
                                $var17 = $this.$player;
                                if ($var17.$arrows > 0) {
                                    $var19 = $this.$level;
                                    cmml_Level_addEntity($var19, cmmi_Arrow__init_($var19, $var17, $var17.$x, $var17.$y, $var17.$z, $var17.$yRot, $var17.$xRot, 1.2000000476837158));
                                    $var17 = $this.$player;
                                    $var17.$arrows = $var17.$arrows - 1 | 0;
                                }
                            }
                            if (oli_Keyboard_getEventKey() == $this.$settings.$buildKey.$key)
                                cmmg_GameMode_openInventory($this.$gamemode);
                            if (oli_Keyboard_getEventKey() == $this.$settings.$chatKey.$key) {
                                cmmp_Player_releaseAllKeys($this.$player);
                                cmm_Minecraft_setCurrentScreen($this, cmmg_ChatInputScreen__init_());
                            }
                        }
                        $var25 = 0;
                        while ($var25 < 9) {
                            if (oli_Keyboard_getEventKey() == ($var25 + 2 | 0))
                                $this.$player.$inventory.$selected0 = $var25;
                            $var25 = $var25 + 1 | 0;
                        }
                        $var16 = oli_Keyboard_getEventKey();
                        $var17 = $this.$settings;
                        if ($var16 != $var17.$toggleFogKey.$key)
                            continue;
                        else
                            break;
                    }
                    $var16 = 4;
                    $var26 = !oli_Keyboard_isKeyDown(42) && !oli_Keyboard_isKeyDown(54) ? 1 : (-1);
                    $ptr = 5;
                    continue main;
                }
                $var16 = oli_Mouse_getEventDWheel();
                if ($var16)
                    cmmp_Inventory_swapPaint($this.$player.$inventory, $var16);
                if ($this.$currentScreen === null) {
                    if (!$this.$hasMouse && oli_Mouse_getEventButtonState())
                        cmm_Minecraft_grabMouse($this);
                    else {
                        if (!oli_Mouse_getEventButton() && oli_Mouse_getEventButtonState()) {
                            cmm_Minecraft_onMouseClick($this, 0);
                            $this.$lastClick = $this.$ticks;
                        }
                        if (oli_Mouse_getEventButton() == 1 && oli_Mouse_getEventButtonState()) {
                            cmm_Minecraft_onMouseClick($this, 1);
                            $this.$lastClick = $this.$ticks;
                        }
                        if (oli_Mouse_getEventButton() == 2 && oli_Mouse_getEventButtonState()) {
                            $var17 = $this.$selected;
                            if ($var17 !== null) {
                                $var16 = cmml_Level_getTile($this.$level, $var17.$x0, $var17.$y0, $var17.$z0);
                                cmmlt_Block_$callClinit();
                                if ($var16 == cmmlt_Block_GRASS.$id)
                                    $var16 = cmmlt_Block_DIRT.$id;
                                if ($var16 == cmmlt_Block_DOUBLE_SLAB.$id)
                                    $var16 = cmmlt_Block_SLAB.$id;
                                if ($var16 == cmmlt_Block_BEDROCK.$id)
                                    $var16 = cmmlt_Block_STONE.$id;
                                cmmp_Inventory_grabTexture($this.$player.$inventory, $var16, $this.$gamemode instanceof cmmg_CreativeGameMode);
                            }
                        }
                    }
                }
                $var17 = $this.$currentScreen;
                if ($var17 === null)
                    continue;
                else
                    break;
            }
            continue main;
        case 5:
            cmm_GameSettings_toggleSetting($var17, $var16, $var26);
            if ($rt_suspending()) {
                break main;
            }
            while (true) {
                if (!oli_Keyboard_next()) {
                    if ($this.$currentScreen === null) {
                        if (oli_Mouse_isButtonDown(0) && ($this.$ticks - $this.$lastClick | 0) >= $this.$timer.$tps / 4.0 && $this.$hasMouse) {
                            cmm_Minecraft_onMouseClick($this, 0);
                            $this.$lastClick = $this.$ticks;
                        }
                        if (oli_Mouse_isButtonDown(1) && ($this.$ticks - $this.$lastClick | 0) >= $this.$timer.$tps / 4.0 && $this.$hasMouse) {
                            cmm_Minecraft_onMouseClick($this, 1);
                            $this.$lastClick = $this.$ticks;
                        }
                    }
                    $var26 = $this.$currentScreen === null && oli_Mouse_isButtonDown(0) && $this.$hasMouse ? 1 : 0;
                    e: {
                        $var17 = $this.$gamemode;
                        if (!$var17.$instantBreak && $this.$blockHitTime <= 0) {
                            if ($var26) {
                                $var19 = $this.$selected;
                                if ($var19 !== null && !$var19.$entityPos) {
                                    cmmg_SurvivalGameMode_hitBlock($var17, $var19.$x0, $var19.$y0, $var19.$z0, $var19.$face);
                                    break e;
                                }
                            }
                            cmmg_SurvivalGameMode_resetHits($var17);
                        }
                    }
                    $var17 = $this.$currentScreen;
                    if ($var17 !== null)
                        $this.$lastClick = $this.$ticks + 10000 | 0;
                    if ($var17 === null) {
                        if ($this.$level !== null) {
                            $var29 = $this.$renderer;
                            $var29.$levelTicks = $var29.$levelTicks + 1 | 0;
                            $var41 = $var29.$heldBlock;
                            $var41.$lastPos = $var41.$pos;
                            if ($var41.$moving) {
                                $var16 = $var41.$offset + 1 | 0;
                                $var41.$offset = $var16;
                                if ($var16 == 7) {
                                    $var41.$offset = 0;
                                    $var41.$moving = 0;
                                }
                            }
                            $var4 = cmmp_Inventory_getSelected($var41.$minecraft2.$player.$inventory);
                            $var43 = null;
                            if ($var4 > 0) {
                                cmmlt_Block_$callClinit();
                                $var43 = cmmlt_Block_blocks.data[$var4];
                            }
                            $var48 = 0.4000000059604645;
                            $var62 = $var43 !== $var41.$block ? 0.0 : 1.0;
                            $var56 = $var41.$pos;
                            $var62 = $var62 - $var56;
                            var$14 = (-0.4000000059604645);
                            if ($var62 >= var$14)
                                var$14 = $var62;
                            if (var$14 <= $var48)
                                $var48 = var$14;
                            $var48 = $var56 + $var48;
                            $var41.$pos = $var48;
                            if ($var48 < 0.10000000149011612)
                                $var41.$block = $var43;
                            f: {
                                $var17 = $var29.$minecraft1;
                                if ($var17.$raining) {
                                    $var19 = $var17.$player;
                                    $var32 = $var17.$level;
                                    $var40 = $var19.$x | 0;
                                    $var46 = $var19.$y | 0;
                                    $var45 = $var19.$z | 0;
                                    $var8 = 0;
                                    $var26 = $var46 + 4 | 0;
                                    $var4 = $var46 - 4 | 0;
                                    while (true) {
                                        if ($var8 >= 50)
                                            break f;
                                        $var60 = ($var40 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                                        $var52 = ($var45 + ju_Random_nextInt($var29.$random, 9) | 0) - 4 | 0;
                                        $var16 = cmml_Level_getHighestTile($var32, $var60, $var52);
                                        if ($var16 <= $var26 && $var16 >= $var4) {
                                            $var56 = ju_Random_nextFloat($var29.$random);
                                            $var62 = ju_Random_nextFloat($var29.$random);
                                            cmmp_ParticleManager_spawnParticle($var29.$minecraft1.$particleManager, cmmp_WaterDropParticle__init_($var32, $var60 + $var56, $var16 + 0.10000000149011612, $var52 + $var62));
                                        }
                                        $var8 = $var8 + 1 | 0;
                                    }
                                }
                            }
                            $var17 = $this.$levelRenderer;
                            $var17.$ticks0 = $var17.$ticks0 + 1 | 0;
                            cmml_Level_tickEntities($this.$level);
                            cmml_Level_tick($this.$level);
                            cmmp_ParticleManager_tick($this.$particleManager);
                        }
                        return;
                    }
                    $ptr = 3;
                    continue main;
                }
                cmmp_Player_setKey($this.$player, oli_Keyboard_getEventKey(), oli_Keyboard_getEventKeyState());
                if (!oli_Keyboard_getEventKeyState())
                    continue;
                $var17 = $this.$currentScreen;
                if ($var17 !== null)
                    cmmg_GuiScreen_keyboardEvent($var17);
                if ($this.$currentScreen === null) {
                    if (oli_Keyboard_getEventKey() == 1)
                        cmm_Minecraft_pause($this);
                    if ($this.$gamemode instanceof cmmg_CreativeGameMode) {
                        if (oli_Keyboard_getEventKey() == $this.$settings.$loadLocationKey.$key)
                            cmmp_Player_resetPos($this.$player);
                        if (oli_Keyboard_getEventKey() == $this.$settings.$saveLocationKey.$key) {
                            $var17 = $this.$level;
                            $var19 = $this.$player;
                            cmml_Level_setSpawnPos($var17, $var19.$x | 0, $var19.$y | 0, $var19.$z | 0, $var19.$yRot);
                            cmmp_Player_resetPos($this.$player);
                        }
                    }
                    oli_Keyboard_getEventKey();
                    if (oli_Keyboard_getEventKey() == 63)
                        $this.$raining = $this.$raining ? 0 : 1;
                    if (oli_Keyboard_getEventKey() == 15 && $this.$gamemode instanceof cmmg_SurvivalGameMode) {
                        $var17 = $this.$player;
                        if ($var17.$arrows > 0) {
                            $var19 = $this.$level;
                            cmml_Level_addEntity($var19, cmmi_Arrow__init_($var19, $var17, $var17.$x, $var17.$y, $var17.$z, $var17.$yRot, $var17.$xRot, 1.2000000476837158));
                            $var17 = $this.$player;
                            $var17.$arrows = $var17.$arrows - 1 | 0;
                        }
                    }
                    if (oli_Keyboard_getEventKey() == $this.$settings.$buildKey.$key)
                        cmmg_GameMode_openInventory($this.$gamemode);
                    if (oli_Keyboard_getEventKey() == $this.$settings.$chatKey.$key) {
                        cmmp_Player_releaseAllKeys($this.$player);
                        cmm_Minecraft_setCurrentScreen($this, cmmg_ChatInputScreen__init_());
                    }
                }
                $var25 = 0;
                while ($var25 < 9) {
                    if (oli_Keyboard_getEventKey() == ($var25 + 2 | 0))
                        $this.$player.$inventory.$selected0 = $var25;
                    $var25 = $var25 + 1 | 0;
                }
                $var16 = oli_Keyboard_getEventKey();
                $var17 = $this.$settings;
                if ($var16 != $var17.$toggleFogKey.$key)
                    continue;
                else
                    break;
            }
            $var16 = 4;
            $var26 = !oli_Keyboard_isKeyDown(42) && !oli_Keyboard_isKeyDown(54) ? 1 : (-1);
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var17, $var16, $var19, $var26, $var40, $var25, $var29, $var41, $var4, $var43, $var48, $var62, $var56, var$14, $var32, $var46, $var45, $var8, $var60, $var52, $ptr);
    }
    function cmm_Minecraft_generateLevel($this, $var1) {
        var $var2, $var4, var$4, var$5, var$6, var$7, var$8, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();$var4 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $var2 = $this.$session;
            $var2 = $var2 === null ? $rt_s(47) : $var2.$username;
            $var4 = new cmmlg_LevelGenerator;
            var$4 = $this.$progressBar;
            $var4.$random0 = new ju_Random;
            $var4.$h = $rt_createIntArray(1048576);
            $var4.$progressBar0 = var$4;
            $var1 = 128 << $var1;
            var$5 = 64;
            $ptr = 1;
        case 1:
            $tmp = cmmlg_LevelGenerator_generate($var4, $var2, $var1, $var1, var$5);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = $tmp;
            $var2 = $this.$gamemode;
            $var2.$spawner = cmml_MobSpawner__init_($var4);
            var$4 = $var2.$minecraft.$progressBar;
            var$6 = $rt_s(48);
            $ptr = 2;
        case 2:
            cmm_ProgressBarDisplay_setText(var$4, var$6);
            if ($rt_suspending()) {
                break main;
            }
            $var1 = $rt_imul($rt_imul($var4.$width0, $var4.$height0), $var4.$depth) / 800 | 0;
            var$4 = $var2.$spawner;
            var$6 = null;
            $var2 = $var2.$minecraft.$progressBar;
            $ptr = 3;
        case 3:
            cmml_MobSpawner_spawn(var$4, $var1, var$6, $var2);
            if ($rt_suspending()) {
                break main;
            }
            $this.$level = $var4;
            cmml_Level_initTransient($var4);
            $var2 = $this.$gamemode;
            $var4.$creativeMode = 0;
            $var4.$growTrees = 1;
            $var2.$spawner = cmml_MobSpawner__init_($var4);
            $var4.$font = $this.$fontRenderer;
            $var4.$rendererContext$5cd64a7f = $this;
            $var1 = 0;
            a: {
                while (true) {
                    var$4 = $var4.$blockMap.$all;
                    if ($var1 >= var$4.$size0) {
                        var$4 = null;
                        break a;
                    }
                    var$4 = ju_ArrayList_get(var$4, $var1);
                    if (jl_Class_isAssignableFrom($rt_cls(cmmp_Player), jl_Object_getClass(var$4)))
                        break;
                    $var1 = $var1 + 1 | 0;
                }
            }
            $var2 = var$4;
            $this.$player = $var2;
            if ($var2 === null) {
                $var2 = new cmmp_Player;
                cmmm_Mob__init_($var2, $var4);
                var$4 = new cmmp_Inventory;
                var$7 = $rt_createIntArray(9);
                var$8 = var$7.data;
                var$4.$slots = var$7;
                var$7 = $rt_createIntArray(9);
                var$9 = var$7.data;
                var$4.$count0 = var$7;
                var$4.$popTime = $rt_createIntArray(9);
                var$4.$selected0 = 0;
                var$5 = 0;
                while (var$5 < 9) {
                    var$8[var$5] = (-1);
                    var$9[var$5] = 0;
                    var$5 = var$5 + 1 | 0;
                }
                $var2.$inventory = var$4;
                $var2.$userType = 0;
                $var2.$score = 0;
                $var2.$arrows = 20;
                $var4.$player0 = $var2;
                var$4 = $var4.$blockMap;
                cmml_BlockMap$Slot_remove(cmml_BlockMap$Slot_init(var$4.$slot, $var2.$xOld, $var2.$yOld, $var2.$zOld), $var2);
                ju_ArrayList_remove0(var$4.$all, $var2);
                cmml_Level_addEntity($var4, $var2);
                $var2.$heightOffset = 1.6200000047683716;
                $var2.$health = 20;
                $var2.$modelName = $rt_s(49);
                $var2.$rotOffs = 180.0;
                var$4 = new cmmp_Player$1;
                cmmma_BasicAI__init_(var$4);
                var$4.$player1 = $var2;
                $var2.$ai = var$4;
                $this.$player = $var2;
                cmmp_Player_resetPos($var2);
                $var2 = $this.$player;
                var$6 = $var2.$inventory;
                var$7 = var$6.$slots.data;
                cmmlt_Block_$callClinit();
                var$7[8] = cmmlt_Block_TNT.$id;
                var$6.$count0.data[8] = 10;
                $var4.$player0 = $var2;
            }
            $var2 = $this.$player;
            if ($var2 !== null) {
                var$4 = new cmmp_InputHandlerImpl;
                var$6 = $this.$settings;
                var$4.$xxa = 0.0;
                var$4.$jumping = 0.0;
                var$4.$yya = 0;
                var$4.$keyStates = $rt_createBooleanArray(10);
                var$4.$settings1 = var$6;
                $var2.$input = var$4;
            }
            $var2 = $this.$levelRenderer;
            if ($var2 !== null) {
                var$4 = $var2.$level0;
                if (var$4 !== null)
                    ju_ArrayList_remove0(var$4.$listeners, $var2);
                $var2.$level0 = $var4;
                ju_ArrayList_add($var4.$listeners, $var2);
                cmmr_LevelRenderer_refresh($var2);
            }
            b: {
                $var2 = $this.$particleManager;
                if ($var2 !== null) {
                    $var4.$particleEngine = $var2;
                    $var1 = 0;
                    while (true) {
                        if ($var1 >= 2)
                            break b;
                        ju_ArrayList_clear($var2.$particles.data[$var1]);
                        $var1 = $var1 + 1 | 0;
                    }
                }
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var4, var$4, var$5, var$6, var$7, var$8, var$9, $ptr);
    }
    var olo_Display = $rt_classWithoutFields();
    var olo_Display_currentMode = null;
    var olo_Display_width = 0;
    var olo_Display_height = 0;
    var olo_Display_title = null;
    var olo_Display_fullscreen = 0;
    var olo_Display_swapInterval = 0;
    var olo_Display_windowResized = 0;
    var olo_Display_windowResizable = 0;
    var olo_Display_fullscreenQuery = null;
    var olo_Display_isWindowActive = 0;
    var olo_Display_resizeEvent = null;
    var olo_Display_blurEvent = null;
    var olo_Display_focusEvent = null;
    function olo_Display_$callClinit() {
        olo_Display_$callClinit = $rt_eraseClinit(olo_Display);
        olo_Display__clinit_();
    }
    function olo_Display_getDisplayMode() {
        olo_Display_$callClinit();
        return olo_Display_currentMode;
    }
    function olo_Display_setDisplayMode($mode) {
        olo_Display_$callClinit();
    }
    function olo_Display_sync($fps) {
        var var$2, var$3, var$4, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$fps = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            olo_Display_$callClinit();
            if ($fps > 0) {
                if (!olo_Sync_initialised) {
                    olo_Sync_initialised = 1;
                    olo_Sync$RunningAvg_init(olo_Sync_sleepDurations, Long_fromInt(1000000));
                    olo_Sync$RunningAvg_init(olo_Sync_yieldDurations, Long_fromInt(Long_toNumber(Long_neg(Long_sub(olo_Sync_getTime(), olo_Sync_getTime()))) * 1.333 | 0));
                    olo_Sync_nextFrame = olo_Sync_getTime();
                }
                a: {
                    try {
                        var$2 = olo_Sync_getTime();
                        if (Long_gt(Long_sub(olo_Sync_nextFrame, var$2), olo_Sync$RunningAvg_avg(olo_Sync_sleepDurations))) {
                            var$3 = Long_fromInt(1);
                            $ptr = 1;
                            continue main;
                        }
                        olo_Sync$RunningAvg_dampenForLowResTicker(olo_Sync_sleepDurations);
                        var$3 = olo_Sync_getTime();
                        if (Long_le(Long_sub(olo_Sync_nextFrame, var$3), olo_Sync$RunningAvg_avg(olo_Sync_yieldDurations)))
                            break a;
                        $ptr = 2;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_InterruptedException) {
                        } else {
                            throw $$e;
                        }
                    }
                }
                var$2 = Long_add(olo_Sync_nextFrame, Long_div(Long_fromInt(1000000000), Long_fromInt($fps)));
                var$3 = olo_Sync_getTime();
                if (Long_gt(var$2, var$3))
                    var$3 = var$2;
                olo_Sync_nextFrame = var$3;
            }
            return;
        case 1:
            b: {
                try {
                    jl_Thread_sleep(var$3);
                    if ($rt_suspending()) {
                        break main;
                    }
                    var$4 = olo_Sync_sleepDurations;
                    var$3 = olo_Sync_getTime();
                    olo_Sync$RunningAvg_add(var$4, Long_sub(var$3, var$2));
                    var$2 = var$3;
                    if (Long_gt(Long_sub(olo_Sync_nextFrame, var$2), olo_Sync$RunningAvg_avg(olo_Sync_sleepDurations))) {
                        var$3 = Long_fromInt(1);
                        continue main;
                    }
                    olo_Sync$RunningAvg_dampenForLowResTicker(olo_Sync_sleepDurations);
                    var$3 = olo_Sync_getTime();
                    if (Long_le(Long_sub(olo_Sync_nextFrame, var$3), olo_Sync$RunningAvg_avg(olo_Sync_yieldDurations)))
                        break b;
                    $ptr = 2;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                    } else {
                        throw $$e;
                    }
                }
            }
            var$2 = Long_add(olo_Sync_nextFrame, Long_div(Long_fromInt(1000000000), Long_fromInt($fps)));
            var$3 = olo_Sync_getTime();
            if (Long_gt(var$2, var$3))
                var$3 = var$2;
            olo_Sync_nextFrame = var$3;
            return;
        case 2:
            b: {
                try {
                    jl_Thread_yield();
                    if ($rt_suspending()) {
                        break main;
                    }
                    var$4 = olo_Sync_yieldDurations;
                    var$2 = olo_Sync_getTime();
                    olo_Sync$RunningAvg_add(var$4, Long_sub(var$2, var$3));
                    var$3 = var$2;
                    if (Long_le(Long_sub(olo_Sync_nextFrame, var$3), olo_Sync$RunningAvg_avg(olo_Sync_yieldDurations)))
                        break b;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                    } else {
                        throw $$e;
                    }
                }
            }
            var$2 = Long_add(olo_Sync_nextFrame, Long_div(Long_fromInt(1000000000), Long_fromInt($fps)));
            var$3 = olo_Sync_getTime();
            if (Long_gt(var$2, var$3))
                var$3 = var$2;
            olo_Sync_nextFrame = var$3;
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($fps, var$2, var$3, var$4, $ptr);
    }
    function olo_Display_setFullscreen($fullscreen) {
        olo_Display_$callClinit();
        if (!$fullscreen) {
            if (olo_Display_isFullscreen())
                $rt_globals.document.exitFullscreen();
        } else if (!olo_Display_isFullscreen())
            m_WebGL_parent.requestFullscreen();
    }
    function olo_Display_isFullscreen() {
        olo_Display_$callClinit();
        return olo_Display_fullscreenQuery.matches ? 1 : 0;
    }
    function olo_Display_setTitle($newTitle) {
        var var$2;
        olo_Display_$callClinit();
        if ($newTitle !== null) {
            olo_Display_title = $newTitle;
            return;
        }
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(50));
        $rt_throw(var$2);
    }
    function olo_Display_isCloseRequested() {
        olo_Display_$callClinit();
        return 0;
    }
    function olo_Display_isActive() {
        olo_Display_$callClinit();
        return olo_Display_isWindowActive;
    }
    function olo_Display_update() {
        var var$1, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$1 = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            olo_Display_$callClinit();
            var$1 = 1;
            $ptr = 1;
        case 1:
            olo_Display_update0(var$1);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push(var$1, $ptr);
    }
    function olo_Display_update0($processMessages) {
        var $r, $w, $h, var$5, var$6, var$7, var$8, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();$h = $thread.pop();$w = $thread.pop();$r = $thread.pop();$processMessages = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            olo_Display_$callClinit();
            $r = m_WebGL_window.devicePixelRatio;
            $w = m_WebGL_canvas.clientWidth * $r | 0;
            $h = m_WebGL_canvas.clientHeight * $r | 0;
            if (!(olo_Display_width == $w && olo_Display_height == $h))
                olo_Display_windowResized = 1;
            if (olo_Display_windowResizable && olo_Display_windowResized) {
                olo_Display_width = $w;
                olo_Display_height = $h;
                var$5 = m_WebGL_canvas;
                var$6 = $w;
                var$5.width = var$6;
                var$6 = m_WebGL_canvas;
                var$5 = olo_Display_height;
                var$6.height = var$5;
                olo_Display_windowResized = 0;
            }
            var$5 = m_WebGL_webgl;
            var$6 = null;
            var$5.bindFramebuffer(36160, var$6);
            var$5 = m_WebGL_webgl;
            var$6 = m_WebGL_backBuffer.$obj;
            var$5.bindFramebuffer(36008, var$6);
            var$5 = m_WebGL_webgl;
            var$6 = null;
            var$5.bindFramebuffer(36009, var$6);
            var$5 = m_WebGL_webgl;
            $processMessages = m_WebGL_backBufferWidth;
            var$7 = m_WebGL_backBufferHeight;
            var$5.blitFramebuffer(0, 0, $processMessages, var$7, 0, 0, $w, $h, 16384, 9728);
            var$5 = m_WebGL_webgl;
            var$6 = m_WebGL_backBuffer.$obj;
            var$5.bindFramebuffer(36160, var$6);
            m_WebGL_resizeBackBuffer(olo_Display_width, olo_Display_height);
            var$5 = m_WebGL_document;
            var$6 = $rt_ustr(olo_Display_title);
            var$5.title = var$6;
            try {
                var$8 = Long_fromInt(1);
                $ptr = 1;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                } else {
                    throw $$e;
                }
            }
            return;
        case 1:
            a: {
                try {
                    jl_Thread_sleep(var$8);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                    } else {
                        throw $$e;
                    }
                }
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($processMessages, $r, $w, $h, var$5, var$6, var$7, var$8, $ptr);
    }
    function olo_Display_create() {
        var var$1, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$1 = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            olo_Display_$callClinit();
            var$1 = m_WebGL_window.devicePixelRatio;
            olo_Display_width = m_WebGL_canvas.clientWidth * var$1 | 0;
            olo_Display_height = m_WebGL_canvas.clientHeight * var$1 | 0;
            olo_Display_setTitle(olo_Display_title);
            $ptr = 1;
        case 1:
            olo_Display_update();
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push(var$1, $ptr);
    }
    function olo_Display_getWidth() {
        olo_Display_$callClinit();
        if (!olo_Display_isFullscreen())
            return olo_Display_width;
        return m_WebGL_canvas.clientWidth * olo_Display_getPixelScaleFactor() | 0;
    }
    function olo_Display_getHeight() {
        olo_Display_$callClinit();
        if (!olo_Display_isFullscreen())
            return olo_Display_height;
        return m_WebGL_canvas.clientHeight * olo_Display_getPixelScaleFactor() | 0;
    }
    function olo_Display_getPixelScaleFactor() {
        olo_Display_$callClinit();
        return m_WebGL_window.devicePixelRatio;
    }
    function olo_Display__clinit_() {
        var var$1, var$2;
        olo_Display_currentMode = new olo_DisplayMode;
        olo_Display_width = 0;
        olo_Display_height = 0;
        olo_Display_title = $rt_s(51);
        olo_Display_fullscreen = 0;
        olo_Display_swapInterval = 0;
        olo_Display_windowResized = 0;
        olo_Display_windowResizable = 1;
        olo_Display_fullscreenQuery = null;
        olo_Display_isWindowActive = 1;
        olo_Display_resizeEvent = new olo_Display$1;
        olo_Display_blurEvent = new olo_Display$2;
        olo_Display_focusEvent = new olo_Display$3;
        olo_Display_fullscreenQuery = $rt_globals.window.matchMedia('(display-mode: fullscreen)');
        var$1 = m_WebGL_window;
        var$2 = olo_Display_resizeEvent;
        var$1.addEventListener("resize", otji_JS_function(var$2, "handleEvent"));
        var$1 = m_WebGL_window;
        var$2 = olo_Display_blurEvent;
        var$1.addEventListener("blue", otji_JS_function(var$2, "handleEvent"));
        var$1 = m_WebGL_window;
        var$2 = olo_Display_focusEvent;
        var$1.addEventListener("focus", otji_JS_function(var$2, "handleEvent"));
    }
    function cmm_SessionData() {
        var a = this; jl_Object.call(a);
        a.$username = null;
        a.$sessionId = null;
        a.$haspaid = 0;
    }
    var cmm_SessionData_allowedBlocks = null;
    function cmm_SessionData_$callClinit() {
        cmm_SessionData_$callClinit = $rt_eraseClinit(cmm_SessionData);
        cmm_SessionData__clinit_();
    }
    function cmm_SessionData__clinit_() {
        var var$1;
        var$1 = ju_ArrayList__init_();
        cmm_SessionData_allowedBlocks = var$1;
        cmmlt_Block_$callClinit();
        ju_ArrayList_add(var$1, cmmlt_Block_STONE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_COBBLESTONE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_BRICK);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_DIRT);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_WOOD);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_LOG);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_LEAVES);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_GLASS);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_SLAB);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_MOSSY_COBBLESTONE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_SAPLING);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_DANDELION);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_ROSE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_BROWN_MUSHROOM);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_RED_MUSHROOM);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_SAND);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_GRAVEL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_SPONGE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_RED_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_ORANGE_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_YELLOW_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_LIME_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_GREEN_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_AQUA_GREEN_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_CYAN_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_BLUE_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_PURPLE_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_INDIGO_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_VIOLET_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_MAGENTA_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_PINK_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_BLACK_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_GRAY_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_WHITE_WOOL);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_COAL_ORE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_IRON_ORE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_GOLD_ORE);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_IRON_BLOCK);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_GOLD_BLOCK);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_BOOKSHELF);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_TNT);
        ju_ArrayList_add(cmm_SessionData_allowedBlocks, cmmlt_Block_OBSIDIAN);
    }
    var jl_System = $rt_classWithoutFields();
    var jl_System_outCache = null;
    var jl_System_errCache = null;
    function jl_System_out() {
        if (jl_System_outCache === null)
            jl_System_outCache = ji_PrintStream__init_(otcic_StdoutOutputStream_INSTANCE, 0);
        return jl_System_outCache;
    }
    function jl_System_err() {
        if (jl_System_errCache === null)
            jl_System_errCache = ji_PrintStream__init_(otcic_StderrOutputStream_INSTANCE, 0);
        return jl_System_errCache;
    }
    function jl_System_arraycopy($src, $srcPos, $dest, $destPos, $length) {
        var $srcType, $targetType, $srcArray, $i, var$10, var$11, var$12, $elem, var$14;
        if ($src !== null && $dest !== null) {
            if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
                a: {
                    b: {
                        if ($src !== $dest) {
                            $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                            $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                            if ($srcType !== null && $targetType !== null) {
                                if ($srcType === $targetType)
                                    break b;
                                if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                    $srcArray = $src;
                                    $i = 0;
                                    var$10 = $srcPos;
                                    while ($i < $length) {
                                        var$11 = $srcArray.data;
                                        var$12 = var$10 + 1 | 0;
                                        $elem = var$11[var$10];
                                        var$14 = $targetType.$platformClass;
                                        if (!($elem !== null && !(typeof $elem.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($elem.constructor, var$14) ? 1 : 0)) {
                                            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                            $src = new jl_ArrayStoreException;
                                            jl_Throwable__init_0($src);
                                            $rt_throw($src);
                                        }
                                        $i = $i + 1 | 0;
                                        var$10 = var$12;
                                    }
                                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                    return;
                                }
                                if (!jl_Class_isPrimitive($srcType))
                                    break a;
                                if (jl_Class_isPrimitive($targetType))
                                    break b;
                                else
                                    break a;
                            }
                            $src = new jl_ArrayStoreException;
                            jl_Throwable__init_0($src);
                            $rt_throw($src);
                        }
                    }
                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                    return;
                }
                $src = new jl_ArrayStoreException;
                jl_Throwable__init_0($src);
                $rt_throw($src);
            }
            $src = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0($src);
            $rt_throw($src);
        }
        $dest = new jl_NullPointerException;
        jl_Throwable__init_($dest, $rt_s(52));
        $rt_throw($dest);
    }
    function jl_System_fastArraycopy($src, $srcPos, $dest, $destPos, $length) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
            return;
        }
        $src = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0($src);
        $rt_throw($src);
    }
    function jl_System_doArrayCopy(var$1, var$2, var$3, var$4, var$5) {
        if (var$5 === 0) {
            return; 
        } else if (typeof var$1.data.buffer !== 'undefined') {
            var$3.data.set(var$1.data.subarray(var$2, var$2 + var$5), var$4);
        } else if (var$1 !== var$3 || var$4 < var$2) {
            for (var i = 0; i < var$5; i = (i + 1) | 0) {
                var$3.data[var$4++] = var$1.data[var$2++];
            }
        } else {
            var$2 = (var$2 + var$5) | 0;
            var$4 = (var$4 + var$5) | 0;
            for (var i = 0; i < var$5; i = (i + 1) | 0) {
                var$3.data[--var$4] = var$1.data[--var$2];
            }
        }
    }
    function jl_System_currentTimeMillis() {
        return Long_fromNumber(new Date().getTime());
    }
    function jl_System_nanoTime() {
        return Long_fromNumber($rt_globals.performance.now() * 1000000.0);
    }
    var otci_IntegerUtil = $rt_classWithoutFields();
    var otj_JSObject = $rt_classWithoutFields(0);
    var otjde_EventTarget = $rt_classWithoutFields(0);
    var otjde_FocusEventTarget = $rt_classWithoutFields(0);
    var otjde_MouseEventTarget = $rt_classWithoutFields(0);
    var otjde_KeyboardEventTarget = $rt_classWithoutFields(0);
    var otjde_LoadEventTarget = $rt_classWithoutFields(0);
    var otjde_GamepadEventTarget = $rt_classWithoutFields(0);
    var otjb_WindowEventTarget = $rt_classWithoutFields(0);
    var otjb_StorageProvider = $rt_classWithoutFields(0);
    var otjc_JSArrayReader = $rt_classWithoutFields(0);
    var otjb_Window = $rt_classWithoutFields();
    function otjb_Window_get$exported$0(var$0, var$1) {
        var$1 = var$0.$get(var$1);
        otji_JSWrapper_$callClinit();
        return var$1 === null ? null : var$1 instanceof $rt_objcls() && var$1 instanceof otji_JSWrapper ? otji_JSWrapper_unwrap(var$1) : var$1;
    }
    function otjb_Window_addEventListener$exported$1(var$0, var$1, var$2) {
        var$0.$addEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otjb_Window_removeEventListener$exported$2(var$0, var$1, var$2) {
        var$0.$removeEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otjb_Window_removeEventListener$exported$3(var$0, var$1, var$2, var$3) {
        var$0.$removeEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function otjb_Window_dispatchEvent$exported$4(var$0, var$1) {
        return !!var$0.$dispatchEvent(var$1);
    }
    function otjb_Window_getLength$exported$5(var$0) {
        return var$0.$getLength0();
    }
    function otjb_Window_addEventListener$exported$6(var$0, var$1, var$2, var$3) {
        var$0.$addEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    var nPm_AssetRepository = $rt_classWithoutFields();
    var nPm_AssetRepository_filePool = null;
    function nPm_AssetRepository_install($pkg) {
        var $in2, $in, $header, $path, var$6, var$7, var$8, var$9, $len, var$11, var$12, $digest2, $digest, var$15, var$16, var$17, var$18, $dg, $file;
        $in2 = ji_ByteArrayInputStream__init_($pkg);
        $in = ji_DataInputStream__init_($in2);
        $header = $rt_createByteArray(8);
        ji_DataInputStream_read($in, $header);
        $path = new jl_String;
        jnc_Charset_checkCanonicalName($rt_s(53));
        jnc_Charset$Charsets_$callClinit();
        var$6 = jnc_Charset$Charsets_value;
        if (jl_String_isEmpty($rt_s(53)))
            var$7 = $rt_s(53);
        else {
            var$8 = 0;
            var$9 = 0;
            $pkg = $rt_s(53).$characters.data;
            $len = $pkg.length;
            var$11 = 0;
            a: {
                while (var$11 < $len) {
                    var$12 = $pkg[var$11];
                    if (jl_Character_toUpperCase(var$12) != var$12) {
                        var$8 = 1;
                        break a;
                    }
                    if (jl_Character_isSurrogate(var$12))
                        var$9 = 1;
                    var$11 = var$11 + 1 | 0;
                }
            }
            if (!var$8)
                var$7 = $rt_s(53);
            else if (!var$9) {
                $pkg = $rt_createCharArray($rt_s(53).$characters.data.length);
                $digest2 = $pkg.data;
                $len = 0;
                while (true) {
                    $digest = $rt_s(53).$characters.data;
                    if ($len >= $digest.length)
                        break;
                    $digest2[$len] = jl_Character_toUpperCase($digest[$len]);
                    $len = $len + 1 | 0;
                }
                var$7 = jl_String__init_($pkg);
            } else {
                $digest = $rt_createIntArray($rt_s(53).$characters.data.length).data;
                var$12 = 0;
                $len = 0;
                while (true) {
                    $pkg = $rt_s(53).$characters.data;
                    var$11 = $pkg.length;
                    if ($len >= var$11)
                        break;
                    b: {
                        if ($len != (var$11 - 1 | 0) && jl_Character_isHighSurrogate($pkg[$len])) {
                            $pkg = $rt_s(53).$characters.data;
                            var$15 = $len + 1 | 0;
                            if (jl_Character_isLowSurrogate($pkg[var$15])) {
                                var$11 = var$12 + 1 | 0;
                                $pkg = $rt_s(53).$characters.data;
                                $digest[var$12] = jl_Character_toUpperCase0(jl_Character_toCodePoint($pkg[$len], $pkg[var$15]));
                                $len = var$15;
                                break b;
                            }
                        }
                        var$11 = var$12 + 1 | 0;
                        $digest[var$12] = jl_Character_toUpperCase($rt_s(53).$characters.data[$len]);
                    }
                    $len = $len + 1 | 0;
                    var$12 = var$11;
                }
                var$7 = new jl_String;
                $len = 0;
                var$7.$characters = $rt_createCharArray(var$12 * 2 | 0);
                var$15 = 0;
                var$8 = 0;
                while (var$8 < var$12) {
                    var$9 = $len + 1 | 0;
                    var$16 = $digest[$len];
                    if (var$16 < 65536) {
                        $pkg = var$7.$characters.data;
                        var$17 = var$15 + 1 | 0;
                        $pkg[var$15] = var$16 & 65535;
                    } else {
                        $pkg = var$7.$characters.data;
                        $len = var$15 + 1 | 0;
                        $pkg[var$15] = jl_Character_highSurrogate(var$16);
                        $pkg = var$7.$characters.data;
                        var$17 = $len + 1 | 0;
                        $pkg[$len] = jl_Character_lowSurrogate(var$16);
                    }
                    var$8 = var$8 + 1 | 0;
                    $len = var$9;
                    var$15 = var$17;
                }
                $pkg = var$7.$characters;
                if (var$15 < $pkg.data.length)
                    var$7.$characters = ju_Arrays_copyOf($pkg, var$15);
            }
        }
        var$6 = ju_HashMap_get(var$6, var$7);
        if (var$6 === null) {
            $in2 = new jnc_UnsupportedCharsetException;
            jl_Throwable__init_0($in2);
            $in2.$charsetName = $rt_s(53);
            $rt_throw($in2);
        }
        var$18 = jnc_Charset_decode(var$6, jn_ByteBuffer_wrap($header, 0, $header.data.length));
        if (!var$18.$position0 && var$18.$limit1 == var$18.$capacity)
            $path.$characters = jn_CharBuffer_array(var$18);
        else {
            $pkg = $rt_createCharArray(jn_Buffer_remaining(var$18));
            $path.$characters = $pkg;
            jn_CharBuffer_get(var$18, $pkg);
        }
        if (!jl_String_equals($rt_s(54), $path))
            $rt_throw(ji_IOException__init_($rt_s(55)));
        ji_DataInputStream_readUTF($in);
        var$18 = ji_DataInputStream__init_(cjj_InflaterInputStream__init_($in2));
        $dg = nPm_SHA1Digest__init_();
        while (true) {
            $in = ji_DataInputStream_readUTF(var$18);
            if (!jl_String_equals($rt_s(56), $in)) {
                if (ji_FilterInputStream_available(var$18) <= 0 && jl_String_equals($rt_s(57), $in))
                    return;
                $rt_throw(ji_IOException__init_($rt_s(55)));
            }
            $path = ji_DataInputStream_readUTF(var$18);
            $digest = $rt_createByteArray(20);
            $digest2 = $rt_createByteArray(20);
            ji_DataInputStream_read(var$18, $digest);
            $len = ji_DataInputStream_readInt(var$18);
            $file = $rt_createByteArray($len);
            ji_DataInputStream_read(var$18, $file);
            if (ju_HashMap_containsKey(nPm_AssetRepository_filePool, $path))
                continue;
            nPm_GeneralDigest_update($dg, $file, 0, $len);
            nPm_SHA1Digest_doFinal($dg, $digest2, 0);
            if (!ju_Arrays_equals($digest, $digest2)) {
                $in2 = new ji_IOException;
                var$18 = jl_StringBuilder__init_();
                jl_StringBuilder_append(jl_StringBuilder_append(var$18, $rt_s(58)), $path);
                ji_IOException__init_0($in2, jl_StringBuilder_toString(var$18));
                $rt_throw($in2);
            }
            ju_HashMap_put(nPm_AssetRepository_filePool, $path, $file);
            ji_PrintStream_println(jl_System_out(), $path);
            if (!jl_String_equals($rt_s(59), ji_DataInputStream_readUTF(var$18)))
                break;
        }
        $rt_throw(ji_IOException__init_($rt_s(55)));
    }
    function nPm_AssetRepository_getResource($path) {
        if (jl_String_startsWith($path, $rt_s(6)))
            $path = jl_String_substring($path, 1);
        return ju_HashMap_get(nPm_AssetRepository_filePool, $path);
    }
    function nPm_AssetRepository__clinit_() {
        nPm_AssetRepository_filePool = ju_HashMap__init_();
    }
    var ji_IOException = $rt_classWithoutFields(jl_Exception);
    function ji_IOException__init_(var_0) {
        var var_1 = new ji_IOException();
        ji_IOException__init_0(var_1, var_0);
        return var_1;
    }
    function ji_IOException__init_0($this, $message) {
        jl_Throwable__init_($this, $message);
    }
    function cmmg_GameMode() {
        var a = this; jl_Object.call(a);
        a.$minecraft = null;
        a.$instantBreak = 0;
    }
    function cmmg_GameMode_openInventory($this) {}
    function cmmg_GameMode_isSurvival($this) {
        return 1;
    }
    function cmmg_SurvivalGameMode() {
        var a = this; cmmg_GameMode.call(a);
        a.$hitX = 0;
        a.$hitY = 0;
        a.$hitZ = 0;
        a.$hits = 0;
        a.$hardness0 = 0;
        a.$hitDelay = 0;
        a.$spawner = null;
    }
    function cmmg_SurvivalGameMode_hitBlock($this, $x, $y, $z, $side) {
        var $type, $block, var$7;
        $type = $this.$hitDelay;
        if ($type > 0)
            $this.$hitDelay = $type - 1 | 0;
        else if ($x == $this.$hitX && $y == $this.$hitY && $z == $this.$hitZ) {
            $type = cmml_Level_getTile($this.$minecraft.$level, $x, $y, $z);
            if ($type) {
                cmmlt_Block_$callClinit();
                $block = cmmlt_Block_blocks.data[$type];
                $this.$hardness0 = $block.$hardness;
                var$7 = $this.$minecraft;
                cmmlt_Block_spawnBlockParticles($block, var$7.$level, $x, $y, $z, $side, var$7.$particleManager);
                $side = $this.$hits + 1 | 0;
                $this.$hits = $side;
                if ($side == ($this.$hardness0 + 1 | 0)) {
                    cmmg_SurvivalGameMode_breakBlock($this, $x, $y, $z);
                    $this.$hits = 0;
                    $this.$hitDelay = 5;
                }
            }
        } else {
            $this.$hits = 0;
            $this.$hitX = $x;
            $this.$hitY = $y;
            $this.$hitZ = $z;
        }
    }
    function cmmg_SurvivalGameMode_breakBlock($this, $x, $y, $z) {
        var $block, var$5, var$6, var$7, var$8;
        $block = cmml_Level_getTile($this.$minecraft.$level, $x, $y, $z);
        cmmlt_Block_$callClinit();
        cmmlt_Block_blocks.data[$block].$onBreak($this.$minecraft.$level, $x, $y, $z);
        var$5 = $this.$minecraft.$level;
        var$6 = cmmlt_Block_blocks.data[cmml_Level_getTile(var$5, $x, $y, $z)];
        $block = cmml_Level_netSetTile(var$5, $x, $y, $z, 0);
        if (var$6 !== null && $block) {
            var$7 = var$6.$stepsound;
            cmmlt_Tile$SoundType_$callClinit();
            if (var$7 !== cmmlt_Tile$SoundType_none) {
                var$7 = var$7.$name0;
                var$8 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$8);
                jl_StringBuilder_append(jl_StringBuilder_append(var$8, $rt_s(60)), var$7);
                jl_AbstractStringBuilder_toString(var$8);
                cmmlt_Tile$SoundType_getVolume(var$6.$stepsound);
                cmmlt_Tile$SoundType_getPitch(var$6.$stepsound);
            }
            var$6.$spawnBreakParticles(var$5, $x, $y, $z, $this.$minecraft.$particleManager);
        }
    }
    function cmmg_SurvivalGameMode_resetHits($this) {
        $this.$hits = 0;
        $this.$hitDelay = 0;
    }
    function cmmg_SurvivalGameMode_applyCracks($this, $time) {
        var var$2;
        var$2 = $this.$hits;
        if (var$2 <= 0)
            $this.$minecraft.$levelRenderer.$cracks = 0.0;
        else
            $this.$minecraft.$levelRenderer.$cracks = (var$2 + $time - 1.0) / $this.$hardness0;
    }
    function cmmg_SurvivalGameMode_getReachDistance($this) {
        return 4.0;
    }
    function cmmg_SurvivalGameMode_spawnMob($this) {
        var var$1, $area, var$3, var$4, var$5, var$6, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();$area = $thread.pop();var$1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$1 = $this.$spawner.$level1;
            $area = (($rt_imul($rt_imul(var$1.$width0, var$1.$height0), var$1.$depth) / 64 | 0) / 64 | 0) / 64 | 0;
            if (ju_Random_nextInt(var$1.$random1, 100) < $area) {
                var$1 = $this.$spawner.$level1;
                var$3 = 0;
                var$4 = 0;
                while (true) {
                    var$5 = var$1.$blockMap.$all;
                    if (var$4 >= var$5.$size0)
                        break;
                    if (jl_Class_isAssignableFrom($rt_cls(cmmm_Mob), jl_Object_getClass(ju_ArrayList_get(var$5, var$4))))
                        var$3 = var$3 + 1 | 0;
                    var$4 = var$4 + 1 | 0;
                }
                if (var$3 < ($area * 20 | 0)) {
                    var$6 = $this.$spawner;
                    var$5 = var$6.$level1.$player0;
                    var$1 = null;
                    $ptr = 1;
                    continue main;
                }
            }
            return;
        case 1:
            cmml_MobSpawner_spawn(var$6, $area, var$5, var$1);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, var$1, $area, var$3, var$4, var$5, var$6, $ptr);
    }
    function cmm_Timer() {
        var a = this; jl_Object.call(a);
        a.$tps = 0.0;
        a.$lastHR = 0.0;
        a.$elapsedTicks = 0;
        a.$delta = 0.0;
        a.$speed = 0.0;
        a.$elapsedDelta = 0.0;
        a.$lastSysClock = Long_ZERO;
        a.$lastHRClock = Long_ZERO;
        a.$adjustment = 0.0;
    }
    function cmm_ProgressBarDisplay() {
        var a = this; jl_Object.call(a);
        a.$text = null;
        a.$minecraft0 = null;
        a.$title = null;
        a.$start = Long_ZERO;
    }
    function cmm_ProgressBarDisplay_setTitle($this, $var1) {
        var var$2, $var3, $var2;
        var$2 = $this.$minecraft0;
        if (!var$2.$running) {
            $var1 = new cmm_StopGameException;
            jl_Throwable__init_0($var1);
            $rt_throw($var1);
        }
        $this.$title = $var1;
        $var3 = var$2.$width * 240 | 0;
        $var2 = var$2.$height;
        $var3 = $var3 / $var2 | 0;
        $var2 = ($var2 * 240 | 0) / $var2 | 0;
        olo_GL11_glClear(256);
        olo_GL11_glMatrixMode(5889);
        olo_GL11_glLoadIdentity();
        olo_GL11_glOrtho(0.0, $var3, $var2, 0.0, 100.0, 300.0);
        olo_GL11_glMatrixMode(5888);
        olo_GL11_glLoadIdentity();
        olo_GL11_glTranslatef(0.0, 0.0, (-200.0));
    }
    function cmm_ProgressBarDisplay_setText($this, $var1) {
        var var$2, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if (!$this.$minecraft0.$running) {
                $var1 = new cmm_StopGameException;
                jl_Throwable__init_0($var1);
                $rt_throw($var1);
            }
            $this.$text = $var1;
            var$2 = (-1);
            $ptr = 1;
        case 1:
            cmm_ProgressBarDisplay_setProgress($this, var$2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, var$2, $ptr);
    }
    function cmm_ProgressBarDisplay_setProgress($this, $var1) {
        var $var6, var$3, var$4, $var4, $var7, $var5, var$8, var$9, var$10, var$11, var$12, $var10, $var8, var$15, var$16, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$16 = $thread.pop();var$15 = $thread.pop();$var8 = $thread.pop();$var10 = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();$var5 = $thread.pop();$var7 = $thread.pop();$var4 = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();$var6 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if (!$this.$minecraft0.$running) {
                $var6 = new cmm_StopGameException;
                jl_Throwable__init_0($var6);
                $rt_throw($var6);
            }
            var$3 = jl_System_currentTimeMillis();
            var$4 = Long_sub(var$3, $this.$start);
            if (Long_ge(var$4, Long_ZERO) && Long_lt(var$4, Long_fromInt(20)))
                return;
            $this.$start = var$3;
            $var6 = $this.$minecraft0;
            $var4 = $var6.$width * 240 | 0;
            $var7 = $var6.$height;
            $var4 = $var4 / $var7 | 0;
            $var5 = ($var7 * 240 | 0) / $var7 | 0;
            olo_GL11_glClear(16640);
            cmmr_ShapeRenderer_$callClinit();
            $var6 = cmmr_ShapeRenderer_instance;
            var$8 = $this.$minecraft0.$textureManager;
            var$9 = $rt_s(61);
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load(var$8, var$9);
            if ($rt_suspending()) {
                break main;
            }
            $var7 = $tmp;
            olo_GL11_glBindTexture(3553, $var7);
            cmmr_ShapeRenderer_begin($var6);
            cmmr_ShapeRenderer_color0($var6, 4210752);
            var$10 = $var5;
            var$11 = var$10 / 32.0;
            cmmr_ShapeRenderer_vertexUV($var6, 0.0, var$10, 0.0, 0.0, var$11);
            var$12 = $var4;
            $var10 = var$12 / 32.0;
            cmmr_ShapeRenderer_vertexUV($var6, var$12, var$10, 0.0, $var10, var$11);
            cmmr_ShapeRenderer_vertexUV($var6, var$12, 0.0, 0.0, $var10, 0.0);
            cmmr_ShapeRenderer_vertexUV($var6, 0.0, 0.0, 0.0, 0.0, 0.0);
            cmmr_ShapeRenderer_end($var6);
            if ($var1 >= 0) {
                $var7 = ($var4 / 2 | 0) - 50 | 0;
                $var8 = ($var5 / 2 | 0) + 16 | 0;
                olo_GL11_glDisable(3553);
                cmmr_ShapeRenderer_begin($var6);
                cmmr_ShapeRenderer_color0($var6, 8421504);
                var$12 = $var7;
                var$15 = $var8;
                cmmr_ShapeRenderer_vertex($var6, var$12, var$15, 0.0);
                $var10 = $var8 + 2 | 0;
                cmmr_ShapeRenderer_vertex($var6, var$12, $var10, 0.0);
                var$16 = $var7 + 100 | 0;
                cmmr_ShapeRenderer_vertex($var6, var$16, $var10, 0.0);
                cmmr_ShapeRenderer_vertex($var6, var$16, var$15, 0.0);
                cmmr_ShapeRenderer_color0($var6, 8454016);
                cmmr_ShapeRenderer_vertex($var6, var$12, var$15, 0.0);
                cmmr_ShapeRenderer_vertex($var6, var$12, $var10, 0.0);
                var$12 = $var7 + $var1 | 0;
                cmmr_ShapeRenderer_vertex($var6, var$12, $var10, 0.0);
                cmmr_ShapeRenderer_vertex($var6, var$12, var$15, 0.0);
                cmmr_ShapeRenderer_end($var6);
                olo_GL11_glEnable(3553);
            }
            $var6 = $this.$minecraft0.$fontRenderer;
            var$8 = $this.$title;
            $var1 = ($var4 - cmmg_FontRenderer_getWidth($var6, var$8) | 0) / 2 | 0;
            $var7 = ($var5 / 2 | 0) - 4 | 0;
            cmmg_FontRenderer_render($var6, var$8, $var1, $var7 - 16 | 0, 16777215);
            $var6 = $this.$minecraft0.$fontRenderer;
            var$8 = $this.$text;
            cmmg_FontRenderer_render($var6, var$8, ($var4 - cmmg_FontRenderer_getWidth($var6, var$8) | 0) / 2 | 0, $var7 + 8 | 0, 16777215);
            $ptr = 2;
        case 2:
            olo_Display_update();
            if ($rt_suspending()) {
                break main;
            }
            try {
                $ptr = 3;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                } else {
                    throw $$e;
                }
            }
            return;
        case 3:
            a: {
                try {
                    jl_Thread_yield();
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                    } else {
                        throw $$e;
                    }
                }
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var6, var$3, var$4, $var4, $var7, $var5, var$8, var$9, var$10, var$11, var$12, $var10, $var8, var$15, var$16, $ptr);
    }
    function cmmr_Renderer() {
        var a = this; jl_Object.call(a);
        a.$minecraft1 = null;
        a.$fogColorMultiplier = 0.0;
        a.$displayActive = 0;
        a.$fogEnd = 0.0;
        a.$heldBlock = null;
        a.$levelTicks = 0;
        a.$entity = null;
        a.$random = null;
        a.$unused1 = 0;
        a.$unused2 = 0;
        a.$buffer = null;
        a.$fogRed = 0.0;
        a.$fogBlue = 0.0;
        a.$fogGreen = 0.0;
    }
    function cmmr_Renderer_getPlayerVector($this, $var1) {
        var var$2, $var2, $var3, $var5;
        var$2 = $this.$minecraft1.$player;
        $var2 = var$2.$xo;
        $var2 = $var2 + (var$2.$x - $var2) * $var1;
        $var3 = var$2.$yo;
        $var3 = $var3 + (var$2.$y - $var3) * $var1;
        $var5 = var$2.$zo;
        return cmmm_Vec3D__init_($var2, $var3, $var5 + (var$2.$z - $var5) * $var1);
    }
    function cmmr_Renderer_hurtEffect($this, $var1) {
        var var$2, $var2, var$4;
        var$2 = $this.$minecraft1.$player;
        $var2 = var$2.$hurtTime - $var1;
        if (var$2.$health <= 0)
            olo_GL11_glRotatef(40.0 - 8000.0 / ($var1 + var$2.$deathTime + 200.0), 0.0, 0.0, 1.0);
        if ($var2 >= 0.0) {
            $var1 = $var2 / var$2.$hurtDuration;
            $var1 = cmu_MathHelper_sin($var1 * $var1 * $var1 * $var1 * 3.1415927410125732);
            var$4 = var$2.$hurtDir;
            olo_GL11_glRotatef( -var$4, 0.0, 1.0, 0.0);
            olo_GL11_glRotatef( -$var1 * 14.0, 0.0, 0.0, 1.0);
            olo_GL11_glRotatef(var$4, 0.0, 1.0, 0.0);
        }
    }
    function cmmr_Renderer_applyBobbing($this, $var1) {
        var var$2, var$3, $var2, $var3, $var5;
        var$2 = $this.$minecraft1.$player;
        var$3 = var$2.$walkDist;
        var$3 = var$3 + (var$3 - var$2.$walkDistO) * $var1;
        $var2 = var$2.$oBob;
        $var3 = $var2 + (var$2.$bob - $var2) * $var1;
        $var2 = var$2.$oTilt;
        $var5 = $var2 + (var$2.$tilt - $var2) * $var1;
        var$3 = var$3 * 3.1415927410125732;
        olo_GL11_glTranslatef(cmu_MathHelper_sin(var$3) * $var3 * 0.5,  -jl_Math_abs(cmu_MathHelper_cos(var$3) * $var3), 0.0);
        olo_GL11_glRotatef(cmu_MathHelper_sin(var$3) * $var3 * 3.0, 0.0, 0.0, 1.0);
        olo_GL11_glRotatef(jl_Math_abs(cmu_MathHelper_cos(var$3 + 0.20000000298023224) * $var3) * 5.0, 1.0, 0.0, 0.0);
        olo_GL11_glRotatef($var5, 1.0, 0.0, 0.0);
    }
    function cmmr_Renderer_setLighting($this, $var1) {
        var $var3;
        if (!$var1) {
            olo_GL11_glDisable(2896);
            olo_GL11_glDisable(16384);
        } else {
            olo_GL11_glEnable(2896);
            olo_GL11_glEnable(16384);
            olo_GL11_glEnable(2903);
            $var3 = cmmm_Vec3D_normalize(cmmm_Vec3D__init_(0.0, (-1.0), 0.5));
            cmmr_Renderer_createBuffer($this, $var3.$x3, $var3.$y3, $var3.$z3, 0.0);
            cmmr_Renderer_createBuffer($this, 0.30000001192092896, 0.30000001192092896, 0.30000001192092896, 1.0);
            cmmr_Renderer_createBuffer($this, 0.0, 0.0, 0.0, 1.0);
            cmmr_Renderer_createBuffer($this, 0.699999988079071, 0.699999988079071, 0.699999988079071, 1.0);
        }
    }
    function cmmr_Renderer_enableGuiMode($this) {
        var var$1, $var1, $var2;
        var$1 = $this.$minecraft1;
        $var1 = var$1.$width * 240 | 0;
        $var2 = var$1.$height;
        $var1 = $var1 / $var2 | 0;
        $var2 = ($var2 * 240 | 0) / $var2 | 0;
        olo_GL11_glClear(256);
        olo_GL11_glMatrixMode(5889);
        olo_GL11_glLoadIdentity();
        olo_GL11_glOrtho(0.0, $var1, $var2, 0.0, 100.0, 300.0);
        olo_GL11_glMatrixMode(5888);
        olo_GL11_glLoadIdentity();
        olo_GL11_glTranslatef(0.0, 0.0, (-200.0));
    }
    function cmmr_Renderer_updateFog($this) {
        var $var2, $var1, $var6, $var4, $var8, $var3;
        $var2 = $this.$minecraft1;
        $var1 = $var2.$level;
        $var2 = $var2.$player;
        $var6 = cmmr_Renderer_createBuffer($this, $this.$fogRed, $this.$fogBlue, $this.$fogGreen, 1.0);
        olo_GL11_$callClinit();
        olo_GL11_fogColorR = jn_FloatBufferImpl_get($var6);
        olo_GL11_fogColorG = jn_FloatBufferImpl_get($var6);
        olo_GL11_fogColorB = jn_FloatBufferImpl_get($var6);
        olo_GL11_fogColorA = jn_FloatBufferImpl_get($var6);
        olo_GL11_glNormal3f(0.0, (-1.0), 0.0);
        olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
        cmmlt_Block_$callClinit();
        $var2 = cmmlt_Block_blocks.data[cmml_Level_getTile($var1, $var2.$x | 0, $var2.$y + 0.11999999731779099 | 0, $var2.$z | 0)];
        if ($var2 !== null && $var2.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
            $var6 = $var2.$getLiquidType();
            olo_GL11_glFogi(2917, 2048);
            if ($var6 === cmmll_LiquidType_WATER) {
                olo_GL11_glFogf(2914, 0.10000000149011612);
                $var4 = 0.4000000059604645;
                $var8 = 0.4000000059604645;
                $var3 = 0.8999999761581421;
                if ($this.$minecraft1.$settings.$anaglyph) {
                    $var4 = 0.45500001311302185;
                    $var8 = 0.4000000059604645;
                    $var3 = 0.75;
                }
                cmmr_Renderer_createBuffer($this, $var4, $var8, $var3, 1.0);
            } else if ($var6 === cmmll_LiquidType_LAVA) {
                olo_GL11_glFogf(2914, 2.0);
                $var4 = 0.4000000059604645;
                $var8 = 0.30000001192092896;
                $var3 = 0.30000001192092896;
                if ($this.$minecraft1.$settings.$anaglyph) {
                    $var4 = 0.33000001311302185;
                    $var3 = 0.33000001311302185;
                    $var8 = $var3;
                }
                cmmr_Renderer_createBuffer($this, $var4, $var8, $var3, 1.0);
            }
        } else {
            olo_GL11_glFogi(2917, 9729);
            olo_GL11_glFogf(2915, 0.0);
            olo_GL11_glFogf(2916, $this.$fogEnd);
            cmmr_Renderer_createBuffer($this, 1.0, 1.0, 1.0, 1.0);
        }
        olo_GL11_glEnable(2903);
    }
    function cmmr_Renderer_createBuffer($this, $var1, $var2, $var3, $var4) {
        jn_Buffer_clear($this.$buffer);
        jn_FloatBufferImpl_put(jn_FloatBufferImpl_put(jn_FloatBufferImpl_put(jn_FloatBufferImpl_put($this.$buffer, $var1), $var2), $var3), $var4);
        jn_Buffer_flip($this.$buffer);
        return $this.$buffer;
    }
    function cmmm_Model() {
        jl_Object.call(this);
        this.$attackOffset = 0.0;
    }
    function cmmm_HumanoidModel() {
        var a = this; cmmm_Model.call(a);
        a.$head = null;
        a.$headwear = null;
        a.$body = null;
        a.$rightArm = null;
        a.$leftArm = null;
        a.$rightLeg = null;
        a.$leftLeg = null;
    }
    function cmmm_HumanoidModel__init_0(var_0) {
        var var_1 = new cmmm_HumanoidModel();
        cmmm_HumanoidModel__init_(var_1, var_0);
        return var_1;
    }
    function cmmm_HumanoidModel__init_($this, $var1) {
        var var$2;
        var$2 = cmmm_ModelPart__init_(0, 0);
        $this.$head = var$2;
        cmmm_ModelPart_setBounds(var$2, (-4.0), (-8.0), (-4.0), 8, 8, 8, $var1);
        var$2 = cmmm_ModelPart__init_(32, 0);
        $this.$headwear = var$2;
        cmmm_ModelPart_setBounds(var$2, (-4.0), (-8.0), (-4.0), 8, 8, 8, $var1 + 0.5);
        var$2 = cmmm_ModelPart__init_(16, 16);
        $this.$body = var$2;
        cmmm_ModelPart_setBounds(var$2, (-4.0), 0.0, (-2.0), 8, 12, 4, $var1);
        var$2 = cmmm_ModelPart__init_(40, 16);
        $this.$rightArm = var$2;
        cmmm_ModelPart_setBounds(var$2, (-3.0), (-2.0), (-2.0), 4, 12, 4, $var1);
        cmmm_ModelPart_setPosition($this.$rightArm, (-5.0), 2.0, 0.0);
        var$2 = cmmm_ModelPart__init_(40, 16);
        $this.$leftArm = var$2;
        var$2.$mirror = 1;
        cmmm_ModelPart_setBounds(var$2, (-1.0), (-2.0), (-2.0), 4, 12, 4, $var1);
        cmmm_ModelPart_setPosition($this.$leftArm, 5.0, 2.0, 0.0);
        var$2 = cmmm_ModelPart__init_(0, 16);
        $this.$rightLeg = var$2;
        cmmm_ModelPart_setBounds(var$2, (-2.0), 0.0, (-2.0), 4, 12, 4, $var1);
        cmmm_ModelPart_setPosition($this.$rightLeg, (-2.0), 12.0, 0.0);
        var$2 = cmmm_ModelPart__init_(0, 16);
        $this.$leftLeg = var$2;
        var$2.$mirror = 1;
        cmmm_ModelPart_setBounds(var$2, (-2.0), 0.0, (-2.0), 4, 12, 4, $var1);
        cmmm_ModelPart_setPosition($this.$leftLeg, 2.0, 12.0, 0.0);
    }
    function cmmm_HumanoidModel_render($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        $this.$setRotationAngles($var1, $var2, $var3, $var4, $var5, $var6);
        cmmm_ModelPart_render($this.$head, $var6);
        cmmm_ModelPart_render($this.$body, $var6);
        cmmm_ModelPart_render($this.$rightArm, $var6);
        cmmm_ModelPart_render($this.$leftArm, $var6);
        cmmm_ModelPart_render($this.$rightLeg, $var6);
        cmmm_ModelPart_render($this.$leftLeg, $var6);
    }
    function cmmm_HumanoidModel_setRotationAngles($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7, var$8;
        var$7 = $this.$head;
        var$7.$yaw = $var4 / 57.2957763671875;
        var$7.$pitch = $var5 / 57.2957763671875;
        var$7 = $this.$rightArm;
        var$8 = $var1 * 0.6661999821662903;
        $var4 = var$8 + 3.1415927410125732;
        var$7.$pitch = cmu_MathHelper_cos($var4) * 2.0 * $var2;
        $this.$rightArm.$roll = (cmu_MathHelper_cos($var1 * 0.23119999468326569) + 1.0) * $var2;
        $this.$leftArm.$pitch = cmu_MathHelper_cos(var$8) * 2.0 * $var2;
        $this.$leftArm.$roll = (cmu_MathHelper_cos($var1 * 0.28119999170303345) - 1.0) * $var2;
        $this.$rightLeg.$pitch = cmu_MathHelper_cos(var$8) * 1.399999976158142 * $var2;
        $this.$leftLeg.$pitch = cmu_MathHelper_cos($var4) * 1.399999976158142 * $var2;
        var$7 = $this.$rightArm;
        $var1 = var$7.$roll;
        $var2 = $var3 * 0.09000000357627869;
        var$7.$roll = $var1 + cmu_MathHelper_cos($var2) * 0.05000000074505806 + 0.05000000074505806;
        var$7 = $this.$leftArm;
        var$7.$roll = var$7.$roll - (cmu_MathHelper_cos($var2) * 0.05000000074505806 + 0.05000000074505806);
        var$7 = $this.$rightArm;
        $var1 = var$7.$pitch;
        $var2 = $var3 * 0.06700000166893005;
        var$7.$pitch = $var1 + cmu_MathHelper_sin($var2) * 0.05000000074505806;
        var$7 = $this.$leftArm;
        var$7.$pitch = var$7.$pitch - cmu_MathHelper_sin($var2) * 0.05000000074505806;
    }
    function jl_Thread() {
        var a = this; jl_Object.call(a);
        a.$uncaughtExceptionHandler = null;
        a.$id0 = Long_ZERO;
        a.$daemon = 0;
        a.$timeSliceStart = Long_ZERO;
        a.$yieldCount = 0;
        a.$finishedLock = null;
        a.$interruptHandler = null;
        a.$name1 = null;
        a.$alive = 0;
        a.$target = null;
    }
    var jl_Thread_mainThread = null;
    var jl_Thread_currentThread0 = null;
    var jl_Thread_nextId = 0;
    var jl_Thread_activeCount = 0;
    var jl_Thread_defaultUncaughtExceptionHandler = null;
    function jl_Thread_$callClinit() {
        jl_Thread_$callClinit = $rt_eraseClinit(jl_Thread);
        jl_Thread__clinit_();
    }
    function jl_Thread__init_0() {
        var var_0 = new jl_Thread();
        jl_Thread__init_(var_0);
        return var_0;
    }
    function jl_Thread__init_1(var_0, var_1) {
        var var_2 = new jl_Thread();
        jl_Thread__init_2(var_2, var_0, var_1);
        return var_2;
    }
    function jl_Thread__init_($this) {
        jl_Thread_$callClinit();
        jl_Thread__init_2($this, null, null);
    }
    function jl_Thread__init_2($this, $target, $name) {
        var var$3;
        jl_Thread_$callClinit();
        $this.$finishedLock = new jl_Object;
        $this.$alive = 1;
        $this.$name1 = $name;
        $this.$target = $target;
        var$3 = jl_Thread_nextId;
        jl_Thread_nextId = var$3 + 1 | 0;
        $this.$id0 = Long_fromInt(var$3);
    }
    function jl_Thread_start($this) {
        var var$1;
        var$1 = new jl_Thread$start$lambda$_4_0;
        var$1.$_01 = $this;
        otp_Platform_startThread(var$1);
    }
    function jl_Thread_setCurrentThread($thread_0) {
        jl_Thread_$callClinit();
        if (jl_Thread_currentThread0 !== $thread_0)
            jl_Thread_currentThread0 = $thread_0;
        jl_Thread_currentThread0.$timeSliceStart = jl_System_currentTimeMillis();
    }
    function jl_Thread_run($this) {
        var var$1, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$1 = $this.$target;
            if (var$1 === null)
                return;
            $ptr = 1;
        case 1:
            cmmg_LoadLevelScreen_run(var$1);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, var$1, $ptr);
    }
    function jl_Thread_currentThread() {
        jl_Thread_$callClinit();
        return jl_Thread_currentThread0;
    }
    function jl_Thread_yield() {
        var $currentThread, var$2, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$2 = $thread.pop();$currentThread = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            jl_Thread_$callClinit();
            $currentThread = jl_Thread_currentThread();
            var$2 = $currentThread.$yieldCount + 1 | 0;
            $currentThread.$yieldCount = var$2;
            if (var$2 < 30)
                return;
            (jl_Thread_currentThread()).$yieldCount = 0;
            if (Long_ge(Long_add($currentThread.$timeSliceStart, Long_fromInt(100)), jl_System_currentTimeMillis()))
                return;
            $ptr = 1;
        case 1:
            jl_Thread_switchContext$_asyncCall_$($currentThread);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($currentThread, var$2, $ptr);
    }
    function jl_Thread_switchContext($thread_0, $callback) {
        var var$3;
        jl_Thread_$callClinit();
        var$3 = new jl_Thread$switchContext$lambda$_19_0;
        var$3.$_02 = $thread_0;
        var$3.$_10 = $callback;
        otp_Platform_postpone(var$3);
    }
    function jl_Thread_sleep(var$1) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$1 = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            jl_Thread_$callClinit();
            $ptr = 1;
        case 1:
            jl_Thread_sleep$_asyncCall_$(var$1);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push(var$1, $ptr);
    }
    function jl_Thread_sleep0($millis, $callback) {
        var $current, $handler;
        jl_Thread_$callClinit();
        $current = jl_Thread_currentThread();
        $handler = new jl_Thread$SleepHandler;
        $handler.$thread = $current;
        $handler.$callback = $callback;
        $handler.$scheduleId = otp_Platform_schedule($handler, Long_ge($millis, Long_fromInt(2147483647)) ? 2147483647 : Long_lo($millis));
        $current.$interruptHandler = $handler;
    }
    function jl_Thread_getUncaughtExceptionHandler($this) {
        var var$1;
        var$1 = $this.$uncaughtExceptionHandler;
        if (var$1 !== null)
            return var$1;
        jl_Thread_$callClinit();
        return jl_Thread_defaultUncaughtExceptionHandler;
    }
    function jl_Thread__clinit_() {
        var var$1;
        var$1 = new jl_Thread;
        jl_Thread_$callClinit();
        jl_Thread__init_2(var$1, null, $rt_s(62));
        jl_Thread_mainThread = var$1;
        jl_Thread_currentThread0 = var$1;
        jl_Thread_nextId = 1;
        jl_Thread_activeCount = 1;
        jl_Thread_defaultUncaughtExceptionHandler = new jl_DefaultUncaughtExceptionHandler;
    }
    function jl_Thread_switchContext$_asyncCall_$(var$1) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        thread.suspend(function() {
            try {
                jl_Thread_switchContext(var$1, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
        return null;
    }
    function jl_Thread_sleep$_asyncCall_$(var$1) {
        var thread = $rt_nativeThread();
        var javaThread = $rt_getThread();
        if (thread.isResuming()) {
            thread.status = 0;
            var result = thread.attribute;
            if (result instanceof Error) {
                throw result;
            }
            return result;
        }
        var callback = function() {};
        callback.$complete = function(val) {
            thread.attribute = val;
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback.$error = function(e) {
            thread.attribute = $rt_exception(e);
            $rt_setThread(javaThread);
            thread.resume();
        };
        callback = otpp_AsyncCallbackWrapper_create(callback);
        thread.suspend(function() {
            try {
                jl_Thread_sleep0(var$1, callback);
            } catch($e) {
                callback.$error($rt_exception($e));
            }
        });
        return null;
    }
    var cmm_SleepForeverThread = $rt_classWithoutFields(jl_Thread);
    function cmm_SleepForeverThread_run($this) {
        var var$1, $e, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$e = $thread.pop();var$1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            while (true) {
                try {
                    var$1 = Long_fromInt(2147483647);
                    $ptr = 1;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace();
            }
        case 1:
            try {
                jl_Thread_sleep(var$1);
                if ($rt_suspending()) {
                    break main;
                }
                var$1 = Long_fromInt(2147483647);
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_InterruptedException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            while (true) {
                $e.$printStackTrace();
                try {
                    var$1 = Long_fromInt(2147483647);
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
            }
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, var$1, $e, $ptr);
    }
    var ju_Comparator = $rt_classWithoutFields(0);
    var jl_String$_clinit_$lambda$_93_0 = $rt_classWithoutFields();
    var jl_IndexOutOfBoundsException = $rt_classWithoutFields(jl_RuntimeException);
    function jl_IndexOutOfBoundsException__init_() {
        var var_0 = new jl_IndexOutOfBoundsException();
        jl_IndexOutOfBoundsException__init_0(var_0);
        return var_0;
    }
    function jl_IndexOutOfBoundsException__init_0($this) {
        jl_Throwable__init_0($this);
    }
    var jlr_Array = $rt_classWithoutFields();
    function jlr_Array_getLength(var$1) {
        if (var$1 === null || var$1.constructor.$meta.item === undefined) {
            $rt_throw(jl_IllegalArgumentException__init_());
        }
        return var$1.data.length;
    }
    function jlr_Array_newInstance($componentType, $length) {
        if ($componentType === null) {
            $componentType = new jl_NullPointerException;
            jl_Throwable__init_0($componentType);
            $rt_throw($componentType);
        }
        if ($componentType === $rt_cls($rt_voidcls())) {
            $componentType = new jl_IllegalArgumentException;
            jl_Throwable__init_0($componentType);
            $rt_throw($componentType);
        }
        if ($length >= 0)
            return jlr_Array_newInstanceImpl($componentType.$platformClass, $length);
        $componentType = new jl_NegativeArraySizeException;
        jl_Throwable__init_0($componentType);
        $rt_throw($componentType);
    }
    function jlr_Array_newInstanceImpl(var$1, var$2) {
        if (var$1.$meta.primitive) {
            if (var$1 == $rt_bytecls()) {
                return $rt_createByteArray(var$2);
            }
            if (var$1 == $rt_shortcls()) {
                return $rt_createShortArray(var$2);
            }
            if (var$1 == $rt_charcls()) {
                return $rt_createCharArray(var$2);
            }
            if (var$1 == $rt_intcls()) {
                return $rt_createIntArray(var$2);
            }
            if (var$1 == $rt_longcls()) {
                return $rt_createLongArray(var$2);
            }
            if (var$1 == $rt_floatcls()) {
                return $rt_createFloatArray(var$2);
            }
            if (var$1 == $rt_doublecls()) {
                return $rt_createDoubleArray(var$2);
            }
            if (var$1 == $rt_booleancls()) {
                return $rt_createBooleanArray(var$2);
            }
        } else {
            return $rt_createArray(var$1, var$2)
        }
    }
    var jl_NullPointerException = $rt_classWithoutFields(jl_RuntimeException);
    function jl_NullPointerException__init_() {
        var var_0 = new jl_NullPointerException();
        jl_NullPointerException__init_0(var_0);
        return var_0;
    }
    function jl_NullPointerException__init_0($this) {
        jl_Throwable__init_0($this);
    }
    var jl_ArrayStoreException = $rt_classWithoutFields(jl_RuntimeException);
    var jl_Character = $rt_classWithoutFields();
    var jl_Character_TYPE = null;
    var jl_Character_digitMapping = null;
    var jl_Character_upperCaseMapping = null;
    var jl_Character_lowerCaseMapping = null;
    var jl_Character_classMapping = null;
    var jl_Character_characterCache = null;
    var jl_Character_$$metadata$$0 = null;
    var jl_Character_$$metadata$$1 = null;
    var jl_Character_$$metadata$$3 = null;
    var jl_Character_$$metadata$$4 = null;
    function jl_Character_toString($c) {
        var var$2, var$3;
        var$2 = new jl_String;
        var$3 = $rt_createCharArray(1);
        var$3.data[0] = $c;
        jl_String__init_4(var$2, var$3);
        return var$2;
    }
    function jl_Character_isSupplementaryCodePoint($codePoint) {
        return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
    }
    function jl_Character_isHighSurrogate($ch) {
        return ($ch & 64512) != 55296 ? 0 : 1;
    }
    function jl_Character_isLowSurrogate($ch) {
        return ($ch & 64512) != 56320 ? 0 : 1;
    }
    function jl_Character_isSurrogate($ch) {
        return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
    }
    function jl_Character_isSurrogatePair($high, $low) {
        return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
    }
    function jl_Character_toCodePoint($high, $low) {
        return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
    }
    function jl_Character_highSurrogate($codePoint) {
        return (55296 | ($codePoint - 65536 | 0) >> 10 & 1023) & 65535;
    }
    function jl_Character_lowSurrogate($codePoint) {
        return (56320 | $codePoint & 1023) & 65535;
    }
    function jl_Character_toLowerCase($ch) {
        return jl_Character_toLowerCase0($ch) & 65535;
    }
    function jl_Character_toLowerCase0($ch) {
        if (jl_Character_lowerCaseMapping === null) {
            if (jl_Character_$$metadata$$0 === null)
                jl_Character_$$metadata$$0 = jl_Character_acquireLowerCaseMapping$$create();
            jl_Character_lowerCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$0.value !== null ? $rt_str(jl_Character_$$metadata$$0.value) : null)));
        }
        return jl_Character_mapChar(jl_Character_lowerCaseMapping, $ch);
    }
    function jl_Character_toUpperCase($ch) {
        return jl_Character_toUpperCase0($ch) & 65535;
    }
    function jl_Character_toUpperCase0($codePoint) {
        if (jl_Character_upperCaseMapping === null) {
            if (jl_Character_$$metadata$$1 === null)
                jl_Character_$$metadata$$1 = jl_Character_acquireUpperCaseMapping$$create();
            jl_Character_upperCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$1.value !== null ? $rt_str(jl_Character_$$metadata$$1.value) : null)));
        }
        return jl_Character_mapChar(jl_Character_upperCaseMapping, $codePoint);
    }
    function jl_Character_mapChar($table, $codePoint) {
        var $binSearchTable, var$4, var$5, var$6, $index, var$8;
        $binSearchTable = $table.$fastTable.data;
        if ($codePoint < $binSearchTable.length)
            return $codePoint + $binSearchTable[$codePoint] | 0;
        $binSearchTable = $table.$binarySearchTable.data;
        var$4 = 0;
        var$5 = $binSearchTable.length;
        var$6 = (var$5 / 2 | 0) - 1 | 0;
        a: {
            while (true) {
                $index = (var$4 + var$6 | 0) / 2 | 0;
                var$8 = $rt_compare($binSearchTable[$index * 2 | 0], $codePoint);
                if (!var$8)
                    break;
                if (var$8 <= 0) {
                    var$4 = $index + 1 | 0;
                    if (var$4 > var$6)
                        break a;
                } else {
                    $index = $index - 1 | 0;
                    if ($index < var$4)
                        break a;
                    var$6 = $index;
                }
            }
        }
        if ($index >= 0) {
            $index = $index * 2 | 0;
            if ($index < var$5)
                return $codePoint + $binSearchTable[$index + 1 | 0] | 0;
        }
        return 0;
    }
    function jl_Character_digit($ch, $radix) {
        if ($radix >= 2 && $radix <= 36) {
            $ch = jl_Character_getNumericValue($ch);
            if ($ch >= $radix)
                $ch = (-1);
        } else
            $ch = (-1);
        return $ch;
    }
    function jl_Character_getNumericValue($codePoint) {
        var var$2, var$3, var$4, var$5, $digitMapping, $u, $idx, $val, var$10, $l;
        if (jl_Character_digitMapping === null) {
            if (jl_Character_$$metadata$$3 === null)
                jl_Character_$$metadata$$3 = jl_Character_obtainDigitMapping$$create();
            var$2 = (jl_Character_$$metadata$$3.value !== null ? $rt_str(jl_Character_$$metadata$$3.value) : null);
            var$3 = otci_CharFlow__init_(jl_String_toCharArray(var$2));
            var$4 = otci_Base46_decodeUnsigned(var$3);
            var$5 = $rt_createIntArray(var$4 * 2 | 0);
            $digitMapping = var$5.data;
            $u = 0;
            $idx = 0;
            $val = 0;
            var$10 = 0;
            while (var$10 < var$4) {
                $idx = $idx + otci_Base46_decode(var$3) | 0;
                $val = $val + otci_Base46_decode(var$3) | 0;
                $l = $u + 1 | 0;
                $digitMapping[$u] = $idx;
                $u = $l + 1 | 0;
                $digitMapping[$l] = $val;
                var$10 = var$10 + 1 | 0;
            }
            jl_Character_digitMapping = var$5;
        }
        $digitMapping = jl_Character_digitMapping.data;
        $l = 0;
        $u = ($digitMapping.length / 2 | 0) - 1 | 0;
        while ($u >= $l) {
            $idx = ($l + $u | 0) / 2 | 0;
            var$4 = $idx * 2 | 0;
            $val = $rt_compare($codePoint, $digitMapping[var$4]);
            if ($val > 0)
                $l = $idx + 1 | 0;
            else {
                if ($val >= 0)
                    return $digitMapping[var$4 + 1 | 0];
                $u = $idx - 1 | 0;
            }
        }
        return (-1);
    }
    function jl_Character_forDigit($digit, $radix) {
        if ($radix >= 2 && $radix <= 36 && $digit >= 0 && $digit < $radix)
            return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
        return 0;
    }
    function jl_Character_toChars($codePoint) {
        var var$2;
        if ($codePoint < 65536) {
            var$2 = $rt_createCharArray(1);
            var$2.data[0] = $codePoint & 65535;
            return var$2;
        }
        return $rt_createCharArrayFromData([jl_Character_highSurrogate($codePoint), jl_Character_lowSurrogate($codePoint)]);
    }
    function jl_Character_getType($codePoint) {
        var $u, $range, $classes, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, $l, $i;
        $u = $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
        if ($u && jl_Character_isSurrogate($codePoint & 65535))
            return 19;
        if (jl_Character_classMapping === null) {
            if (jl_Character_$$metadata$$4 === null)
                jl_Character_$$metadata$$4 = jl_Character_obtainClasses$$create();
            $range = (jl_Character_$$metadata$$4.value !== null ? $rt_str(jl_Character_$$metadata$$4.value) : null);
            $classes = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
            var$5 = $classes.data;
            var$6 = $rt_createByteArray(16384);
            var$7 = var$6.data;
            var$8 = 0;
            var$9 = 0;
            var$10 = 0;
            var$11 = 0;
            while (var$11 < jl_String_length($range)) {
                var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                if (var$12 == 64) {
                    var$11 = var$11 + 1 | 0;
                    var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                    var$13 = 0;
                    $u = 1;
                    $l = 0;
                    while ($l < 3) {
                        var$11 = var$11 + 1 | 0;
                        var$13 = var$13 | $rt_imul($u, otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11)));
                        $u = $u * 64 | 0;
                        $l = $l + 1 | 0;
                    }
                } else if (var$12 < 32)
                    var$13 = 1;
                else {
                    var$12 = (var$12 - 32 | 0) << 24 >> 24;
                    var$11 = var$11 + 1 | 0;
                    var$13 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                }
                if (!var$12 && var$13 >= 128) {
                    if (var$8 > 0) {
                        $u = var$9 + 1 | 0;
                        var$5[var$9] = otciu_UnicodeHelper$Range__init_(var$10, var$10 + var$8 | 0, ju_Arrays_copyOf0(var$6, var$8));
                        var$9 = $u;
                    }
                    var$10 = var$10 + (var$8 + var$13 | 0) | 0;
                    var$8 = 0;
                } else {
                    $u = var$8 + var$13 | 0;
                    if ($u < var$7.length)
                        $l = var$9;
                    else {
                        $l = var$9 + 1 | 0;
                        var$5[var$9] = otciu_UnicodeHelper$Range__init_(var$10, var$10 + var$8 | 0, ju_Arrays_copyOf0(var$6, var$8));
                        var$10 = var$10 + $u | 0;
                        var$8 = 0;
                    }
                    while (true) {
                        $u = var$13 + (-1) | 0;
                        if (var$13 <= 0)
                            break;
                        $i = var$8 + 1 | 0;
                        var$7[var$8] = var$12;
                        var$8 = $i;
                        var$13 = $u;
                    }
                    var$9 = $l;
                }
                var$11 = var$11 + 1 | 0;
            }
            jl_Character_classMapping = ju_Arrays_copyOf1($classes, var$9);
        }
        $classes = jl_Character_classMapping.data;
        $l = 0;
        $u = $classes.length - 1 | 0;
        while ($l <= $u) {
            $i = ($l + $u | 0) / 2 | 0;
            $range = $classes[$i];
            if ($codePoint >= $range.$end1)
                $l = $i + 1 | 0;
            else {
                $u = $range.$start4;
                if ($codePoint >= $u)
                    return $range.$data.data[$codePoint - $u | 0];
                $u = $i - 1 | 0;
            }
        }
        return 0;
    }
    function jl_Character_isLetterOrDigit($codePoint) {
        a: {
            switch (jl_Character_getType($codePoint)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 9:
                    break;
                case 6:
                case 7:
                case 8:
                    break a;
                default:
                    break a;
            }
            return 1;
        }
        return 0;
    }
    function jl_Character_isIdentifierIgnorable($codePoint) {
        a: {
            if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
                if ($codePoint < 127)
                    break a;
                if ($codePoint > 159)
                    break a;
            }
            return 1;
        }
        return jl_Character_getType($codePoint) != 16 ? 0 : 1;
    }
    function jl_Character_isSpaceChar($codePoint) {
        switch (jl_Character_getType($codePoint)) {
            case 12:
            case 13:
            case 14:
                break;
            default:
                return 0;
        }
        return 1;
    }
    function jl_Character_isWhitespace($codePoint) {
        switch ($codePoint) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 28:
            case 29:
            case 30:
            case 31:
                break;
            case 160:
            case 8199:
            case 8239:
                return 0;
            default:
                return jl_Character_isSpaceChar($codePoint);
        }
        return 1;
    }
    function jl_Character__clinit_() {
        jl_Character_TYPE = $rt_cls($rt_charcls());
        jl_Character_characterCache = $rt_createArray(jl_Character, 128);
    }
    function jl_Character_acquireLowerCaseMapping$$create() {
        return {"value" : ">W  H#F#U 4%F#O #F#/ d%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a1# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #<+#%# #%# #%# \'.3#%# #%# #{1#%# #w1%%# %J\'#k1#o1#%# #w1#!3# #23#*3#%# \'23#:3# #>3#%# #%# #%# #N3#%# #N3# %%# #N3#%# #J3%%# #%# #R3#%# \'%# /)#%# #)#%# #)#%# #%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# %)#%# #%# #8)#L%#%# #%# #%# #"
        + "%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a+# #%# #%# #%# #%# #%# #%# #%# #%# #%# /B45#%# #,/#645# %%# #P1#!\'#*\'#%# #%# #%# #%# #%# <-%# #%# \'%# 1&++ %_## #Z#)k%%g%% #F#W hA# 1%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# +]%# %%# #?#%# %a+\'N\'AF#b &#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #^#%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%"
        + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# %*%r iB#oq-&# _?gejg#A1 o$#mo%&# {-%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3,4/# #%# #%# #%"
        + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3C1 1C1 1C1 1C1 1C1 3C/ 1C1 QC1 1C1 1C1 1C%8\'%G# 7i\')G# 7C%D)\' 7C%u)%?# 7X+%P+%G# L-q*/# \'Pw/#8m/# -6## |bA G%# kC.#U !r*%&# &#%# #,05#qX\'#H.5# %%# #%# #%# #e25#D05#q25#m25# #%# %%# 1865%%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# "
        + "#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 1%# #%# )%# (a=%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# G%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# y%%# #%# #%# #%# #%# #%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 5%# #%# #4Fd#%# #%# #%# #%# #%# )%# #<{p# %%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #P}p#}}p#m}p#D}p#P}p# #@yp#D{p#Lyp#Br#%# #%# #%# #%"
        + "# #%# #%# #%# #%# #,%#L}p#LJd#%# #%# -%# +%# #%# Y%# ,T5F#U TUg#r {%g#r >\'c#p Lnk%F# *J#F#b o@5F#b Jo=N#f "};
    }
    function jl_Character_acquireUpperCaseMapping$$create() {
        return {"value" : "<Y  ,%H#U :#>b# v
        + " #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# %665% #\'# )\'# #\'# #\'# #\'# #\'#o25#c25#k25#03#}1# #y1% #m1# #q1#{}p# \'y1#k}p# #$3# #:{p#N}p# #,3#43#N}p#*05#B}p# %43# #B05#<3# %@3# /F.5# %P3# #J}p#P3# \'B{p#P3#$\'#L3%,\'# +T3# 5Jyp#>yp# Z\'_\'# x\'# #\'# \'\'\' #_+\' !#a##]#\' #H#CD##H#3m%#i%% #e%#P%# \'(%#D%#C# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#i\'#P\'#=#(+# #4)# %\'# %\'# .#H#bP\'A #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 3\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# "
        + "#\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'#`# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'% &#,%n mB#ko%x %ko%\' RAC1 >$#yu+#uu+#Pu+#Hu+%Lu+#0u+#io+#>@d1 (+2Fd# \'oX\'# AJJd# N%\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #"
        + "\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# +X%# +\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#A1 1A1 1A1 1A1 1A1 3A# #A# #A# #A% /A1 16\'%g\')B)%V+%s)%N+)A1 1A1 1A1 1A% #E# 5<m-# )E# 9A% =A% \'=# ;E# R/8## ddA )\'# @E0#U Nr,%&# #\'# \'D45#845# #\'# #\'# #\'# -"
        + "\'# %\'# 5\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# #\'# )\'- /qq-&# i]=\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# G\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# y%\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
        + " #\'# #\'# #\'# #\'# 5\'# #\'# %\'# #\'# #\'# #\'# #\'# )\'# )\'# #\'#*%# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 7\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# )\'# #\'- #\'% )\'# #\'S )\'# cEDr# Yiejg# e*5H#U eUi#r {%i#r <\'e#<% Vlm%:# RH#H#b o@5H#b No=P#f "};
    }
    function jl_Character_obtainDigitMapping$$create() {
        return {"value" : "&C*% %%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_H#T#%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%{CG%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%6)G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%!i#G"
        + "%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%*;G%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%:/G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%{/G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%R@dG%%%%%%%%%%%%%%%%%%R[G%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%!#G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%cCG%%%%%%%%%%%%%%%%%%o*IG%%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%c:#T#%%%%%%%%%%%%%%%%%%w&%G%%%%%"
        + "%%%%%%%%%%%%%BhG%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%_%G%%%%%%%%%%%%%%%%%%>-G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%w=G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%>AG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%!dG%%%%%%%%%%%%%%%%%%g5G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%*0EG%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%28UG%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%"
        + "%%%!8%G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%sKG%%%%%%%%%%%%%%%%%%>&#G%%%%%%%%%%%%%%%%%%wN)G%%%%%%%%%%%%%%%%%%"};
    }
    function jl_Character_obtainClasses$$create() {
        return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
        + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91Y$FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,A&F9<F\' Q#A\'G)FJ%G91GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F#"

        + "L+=\'=\'=\'6767I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F3G$)A*F4G#)Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1\'J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(G1ARG%)FP\')G&)\'I&\'I#F)A$J+Y(^+G*^*Y# G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%"
        + "FEI)G)I#G#A$Y&J+A$F$J+F?E\'Y#C*A(BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFGb!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[BA0G."
        + "H%\'H$G-A0^#!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^gA:^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^A b=J! BQCQ!#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?67676767Y"
        + "&%Y+U#Y%596Y.^#Y$676767675AC^; b=:! A-b=7$ A;^1-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+FA^EA,=F1^@ L+^?L)=L0^AL+^HL0b= & &b `G!&^b&b   %b `(!F7%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#!#!#B%#!#A&!# # #!#!#A9E$!#&E##F(\'F$"
        + "\'F%\'F8I#G#)^%\'A$L\'^#;=A\'FUY%A)I#FSI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C*%]#A%b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]2A1b&L& 76^1FbA#FWA(=AAF-;^$G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F\'A#F\'A#F"
        + "$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^.A$=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9B, B0 B( B# C, C0 C( C#Aeb&X% A*F7A+F)A9E\' EK E*AgF\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+b G% L@ FK G#5A#F#AmG$F>L+&A)F7G,L%Y&A7F3G%Y%AGF6L(A5F8A*)\')FVG0Y(A%L5J+\'F#G#&A*G$)FNI$G%I#G#Y#1Y%\'A+1A#F:A(J+A"
        + "\'G$FEG&)G) J+Y%&I#&A)FD\'Y#&A*G#)FQI$G*I#F%Y%G%9)\'J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'F#\'A`F( & F% F0 F+9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&b ,# FVI$G)I#G$)\'F%Y&J+Y# 9\'F$A?FQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&9A\'J+AWF<A#G$I#G%)G&A%J+L#Y$=F(b Z# FMI$G*)G#9b E! BACAJ+L*A-F)A#&A#F) F# F9I\' I#A#G#)\'&)&)\'Y$A*J+AhF)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A.FkA(Y+b W$ F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF( "
        + "F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#A(G#&)F. FCI#G&A$I#\')\'Y.J+b 7! &A0L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b -J b&B! Y#A.b&Q1 Q1\'F\'G0b K` b&(* b Z\'#b&Z) A(F@ J+A%Y#Fq J+A\'F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q+ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%\'A,I#A/&b W@!&A)b&74 AK&A(&b H,#E% E( E# b&D% A0&A>F$A#&A/F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =*!GOA#G8A*b=U! A^b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^_A6^dG$=b [! L5A-L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) B"
        + "( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 12 C+&C5A\'C\'b 6$ G( G2A#G( G# G&A&E`AB\'b Q! FNA$G(E(A#J+A%&=b  & F?\'A2FMG%J+A&;b 1( F<%G%J+b G, F( F% F# F0 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN=L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.b=B# AY^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=9, A%^2A$^.A$b=X! A%b=@! A\'^-A%=A0^-A%^YA)^+A\'^IA)^?A#^#Apb=5& A-"
        + "^/A#^.A$^*A(^O ^(A)^/A%^*A(^*A(b=4#  ^XAFJ+b \'1 &b   %b   %b ?<#&AA&b Y !&A\'&b =$ &A#&b  ;!&A/&b PU!&A0&b M* &b CG b&?) b C8 &b *.!&A&&b ?!!&b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b 2R!1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
    }
    var jl_AutoCloseable = $rt_classWithoutFields(0);
    var ji_Closeable = $rt_classWithoutFields(0);
    var ji_InputStream = $rt_classWithoutFields();
    function ji_ByteArrayInputStream() {
        var a = this; ji_InputStream.call(a);
        a.$buf = null;
        a.$pos0 = 0;
        a.$mark = 0;
        a.$count1 = 0;
    }
    function ji_ByteArrayInputStream__init_(var_0) {
        var var_1 = new ji_ByteArrayInputStream();
        ji_ByteArrayInputStream__init_0(var_1, var_0);
        return var_1;
    }
    function ji_ByteArrayInputStream__init_0($this, $buf) {
        var var$2;
        var$2 = $buf.data.length;
        $this.$buf = $buf;
        $this.$pos0 = 0;
        $this.$mark = 0;
        $this.$count1 = 0 + var$2 | 0;
    }
    function ji_ByteArrayInputStream_read($this, $b, $off, $len) {
        var $bytesToRead, $i, var$6, var$7, var$8;
        $bytesToRead = jl_Math_min($len, $this.$count1 - $this.$pos0 | 0);
        $i = 0;
        while ($i < $bytesToRead) {
            var$6 = $b.data;
            $len = $off + 1 | 0;
            var$7 = $this.$buf.data;
            var$8 = $this.$pos0;
            $this.$pos0 = var$8 + 1 | 0;
            var$6[$off] = var$7[var$8];
            $i = $i + 1 | 0;
            $off = $len;
        }
        if ($bytesToRead <= 0)
            $bytesToRead = (-1);
        return $bytesToRead;
    }
    function ji_ByteArrayInputStream_available($this) {
        return $this.$count1 - $this.$pos0 | 0;
    }
    function ji_FilterInputStream() {
        ji_InputStream.call(this);
        this.$in = null;
    }
    function ji_FilterInputStream__init_(var_0) {
        var var_1 = new ji_FilterInputStream();
        ji_FilterInputStream__init_0(var_1, var_0);
        return var_1;
    }
    function ji_FilterInputStream__init_0($this, $in) {
        $this.$in = $in;
    }
    function ji_FilterInputStream_available($this) {
        return $this.$in.$available();
    }
    var ji_DataInput = $rt_classWithoutFields(0);
    function ji_DataInputStream() {
        ji_FilterInputStream.call(this);
        this.$buff = null;
    }
    function ji_DataInputStream__init_(var_0) {
        var var_1 = new ji_DataInputStream();
        ji_DataInputStream__init_0(var_1, var_0);
        return var_1;
    }
    function ji_DataInputStream__init_0($this, $in) {
        ji_FilterInputStream__init_0($this, $in);
        $this.$buff = $rt_createByteArray(8);
    }
    function ji_DataInputStream_read($this, $buffer) {
        var var$2;
        var$2 = $buffer.data;
        return $this.$in.$read0($buffer, 0, var$2.length);
    }
    function ji_DataInputStream_readToBuff($this, $count) {
        var $offset, $bytesRead;
        $offset = 0;
        while ($offset < $count) {
            $bytesRead = $this.$in.$read0($this.$buff, $offset, $count - $offset | 0);
            if ($bytesRead == (-1))
                return $bytesRead;
            $offset = $offset + $bytesRead | 0;
        }
        return $offset;
    }
    function ji_DataInputStream_readInt($this) {
        var var$1, var$2;
        if (ji_DataInputStream_readToBuff($this, 4) < 0) {
            var$1 = new ji_EOFException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        var$2 = $this.$buff.data;
        return (var$2[0] & 255) << 24 | (var$2[1] & 255) << 16 | (var$2[2] & 255) << 8 | var$2[3] & 255;
    }
    function ji_DataInputStream_readUTF($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7;
        if (ji_DataInputStream_readToBuff($this, 2) < 0) {
            var$1 = new ji_EOFException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        var$2 = $this.$buff.data;
        var$3 = ((var$2[0] & 255) << 8 | var$2[1] & 255) & 65535;
        var$2 = $rt_createByteArray(var$3);
        var$4 = $rt_createCharArray(var$3);
        var$5 = 0;
        if (var$3 < 0) {
            var$1 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        if (var$3) {
            if ($this.$in === null) {
                var$1 = new jl_NullPointerException;
                jl_Throwable__init_0(var$1);
                $rt_throw(var$1);
            }
            if (var$5 > (var$2.data.length - var$3 | 0)) {
                var$1 = new jl_IndexOutOfBoundsException;
                jl_Throwable__init_0(var$1);
                $rt_throw(var$1);
            }
            var$6 = var$3;
            while (var$6 > 0) {
                var$7 = $this.$in.$read0(var$2, var$5, var$6);
                if (var$7 < 0) {
                    var$1 = new ji_EOFException;
                    jl_Throwable__init_0(var$1);
                    $rt_throw(var$1);
                }
                var$5 = var$5 + var$7 | 0;
                var$6 = var$6 - var$7 | 0;
            }
        }
        return ji_DataInputStream_convertUTF8WithBuf(var$2, var$4, 0, var$3);
    }
    function ji_DataInputStream_convertUTF8WithBuf($buf, $out, $offset, $utfSize) {
        var $count, $s, var$7, var$8, $b, $ch, $a, var$12, $b_0, $c;
        $count = 0;
        $s = 0;
        a: {
            while ($count < $utfSize) {
                var$7 = $buf.data;
                var$8 = $out.data;
                $b = $count + 1 | 0;
                $ch = var$7[$offset + $count | 0] & 65535;
                var$8[$s] = $ch;
                $a = var$8[$s];
                if ($ch < 128)
                    $s = $s + 1 | 0;
                else if (($a & 224) == 192) {
                    if ($b >= $utfSize) {
                        var$12 = new ji_UTFDataFormatException;
                        jl_Throwable__init_(var$12, $rt_s(63));
                        $rt_throw(var$12);
                    }
                    $ch = $b + 1 | 0;
                    $b = var$7[$offset + $b | 0];
                    if (($b & 192) != 128) {
                        var$12 = new ji_UTFDataFormatException;
                        jl_Throwable__init_(var$12, $rt_s(64));
                        $rt_throw(var$12);
                    }
                    $b_0 = $s + 1 | 0;
                    var$8[$s] = (($a & 31) << 6 | $b & 63) & 65535;
                    $s = $b_0;
                    $b = $ch;
                } else {
                    if (($a & 240) != 224) {
                        var$12 = new ji_UTFDataFormatException;
                        jl_Throwable__init_(var$12, $rt_s(64));
                        $rt_throw(var$12);
                    }
                    $count = $b + 1 | 0;
                    if ($count >= $utfSize) {
                        var$12 = new ji_UTFDataFormatException;
                        jl_Throwable__init_(var$12, $rt_s(64));
                        $rt_throw(var$12);
                    }
                    $b_0 = var$7[$offset + $b | 0];
                    $b = $count + 1 | 0;
                    $c = var$7[$offset + $count | 0];
                    if (($b_0 & 192) != 128)
                        break a;
                    if (($c & 192) != 128)
                        break a;
                    $count = $s + 1 | 0;
                    var$8[$s] = (($a & 15) << 12 | ($b_0 & 63) << 6 | $c & 63) & 65535;
                    $s = $count;
                }
                $count = $b;
            }
            return jl_String__init_5($out, 0, $s);
        }
        var$12 = new ji_UTFDataFormatException;
        jl_Throwable__init_(var$12, $rt_s(64));
        $rt_throw(var$12);
    }
    function jnc_Charset() {
        var a = this; jl_Object.call(a);
        a.$canonicalName = null;
        a.$aliases = null;
    }
    function jnc_Charset__init_($this, $canonicalName, $aliases) {
        var var$3, var$4, var$5;
        var$3 = $aliases.data;
        jnc_Charset_checkCanonicalName($canonicalName);
        var$4 = var$3.length;
        var$5 = 0;
        while (var$5 < var$4) {
            jnc_Charset_checkCanonicalName(var$3[var$5]);
            var$5 = var$5 + 1 | 0;
        }
        $this.$canonicalName = $canonicalName;
        $this.$aliases = $aliases.$clone();
    }
    function jnc_Charset_checkCanonicalName($name) {
        var $i, $c;
        if (jl_String_isEmpty($name))
            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
        if (!jnc_Charset_isValidCharsetStart(jl_String_charAt($name, 0)))
            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
        $i = 1;
        while ($i < jl_String_length($name)) {
            a: {
                $c = jl_String_charAt($name, $i);
                switch ($c) {
                    case 43:
                    case 45:
                    case 46:
                    case 58:
                    case 95:
                        break;
                    default:
                        if (jnc_Charset_isValidCharsetStart($c))
                            break a;
                        else
                            $rt_throw(jnc_IllegalCharsetNameException__init_($name));
                }
            }
            $i = $i + 1 | 0;
        }
    }
    function jnc_Charset_isValidCharsetStart($c) {
        a: {
            b: {
                if (!($c >= 48 && $c <= 57) && !($c >= 97 && $c <= 122)) {
                    if ($c < 65)
                        break b;
                    if ($c > 90)
                        break b;
                }
                $c = 1;
                break a;
            }
            $c = 0;
        }
        return $c;
    }
    function jnc_Charset_name($this) {
        return $this.$canonicalName;
    }
    function jnc_Charset_decode($this, $bb) {
        var var$2, $e, $$je;
        a: {
            try {
                var$2 = $this.$newDecoder();
                jnc_CodingErrorAction_$callClinit();
                $bb = jnc_CharsetDecoder_decode(jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput(var$2, jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE), $bb);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jnc_CharacterCodingException) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $bb;
        }
        var$2 = new jl_AssertionError;
        var$2.$suppressionEnabled = 1;
        var$2.$writableStackTrace = 1;
        var$2.$message = $rt_s(65);
        var$2.$cause = $e;
        $rt_throw(var$2);
    }
    function cjj_InflaterInputStream() {
        var a = this; ji_FilterInputStream.call(a);
        a.$inflater = null;
        a.$buf0 = null;
        a.$closed = 0;
        a.$eof = 0;
        a.$close_in = 0;
        a.$myinflater = 0;
        a.$byte1 = null;
        a.$b = null;
    }
    function cjj_InflaterInputStream__init_(var_0) {
        var var_1 = new cjj_InflaterInputStream();
        cjj_InflaterInputStream__init_0(var_1, var_0);
        return var_1;
    }
    function cjj_InflaterInputStream__init_0($this, $in) {
        var var$2, var$3, var$4, var$5;
        var$2 = new cjj_Inflater;
        var$2.$adler = cjj_Adler32__init_();
        var$2.$finished = 0;
        var$2.$finished = 0;
        var$3 = new cjj_Inflate;
        var$3.$was = Long_fromInt(-1);
        var$3.$need_bytes = (-1);
        var$3.$crcbuf = $rt_createByteArray(4);
        var$3.$gheader = null;
        var$3.$tmp_string = null;
        var$3.$z4 = var$2;
        var$2.$istate = var$3;
        var$2.$msg = null;
        var$3.$blocks = null;
        var$3.$wrap0 = 0;
        var$3.$wrap0 = 1;
        var$3.$wbits = 15;
        var$4 = new cjj_InfBlocks;
        var$4.$bb0 = $rt_createIntArray(1);
        var$4.$tb = $rt_createIntArray(1);
        var$4.$bl = $rt_createIntArray(1);
        var$4.$bd = $rt_createIntArray(1);
        var$4.$tl = $rt_createArray($rt_arraycls($rt_intcls()), 1);
        var$4.$td = $rt_createArray($rt_arraycls($rt_intcls()), 1);
        var$4.$tli = $rt_createIntArray(1);
        var$4.$tdi = $rt_createIntArray(1);
        var$5 = new cjj_InfTree;
        var$5.$hn = null;
        var$5.$v = null;
        var$5.$c = null;
        var$5.$r = null;
        var$5.$u = null;
        var$5.$x4 = null;
        var$4.$inftree = var$5;
        var$4.$z5 = var$2;
        var$5 = new cjj_InfCodes;
        var$5.$tree_index = 0;
        var$5.$z6 = var$2;
        var$5.$s = var$4;
        var$4.$codes = var$5;
        var$4.$hufts = $rt_createIntArray(4320);
        var$4.$window = $rt_createByteArray(32768);
        var$4.$end2 = 32768;
        var$4.$check = 1;
        var$4.$mode1 = 0;
        cjj_InfBlocks_reset(var$4);
        var$3.$blocks = var$4;
        var$5 = var$3.$z4;
        if (var$5 !== null) {
            var$5.$total_out = Long_ZERO;
            var$5.$total_in = Long_ZERO;
            var$5.$msg = null;
            var$3.$mode2 = 14;
            var$3.$need_bytes = (-1);
            cjj_InfBlocks_reset(var$4);
        }
        ji_FilterInputStream__init_0($this, $in);
        $this.$closed = 0;
        $this.$eof = 0;
        $this.$close_in = 1;
        $this.$myinflater = 0;
        $this.$byte1 = $rt_createByteArray(1);
        $this.$b = $rt_createByteArray(512);
        if ($in === null) {
            $in = new jl_NullPointerException;
            jl_Throwable__init_0($in);
            $rt_throw($in);
        }
        $this.$inflater = var$2;
        $this.$buf0 = $rt_createByteArray(512);
        $this.$close_in = 1;
        $this.$myinflater = 1;
    }
    function cjj_InflaterInputStream_read($this, $b, $off, $len) {
        var var$4, $n, var$6, var$7, $err, var$9;
        if ($this.$closed) {
            var$4 = new ji_IOException;
            jl_Throwable__init_(var$4, $rt_s(66));
            $rt_throw(var$4);
        }
        if ($b === null) {
            var$4 = new jl_NullPointerException;
            jl_Throwable__init_0(var$4);
            $rt_throw(var$4);
        }
        if ($off >= 0 && $len >= 0 && $len <= ($b.data.length - $off | 0)) {
            if (!$len)
                return 0;
            if ($this.$eof)
                return (-1);
            $n = 0;
            var$4 = $this.$inflater;
            var$4.$next_out = $b;
            var$4.$next_out_index = $off;
            var$4.$avail_out = $len;
            a: {
                b: {
                    while (!$this.$eof) {
                        if (!$this.$inflater.$avail_in) {
                            if ($this.$closed) {
                                var$4 = new ji_IOException;
                                jl_Throwable__init_(var$4, $rt_s(66));
                                $rt_throw(var$4);
                            }
                            var$4 = $this.$in;
                            $b = $this.$buf0;
                            var$6 = var$4.$read0($b, 0, $b.data.length);
                            if (var$6 == (-1)) {
                                var$4 = $this.$inflater.$istate;
                                if (var$4.$wrap0)
                                    break a;
                                if (var$4.$mode2 != 12 ? 0 : 1)
                                    break a;
                                $this.$buf0.data[0] = 0;
                                var$6 = 1;
                            }
                            var$4 = $this.$inflater;
                            var$7 = $this.$buf0;
                            if (!(var$6 <= 0 && var$4.$next_in !== null)) {
                                $err = var$4.$avail_in;
                                if ($err <= 0) {
                                    var$4.$next_in = var$7;
                                    var$4.$next_in_index = 0;
                                    var$4.$avail_in = var$6;
                                } else {
                                    $b = $rt_createByteArray($err + var$6 | 0);
                                    jl_System_fastArraycopy(var$4.$next_in, var$4.$next_in_index, $b, 0, $err);
                                    jl_System_fastArraycopy(var$7, 0, $b, var$4.$avail_in, var$6);
                                    var$4.$next_in = $b;
                                    var$4.$next_in_index = 0;
                                    var$4.$avail_in = var$4.$avail_in + var$6 | 0;
                                }
                            }
                        }
                        var$9 = $this.$inflater;
                        var$4 = var$9.$istate;
                        if (var$4 === null)
                            $err = (-2);
                        else {
                            $err = cjj_Inflate_inflate(var$4, 0);
                            if ($err == 1)
                                var$9.$finished = 1;
                        }
                        c: {
                            var$4 = $this.$inflater;
                            $len = var$4.$next_out_index;
                            $n = $n + ($len - $off | 0) | 0;
                            switch ($err) {
                                case -3:
                                    var$9 = new ji_IOException;
                                    jl_Throwable__init_(var$9, var$4.$msg);
                                    $rt_throw(var$9);
                                case 1:
                                case 2:
                                    break;
                                default:
                                    break c;
                            }
                            $this.$eof = 1;
                            if ($err == 2)
                                return (-1);
                        }
                        if (!var$4.$avail_out)
                            break b;
                        $off = $len;
                    }
                }
                return $n;
            }
            if (Long_ne(var$4.$was, Long_fromInt(-1))) {
                var$4 = new ji_IOException;
                jl_Throwable__init_(var$4, $rt_s(67));
                $rt_throw(var$4);
            }
            var$4 = new ji_EOFException;
            jl_Throwable__init_(var$4, $rt_s(68));
            $rt_throw(var$4);
        }
        var$4 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$4);
        $rt_throw(var$4);
    }
    function cjj_InflaterInputStream_available($this) {
        var var$1;
        if (!$this.$closed) {
            if (!$this.$eof)
                return 1;
            return 0;
        }
        var$1 = new ji_IOException;
        jl_Throwable__init_(var$1, $rt_s(66));
        $rt_throw(var$1);
    }
    function nPm_GeneralDigest() {
        var a = this; jl_Object.call(a);
        a.$xBuf = null;
        a.$xBufOff = 0;
        a.$byteCount = Long_ZERO;
    }
    function nPm_GeneralDigest_update0($this, $in) {
        var var$2, var$3, var$4, var$5;
        var$2 = $this.$xBuf;
        var$3 = var$2.data;
        var$4 = $this.$xBufOff;
        var$5 = var$4 + 1 | 0;
        $this.$xBufOff = var$5;
        var$3[var$4] = $in;
        if (var$5 == var$3.length) {
            nPm_SHA1Digest_processWord($this, var$2, 0);
            $this.$xBufOff = 0;
        }
        $this.$byteCount = Long_add($this.$byteCount, Long_fromInt(1));
    }
    function nPm_GeneralDigest_update($this, $in, $inOff, $len) {
        var var$4;
        a: {
            while ($this.$xBufOff) {
                if ($len <= 0)
                    break a;
                nPm_GeneralDigest_update0($this, $in.data[$inOff]);
                $inOff = $inOff + 1 | 0;
                $len = $len + (-1) | 0;
            }
        }
        while ($len > $this.$xBuf.data.length) {
            nPm_SHA1Digest_processWord($this, $in, $inOff);
            var$4 = $this.$xBuf.data.length;
            $inOff = $inOff + var$4 | 0;
            $len = $len - var$4 | 0;
            $this.$byteCount = Long_add($this.$byteCount, Long_fromInt(var$4));
        }
        while ($len > 0) {
            nPm_GeneralDigest_update0($this, $in.data[$inOff]);
            $inOff = $inOff + 1 | 0;
            $len = $len + (-1) | 0;
        }
    }
    function nPm_SHA1Digest() {
        var a = this; nPm_GeneralDigest.call(a);
        a.$H1 = 0;
        a.$H2 = 0;
        a.$H3 = 0;
        a.$H4 = 0;
        a.$H5 = 0;
        a.$X = null;
        a.$xOff = 0;
    }
    function nPm_SHA1Digest__init_() {
        var var_0 = new nPm_SHA1Digest();
        nPm_SHA1Digest__init_0(var_0);
        return var_0;
    }
    function nPm_SHA1Digest__init_0($this) {
        $this.$xBuf = $rt_createByteArray(4);
        $this.$xBufOff = 0;
        $this.$X = $rt_createIntArray(80);
        nPm_SHA1Digest_reset($this);
    }
    function nPm_SHA1Digest_processWord($this, $in, $inOff) {
        var var$3, var$4, var$5;
        var$3 = $in.data;
        $in = $this.$X.data;
        var$4 = $this.$xOff;
        var$5 = var$4 + 1 | 0;
        $this.$xOff = var$5;
        $in[var$4] = (var$3[$inOff] & 255) << 24 | (var$3[$inOff + 1 | 0] & 255) << 16 | (var$3[$inOff + 2 | 0] & 255) << 8 | var$3[$inOff + 3 | 0] & 255;
        if (var$5 == 16)
            nPm_SHA1Digest_processBlock($this);
    }
    function nPm_SHA1Digest_unpackWord($this, $word, $out, $outOff) {
        $out = $out.data;
        $out[$outOff] = ($word >>> 24 | 0) << 24 >> 24;
        $out[$outOff + 1 | 0] = ($word >>> 16 | 0) << 24 >> 24;
        $out[$outOff + 2 | 0] = ($word >>> 8 | 0) << 24 >> 24;
        $out[$outOff + 3 | 0] = $word << 24 >> 24;
    }
    function nPm_SHA1Digest_doFinal($this, $out, $outOff) {
        var var$3, var$4;
        var$3 = Long_shl($this.$byteCount, 3);
        nPm_GeneralDigest_update0($this, (-128));
        while ($this.$xBufOff) {
            nPm_GeneralDigest_update0($this, 0);
        }
        if ($this.$xOff > 14)
            nPm_SHA1Digest_processBlock($this);
        var$4 = $this.$X.data;
        var$4[14] = Long_hi(var$3);
        var$4[15] = Long_lo(Long_and(var$3, Long_fromInt(-1)));
        nPm_SHA1Digest_processBlock($this);
        nPm_SHA1Digest_unpackWord($this, $this.$H1, $out, $outOff);
        nPm_SHA1Digest_unpackWord($this, $this.$H2, $out, $outOff + 4 | 0);
        nPm_SHA1Digest_unpackWord($this, $this.$H3, $out, $outOff + 8 | 0);
        nPm_SHA1Digest_unpackWord($this, $this.$H4, $out, $outOff + 12 | 0);
        nPm_SHA1Digest_unpackWord($this, $this.$H5, $out, $outOff + 16 | 0);
        nPm_SHA1Digest_reset($this);
        return 20;
    }
    function nPm_SHA1Digest_reset($this) {
        var $i, var$2;
        $this.$byteCount = Long_ZERO;
        $this.$xBufOff = 0;
        $i = 0;
        while (true) {
            var$2 = $this.$xBuf.data;
            if ($i >= var$2.length)
                break;
            var$2[$i] = 0;
            $i = $i + 1 | 0;
        }
        $this.$H1 = 1732584193;
        $this.$H2 = (-271733879);
        $this.$H3 = (-1732584194);
        $this.$H4 = 271733878;
        $this.$H5 = (-1009589776);
        $this.$xOff = 0;
        $i = 0;
        while (true) {
            var$2 = $this.$X.data;
            if ($i == var$2.length)
                break;
            var$2[$i] = 0;
            $i = $i + 1 | 0;
        }
    }
    function nPm_SHA1Digest_h($this, $u, $v, $w) {
        return $u ^ $v ^ $w;
    }
    function nPm_SHA1Digest_rotateLeft($this, $x, $n) {
        return $x << $n | ($x >>> (32 - $n | 0) | 0);
    }
    function nPm_SHA1Digest_processBlock($this) {
        var $i, var$2, $A, $B, $C, $D, $E, $j, $t, $j_0;
        $i = 16;
        while ($i <= 79) {
            var$2 = $this.$X.data;
            var$2[$i] = nPm_SHA1Digest_rotateLeft($this, var$2[$i - 3 | 0] ^ var$2[$i - 8 | 0] ^ var$2[$i - 14 | 0] ^ var$2[$i - 16 | 0], 1);
            $i = $i + 1 | 0;
        }
        $A = $this.$H1;
        $B = $this.$H2;
        $C = $this.$H3;
        $D = $this.$H4;
        $E = $this.$H5;
        $j = 0;
        while ($j <= 19) {
            $t = (((nPm_SHA1Digest_rotateLeft($this, $A, 5) + ($B & $C | ($B ^ (-1)) & $D) | 0) + $E | 0) + $this.$X.data[$j] | 0) + 1518500249 | 0;
            $i = nPm_SHA1Digest_rotateLeft($this, $B, 30);
            $j = $j + 1 | 0;
            $E = $D;
            $D = $C;
            $C = $i;
            $B = $A;
            $A = $t;
        }
        $j_0 = 20;
        while ($j_0 <= 39) {
            $t = (((nPm_SHA1Digest_rotateLeft($this, $A, 5) + nPm_SHA1Digest_h($this, $B, $C, $D) | 0) + $E | 0) + $this.$X.data[$j_0] | 0) + 1859775393 | 0;
            $i = nPm_SHA1Digest_rotateLeft($this, $B, 30);
            $j_0 = $j_0 + 1 | 0;
            $E = $D;
            $D = $C;
            $C = $i;
            $B = $A;
            $A = $t;
        }
        $j = 40;
        while ($j <= 59) {
            $t = (((nPm_SHA1Digest_rotateLeft($this, $A, 5) + ($B & $C | $B & $D | $C & $D) | 0) + $E | 0) + $this.$X.data[$j] | 0) + (-1894007588) | 0;
            $i = nPm_SHA1Digest_rotateLeft($this, $B, 30);
            $j = $j + 1 | 0;
            $E = $D;
            $D = $C;
            $C = $i;
            $B = $A;
            $A = $t;
        }
        $j_0 = 60;
        while ($j_0 <= 79) {
            $t = (((nPm_SHA1Digest_rotateLeft($this, $A, 5) + nPm_SHA1Digest_h($this, $B, $C, $D) | 0) + $E | 0) + $this.$X.data[$j_0] | 0) + (-899497514) | 0;
            $i = nPm_SHA1Digest_rotateLeft($this, $B, 30);
            $j_0 = $j_0 + 1 | 0;
            $E = $D;
            $D = $C;
            $C = $i;
            $B = $A;
            $A = $t;
        }
        $this.$H1 = $this.$H1 + $A | 0;
        $this.$H2 = $this.$H2 + $B | 0;
        $this.$H3 = $this.$H3 + $C | 0;
        $this.$H4 = $this.$H4 + $D | 0;
        $this.$H5 = $this.$H5 + $E | 0;
        $this.$xOff = 0;
        $i = 0;
        while (true) {
            var$2 = $this.$X.data;
            if ($i == var$2.length)
                break;
            var$2[$i] = 0;
            $i = $i + 1 | 0;
        }
    }
    var ju_Arrays = $rt_classWithoutFields();
    function ju_Arrays_copyOf($array, $length) {
        var $result, var$4, $sz, $i;
        $array = $array.data;
        $result = $rt_createCharArray($length);
        var$4 = $result.data;
        $sz = jl_Math_min($length, $array.length);
        $i = 0;
        while ($i < $sz) {
            var$4[$i] = $array[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_copyOf0($array, $length) {
        var $result, var$4, $sz, $i;
        $array = $array.data;
        $result = $rt_createByteArray($length);
        var$4 = $result.data;
        $sz = jl_Math_min($length, $array.length);
        $i = 0;
        while ($i < $sz) {
            var$4[$i] = $array[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_copyOf1($original, $newLength) {
        var var$3, $result, $sz, $i;
        var$3 = $original.data;
        $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
        $sz = jl_Math_min($newLength, var$3.length);
        $i = 0;
        while ($i < $sz) {
            $result.data[$i] = var$3[$i];
            $i = $i + 1 | 0;
        }
        return $result;
    }
    function ju_Arrays_fill0($a, $fromIndex, $toIndex, $val) {
        var var$5, var$6, var$7;
        if ($fromIndex > $toIndex) {
            var$5 = new jl_IllegalArgumentException;
            jl_Throwable__init_0(var$5);
            $rt_throw(var$5);
        }
        while ($fromIndex < $toIndex) {
            var$6 = $a.data;
            var$7 = $fromIndex + 1 | 0;
            var$6[$fromIndex] = $val;
            $fromIndex = var$7;
        }
    }
    function ju_Arrays_fill($a, $val) {
        ju_Arrays_fill0($a, 0, $a.data.length, $val);
    }
    function ju_Arrays_sort($a, $c) {
        var var$3, $second, $chunkSize, var$6, $i, var$8, var$9, var$10, $i_0, var$12, $i_1, var$14, var$15, var$16, var$17;
        var$3 = $a.data.length;
        if (!var$3)
            return;
        if ($c === null)
            $c = ju_Comparator$NaturalOrder_INSTANCE;
        $second = $rt_createArray(jl_Object, var$3);
        $chunkSize = 1;
        var$6 = $a;
        while ($chunkSize < var$3) {
            $i = 0;
            while (true) {
                var$8 = var$6.data;
                var$9 = var$8.length;
                if ($i >= var$9)
                    break;
                var$10 = jl_Math_min(var$9, $i + $chunkSize | 0);
                $i_0 = $i + (2 * $chunkSize | 0) | 0;
                var$12 = jl_Math_min(var$9, $i_0);
                $i_1 = $i;
                var$9 = var$10;
                a: {
                    b: {
                        while ($i != var$10) {
                            if (var$9 == var$12)
                                break b;
                            var$14 = var$8[$i];
                            var$15 = var$8[var$9];
                            if ($c.$compare(var$14, var$15) > 0) {
                                var$16 = $second.data;
                                var$17 = $i_1 + 1 | 0;
                                var$16[$i_1] = var$15;
                                var$9 = var$9 + 1 | 0;
                            } else {
                                var$16 = $second.data;
                                var$17 = $i_1 + 1 | 0;
                                var$16[$i_1] = var$14;
                                $i = $i + 1 | 0;
                            }
                            $i_1 = var$17;
                        }
                        while (true) {
                            if (var$9 >= var$12)
                                break a;
                            var$16 = $second.data;
                            $i = $i_1 + 1 | 0;
                            var$17 = var$9 + 1 | 0;
                            var$16[$i_1] = var$8[var$9];
                            $i_1 = $i;
                            var$9 = var$17;
                        }
                    }
                    while (true) {
                        if ($i >= var$10)
                            break a;
                        var$16 = $second.data;
                        var$9 = $i_1 + 1 | 0;
                        var$17 = $i + 1 | 0;
                        var$16[$i_1] = var$8[$i];
                        $i_1 = var$9;
                        $i = var$17;
                    }
                }
                $i = $i_0;
            }
            $chunkSize = $chunkSize * 2 | 0;
            var$8 = var$6;
            var$6 = $second;
            $second = var$8;
        }
        c: {
            if (var$6 !== $a) {
                $i_1 = 0;
                while (true) {
                    $a = var$6.data;
                    if ($i_1 >= $a.length)
                        break c;
                    $second.data[$i_1] = $a[$i_1];
                    $i_1 = $i_1 + 1 | 0;
                }
            }
        }
    }
    function ju_Arrays_equals($a, $a2) {
        var var$3, var$4, var$5;
        if ($a === $a2)
            return 1;
        if ($a !== null && $a2 !== null) {
            $a = $a.data;
            $a2 = $a2.data;
            var$3 = $a.length;
            if (var$3 == $a2.length) {
                var$4 = 0;
                a: {
                    while (true) {
                        if (var$4 >= var$3) {
                            var$4 = (-1);
                            break a;
                        }
                        var$5 = var$4 + 0 | 0;
                        if ($a[var$5] != $a2[var$5])
                            break;
                        var$4 = var$4 + 1 | 0;
                    }
                }
                return var$4 >= 0 ? 0 : 1;
            }
        }
        return 0;
    }
    var olo_DisplayMode = $rt_classWithoutFields();
    function olo_DisplayMode__init_(var_0, var_1) {
        var var_2 = new olo_DisplayMode();
        olo_DisplayMode__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function olo_DisplayMode__init_0($this, $width, $height) {}
    function olo_DisplayMode_getWidth($this) {
        return olo_Display_getWidth();
    }
    function olo_DisplayMode_getHeight($this) {
        return olo_Display_getHeight();
    }
    var otjde_EventListener = $rt_classWithoutFields(0);
    var olo_Display$1 = $rt_classWithoutFields();
    function olo_Display$1_handleEvent$exported$0(var$0, var$1) {
        olo_Display_$callClinit();
        olo_Display_windowResized = 1;
    }
    var olo_Display$2 = $rt_classWithoutFields();
    function olo_Display$2_handleEvent$exported$0(var$0, var$1) {
        olo_Display_$callClinit();
        olo_Display_isWindowActive = 0;
    }
    var olo_Display$3 = $rt_classWithoutFields();
    function olo_Display$3_handleEvent$exported$0(var$0, var$1) {
        olo_Display_$callClinit();
        olo_Display_isWindowActive = 1;
    }
    var jur_RandomGenerator = $rt_classWithoutFields(0);
    function ju_Random() {
        var a = this; jl_Object.call(a);
        a.$storedGaussian = 0.0;
        a.$haveStoredGaussian = 0;
    }
    function ju_Random__init_() {
        var var_0 = new ju_Random();
        ju_Random__init_0(var_0);
        return var_0;
    }
    function ju_Random__init_0($this) {}
    function ju_Random_setSeed($this, $seed) {}
    function ju_Random_nextInt0($this) {
        return 4.294967296E9 * ju_Random_nextDouble($this) + (-2.147483648E9) | 0;
    }
    function ju_Random_nextInt($this, $n) {
        var var$2;
        if ($n > 0)
            return ju_Random_nextDouble($this) * $n | 0;
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    function ju_Random_nextFloat($this) {
        return ju_Random_nextDouble($this);
    }
    function ju_Random_nextDouble($this) {
        return $rt_globals.Math.random();
    }
    function ju_Random_nextGaussian($this) {
        var var$1, var$2, var$3, var$4, var$5, $pair;
        if ($this.$haveStoredGaussian) {
            $this.$haveStoredGaussian = 0;
            return $this.$storedGaussian;
        }
        var$1 = new ju_Random$nextGaussian$lambda$_9_0;
        var$1.$_03 = $this;
        while (true) {
            while (true) {
                var$2 = 2.0 * ju_Random$nextGaussian$lambda$_9_0_getAsDouble(var$1) - 1.0;
                var$3 = 2.0 * ju_Random$nextGaussian$lambda$_9_0_getAsDouble(var$1) - 1.0;
                var$4 = var$2 * var$2 + var$3 * var$3;
                if (var$4 >= 1.0)
                    continue;
                else
                    break;
            }
            if (var$4 === 0.0)
                continue;
            else
                break;
        }
        var$5 = jl_Math_sqrt((-2.0) * jl_Math_log(var$4) / var$4);
        $pair = $rt_createDoubleArray(2).data;
        $pair[0] = var$2 * var$5;
        $pair[1] = var$3 * var$5;
        $this.$haveStoredGaussian = 1;
        $this.$storedGaussian = $pair[1];
        return $pair[0];
    }
    var ol_BufferUtils = $rt_classWithoutFields();
    function ol_BufferUtils_createByteBuffer($size) {
        var var$2, var$3, var$4;
        var$2 = jn_ByteBuffer_wrap0($rt_createByteArray($size));
        jn_ByteOrder_$callClinit();
        if (jn_ByteOrder_nativeOrder === null) {
            var$3 = new $rt_globals.ArrayBuffer(2);
            var$4 = new $rt_globals.Int16Array(var$3);
            0;
            var$4[0] = 1;
            jn_ByteOrder_nativeOrder = (new $rt_globals.Int8Array(var$3))[0] ? jn_ByteOrder_LITTLE_ENDIAN : jn_ByteOrder_BIG_ENDIAN;
        }
        var$2.$order = jn_ByteOrder_nativeOrder;
        return var$2;
    }
    function ol_BufferUtils_createIntBuffer($size) {
        var var$2, var$3, var$4;
        var$2 = ol_BufferUtils_createByteBuffer($size << 2);
        var$3 = jn_Buffer_remaining(var$2) / 4 | 0;
        var$4 = var$2.$order;
        jn_ByteOrder_$callClinit();
        if (var$4 !== jn_ByteOrder_BIG_ENDIAN) {
            var$4 = new jn_IntBufferOverByteBufferLittleEndian;
            jn_IntBufferOverByteBuffer__init_(var$4, var$2.$start5 + var$2.$position0 | 0, var$3, var$2, 0, var$3, var$2.$readOnly);
        } else {
            var$4 = new jn_IntBufferOverByteBufferBigEndian;
            jn_IntBufferOverByteBuffer__init_(var$4, var$2.$start5 + var$2.$position0 | 0, var$3, var$2, 0, var$3, var$2.$readOnly);
        }
        return var$4;
    }
    function ol_BufferUtils_createFloatBuffer($size) {
        var var$2, var$3, var$4;
        var$2 = ol_BufferUtils_createByteBuffer($size << 2);
        var$3 = jn_Buffer_remaining(var$2) / 4 | 0;
        var$4 = var$2.$order;
        jn_ByteOrder_$callClinit();
        if (var$4 !== jn_ByteOrder_LITTLE_ENDIAN) {
            var$4 = new jn_FloatBufferOverByteBufferLittleEndian;
            jn_FloatBufferOverByteBuffer__init_(var$4, var$2.$start5 + var$2.$position0 | 0, var$3, var$2, 0, var$3, var$2.$readOnly);
        } else {
            var$4 = new jn_FloatBufferOverByteBufferBigEndian;
            jn_FloatBufferOverByteBuffer__init_(var$4, var$2.$start5 + var$2.$position0 | 0, var$3, var$2, 0, var$3, var$2.$readOnly);
        }
        return var$4;
    }
    function cmmr_HeldBlock() {
        var a = this; jl_Object.call(a);
        a.$minecraft2 = null;
        a.$block = null;
        a.$pos = 0.0;
        a.$lastPos = 0.0;
        a.$offset = 0;
        a.$moving = 0;
    }
    function cmmm_ModelPart() {
        var a = this; jl_Object.call(a);
        a.$vertices = null;
        a.$quads = null;
        a.$u0 = 0;
        a.$v0 = 0;
        a.$x5 = 0.0;
        a.$y4 = 0.0;
        a.$z7 = 0.0;
        a.$pitch = 0.0;
        a.$yaw = 0.0;
        a.$roll = 0.0;
        a.$hasList = 0;
        a.$list = 0;
        a.$mirror = 0;
        a.$render5 = 0;
        a.$unused = 0;
    }
    function cmmm_ModelPart__init_(var_0, var_1) {
        var var_2 = new cmmm_ModelPart();
        cmmm_ModelPart__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmm_ModelPart__init_0($this, $var1, $var2) {
        $this.$hasList = 0;
        $this.$list = 0;
        $this.$mirror = 0;
        $this.$render5 = 1;
        $this.$unused = 0;
        $this.$u0 = $var1;
        $this.$v0 = $var2;
    }
    function cmmm_ModelPart_setBounds($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        var $var8, $var9, $var10, var$11, var$12, $var20, $var11, $var12, $var18, $var13, $var15, $var21, $var14, var$21, var$22, var$23, var$24, var$25, $var19, $var16;
        $this.$vertices = $rt_createArray(cmmm_Vertex, 8);
        $this.$quads = $rt_createArray(cmmm_TexturedQuad, 6);
        $var8 = $var1 + $var4;
        $var9 = $var2 + $var5;
        $var10 = $var3 + $var6;
        var$11 = $var1 - $var7;
        $var2 = $var2 - $var7;
        var$12 = $var3 - $var7;
        $var3 = $var8 + $var7;
        $var8 = $var9 + $var7;
        $var7 = $var10 + $var7;
        if (!$this.$mirror) {
            $var1 = var$11;
            var$11 = $var3;
            $var3 = $var1;
        }
        a: {
            $var20 = cmmm_Vertex__init_($var3, $var2, var$12, 0.0, 0.0);
            $var11 = cmmm_Vertex__init_(var$11, $var2, var$12, 0.0, 8.0);
            $var12 = cmmm_Vertex__init_(var$11, $var8, var$12, 8.0, 8.0);
            $var18 = cmmm_Vertex__init_($var3, $var8, var$12, 8.0, 0.0);
            $var13 = cmmm_Vertex__init_($var3, $var2, $var7, 0.0, 0.0);
            $var15 = cmmm_Vertex__init_(var$11, $var2, $var7, 0.0, 8.0);
            $var21 = cmmm_Vertex__init_(var$11, $var8, $var7, 8.0, 8.0);
            $var14 = cmmm_Vertex__init_($var3, $var8, $var7, 8.0, 0.0);
            var$21 = $this.$vertices.data;
            var$21[0] = $var20;
            var$21[1] = $var11;
            var$21[2] = $var12;
            var$21[3] = $var18;
            var$21[4] = $var13;
            var$21[5] = $var15;
            var$21[6] = $var21;
            var$21[7] = $var14;
            var$22 = $this.$quads.data;
            var$23 = new cmmm_TexturedQuad;
            var$21 = $rt_createArrayFromData(cmmm_Vertex, [$var15, $var11, $var12, $var21]);
            var$24 = ($this.$u0 + $var6 | 0) + $var4 | 0;
            var$25 = $this.$v0 + $var6 | 0;
            cmmm_TexturedQuad__init_(var$23, var$21, var$24, var$25, var$24 + $var6 | 0, var$25 + $var5 | 0);
            var$22[0] = var$23;
            var$22 = $this.$quads.data;
            var$23 = new cmmm_TexturedQuad;
            var$21 = $rt_createArrayFromData(cmmm_Vertex, [$var20, $var13, $var14, $var18]);
            var$24 = $this.$u0;
            var$25 = $this.$v0 + $var6 | 0;
            cmmm_TexturedQuad__init_(var$23, var$21, var$24, var$25, var$24 + $var6 | 0, var$25 + $var5 | 0);
            var$22[1] = var$23;
            $var19 = $this.$quads.data;
            var$23 = new cmmm_TexturedQuad;
            var$22 = $rt_createArrayFromData(cmmm_Vertex, [$var15, $var13, $var20, $var11]);
            $var16 = $this.$u0 + $var6 | 0;
            var$24 = $this.$v0;
            cmmm_TexturedQuad__init_(var$23, var$22, $var16, var$24, $var16 + $var4 | 0, var$24 + $var6 | 0);
            $var19[2] = var$23;
            var$22 = $this.$quads.data;
            var$23 = new cmmm_TexturedQuad;
            var$21 = $rt_createArrayFromData(cmmm_Vertex, [$var12, $var18, $var14, $var21]);
            var$24 = ($this.$u0 + $var6 | 0) + $var4 | 0;
            var$25 = $this.$v0;
            cmmm_TexturedQuad__init_(var$23, var$21, var$24, var$25, var$24 + $var4 | 0, var$25 + $var6 | 0);
            var$22[3] = var$23;
            $var19 = $this.$quads.data;
            var$23 = new cmmm_TexturedQuad;
            var$22 = $rt_createArrayFromData(cmmm_Vertex, [$var11, $var20, $var18, $var12]);
            var$24 = $this.$u0 + $var6 | 0;
            var$25 = $this.$v0 + $var6 | 0;
            cmmm_TexturedQuad__init_(var$23, var$22, var$24, var$25, var$24 + $var4 | 0, var$25 + $var5 | 0);
            $var19[4] = var$23;
            var$22 = $this.$quads.data;
            var$23 = new cmmm_TexturedQuad;
            var$21 = $rt_createArrayFromData(cmmm_Vertex, [$var13, $var15, $var21, $var14]);
            $var16 = (($this.$u0 + $var6 | 0) + $var4 | 0) + $var6 | 0;
            $var6 = $this.$v0 + $var6 | 0;
            cmmm_TexturedQuad__init_(var$23, var$21, $var16, $var6, $var16 + $var4 | 0, $var6 + $var5 | 0);
            var$22[5] = var$23;
            if ($this.$mirror) {
                $var16 = 0;
                while (true) {
                    var$21 = $this.$quads.data;
                    if ($var16 >= var$21.length)
                        break a;
                    var$23 = var$21[$var16];
                    var$21 = var$23.$vertices0.data;
                    $var4 = var$21.length;
                    $var19 = $rt_createArray(cmmm_Vertex, $var4);
                    var$22 = $var19.data;
                    $var5 = 0;
                    while ($var5 < $var4) {
                        var$22[$var5] = var$21[($var4 - $var5 | 0) - 1 | 0];
                        $var5 = $var5 + 1 | 0;
                    }
                    var$23.$vertices0 = $var19;
                    $var16 = $var16 + 1 | 0;
                }
            }
        }
    }
    function cmmm_ModelPart_setPosition($this, $var1, $var2, $var3) {
        $this.$x5 = $var1;
        $this.$y4 = $var2;
        $this.$z7 = $var3;
    }
    function cmmm_ModelPart_render($this, $var1) {
        var var$2;
        if ($this.$render5) {
            if (!$this.$hasList)
                cmmm_ModelPart_generateList($this, $var1);
            if ($this.$pitch === 0.0 && $this.$yaw === 0.0 && $this.$roll === 0.0) {
                var$2 = $this.$x5;
                if (var$2 === 0.0 && $this.$y4 === 0.0 && $this.$z7 === 0.0)
                    olo_GL11_glCallList($this.$list);
                else {
                    olo_GL11_glTranslatef(var$2 * $var1, $this.$y4 * $var1, $this.$z7 * $var1);
                    olo_GL11_glCallList($this.$list);
                    olo_GL11_glTranslatef( -$this.$x5 * $var1,  -$this.$y4 * $var1,  -$this.$z7 * $var1);
                }
            } else {
                olo_GL11_glPushMatrix();
                olo_GL11_glTranslatef($this.$x5 * $var1, $this.$y4 * $var1, $this.$z7 * $var1);
                $var1 = $this.$roll;
                if ($var1 !== 0.0)
                    olo_GL11_glRotatef($var1 * 57.2957763671875, 0.0, 0.0, 1.0);
                $var1 = $this.$yaw;
                if ($var1 !== 0.0)
                    olo_GL11_glRotatef($var1 * 57.2957763671875, 0.0, 1.0, 0.0);
                $var1 = $this.$pitch;
                if ($var1 !== 0.0)
                    olo_GL11_glRotatef($var1 * 57.2957763671875, 1.0, 0.0, 0.0);
                olo_GL11_glCallList($this.$list);
                olo_GL11_glPopMatrix();
            }
        }
    }
    function cmmm_ModelPart_generateList($this, $var1) {
        var $var7, $var2, var$4, $var10000, $var5, $var6, var$8, var$9, var$10, var$11, var$12, var$13;
        $var7 = olo_GL11_glGenLists(1);
        $this.$list = $var7;
        olo_GL11_glNewList($var7, 4864);
        olo_GL11_glBegin(7);
        $var2 = 0;
        while (true) {
            var$4 = $this.$quads.data;
            if ($var2 >= var$4.length)
                break;
            $var10000 = var$4[$var2];
            var$4 = $var10000.$vertices0.data;
            $var5 = cmmm_Vec3D_normalize(cmmm_Vec3D_subtract(var$4[1].$vector, var$4[0].$vector));
            var$4 = $var10000.$vertices0.data;
            $var6 = cmmm_Vec3D_normalize(cmmm_Vec3D_subtract(var$4[1].$vector, var$4[2].$vector));
            $var10000 = new cmmm_Vec3D;
            $var1 = $var5.$y3;
            var$8 = $var6.$z3;
            var$9 = $var1 * var$8;
            var$10 = $var5.$z3;
            var$11 = $var6.$y3;
            var$9 = var$9 - var$10 * var$11;
            var$12 = $var6.$x3;
            var$10 = var$10 * var$12;
            var$13 = $var5.$x3;
            cmmm_Vec3D__init_0($var10000, var$9, var$10 - var$13 * var$8, var$13 * var$11 - $var1 * var$12);
            $var10000 = cmmm_Vec3D_normalize($var10000);
            olo_GL11_glNormal3f($var10000.$x3, $var10000.$y3, $var10000.$z3);
            $var7 = 0;
            while ($var7 < 4) {
                $var7 = $var7 + 1 | 0;
            }
            $var2 = $var2 + 1 | 0;
        }
        olo_GL11_glEnd();
        olo_GL11_glEndList();
        $this.$hasList = 1;
    }
    var jl_Iterable = $rt_classWithoutFields(0);
    var ju_Collection = $rt_classWithoutFields(0);
    var ju_AbstractCollection = $rt_classWithoutFields();
    function ju_AbstractCollection_isEmpty($this) {
        return $this.$size1 ? 0 : 1;
    }
    function ju_AbstractCollection_toArray($this, $a) {
        var var$2, $i, $i_0, $iter, var$6, var$7;
        var$2 = $a.data;
        $i = $this.$size0;
        $i_0 = var$2.length;
        if ($i_0 < $i)
            $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
        else
            while ($i < $i_0) {
                var$2[$i] = null;
                $i = $i + 1 | 0;
            }
        $i_0 = 0;
        $iter = ju_AbstractList_iterator($this);
        while (ju_AbstractList$1_hasNext($iter)) {
            var$6 = $a.data;
            var$7 = $i_0 + 1 | 0;
            var$6[$i_0] = ju_AbstractList$1_next($iter);
            $i_0 = var$7;
        }
        return $a;
    }
    var ju_SequencedCollection = $rt_classWithoutFields(0);
    var ju_List = $rt_classWithoutFields(0);
    function ju_AbstractList() {
        ju_AbstractCollection.call(this);
        this.$modCount = 0;
    }
    function ju_AbstractList_add($this, $e) {
        var var$2, var$3, var$4, var$5;
        var$2 = $this.$size1;
        if (var$2 < 0) {
            $e = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0($e);
            $rt_throw($e);
        }
        var$3 = ju_LinkedList_listIterator($this, var$2);
        ju_LinkedList$SequentialListIterator_checkConcurrentModification(var$3);
        var$4 = new ju_LinkedList$Entry;
        var$4.$item = $e;
        $e = var$3.$prevEntry;
        var$4.$previous = $e;
        var$5 = var$3.$nextEntry;
        var$4.$next1 = var$5;
        if ($e !== null)
            $e.$next1 = var$4;
        else
            var$3.$this$0.$firstEntry = var$4;
        if (var$5 !== null)
            var$5.$previous = var$4;
        else
            var$3.$this$0.$lastEntry = var$4;
        var$3.$prevEntry = var$4;
        $e = var$3.$this$0;
        $e.$size1 = $e.$size1 + 1 | 0;
        var$2 = $e.$modCount + 1 | 0;
        $e.$modCount = var$2;
        var$3.$version = var$2;
        var$3.$currentEntry = null;
        return 1;
    }
    function ju_AbstractList_iterator($this) {
        var var$1;
        var$1 = new ju_AbstractList$1;
        var$1.$this$00 = $this;
        var$1.$modCount0 = $this.$modCount;
        var$1.$size2 = $this.$size0;
        var$1.$removeIndex = (-1);
        return var$1;
    }
    var jl_Cloneable = $rt_classWithoutFields(0);
    var ju_RandomAccess = $rt_classWithoutFields(0);
    function ju_ArrayList() {
        var a = this; ju_AbstractList.call(a);
        a.$array0 = null;
        a.$size0 = 0;
    }
    function ju_ArrayList__init_() {
        var var_0 = new ju_ArrayList();
        ju_ArrayList__init_0(var_0);
        return var_0;
    }
    function ju_ArrayList__init_0($this) {
        $this.$array0 = $rt_createArray(jl_Object, 10);
    }
    function ju_ArrayList_ensureCapacity($this, $minCapacity) {
        var var$2, $newLength;
        var$2 = $this.$array0.data.length;
        if (var$2 < $minCapacity) {
            $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max(var$2 * 2 | 0, 5));
            $this.$array0 = ju_Arrays_copyOf1($this.$array0, $newLength);
        }
    }
    function ju_ArrayList_get($this, $index) {
        ju_ArrayList_checkIndex($this, $index);
        return $this.$array0.data[$index];
    }
    function ju_ArrayList_size($this) {
        return $this.$size0;
    }
    function ju_ArrayList_add($this, $element) {
        var var$2, var$3;
        ju_ArrayList_ensureCapacity($this, $this.$size0 + 1 | 0);
        var$2 = $this.$array0.data;
        var$3 = $this.$size0;
        $this.$size0 = var$3 + 1 | 0;
        var$2[var$3] = $element;
        $this.$modCount = $this.$modCount + 1 | 0;
        return 1;
    }
    function ju_ArrayList_remove($this, $i) {
        var var$2, $old, var$4, $i_0;
        ju_ArrayList_checkIndex($this, $i);
        var$2 = $this.$array0.data;
        $old = var$2[$i];
        var$4 = $this.$size0 - 1 | 0;
        $this.$size0 = var$4;
        while ($i < var$4) {
            $i_0 = $i + 1 | 0;
            var$2[$i] = var$2[$i_0];
            $i = $i_0;
        }
        var$2[var$4] = null;
        $this.$modCount = $this.$modCount + 1 | 0;
        return $old;
    }
    function ju_ArrayList_remove0($this, $o) {
        var var$2, $index;
        var$2 = $this.$size0;
        $index = 0;
        a: {
            while (true) {
                if ($index >= var$2) {
                    $index = (-1);
                    break a;
                }
                if (ju_Objects_equals($o, ju_ArrayList_get($this, $index)))
                    break;
                $index = $index + 1 | 0;
            }
        }
        if ($index < 0)
            return 0;
        ju_ArrayList_remove($this, $index);
        return 1;
    }
    function ju_ArrayList_clear($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6;
        var$1 = $this.$array0;
        var$2 = 0;
        var$3 = $this.$size0;
        var$4 = null;
        if (var$2 > var$3) {
            var$4 = new jl_IllegalArgumentException;
            jl_Throwable__init_0(var$4);
            $rt_throw(var$4);
        }
        while (var$2 < var$3) {
            var$5 = var$1.data;
            var$6 = var$2 + 1 | 0;
            var$5[var$2] = var$4;
            var$2 = var$6;
        }
        $this.$size0 = 0;
        $this.$modCount = $this.$modCount + 1 | 0;
    }
    function ju_ArrayList_checkIndex($this, $index) {
        var var$2;
        if ($index >= 0 && $index < $this.$size0)
            return;
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    function cmmlt_Block() {
        var a = this; jl_Object.call(a);
        a.$textureId0 = 0;
        a.$id = 0;
        a.$stepsound = null;
        a.$hardness = 0;
        a.$explodes = 0;
        a.$x10 = 0.0;
        a.$y10 = 0.0;
        a.$z10 = 0.0;
        a.$x2 = 0.0;
        a.$y2 = 0.0;
        a.$z2 = 0.0;
        a.$particleGravity = 0.0;
    }
    var cmmlt_Block_random = null;
    var cmmlt_Block_blocks = null;
    var cmmlt_Block_physics = null;
    var cmmlt_Block_opaque = null;
    var cmmlt_Block_cube = null;
    var cmmlt_Block_liquid = null;
    var cmmlt_Block_tickDelay = null;
    var cmmlt_Block_STONE = null;
    var cmmlt_Block_GRASS = null;
    var cmmlt_Block_DIRT = null;
    var cmmlt_Block_COBBLESTONE = null;
    var cmmlt_Block_WOOD = null;
    var cmmlt_Block_SAPLING = null;
    var cmmlt_Block_BEDROCK = null;
    var cmmlt_Block_WATER = null;
    var cmmlt_Block_STATIONARY_WATER = null;
    var cmmlt_Block_LAVA = null;
    var cmmlt_Block_STATIONARY_LAVA = null;
    var cmmlt_Block_SAND = null;
    var cmmlt_Block_GRAVEL = null;
    var cmmlt_Block_GOLD_ORE = null;
    var cmmlt_Block_IRON_ORE = null;
    var cmmlt_Block_COAL_ORE = null;
    var cmmlt_Block_LOG = null;
    var cmmlt_Block_LEAVES = null;
    var cmmlt_Block_SPONGE = null;
    var cmmlt_Block_GLASS = null;
    var cmmlt_Block_RED_WOOL = null;
    var cmmlt_Block_ORANGE_WOOL = null;
    var cmmlt_Block_YELLOW_WOOL = null;
    var cmmlt_Block_LIME_WOOL = null;
    var cmmlt_Block_GREEN_WOOL = null;
    var cmmlt_Block_AQUA_GREEN_WOOL = null;
    var cmmlt_Block_CYAN_WOOL = null;
    var cmmlt_Block_BLUE_WOOL = null;
    var cmmlt_Block_PURPLE_WOOL = null;
    var cmmlt_Block_INDIGO_WOOL = null;
    var cmmlt_Block_VIOLET_WOOL = null;
    var cmmlt_Block_MAGENTA_WOOL = null;
    var cmmlt_Block_PINK_WOOL = null;
    var cmmlt_Block_BLACK_WOOL = null;
    var cmmlt_Block_GRAY_WOOL = null;
    var cmmlt_Block_WHITE_WOOL = null;
    var cmmlt_Block_DANDELION = null;
    var cmmlt_Block_ROSE = null;
    var cmmlt_Block_BROWN_MUSHROOM = null;
    var cmmlt_Block_RED_MUSHROOM = null;
    var cmmlt_Block_GOLD_BLOCK = null;
    var cmmlt_Block_IRON_BLOCK = null;
    var cmmlt_Block_DOUBLE_SLAB = null;
    var cmmlt_Block_SLAB = null;
    var cmmlt_Block_BRICK = null;
    var cmmlt_Block_TNT = null;
    var cmmlt_Block_BOOKSHELF = null;
    var cmmlt_Block_MOSSY_COBBLESTONE = null;
    var cmmlt_Block_OBSIDIAN = null;
    function cmmlt_Block_$callClinit() {
        cmmlt_Block_$callClinit = $rt_eraseClinit(cmmlt_Block);
        cmmlt_Block__clinit_();
    }
    function cmmlt_Block__init_(var_0) {
        var var_1 = new cmmlt_Block();
        cmmlt_Block__init_0(var_1, var_0);
        return var_1;
    }
    function cmmlt_Block__init_1(var_0, var_1) {
        var var_2 = new cmmlt_Block();
        cmmlt_Block__init_2(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_Block__init_0($this, $id) {
        cmmlt_Block_$callClinit();
        $this.$explodes = 1;
        cmmlt_Block_blocks.data[$id] = $this;
        $this.$id = $id;
        cmmlt_Block_setBounds($this, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
        cmmlt_Block_opaque.data[$id] = $this.$isSolid0();
        cmmlt_Block_cube.data[$id] = $this.$isCube();
        cmmlt_Block_liquid.data[$id] = 0;
    }
    function cmmlt_Block__init_2($this, $id, $textureID) {
        cmmlt_Block_$callClinit();
        cmmlt_Block__init_0($this, $id);
        $this.$textureId0 = $textureID;
    }
    function cmmlt_Block_isCube($this) {
        return 1;
    }
    function cmmlt_Block_setData($this, $soundType, $var2, $particleGravity, $hardness) {
        $this.$particleGravity = $particleGravity;
        $this.$stepsound = $soundType;
        $this.$hardness = $hardness * 20.0 | 0;
        return $this;
    }
    function cmmlt_Block_setPhysics($this, $physics) {
        cmmlt_Block_$callClinit();
        cmmlt_Block_physics.data[$this.$id] = $physics;
    }
    function cmmlt_Block_setBounds($this, $x1, $y1, $z1, $x2, $y2, $z2) {
        $this.$x10 = $x1;
        $this.$y10 = $y1;
        $this.$z10 = $z1;
        $this.$x2 = $x2;
        $this.$y2 = $y2;
        $this.$z2 = $z2;
    }
    function cmmlt_Block_setTickDelay($this, $tickDelay) {
        cmmlt_Block_$callClinit();
        cmmlt_Block_tickDelay.data[$this.$id] = $tickDelay;
    }
    function cmmlt_Block_renderFullbright($this, $shapeRenderer) {
        cmmr_ShapeRenderer_color($shapeRenderer, 0.5, 0.5, 0.5);
        $this.$renderInside($shapeRenderer, (-2), 0, 0, 0);
        cmmr_ShapeRenderer_color($shapeRenderer, 1.0, 1.0, 1.0);
        $this.$renderInside($shapeRenderer, (-2), 0, 0, 1);
        cmmr_ShapeRenderer_color($shapeRenderer, 0.800000011920929, 0.800000011920929, 0.800000011920929);
        $this.$renderInside($shapeRenderer, (-2), 0, 0, 2);
        cmmr_ShapeRenderer_color($shapeRenderer, 0.800000011920929, 0.800000011920929, 0.800000011920929);
        $this.$renderInside($shapeRenderer, (-2), 0, 0, 3);
        cmmr_ShapeRenderer_color($shapeRenderer, 0.6000000238418579, 0.6000000238418579, 0.6000000238418579);
        $this.$renderInside($shapeRenderer, (-2), 0, 0, 4);
        cmmr_ShapeRenderer_color($shapeRenderer, 0.6000000238418579, 0.6000000238418579, 0.6000000238418579);
        $this.$renderInside($shapeRenderer, (-2), 0, 0, 5);
    }
    function cmmlt_Block_getBrightness($this, $level, $x, $y, $z) {
        return cmml_Level_getBrightness($level, $x, $y, $z);
    }
    function cmmlt_Block_canRenderSide($this, $level, $x, $y, $z, $side) {
        return cmml_Level_isSolidTile($level, $x, $y, $z) ? 0 : 1;
    }
    function cmmlt_Block_getTextureId($this, $texture) {
        return $this.$textureId0;
    }
    function cmmlt_Block_renderInside($this, $shapeRenderer, $x, $y, $z, $side) {
        cmmlt_Block_renderSide($this, $shapeRenderer, $x, $y, $z, $side, $this.$getTextureId($side));
    }
    function cmmlt_Block_renderSide($this, $shapeRenderer, $x, $y, $z, $side, $textureID) {
        var $var7, $var8, $var16, $var9, $var17, $var10, $var11, $var18, $var14, $var15, $var13, $var12;
        $var7 = ($textureID % 16 | 0) << 4;
        $var8 = ($textureID / 16 | 0) << 4;
        $var16 = $var7;
        $var9 = $var16 / 256.0;
        $var17 = ($var16 + 15.989999771118164) / 256.0;
        $var16 = $var8;
        $var10 = $var16 / 256.0;
        $var11 = ($var16 + 15.989999771118164) / 256.0;
        $var7 = $rt_compare($side, 2);
        if ($var7 >= 0 && $textureID < 240) {
            $var18 = $this.$y10;
            if ($var18 >= 0.0) {
                $var14 = $this.$y2;
                if ($var14 <= 1.0) {
                    $var10 = ($var16 + $var18 * 15.989999771118164) / 256.0;
                    $var11 = ($var16 + $var14 * 15.989999771118164) / 256.0;
                }
            }
        }
        $var15 = $x;
        $var16 = $var15 + $this.$x10;
        $var14 = $var15 + $this.$x2;
        $var15 = $y;
        $var18 = $var15 + $this.$y10;
        $var15 = $var15 + $this.$y2;
        $var13 = $z;
        $var12 = $var13 + $this.$z10;
        $var13 = $var13 + $this.$z2;
        if (!$side) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var18, $var13, $var9, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var18, $var12, $var9, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var18, $var12, $var17, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var18, $var13, $var17, $var11);
        } else if ($side == 1) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var15, $var13, $var17, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var15, $var12, $var17, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var15, $var12, $var9, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var15, $var13, $var9, $var11);
        } else if (!$var7) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var15, $var12, $var17, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var15, $var12, $var9, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var18, $var12, $var9, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var18, $var12, $var17, $var11);
        } else if ($side == 3) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var15, $var13, $var9, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var18, $var13, $var9, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var18, $var13, $var17, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var15, $var13, $var17, $var10);
        } else if ($side == 4) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var15, $var13, $var17, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var15, $var12, $var9, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var18, $var12, $var9, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var16, $var18, $var13, $var17, $var11);
        } else if ($side == 5) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var18, $var13, $var9, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var18, $var12, $var17, $var11);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var15, $var12, $var17, $var10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, $var14, $var15, $var13, $var9, $var10);
        }
    }
    function cmmlt_Block_getSelectionBox($this, $x, $y, $z) {
        var $aabb, var$5, var$6, var$7, var$8, var$9;
        $aabb = new cmmp_AABB;
        var$5 = $x;
        var$6 = var$5 + $this.$x10;
        var$7 = $y;
        var$8 = var$7 + $this.$y10;
        var$9 = $z;
        cmmp_AABB__init_($aabb, var$6, var$8, var$9 + $this.$z10, var$5 + $this.$x2, var$7 + $this.$y2, var$9 + $this.$z2);
        return $aabb;
    }
    function cmmlt_Block_getCollisionBox($this, $x, $y, $z) {
        var $aabb, var$5, var$6, var$7, var$8, var$9;
        $aabb = new cmmp_AABB;
        var$5 = $x;
        var$6 = var$5 + $this.$x10;
        var$7 = $y;
        var$8 = var$7 + $this.$y10;
        var$9 = $z;
        cmmp_AABB__init_($aabb, var$6, var$8, var$9 + $this.$z10, var$5 + $this.$x2, var$7 + $this.$y2, var$9 + $this.$z2);
        return $aabb;
    }
    function cmmlt_Block_isOpaque($this) {
        return 1;
    }
    function cmmlt_Block_isSolid($this) {
        return 1;
    }
    function cmmlt_Block_update($this, $level, $x, $y, $z, $rand) {}
    function cmmlt_Block_spawnBreakParticles($this, $level, $x, $y, $z, $particleManager) {
        var $var6, var$7, var$8, var$9, $var7, $var8, $var9, $var10, $var11;
        $var6 = 0;
        var$7 = $x;
        var$8 = $y;
        var$9 = $z;
        while ($var6 < 4) {
            $var7 = 0;
            while ($var7 < 4) {
                $var8 = 0;
                while ($var8 < 4) {
                    $var9 = var$7 + ($var6 + 0.5) / 4.0;
                    $var10 = var$8 + ($var7 + 0.5) / 4.0;
                    $var11 = var$9 + ($var8 + 0.5) / 4.0;
                    cmmp_ParticleManager_spawnParticle($particleManager, cmmp_TerrainParticle__init_($level, $var9, $var10, $var11, $var9 - var$7 - 0.5, $var10 - var$8 - 0.5, $var11 - var$9 - 0.5, $this));
                    $var8 = $var8 + 1 | 0;
                }
                $var7 = $var7 + 1 | 0;
            }
            $var6 = $var6 + 1 | 0;
        }
    }
    function cmmlt_Block_spawnBlockParticles($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7, var$8, $var9, $var10, $var8, var$12, var$13, var$14, var$15;
        var$7 = $var2;
        cmmlt_Block_$callClinit();
        var$8 = ju_Random_nextFloat(cmmlt_Block_random);
        $var9 = $this.$x2;
        $var10 = $this.$x10;
        $var8 = var$7 + var$8 * ($var9 - $var10 - 0.20000000298023224) + 0.10000000149011612 + $var10;
        var$12 = $var3;
        $var9 = ju_Random_nextFloat(cmmlt_Block_random);
        var$8 = $this.$y2;
        $var10 = $this.$y10;
        $var9 = var$12 + $var9 * (var$8 - $var10 - 0.20000000298023224) + 0.10000000149011612 + $var10;
        var$8 = $var4;
        $var10 = ju_Random_nextFloat(cmmlt_Block_random);
        var$13 = $this.$z2;
        var$14 = $this.$z10;
        $var10 = var$8 + $var10 * (var$13 - var$14 - 0.20000000298023224) + 0.10000000149011612 + var$14;
        if (!$var5)
            $var9 = var$12 + $this.$y10 - 0.10000000149011612;
        if ($var5 == 1)
            $var9 = var$12 + $this.$y2 + 0.10000000149011612;
        if ($var5 == 2)
            $var10 = var$8 + var$14 - 0.10000000149011612;
        if ($var5 == 3)
            $var10 = var$8 + var$13 + 0.10000000149011612;
        if ($var5 == 4)
            $var8 = var$7 + $this.$x10 - 0.10000000149011612;
        if ($var5 == 5)
            $var8 = var$7 + $this.$x2 + 0.10000000149011612;
        var$15 = cmmp_TerrainParticle__init_($var1, $var8, $var9, $var10, 0.0, 0.0, 0.0, $this);
        var$15.$xd = var$15.$xd * 0.20000000298023224;
        var$15.$yd = (var$15.$yd - 0.10000000149011612) * 0.20000000298023224 + 0.10000000149011612;
        var$15.$zd = var$15.$zd * 0.20000000298023224;
        cmm_Entity_setSize(var$15, 0.12000000476837158, 0.12000000476837158);
        var$15.$size3 = var$15.$size3 * 0.6000000238418579;
        cmmp_ParticleManager_spawnParticle($var6, var$15);
    }
    function cmmlt_Block_getLiquidType($this) {
        return cmmll_LiquidType_NOT_LIQUID;
    }
    function cmmlt_Block_onNeighborChange($this, $var1, $var2, $var3, $var4, $var5) {}
    function cmmlt_Block_onPlace($this, $level, $x, $y, $z) {}
    function cmmlt_Block_getTickDelay($this) {
        return 0;
    }
    function cmmlt_Block_onAdded($this, $level, $x, $y, $z) {}
    function cmmlt_Block_onRemoved($this, $var1, $var2, $var3, $var4) {}
    function cmmlt_Block_getDropCount($this) {
        return 1;
    }
    function cmmlt_Block_getDrop($this) {
        return $this.$id;
    }
    function cmmlt_Block_getHardness($this) {
        return $this.$hardness;
    }
    function cmmlt_Block_onBreak($this, $var1, $var2, $var3, $var4) {
        $this.$dropItems($var1, $var2, $var3, $var4, 1.0);
    }
    function cmmlt_Block_dropItems($this, $var1, $var2, $var3, $var4, $var5) {
        var $var6, $var7, var$8, var$9, var$10;
        a: {
            if (!$var1.$creativeMode) {
                $var6 = $this.$getDropCount();
                $var7 = 0;
                var$8 = $var2;
                var$9 = $var3;
                var$10 = $var4;
                while (true) {
                    if ($var7 >= $var6)
                        break a;
                    if (ju_Random_nextFloat(cmmlt_Block_random) <= $var5)
                        cmml_Level_addEntity($var1, cmmi_Item__init_($var1, var$8 + ju_Random_nextFloat(cmmlt_Block_random) * 0.699999988079071 + 0.15000000596046448, var$9 + ju_Random_nextFloat(cmmlt_Block_random) * 0.699999988079071 + 0.15000000596046448, var$10 + ju_Random_nextFloat(cmmlt_Block_random) * 0.699999988079071 + 0.15000000596046448, $this.$getDrop()));
                    $var7 = $var7 + 1 | 0;
                }
            }
        }
    }
    function cmmlt_Block_renderPreview($this, $var1) {
        var $var2;
        cmmr_ShapeRenderer_begin($var1);
        $var2 = 0;
        while ($var2 < 6) {
            if (!$var2)
                cmmr_ShapeRenderer_normal($var1, 0.0, 1.0, 0.0);
            if ($var2 == 1)
                cmmr_ShapeRenderer_normal($var1, 0.0, (-1.0), 0.0);
            if ($var2 == 2)
                cmmr_ShapeRenderer_normal($var1, 0.0, 0.0, 1.0);
            if ($var2 == 3)
                cmmr_ShapeRenderer_normal($var1, 0.0, 0.0, (-1.0));
            if ($var2 == 4)
                cmmr_ShapeRenderer_normal($var1, 1.0, 0.0, 0.0);
            if ($var2 == 5)
                cmmr_ShapeRenderer_normal($var1, (-1.0), 0.0, 0.0);
            $this.$renderInside($var1, 0, 0, 0, $var2);
            $var2 = $var2 + 1 | 0;
        }
        cmmr_ShapeRenderer_end($var1);
    }
    function cmmlt_Block_canExplode($this) {
        return $this.$explodes;
    }
    function cmmlt_Block_clip($this, $var1, $var2, $var3, $var4, $var5) {
        var var$6, var$7, var$8, $var6, $var7, $var8, $var9, $var10, $var11, $var12;
        var$6 =  -$var1 | 0;
        var$7 =  -$var2 | 0;
        var$8 =  -$var3 | 0;
        $var4 = cmmm_Vec3D_add($var4, var$6, var$7, var$8);
        $var5 = cmmm_Vec3D_add($var5, var$6, var$7, var$8);
        $var6 = cmmm_Vec3D_getXIntersection($var4, $var5, $this.$x10);
        $var7 = cmmm_Vec3D_getXIntersection($var4, $var5, $this.$x2);
        $var8 = cmmm_Vec3D_getYIntersection($var4, $var5, $this.$y10);
        $var9 = cmmm_Vec3D_getYIntersection($var4, $var5, $this.$y2);
        $var10 = cmmm_Vec3D_getZIntersection($var4, $var5, $this.$z10);
        $var5 = cmmm_Vec3D_getZIntersection($var4, $var5, $this.$z2);
        if (!cmmlt_Block_xIntersects($this, $var6))
            $var6 = null;
        if (!cmmlt_Block_xIntersects($this, $var7))
            $var7 = null;
        if (!cmmlt_Block_yIntersects($this, $var8))
            $var8 = null;
        if (!cmmlt_Block_yIntersects($this, $var9))
            $var9 = null;
        if (!cmmlt_Block_zIntersects($this, $var10))
            $var10 = null;
        if (!cmmlt_Block_zIntersects($this, $var5))
            $var5 = null;
        $var11 = null;
        if ($var6 !== null)
            $var11 = $var6;
        if ($var7 !== null && !($var11 !== null && cmmm_Vec3D_distance($var4, $var7) >= cmmm_Vec3D_distance($var4, $var11)))
            $var11 = $var7;
        if ($var8 !== null && !($var11 !== null && cmmm_Vec3D_distance($var4, $var8) >= cmmm_Vec3D_distance($var4, $var11)))
            $var11 = $var8;
        if ($var9 !== null && !($var11 !== null && cmmm_Vec3D_distance($var4, $var9) >= cmmm_Vec3D_distance($var4, $var11)))
            $var11 = $var9;
        if ($var10 !== null && !($var11 !== null && cmmm_Vec3D_distance($var4, $var10) >= cmmm_Vec3D_distance($var4, $var11)))
            $var11 = $var10;
        if ($var5 !== null && !($var11 !== null && cmmm_Vec3D_distance($var4, $var5) >= cmmm_Vec3D_distance($var4, $var11)))
            $var11 = $var5;
        if ($var11 === null)
            return null;
        $var12 = (-1);
        if ($var11 === $var6)
            $var12 = 4;
        if ($var11 === $var7)
            $var12 = 5;
        if ($var11 === $var8)
            $var12 = 0;
        if ($var11 === $var9)
            $var12 = 1;
        if ($var11 === $var10)
            $var12 = 2;
        if ($var11 === $var5)
            $var12 = 3;
        return cmm_MovingObjectPosition__init_0($var1, $var2, $var3, $var12, cmmm_Vec3D_add($var11, $var1, $var2, $var3));
    }
    function cmmlt_Block_xIntersects($this, $var1) {
        var var$2, var$3;
        a: {
            if ($var1 === null)
                var$2 = 0;
            else {
                var$3 = $var1.$y3;
                if (var$3 >= $this.$y10 && var$3 <= $this.$y2) {
                    var$3 = $var1.$z3;
                    if (var$3 >= $this.$z10 && var$3 <= $this.$z2) {
                        var$2 = 1;
                        break a;
                    }
                }
                var$2 = 0;
            }
        }
        return var$2;
    }
    function cmmlt_Block_yIntersects($this, $var1) {
        var var$2, var$3;
        a: {
            if ($var1 === null)
                var$2 = 0;
            else {
                var$3 = $var1.$x3;
                if (var$3 >= $this.$x10 && var$3 <= $this.$x2) {
                    var$3 = $var1.$z3;
                    if (var$3 >= $this.$z10 && var$3 <= $this.$z2) {
                        var$2 = 1;
                        break a;
                    }
                }
                var$2 = 0;
            }
        }
        return var$2;
    }
    function cmmlt_Block_zIntersects($this, $var1) {
        var var$2, var$3;
        a: {
            if ($var1 === null)
                var$2 = 0;
            else {
                var$3 = $var1.$x3;
                if (var$3 >= $this.$x10 && var$3 <= $this.$x2) {
                    var$3 = $var1.$y3;
                    if (var$3 >= $this.$y10 && var$3 <= $this.$y2) {
                        var$2 = 1;
                        break a;
                    }
                }
                var$2 = 0;
            }
        }
        return var$2;
    }
    function cmmlt_Block_explode($this, $var1, $var2, $var3, $var4) {}
    function cmmlt_Block_render($this, $var1, $var2, $var3, $var4, $var5) {
        var $var6, var$7, $var10, var$9, $var8, $var9;
        $var6 = 0;
        var$7 = $var3 - 1 | 0;
        if ($this.$canRenderSide($var1, $var2, var$7, $var4, 0)) {
            $var10 = 0.5 * $this.$getBrightness0($var1, $var2, var$7, $var4);
            cmmr_ShapeRenderer_color($var5, $var10, $var10, $var10);
            $this.$renderInside($var5, $var2, $var3, $var4, 0);
            $var6 = 1;
        }
        var$7 = $var3 + 1 | 0;
        if ($this.$canRenderSide($var1, $var2, var$7, $var4, 1)) {
            $var10 = $this.$getBrightness0($var1, $var2, var$7, $var4) * 1.0;
            cmmr_ShapeRenderer_color($var5, $var10, $var10, $var10);
            $this.$renderInside($var5, $var2, $var3, $var4, 1);
            $var6 = 1;
        }
        var$7 = $var4 - 1 | 0;
        if ($this.$canRenderSide($var1, $var2, $var3, var$7, 2)) {
            $var10 = 0.800000011920929 * $this.$getBrightness0($var1, $var2, $var3, var$7);
            cmmr_ShapeRenderer_color($var5, $var10, $var10, $var10);
            $this.$renderInside($var5, $var2, $var3, $var4, 2);
            $var6 = 1;
        }
        var$9 = $var4 + 1 | 0;
        if ($this.$canRenderSide($var1, $var2, $var3, var$9, 3)) {
            $var8 = 0.800000011920929 * $this.$getBrightness0($var1, $var2, $var3, var$9);
            cmmr_ShapeRenderer_color($var5, $var8, $var8, $var8);
            $this.$renderInside($var5, $var2, $var3, $var4, 3);
            $var6 = 1;
        }
        var$7 = $var2 - 1 | 0;
        if ($this.$canRenderSide($var1, var$7, $var3, $var4, 4)) {
            $var8 = 0.6000000238418579 * $this.$getBrightness0($var1, var$7, $var3, $var4);
            cmmr_ShapeRenderer_color($var5, $var8, $var8, $var8);
            $this.$renderInside($var5, $var2, $var3, $var4, 4);
            $var6 = 1;
        }
        var$7 = $var2 + 1 | 0;
        if ($this.$canRenderSide($var1, var$7, $var3, $var4, 5)) {
            $var9 = 0.6000000238418579 * $this.$getBrightness0($var1, var$7, $var3, $var4);
            cmmr_ShapeRenderer_color($var5, $var9, $var9, $var9);
            $this.$renderInside($var5, $var2, $var3, $var4, 5);
            $var6 = 1;
        }
        return $var6;
    }
    function cmmlt_Block_getRenderPass($this) {
        return 0;
    }
    function cmmlt_Block__clinit_() {
        var $var10000;
        cmmlt_Block_random = ju_Random__init_();
        cmmlt_Block_blocks = $rt_createArray(cmmlt_Block, 256);
        cmmlt_Block_physics = $rt_createBooleanArray(256);
        cmmlt_Block_opaque = $rt_createBooleanArray(256);
        cmmlt_Block_cube = $rt_createBooleanArray(256);
        cmmlt_Block_liquid = $rt_createBooleanArray(256);
        cmmlt_Block_tickDelay = $rt_createIntArray(256);
        $var10000 = cmmlt_StoneBlock__init_(1, 1);
        cmmlt_Tile$SoundType_$callClinit();
        $var10000 = cmmlt_Block_setData($var10000, cmmlt_Tile$SoundType_stone, 1.0, 1.0, 1.0);
        $var10000.$explodes = 0;
        cmmlt_Block_STONE = $var10000;
        cmmlt_Block_GRASS = cmmlt_Block_setData(cmmlt_GrassBlock__init_(2), cmmlt_Tile$SoundType_grass, 0.8999999761581421, 1.0, 0.6000000238418579);
        cmmlt_Block_DIRT = cmmlt_Block_setData(cmmlt_DirtBlock__init_(3, 2), cmmlt_Tile$SoundType_grass, 0.800000011920929, 1.0, 0.5);
        $var10000 = cmmlt_Block_setData(cmmlt_Block__init_1(4, 16), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 1.5);
        $var10000.$explodes = 0;
        cmmlt_Block_COBBLESTONE = $var10000;
        cmmlt_Block_WOOD = cmmlt_Block_setData(cmmlt_Block__init_1(5, 4), cmmlt_Tile$SoundType_wood, 1.0, 1.0, 1.5);
        cmmlt_Block_SAPLING = cmmlt_Block_setData(cmmlt_SaplingBlock__init_(6, 15), cmmlt_Tile$SoundType_none, 0.699999988079071, 1.0, 0.0);
        $var10000 = cmmlt_Block_setData(cmmlt_Block__init_1(7, 17), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 999.0);
        $var10000.$explodes = 0;
        cmmlt_Block_BEDROCK = $var10000;
        cmmlt_Block_WATER = cmmlt_Block_setData(cmmlt_LiquidBlock__init_(8, cmmll_LiquidType_WATER), cmmlt_Tile$SoundType_none, 1.0, 1.0, 100.0);
        cmmlt_Block_STATIONARY_WATER = cmmlt_Block_setData(cmmlt_StillLiquidBlock__init_(9, cmmll_LiquidType_WATER), cmmlt_Tile$SoundType_none, 1.0, 1.0, 100.0);
        cmmlt_Block_LAVA = cmmlt_Block_setData(cmmlt_LiquidBlock__init_(10, cmmll_LiquidType_LAVA), cmmlt_Tile$SoundType_none, 1.0, 1.0, 100.0);
        cmmlt_Block_STATIONARY_LAVA = cmmlt_Block_setData(cmmlt_StillLiquidBlock__init_(11, cmmll_LiquidType_LAVA), cmmlt_Tile$SoundType_none, 1.0, 1.0, 100.0);
        cmmlt_Block_SAND = cmmlt_Block_setData(cmmlt_SandBlock__init_(12, 18), cmmlt_Tile$SoundType_gravel, 0.800000011920929, 1.0, 0.5);
        cmmlt_Block_GRAVEL = cmmlt_Block_setData(cmmlt_SandBlock__init_(13, 19), cmmlt_Tile$SoundType_gravel, 0.800000011920929, 1.0, 0.6000000238418579);
        $var10000 = cmmlt_Block_setData(cmmlt_OreBlock__init_(14, 32), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 3.0);
        $var10000.$explodes = 0;
        cmmlt_Block_GOLD_ORE = $var10000;
        $var10000 = cmmlt_Block_setData(cmmlt_OreBlock__init_(15, 33), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 3.0);
        $var10000.$explodes = 0;
        cmmlt_Block_IRON_ORE = $var10000;
        $var10000 = cmmlt_Block_setData(cmmlt_OreBlock__init_(16, 34), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 3.0);
        $var10000.$explodes = 0;
        cmmlt_Block_COAL_ORE = $var10000;
        cmmlt_Block_LOG = cmmlt_Block_setData(cmmlt_WoodBlock__init_(17), cmmlt_Tile$SoundType_wood, 1.0, 1.0, 2.5);
        cmmlt_Block_LEAVES = cmmlt_Block_setData(cmmlt_LeavesBlock__init_(18, 22), cmmlt_Tile$SoundType_grass, 1.0, 0.4000000059604645, 0.20000000298023224);
        cmmlt_Block_SPONGE = cmmlt_Block_setData(cmmlt_SpongeBlock__init_(19), cmmlt_Tile$SoundType_cloth, 1.0, 0.8999999761581421, 0.6000000238418579);
        cmmlt_Block_GLASS = cmmlt_Block_setData(cmmlt_GlassBlock__init_(20, 49, 0), cmmlt_Tile$SoundType_metal, 1.0, 1.0, 0.30000001192092896);
        cmmlt_Block_RED_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(21, 64), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_ORANGE_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(22, 65), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_YELLOW_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(23, 66), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_LIME_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(24, 67), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_GREEN_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(25, 68), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_AQUA_GREEN_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(26, 69), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_CYAN_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(27, 70), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_BLUE_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(28, 71), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_PURPLE_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(29, 72), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_INDIGO_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(30, 73), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_VIOLET_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(31, 74), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_MAGENTA_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(32, 75), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_PINK_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(33, 76), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_BLACK_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(34, 77), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_GRAY_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(35, 78), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_WHITE_WOOL = cmmlt_Block_setData(cmmlt_Block__init_1(36, 79), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.800000011920929);
        cmmlt_Block_DANDELION = cmmlt_Block_setData(cmmlt_FlowerBlock__init_(37, 13), cmmlt_Tile$SoundType_none, 0.699999988079071, 1.0, 0.0);
        cmmlt_Block_ROSE = cmmlt_Block_setData(cmmlt_FlowerBlock__init_(38, 12), cmmlt_Tile$SoundType_none, 0.699999988079071, 1.0, 0.0);
        cmmlt_Block_BROWN_MUSHROOM = cmmlt_Block_setData(cmmlt_MushroomBlock__init_(39, 29), cmmlt_Tile$SoundType_none, 0.699999988079071, 1.0, 0.0);
        cmmlt_Block_RED_MUSHROOM = cmmlt_Block_setData(cmmlt_MushroomBlock__init_(40, 28), cmmlt_Tile$SoundType_none, 0.699999988079071, 1.0, 0.0);
        $var10000 = cmmlt_Block_setData(cmmlt_MetalBlock__init_(41, 40), cmmlt_Tile$SoundType_metal, 0.699999988079071, 1.0, 3.0);
        $var10000.$explodes = 0;
        cmmlt_Block_GOLD_BLOCK = $var10000;
        $var10000 = cmmlt_Block_setData(cmmlt_MetalBlock__init_(42, 39), cmmlt_Tile$SoundType_metal, 0.699999988079071, 1.0, 5.0);
        $var10000.$explodes = 0;
        cmmlt_Block_IRON_BLOCK = $var10000;
        $var10000 = cmmlt_Block_setData(cmmlt_SlabBlock__init_(43, 1), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 2.0);
        $var10000.$explodes = 0;
        cmmlt_Block_DOUBLE_SLAB = $var10000;
        $var10000 = cmmlt_Block_setData(cmmlt_SlabBlock__init_(44, 0), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 2.0);
        $var10000.$explodes = 0;
        cmmlt_Block_SLAB = $var10000;
        $var10000 = cmmlt_Block_setData(cmmlt_Block__init_1(45, 7), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 2.0);
        $var10000.$explodes = 0;
        cmmlt_Block_BRICK = $var10000;
        cmmlt_Block_TNT = cmmlt_Block_setData(cmmlt_TNTBlock__init_(46, 8), cmmlt_Tile$SoundType_cloth, 1.0, 1.0, 0.0);
        cmmlt_Block_BOOKSHELF = cmmlt_Block_setData(cmmlt_BookshelfBlock__init_(47, 35), cmmlt_Tile$SoundType_wood, 1.0, 1.0, 1.5);
        $var10000 = cmmlt_Block_setData(cmmlt_Block__init_1(48, 36), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 1.0);
        $var10000.$explodes = 0;
        cmmlt_Block_MOSSY_COBBLESTONE = $var10000;
        $var10000 = cmmlt_Block_setData(cmmlt_StoneBlock__init_(49, 37), cmmlt_Tile$SoundType_stone, 1.0, 1.0, 10.0);
        $var10000.$explodes = 0;
        cmmlt_Block_OBSIDIAN = $var10000;
    }
    function otji_JSWrapper() {
        jl_Object.call(this);
        this.$js = null;
    }
    var otji_JSWrapper_hashCodes = null;
    var otji_JSWrapper_wrappers = null;
    var otji_JSWrapper_stringWrappers = null;
    var otji_JSWrapper_numberWrappers = null;
    var otji_JSWrapper_undefinedWrapper = null;
    var otji_JSWrapper_stringFinalizationRegistry = null;
    var otji_JSWrapper_numberFinalizationRegistry = null;
    function otji_JSWrapper_$callClinit() {
        otji_JSWrapper_$callClinit = $rt_eraseClinit(otji_JSWrapper);
        otji_JSWrapper__clinit_();
    }
    function otji_JSWrapper__init_(var_0) {
        var var_1 = new otji_JSWrapper();
        otji_JSWrapper__init_0(var_1, var_0);
        return var_1;
    }
    function otji_JSWrapper__init_0($this, $js) {
        otji_JSWrapper_$callClinit();
        $this.$js = $js;
    }
    function otji_JSWrapper_wrap($o) {
        var $jsNumber, $type, $isObject, $existingRef, $existing, $wrapper, $wrapperAsJs;
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        $jsNumber = $o;
        $type = $rt_str(typeof $jsNumber);
        $isObject = !jl_String_equals($type, $rt_s(69)) && !jl_String_equals($type, $rt_s(70)) ? 0 : 1;
        if ($isObject && $o[$rt_jso_marker] === true)
            return $o;
        $o = otji_JSWrapper_wrappers;
        if ($o !== null) {
            if ($isObject) {
                $existingRef = $o.get($jsNumber);
                $existing = (typeof $existingRef === 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
                if (!(typeof $existing === 'undefined' ? 1 : 0))
                    return $existing;
                $wrapper = otji_JSWrapper__init_($jsNumber);
                otji_JSWrapper_wrappers.set($jsNumber, new $rt_globals.WeakRef($wrapper));
                return $wrapper;
            }
            if (jl_String_equals($type, $rt_s(71))) {
                $existingRef = otji_JSWrapper_stringWrappers.get($jsNumber);
                $existing = (typeof $existingRef === 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
                if (!(typeof $existing === 'undefined' ? 1 : 0))
                    return $existing;
                $wrapper = otji_JSWrapper__init_($jsNumber);
                $wrapperAsJs = $wrapper;
                otji_JSWrapper_stringWrappers.set($jsNumber, new $rt_globals.WeakRef($wrapperAsJs));
                otji_JSWrapper_register$js_body$_4(otji_JSWrapper_stringFinalizationRegistry, $wrapperAsJs, $jsNumber);
                return $wrapper;
            }
            if (jl_String_equals($type, $rt_s(72))) {
                $existingRef = otji_JSWrapper_numberWrappers.get($jsNumber);
                $existing = (typeof $existingRef === 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
                if (!(typeof $existing === 'undefined' ? 1 : 0))
                    return $existing;
                $wrapper = otji_JSWrapper__init_($jsNumber);
                $wrapperAsJs = $wrapper;
                otji_JSWrapper_numberWrappers.set($jsNumber, new $rt_globals.WeakRef($wrapperAsJs));
                otji_JSWrapper_register$js_body$_4(otji_JSWrapper_numberFinalizationRegistry, $wrapperAsJs, $jsNumber);
                return $wrapper;
            }
            if (jl_String_equals($type, $rt_s(73))) {
                $existingRef = otji_JSWrapper_undefinedWrapper;
                $existing = $existingRef === null ? void 0 : $existingRef.deref();
                if (!(typeof $existing === 'undefined' ? 1 : 0))
                    return $existing;
                $wrapper = otji_JSWrapper__init_($jsNumber);
                otji_JSWrapper_undefinedWrapper = new $rt_globals.WeakRef($wrapper);
                return $wrapper;
            }
        }
        return otji_JSWrapper__init_($jsNumber);
    }
    function otji_JSWrapper_unwrap($o) {
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        return $o[$rt_jso_marker] === true ? $o : $o.$js;
    }
    function otji_JSWrapper_jsToJava($o) {
        otji_JSWrapper_$callClinit();
        if ($o === null)
            return null;
        return $o instanceof $rt_objcls() ? $o : otji_JSWrapper_wrap($o);
    }
    function otji_JSWrapper__clinit_() {
        otji_JSWrapper_hashCodes = new $rt_globals.WeakMap();
        otji_JSWrapper_wrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.WeakMap();
        otji_JSWrapper_stringWrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.Map();
        otji_JSWrapper_numberWrappers = !(typeof $rt_globals.WeakRef !== 'undefined' ? 1 : 0) ? null : new $rt_globals.Map();
        otji_JSWrapper_stringFinalizationRegistry = otji_JSWrapper_stringWrappers === null ? null : new $rt_globals.FinalizationRegistry(otji_JS_function(new otji_JSWrapper$_clinit_$lambda$_30_0, "accept"));
        otji_JSWrapper_numberFinalizationRegistry = otji_JSWrapper_numberWrappers === null ? null : new $rt_globals.FinalizationRegistry(otji_JS_function(new otji_JSWrapper$_clinit_$lambda$_30_1, "accept"));
    }
    function otji_JSWrapper_register$js_body$_4(var$1, var$2, var$3) {
        return var$1.register(var$2, var$3);
    }
    function m_FramebufferGL() {
        jl_Object.call(this);
        this.$obj = null;
    }
    function m_RenderbufferGL() {
        jl_Object.call(this);
        this.$obj0 = null;
    }
    var oti_AsyncCallback = $rt_classWithoutFields(0);
    function otpp_AsyncCallbackWrapper() {
        jl_Object.call(this);
        this.$realAsyncCallback = null;
    }
    function otpp_AsyncCallbackWrapper_create($realAsyncCallback) {
        var var$2;
        var$2 = new otpp_AsyncCallbackWrapper;
        var$2.$realAsyncCallback = $realAsyncCallback;
        return var$2;
    }
    function otpp_AsyncCallbackWrapper_complete($this, $result) {
        $this.$realAsyncCallback.$complete($result);
    }
    function otpp_AsyncCallbackWrapper_error($this, $e) {
        $this.$realAsyncCallback.$error($e);
    }
    var otja_XMLHttpRequest = $rt_classWithoutFields();
    function otja_XMLHttpRequest_addEventListener$exported$0(var$0, var$1, var$2) {
        var$0.$addEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otja_XMLHttpRequest_removeEventListener$exported$1(var$0, var$1, var$2) {
        var$0.$removeEventListener($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"));
    }
    function otja_XMLHttpRequest_removeEventListener$exported$2(var$0, var$1, var$2, var$3) {
        var$0.$removeEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    function otja_XMLHttpRequest_dispatchEvent$exported$3(var$0, var$1) {
        return !!var$0.$dispatchEvent(var$1);
    }
    function otja_XMLHttpRequest_addEventListener$exported$4(var$0, var$1, var$2, var$3) {
        var$0.$addEventListener0($rt_str(var$1), otji_JS_functionAsObject(var$2, "handleEvent"), var$3 ? 1 : 0);
    }
    var otja_ReadyStateChangeHandler = $rt_classWithoutFields(0);
    function nPm_LWJGLUtil$3() {
        var a = this; jl_Object.call(a);
        a.$val$request = null;
        a.$val$cb = null;
    }
    function nPm_LWJGLUtil$3_stateChanged$exported$0(var$0) {
        var var$1, var$2, var$3;
        if (var$0.$val$request.readyState == 4) {
            var$1 = new $rt_globals.Uint8Array(var$0.$val$request.response);
            nPm_LWJGLUtil_loadedPackage = $rt_createByteArray(var$1.byteLength);
            var$2 = 0;
            while (true) {
                var$3 = nPm_LWJGLUtil_loadedPackage.data;
                if (var$2 >= var$3.length)
                    break;
                var$3[var$2] = var$1[var$2] << 24 >> 24;
                var$2 = var$2 + 1 | 0;
            }
            otpp_AsyncCallbackWrapper_complete(var$0.$val$cb, $rt_s(22));
        }
    }
    var ju_Map = $rt_classWithoutFields(0);
    function ju_AbstractMap() {
        jl_Object.call(this);
        this.$cachedKeySet = null;
    }
    function ju_HashMap() {
        var a = this; ju_AbstractMap.call(a);
        a.$elementCount = 0;
        a.$elementData = null;
        a.$modCount1 = 0;
        a.$loadFactor = 0.0;
        a.$threshold = 0;
    }
    function ju_HashMap__init_() {
        var var_0 = new ju_HashMap();
        ju_HashMap__init_0(var_0);
        return var_0;
    }
    function ju_HashMap__init_1(var_0) {
        var var_1 = new ju_HashMap();
        ju_HashMap__init_2(var_1, var_0);
        return var_1;
    }
    function ju_HashMap_newElementArray($this, $s) {
        return $rt_createArray(ju_HashMap$HashEntry, $s);
    }
    function ju_HashMap__init_0($this) {
        ju_HashMap__init_2($this, 16);
    }
    function ju_HashMap__init_2($this, $capacity) {
        var var$2;
        if ($capacity < 0) {
            var$2 = new jl_IllegalArgumentException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        $capacity = ju_HashMap_calculateCapacity($capacity);
        $this.$elementCount = 0;
        $this.$elementData = $this.$newElementArray($capacity);
        $this.$loadFactor = 0.75;
        ju_HashMap_computeThreshold($this);
    }
    function ju_HashMap_calculateCapacity($x) {
        var var$2;
        if ($x >= 1073741824)
            return 1073741824;
        if (!$x)
            return 16;
        var$2 = $x - 1 | 0;
        $x = var$2 | var$2 >> 1;
        $x = $x | $x >> 2;
        $x = $x | $x >> 4;
        $x = $x | $x >> 8;
        return ($x | $x >> 16) + 1 | 0;
    }
    function ju_HashMap_computeThreshold($this) {
        $this.$threshold = $this.$elementData.data.length * $this.$loadFactor | 0;
    }
    function ju_HashMap_containsKey($this, $key) {
        return ju_HashMap_entryByKey($this, $key) === null ? 0 : 1;
    }
    function ju_HashMap_get($this, $key) {
        var $m;
        $m = ju_HashMap_entryByKey($this, $key);
        if ($m === null)
            return null;
        return $m.$value0;
    }
    function ju_HashMap_entryByKey($this, $key) {
        var $m, $hash;
        if ($key === null)
            $m = ju_HashMap_findNullKeyEntry($this);
        else {
            $hash = $key.$hashCode0();
            $m = ju_HashMap_findNonNullKeyEntry($this, $key, $hash & ($this.$elementData.data.length - 1 | 0), $hash);
        }
        return $m;
    }
    function ju_HashMap_findNonNullKeyEntry($this, $key, $index, $keyHash) {
        var $m, var$5;
        $m = $this.$elementData.data[$index];
        while ($m !== null) {
            if ($m.$origKeyHash == $keyHash) {
                var$5 = $m.$key0;
                if ($key !== var$5 && !$key.$equals(var$5) ? 0 : 1)
                    break;
            }
            $m = $m.$next2;
        }
        return $m;
    }
    function ju_HashMap_findNullKeyEntry($this) {
        var $m;
        $m = $this.$elementData.data[0];
        while ($m !== null && $m.$key0 !== null) {
            $m = $m.$next2;
        }
        return $m;
    }
    function ju_HashMap_keySet($this) {
        var var$1;
        if ($this.$cachedKeySet === null) {
            var$1 = new ju_HashMap$1;
            var$1.$this$01 = $this;
            $this.$cachedKeySet = var$1;
        }
        return $this.$cachedKeySet;
    }
    function ju_HashMap_put($this, $key, $value) {
        var var$3, var$4, var$5;
        if ($key === null) {
            var$3 = ju_HashMap_findNullKeyEntry($this);
            if (var$3 === null) {
                $this.$modCount1 = $this.$modCount1 + 1 | 0;
                var$3 = ju_HashMap_createHashedEntry($this, null, 0, 0);
                var$4 = $this.$elementCount + 1 | 0;
                $this.$elementCount = var$4;
                if (var$4 > $this.$threshold)
                    ju_HashMap_rehash($this);
            }
        } else {
            var$4 = $key.$hashCode0();
            var$5 = var$4 & ($this.$elementData.data.length - 1 | 0);
            var$3 = ju_HashMap_findNonNullKeyEntry($this, $key, var$5, var$4);
            if (var$3 === null) {
                $this.$modCount1 = $this.$modCount1 + 1 | 0;
                var$3 = ju_HashMap_createHashedEntry($this, $key, var$5, var$4);
                var$4 = $this.$elementCount + 1 | 0;
                $this.$elementCount = var$4;
                if (var$4 > $this.$threshold)
                    ju_HashMap_rehash($this);
            }
        }
        $key = var$3.$value0;
        var$3.$value0 = $value;
        return $key;
    }
    function ju_HashMap_createHashedEntry($this, $key, $index, $hash) {
        var $entry, var$5;
        $entry = ju_HashMap$HashEntry__init_($key, $hash);
        var$5 = $this.$elementData.data;
        $entry.$next2 = var$5[$index];
        var$5[$index] = $entry;
        return $entry;
    }
    function ju_HashMap_rehash0($this, $capacity) {
        var $length, $newData, $i, var$5, $entry, $index, $next;
        $length = ju_HashMap_calculateCapacity(!$capacity ? 1 : $capacity << 1);
        $newData = $this.$newElementArray($length);
        $i = 0;
        $length = $length - 1 | 0;
        while (true) {
            var$5 = $this.$elementData.data;
            if ($i >= var$5.length)
                break;
            $entry = var$5[$i];
            var$5[$i] = null;
            while ($entry !== null) {
                var$5 = $newData.data;
                $index = $entry.$origKeyHash & $length;
                $next = $entry.$next2;
                $entry.$next2 = var$5[$index];
                var$5[$index] = $entry;
                $entry = $next;
            }
            $i = $i + 1 | 0;
        }
        $this.$elementData = $newData;
        ju_HashMap_computeThreshold($this);
    }
    function ju_HashMap_rehash($this) {
        ju_HashMap_rehash0($this, $this.$elementData.data.length);
    }
    var jnc_Charset$Charsets = $rt_classWithoutFields();
    var jnc_Charset$Charsets_value = null;
    function jnc_Charset$Charsets_$callClinit() {
        jnc_Charset$Charsets_$callClinit = $rt_eraseClinit(jnc_Charset$Charsets);
        jnc_Charset$Charsets__clinit_();
    }
    function jnc_Charset$Charsets__clinit_() {
        var $charsets, var$2, var$3, $charset;
        jnc_Charset$Charsets_value = ju_HashMap__init_();
        $charsets = $rt_createArray(jnc_Charset, 6).data;
        jnc_StandardCharsets_$callClinit();
        $charsets[0] = jnc_StandardCharsets_UTF_8;
        $charsets[1] = jnc_StandardCharsets_US_ASCII;
        $charsets[2] = jnc_StandardCharsets_ISO_8859_1;
        $charsets[3] = jnc_StandardCharsets_UTF_16;
        $charsets[4] = jnc_StandardCharsets_UTF_16BE;
        $charsets[5] = jnc_StandardCharsets_UTF_16LE;
        var$2 = $charsets.length;
        var$3 = 0;
        while (var$3 < var$2) {
            $charset = $charsets[var$3];
            ju_HashMap_put(jnc_Charset$Charsets_value, $charset.$canonicalName, $charset);
            var$3 = var$3 + 1 | 0;
        }
    }
    var jl_IllegalArgumentException = $rt_classWithoutFields(jl_RuntimeException);
    function jnc_UnsupportedCharsetException() {
        jl_IllegalArgumentException.call(this);
        this.$charsetName = null;
    }
    var ji_Flushable = $rt_classWithoutFields(0);
    var ji_OutputStream = $rt_classWithoutFields();
    function ji_FilterOutputStream() {
        ji_OutputStream.call(this);
        this.$out0 = null;
    }
    function ji_PrintStream() {
        var a = this; ji_FilterOutputStream.call(a);
        a.$autoFlush = 0;
        a.$errorState = 0;
        a.$sb = null;
        a.$buffer0 = null;
        a.$charset = null;
    }
    function ji_PrintStream__init_(var_0, var_1) {
        var var_2 = new ji_PrintStream();
        ji_PrintStream__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function ji_PrintStream__init_0($this, $out, $autoFlush) {
        $this.$out0 = $out;
        $out = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($out);
        $this.$sb = $out;
        $this.$buffer0 = $rt_createCharArray(32);
        $this.$autoFlush = $autoFlush;
        jnci_UTF8Charset_$callClinit();
        $this.$charset = jnci_UTF8Charset_INSTANCE;
    }
    function ji_PrintStream_write($this, $b, $off, $len) {
        var var$4, $$je;
        var$4 = $this.$out0;
        if (var$4 === null)
            $this.$errorState = 1;
        if (!($this.$errorState ? 0 : 1))
            return;
        a: {
            try {
                var$4.$write($b, $off, $len);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                } else {
                    throw $$e;
                }
            }
            $this.$errorState = 1;
        }
    }
    function ji_PrintStream_print0($this, $s, $begin, $end) {
        var $src, $destBytes, $dest, $encoder, $overflow;
        $end = $end - $begin | 0;
        $src = jn_CharBuffer_wrap($s, $begin, $end);
        $destBytes = $rt_createByteArray(jl_Math_max(16, jl_Math_min($end, 1024)));
        $dest = jn_ByteBuffer_wrap0($destBytes);
        $encoder = jnci_UTF8Charset_newEncoder($this.$charset);
        jnc_CodingErrorAction_$callClinit();
        $encoder = jnc_CharsetEncoder_onUnmappableCharacter(jnc_CharsetEncoder_onMalformedInput($encoder, jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
        while (true) {
            $overflow = jnc_CoderResult_isOverflow(jnc_CharsetEncoder_encode($encoder, $src, $dest, 1));
            ji_PrintStream_write($this, $destBytes, 0, $dest.$position0);
            jn_Buffer_clear($dest);
            if (!$overflow)
                break;
        }
        while (true) {
            $end = $encoder.$status;
            if ($end != 2 && $end != 4) {
                $src = new jl_IllegalStateException;
                jl_Throwable__init_0($src);
                $rt_throw($src);
            }
            $src = jnc_CoderResult_UNDERFLOW;
            if ($src === $src)
                $encoder.$status = 3;
            $overflow = jnc_CoderResult_isOverflow($src);
            ji_PrintStream_write($this, $destBytes, 0, $dest.$position0);
            jn_Buffer_clear($dest);
            if (!$overflow)
                break;
        }
    }
    function ji_PrintStream_print($this, $s) {
        jl_StringBuilder_append1($this.$sb, $s);
        ji_PrintStream_printSB($this);
    }
    function ji_PrintStream_println($this, $s) {
        jl_AbstractStringBuilder_append(jl_StringBuilder_append1($this.$sb, $s), 10);
        ji_PrintStream_printSB($this);
    }
    function ji_PrintStream_printSB($this) {
        var var$1, var$2, $buffer, var$4, var$5, var$6, var$7, var$8, var$9;
        var$1 = $this.$sb;
        var$2 = var$1.$length0;
        $buffer = $this.$buffer0;
        if (var$2 > $buffer.data.length)
            $buffer = $rt_createCharArray(var$2);
        var$4 = 0;
        var$5 = 0;
        if (var$4 > var$2) {
            var$1 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_(var$1, $rt_s(74));
            $rt_throw(var$1);
        }
        while (var$4 < var$2) {
            var$6 = $buffer.data;
            var$7 = var$5 + 1 | 0;
            var$8 = var$1.$buffer1.data;
            var$9 = var$4 + 1 | 0;
            var$6[var$5] = var$8[var$4];
            var$5 = var$7;
            var$4 = var$9;
        }
        ji_PrintStream_print0($this, $buffer, 0, var$2);
        $this.$sb.$length0 = 0;
    }
    function otcic_ConsoleOutputStream() {
        ji_OutputStream.call(this);
        this.$buffer3 = null;
    }
    function otcic_ConsoleOutputStream__init_($this) {
        $this.$buffer3 = $rt_createByteArray(1);
    }
    var otcic_StdoutOutputStream = $rt_classWithoutFields(otcic_ConsoleOutputStream);
    var otcic_StdoutOutputStream_INSTANCE = null;
    function otcic_StdoutOutputStream_write($this, $b, $off, $len) {
        var var$4;
        var$4 = 0;
        while (var$4 < $len) {
            $rt_putStdout($b.data[var$4 + $off | 0] & 255);
            var$4 = var$4 + 1 | 0;
        }
    }
    function otcic_StdoutOutputStream__clinit_() {
        var var$1;
        var$1 = new otcic_StdoutOutputStream;
        otcic_ConsoleOutputStream__init_(var$1);
        otcic_StdoutOutputStream_INSTANCE = var$1;
    }
    var otjb_Performance = $rt_classWithoutFields();
    function jnc_IllegalCharsetNameException() {
        jl_IllegalArgumentException.call(this);
        this.$charsetName0 = null;
    }
    function jnc_IllegalCharsetNameException__init_(var_0) {
        var var_1 = new jnc_IllegalCharsetNameException();
        jnc_IllegalCharsetNameException__init_0(var_1, var_0);
        return var_1;
    }
    function jnc_IllegalCharsetNameException__init_0($this, $charsetName) {
        jl_Throwable__init_0($this);
        $this.$charsetName0 = $charsetName;
    }
    function cjj_ZStream() {
        var a = this; jl_Object.call(a);
        a.$next_in = null;
        a.$next_in_index = 0;
        a.$avail_in = 0;
        a.$total_in = Long_ZERO;
        a.$next_out = null;
        a.$next_out_index = 0;
        a.$avail_out = 0;
        a.$total_out = Long_ZERO;
        a.$msg = null;
        a.$istate = null;
        a.$adler = null;
    }
    function cjj_Inflater() {
        cjj_ZStream.call(this);
        this.$finished = 0;
    }
    var jnci_UTF8Charset = $rt_classWithoutFields(jnc_Charset);
    var jnci_UTF8Charset_INSTANCE = null;
    function jnci_UTF8Charset_$callClinit() {
        jnci_UTF8Charset_$callClinit = $rt_eraseClinit(jnci_UTF8Charset);
        jnci_UTF8Charset__clinit_();
    }
    function jnci_UTF8Charset_newDecoder($this) {
        var var$1;
        var$1 = new jnci_UTF8Decoder;
        jnci_BufferedDecoder__init_(var$1, $this, 0.3333333432674408, 0.5);
        return var$1;
    }
    function jnci_UTF8Charset_newEncoder($this) {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = new jnci_UTF8Encoder;
        var$2 = $rt_createByteArray(1);
        var$3 = var$2.data;
        var$3[0] = 63;
        jnc_CodingErrorAction_$callClinit();
        var$4 = jnc_CodingErrorAction_REPORT;
        var$1.$malformedAction = var$4;
        var$1.$unmappableAction = var$4;
        var$5 = var$3.length;
        if (var$5 && var$5 >= var$1.$maxBytesPerChar) {
            var$1.$charset0 = $this;
            var$1.$replacement = var$2.$clone();
            var$1.$averageBytesPerChar = 2.0;
            var$1.$maxBytesPerChar = 4.0;
            var$1.$inArray = $rt_createCharArray(512);
            var$1.$outArray = $rt_createByteArray(512);
            return var$1;
        }
        var$4 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$4, $rt_s(75));
        $rt_throw(var$4);
    }
    function jnci_UTF8Charset__clinit_() {
        var var$1;
        var$1 = new jnci_UTF8Charset;
        jnci_UTF8Charset_$callClinit();
        jnc_Charset__init_(var$1, $rt_s(53), $rt_createArray(jl_String, 0));
        jnci_UTF8Charset_INSTANCE = var$1;
    }
    function jn_Buffer() {
        var a = this; jl_Object.call(a);
        a.$capacity = 0;
        a.$position0 = 0;
        a.$limit1 = 0;
        a.$mark0 = 0;
    }
    function jn_Buffer__init_($this, $capacity) {
        $this.$mark0 = (-1);
        $this.$capacity = $capacity;
        $this.$limit1 = $capacity;
    }
    function jn_Buffer_position($this) {
        return $this.$position0;
    }
    function jn_Buffer_position0($this, $newPosition) {
        var var$2, var$3, var$4;
        if ($newPosition >= 0 && $newPosition <= $this.$limit1) {
            $this.$position0 = $newPosition;
            if ($newPosition < $this.$mark0)
                $this.$mark0 = 0;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        var$3 = $this.$limit1;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(76)), $newPosition), $rt_s(77)), var$3), 93);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$2);
    }
    function jn_Buffer_limit($this) {
        return $this.$limit1;
    }
    function jn_Buffer_limit0($this, $newLimit) {
        var var$2, var$3, var$4;
        if ($newLimit >= 0 && $newLimit <= $this.$capacity) {
            if ($this.$mark0 > $newLimit)
                $this.$mark0 = (-1);
            $this.$limit1 = $newLimit;
            if ($this.$position0 > $newLimit)
                $this.$position0 = $newLimit;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        var$3 = $this.$capacity;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(78)), $newLimit), $rt_s(77)), var$3), 93);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$2);
    }
    function jn_Buffer_clear($this) {
        $this.$position0 = 0;
        $this.$limit1 = $this.$capacity;
        $this.$mark0 = (-1);
        return $this;
    }
    function jn_Buffer_flip($this) {
        $this.$limit1 = $this.$position0;
        $this.$position0 = 0;
        $this.$mark0 = (-1);
        return $this;
    }
    function jn_Buffer_remaining($this) {
        return $this.$limit1 - $this.$position0 | 0;
    }
    function jn_Buffer_hasRemaining($this) {
        return $this.$position0 >= $this.$limit1 ? 0 : 1;
    }
    function jn_ByteBuffer() {
        var a = this; jn_Buffer.call(a);
        a.$start5 = 0;
        a.$array1 = null;
        a.$order = null;
    }
    function jn_ByteBuffer_wrap($array, $offset, $length) {
        var var$4, var$5, var$6;
        var$4 = $array.data;
        var$5 = new jn_ByteBufferImpl;
        var$6 = var$4.length;
        $length = $offset + $length | 0;
        jn_Buffer__init_(var$5, var$6);
        jn_ByteOrder_$callClinit();
        var$5.$order = jn_ByteOrder_BIG_ENDIAN;
        var$5.$start5 = 0;
        var$5.$array1 = $array;
        var$5.$position0 = $offset;
        var$5.$limit1 = $length;
        var$5.$direct = 0;
        var$5.$readOnly = 0;
        return var$5;
    }
    function jn_ByteBuffer_wrap0($array) {
        return jn_ByteBuffer_wrap($array, 0, $array.data.length);
    }
    function jn_ByteBuffer_put0($this, $src, $offset, $length) {
        var var$4, var$5, var$6, var$7, var$8, var$9, $pos, $i, var$12;
        if (!$length)
            return $this;
        if ($this.$readOnly) {
            var$4 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0(var$4);
            $rt_throw(var$4);
        }
        if (jn_Buffer_remaining($this) < $length) {
            var$4 = new jn_BufferOverflowException;
            jl_Throwable__init_0(var$4);
            $rt_throw(var$4);
        }
        if ($offset >= 0) {
            var$5 = $src.data;
            var$6 = var$5.length;
            if ($offset <= var$6) {
                var$7 = $offset + $length | 0;
                if (var$7 > var$6) {
                    var$8 = new jl_IndexOutOfBoundsException;
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(79)), var$7), $rt_s(80)), var$6);
                    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
                    $rt_throw(var$8);
                }
                if ($length < 0) {
                    var$4 = new jl_IndexOutOfBoundsException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(81)), $length), $rt_s(82));
                    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$4);
                }
                var$7 = $this.$position0;
                $pos = var$7 + $this.$start5 | 0;
                $i = 0;
                while ($i < $length) {
                    $src = $this.$array1.data;
                    var$12 = $pos + 1 | 0;
                    var$6 = $offset + 1 | 0;
                    $src[$pos] = var$5[$offset];
                    $i = $i + 1 | 0;
                    $pos = var$12;
                    $offset = var$6;
                }
                $this.$position0 = var$7 + $length | 0;
                return $this;
            }
        }
        $src = $src.data;
        var$4 = new jl_IndexOutOfBoundsException;
        $length = $src.length;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(83)), $offset), $rt_s(77)), $length), 41);
        jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$4);
    }
    function jn_ByteBuffer_put($this, $src) {
        return jn_ByteBuffer_put0($this, $src, 0, $src.data.length);
    }
    function jn_ByteBuffer_clear($this) {
        jn_Buffer_clear($this);
        return $this;
    }
    function jn_ByteBuffer_limit($this, $newLimit) {
        jn_Buffer_limit0($this, $newLimit);
        return $this;
    }
    function jn_ByteBuffer_position($this, $newPosition) {
        jn_Buffer_position0($this, $newPosition);
        return $this;
    }
    function jn_ByteOrder() {
        jl_Object.call(this);
        this.$name2 = null;
    }
    var jn_ByteOrder_BIG_ENDIAN = null;
    var jn_ByteOrder_LITTLE_ENDIAN = null;
    var jn_ByteOrder_nativeOrder = null;
    function jn_ByteOrder_$callClinit() {
        jn_ByteOrder_$callClinit = $rt_eraseClinit(jn_ByteOrder);
        jn_ByteOrder__clinit_();
    }
    function jn_ByteOrder__init_(var_0) {
        var var_1 = new jn_ByteOrder();
        jn_ByteOrder__init_0(var_1, var_0);
        return var_1;
    }
    function jn_ByteOrder__init_0($this, $name) {
        jn_ByteOrder_$callClinit();
        $this.$name2 = $name;
    }
    function jn_ByteOrder__clinit_() {
        jn_ByteOrder_BIG_ENDIAN = jn_ByteOrder__init_($rt_s(84));
        jn_ByteOrder_LITTLE_ENDIAN = jn_ByteOrder__init_($rt_s(85));
    }
    var jl_Thread$UncaughtExceptionHandler = $rt_classWithoutFields(0);
    var jl_DefaultUncaughtExceptionHandler = $rt_classWithoutFields();
    function jl_DefaultUncaughtExceptionHandler_uncaughtException($this, $t, $e) {
        jl_Throwable_printStackTrace($e);
    }
    var cmmlt_StoneBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_StoneBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_StoneBlock();
        cmmlt_StoneBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_StoneBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, $var1, $var2);
    }
    function cmmlt_StoneBlock_getDrop($this) {
        cmmlt_Block_$callClinit();
        return cmmlt_Block_COBBLESTONE.$id;
    }
    function jl_Enum() {
        var a = this; jl_Object.call(a);
        a.$name3 = null;
        a.$ordinal = 0;
    }
    function cmmlt_Tile$SoundType() {
        var a = this; jl_Enum.call(a);
        a.$name0 = null;
        a.$volume = 0.0;
        a.$pitch0 = 0.0;
    }
    var cmmlt_Tile$SoundType_none = null;
    var cmmlt_Tile$SoundType_grass = null;
    var cmmlt_Tile$SoundType_cloth = null;
    var cmmlt_Tile$SoundType_gravel = null;
    var cmmlt_Tile$SoundType_stone = null;
    var cmmlt_Tile$SoundType_metal = null;
    var cmmlt_Tile$SoundType_wood = null;
    var cmmlt_Tile$SoundType_values = null;
    var cmmlt_Tile$SoundType_$VALUES = null;
    function cmmlt_Tile$SoundType_$callClinit() {
        cmmlt_Tile$SoundType_$callClinit = $rt_eraseClinit(cmmlt_Tile$SoundType);
        cmmlt_Tile$SoundType__clinit_();
    }
    function cmmlt_Tile$SoundType__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6) {
        var var_7 = new cmmlt_Tile$SoundType();
        cmmlt_Tile$SoundType__init_0(var_7, var_0, var_1, var_2, var_3, var_4, var_5, var_6);
        return var_7;
    }
    function cmmlt_Tile$SoundType__init_0($this, var$1, var$2, $var1, $var2, $var3, $var4, $var5) {
        cmmlt_Tile$SoundType_$callClinit();
        $this.$name3 = var$1;
        $this.$ordinal = var$2;
        $this.$name0 = $var3;
        $this.$volume = $var4;
        $this.$pitch0 = $var5;
    }
    function cmmlt_Tile$SoundType_getVolume($this) {
        var var$1;
        var$1 = $this.$volume;
        cmmlt_Block_$callClinit();
        return var$1 / (ju_Random_nextFloat(cmmlt_Block_random) * 0.4000000059604645 + 1.0) * 0.5;
    }
    function cmmlt_Tile$SoundType_getPitch($this) {
        var var$1;
        var$1 = $this.$pitch0;
        cmmlt_Block_$callClinit();
        return var$1 / (ju_Random_nextFloat(cmmlt_Block_random) * 0.20000000298023224 + 0.8999999761581421);
    }
    function cmmlt_Tile$SoundType__clinit_() {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
        cmmlt_Tile$SoundType_none = cmmlt_Tile$SoundType__init_($rt_s(86), 0, $rt_s(86), 0, $rt_s(87), 0.0, 0.0);
        cmmlt_Tile$SoundType_grass = cmmlt_Tile$SoundType__init_($rt_s(88), 1, $rt_s(88), 1, $rt_s(88), 0.6000000238418579, 1.0);
        cmmlt_Tile$SoundType_cloth = cmmlt_Tile$SoundType__init_($rt_s(89), 2, $rt_s(89), 2, $rt_s(88), 0.699999988079071, 1.2000000476837158);
        cmmlt_Tile$SoundType_gravel = cmmlt_Tile$SoundType__init_($rt_s(90), 3, $rt_s(90), 3, $rt_s(90), 1.0, 1.0);
        cmmlt_Tile$SoundType_stone = cmmlt_Tile$SoundType__init_($rt_s(91), 4, $rt_s(91), 4, $rt_s(91), 1.0, 1.0);
        cmmlt_Tile$SoundType_metal = cmmlt_Tile$SoundType__init_($rt_s(92), 5, $rt_s(92), 5, $rt_s(91), 1.0, 2.0);
        var$1 = cmmlt_Tile$SoundType__init_($rt_s(93), 6, $rt_s(93), 6, $rt_s(93), 1.0, 1.0);
        cmmlt_Tile$SoundType_wood = var$1;
        var$2 = $rt_createArray(cmmlt_Tile$SoundType, 7);
        var$3 = var$2.data;
        var$4 = cmmlt_Tile$SoundType_none;
        var$3[0] = var$4;
        var$5 = cmmlt_Tile$SoundType_grass;
        var$3[1] = var$5;
        var$6 = cmmlt_Tile$SoundType_cloth;
        var$3[2] = var$6;
        var$7 = cmmlt_Tile$SoundType_gravel;
        var$3[3] = var$7;
        var$8 = cmmlt_Tile$SoundType_stone;
        var$3[4] = var$8;
        var$9 = cmmlt_Tile$SoundType_metal;
        var$3[5] = var$9;
        var$3[6] = var$1;
        cmmlt_Tile$SoundType_$VALUES = var$2;
        cmmlt_Tile$SoundType_values = $rt_createArrayFromData(cmmlt_Tile$SoundType, [var$4, var$5, var$6, var$7, var$8, var$9, var$1]);
    }
    var cmmlt_GrassBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_GrassBlock__init_(var_0) {
        var var_1 = new cmmlt_GrassBlock();
        cmmlt_GrassBlock__init_0(var_1, var_0);
        return var_1;
    }
    function cmmlt_GrassBlock__init_0($this, $var1) {
        cmmlt_Block__init_0($this, 2);
        $this.$textureId0 = 3;
        cmmlt_Block_setPhysics($this, 1);
    }
    function cmmlt_GrassBlock_getTextureId($this, $texture) {
        return $texture == 1 ? 0 : $texture ? 3 : 2;
    }
    function cmmlt_GrassBlock_update($this, $level, $x, $y, $z, $rand) {
        var $var9, $var6, $var7, $var8, var$10;
        a: {
            if (!ju_Random_nextInt($rand, 4)) {
                if (!cmml_Level_isLit($level, $x, $y, $z)) {
                    cmmlt_Block_$callClinit();
                    cmml_Level_setTile($level, $x, $y, $z, cmmlt_Block_DIRT.$id);
                } else {
                    $var9 = 0;
                    while (true) {
                        if ($var9 >= 4)
                            break a;
                        $var6 = ($x + ju_Random_nextInt($rand, 3) | 0) - 1 | 0;
                        $var7 = ($y + ju_Random_nextInt($rand, 5) | 0) - 3 | 0;
                        $var8 = ($z + ju_Random_nextInt($rand, 3) | 0) - 1 | 0;
                        var$10 = cmml_Level_getTile($level, $var6, $var7, $var8);
                        cmmlt_Block_$callClinit();
                        if (var$10 == cmmlt_Block_DIRT.$id && cmml_Level_isLit($level, $var6, $var7, $var8))
                            cmml_Level_setTile($level, $var6, $var7, $var8, cmmlt_Block_GRASS.$id);
                        $var9 = $var9 + 1 | 0;
                    }
                }
            }
        }
    }
    function cmmlt_GrassBlock_getDrop($this) {
        cmmlt_Block_$callClinit();
        return cmmlt_Block_DIRT.$getDrop();
    }
    var cmmlt_DirtBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_DirtBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_DirtBlock();
        cmmlt_DirtBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_DirtBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, 3, 2);
    }
    var cmmlt_FlowerBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_FlowerBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_FlowerBlock();
        cmmlt_FlowerBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_FlowerBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_0($this, $var1);
        $this.$textureId0 = $var2;
        cmmlt_Block_setPhysics($this, 1);
        cmmlt_Block_setBounds($this, 0.30000001192092896, 0.0, 0.30000001192092896, 0.699999988079071, 0.6000000238418579, 0.699999988079071);
    }
    function cmmlt_FlowerBlock_update($this, $level, $x, $y, $z, $rand) {
        var $var6;
        a: {
            if (!$level.$growTrees) {
                $var6 = cmml_Level_getTile($level, $x, $y - 1 | 0, $z);
                if (cmml_Level_isLit($level, $x, $y, $z)) {
                    cmmlt_Block_$callClinit();
                    if ($var6 == cmmlt_Block_DIRT.$id)
                        break a;
                    if ($var6 == cmmlt_Block_GRASS.$id)
                        break a;
                }
                cmml_Level_setTile($level, $x, $y, $z, 0);
            }
        }
    }
    function cmmlt_FlowerBlock_render($this, $var1, $var2, $var3, $var4) {
        var $var6, $var5, $var9, $var16, $var17, $var7, $var18, $var8, var$13, $var13, var$15, $var10, $var11, $var14;
        $var6 = $this.$textureId0;
        $var5 = ($var6 % 16 | 0) << 4;
        $var6 = ($var6 / 16 | 0) << 4;
        $var9 = $var5;
        $var16 = $var9 / 256.0;
        $var17 = ($var9 + 15.989999771118164) / 256.0;
        $var9 = $var6;
        $var7 = $var9 / 256.0;
        $var18 = ($var9 + 15.989999771118164) / 256.0;
        $var8 = 0;
        var$13 = $var2 + 0.5;
        $var13 = $var3 + 1.0;
        var$15 = $var4 + 0.5;
        while ($var8 < 2) {
            $var2 = $var8 * 3.1415927410125732 / 2.0 + 0.7853981852531433;
            $var9 = cmu_MathHelper_sin($var2) * 0.5;
            $var10 = cmu_MathHelper_cos($var2) * 0.5;
            $var11 = var$13 - $var9;
            $var2 = $var9 + var$13;
            $var14 = var$15 - $var10;
            $var4 = $var10 + var$15;
            cmmr_ShapeRenderer_vertexUV($var1, $var11, $var13, $var14, $var17, $var7);
            cmmr_ShapeRenderer_vertexUV($var1, $var2, $var13, $var4, $var16, $var7);
            cmmr_ShapeRenderer_vertexUV($var1, $var2, $var3, $var4, $var16, $var18);
            cmmr_ShapeRenderer_vertexUV($var1, $var11, $var3, $var14, $var17, $var18);
            cmmr_ShapeRenderer_vertexUV($var1, $var2, $var13, $var4, $var17, $var7);
            cmmr_ShapeRenderer_vertexUV($var1, $var11, $var13, $var14, $var16, $var7);
            cmmr_ShapeRenderer_vertexUV($var1, $var11, $var3, $var14, $var16, $var18);
            cmmr_ShapeRenderer_vertexUV($var1, $var2, $var3, $var4, $var17, $var18);
            $var8 = $var8 + 1 | 0;
        }
    }
    function cmmlt_FlowerBlock_isOpaque($this) {
        return 0;
    }
    function cmmlt_FlowerBlock_isSolid($this) {
        return 0;
    }
    function cmmlt_FlowerBlock_renderPreview($this, $var1) {
        cmmr_ShapeRenderer_normal($var1, 0.0, 1.0, 0.0);
        cmmr_ShapeRenderer_begin($var1);
        cmmlt_FlowerBlock_render($this, $var1, 0.0, 0.4000000059604645, (-0.30000001192092896));
        cmmr_ShapeRenderer_end($var1);
    }
    function cmmlt_FlowerBlock_isCube($this) {
        return 0;
    }
    function cmmlt_FlowerBlock_render0($this, $var1, $var2, $var3, $var4, $var5) {
        var $var6;
        $var6 = cmml_Level_getBrightness($var1, $var2, $var3, $var4);
        cmmr_ShapeRenderer_color($var5, $var6, $var6, $var6);
        cmmlt_FlowerBlock_render($this, $var5, $var2, $var3, $var4);
        return 1;
    }
    function cmmlt_FlowerBlock_renderFullbright($this, $shapeRenderer) {
        cmmr_ShapeRenderer_color($shapeRenderer, 1.0, 1.0, 1.0);
        cmmlt_FlowerBlock_render($this, $shapeRenderer, (-2.0), 0.0, 0.0);
    }
    function cmmlt_FlowerBlock_getCollisionBox($this, $x, $y, $z) {
        return null;
    }
    var cmmlt_SaplingBlock = $rt_classWithoutFields(cmmlt_FlowerBlock);
    function cmmlt_SaplingBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_SaplingBlock();
        cmmlt_SaplingBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_SaplingBlock__init_0($this, $var1, $var2) {
        cmmlt_FlowerBlock__init_0($this, 6, 15);
        cmmlt_Block_setBounds($this, 0.09999999403953552, 0.0, 0.09999999403953552, 0.8999999761581421, 0.800000011920929, 0.8999999761581421);
    }
    function cmmlt_SaplingBlock_update($this, $level, $x, $y, $z, $rand) {
        var $var6;
        a: {
            b: {
                $var6 = cmml_Level_getTile($level, $x, $y - 1 | 0, $z);
                if (cmml_Level_isLit($level, $x, $y, $z)) {
                    cmmlt_Block_$callClinit();
                    if ($var6 == cmmlt_Block_DIRT.$id)
                        break b;
                    if ($var6 == cmmlt_Block_GRASS.$id)
                        break b;
                }
                cmml_Level_setTile($level, $x, $y, $z, 0);
                break a;
            }
            if (!ju_Random_nextInt($rand, 5)) {
                cmml_Level_setTileNoUpdate($level, $x, $y, $z, 0);
                if (!cmml_Level_maybeGrowTree($level, $x, $y, $z))
                    cmml_Level_setTileNoUpdate($level, $x, $y, $z, $this.$id);
            }
        }
    }
    function cmmlt_LiquidBlock() {
        var a = this; cmmlt_Block.call(a);
        a.$type = null;
        a.$stillId = 0;
        a.$movingId = 0;
    }
    function cmmlt_LiquidBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_LiquidBlock();
        cmmlt_LiquidBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_LiquidBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_0($this, $var1);
        $this.$type = $var2;
        $this.$textureId0 = 14;
        if ($var2 === cmmll_LiquidType_LAVA)
            $this.$textureId0 = 30;
        cmmlt_Block_liquid.data[$var1] = 1;
        $this.$movingId = $var1;
        $this.$stillId = $var1 + 1 | 0;
        cmmlt_Block_setBounds($this, 0.009999999776482582, (-0.09000000357627869), 0.009999999776482582, 1.0099999904632568, 0.9099999666213989, 1.0099999904632568);
        cmmlt_Block_setPhysics($this, 1);
        if ($var2 === cmmll_LiquidType_LAVA)
            cmmlt_Block_setTickDelay($this, 16);
    }
    function cmmlt_LiquidBlock_isCube($this) {
        return 0;
    }
    function cmmlt_LiquidBlock_onPlace($this, $level, $x, $y, $z) {
        cmml_Level_addToTickNextTick($level, $x, $y, $z, $this.$movingId);
    }
    function cmmlt_LiquidBlock_update($this, $level, $x, $y, $z, $rand) {
        var $var8, var$7;
        $var8 = 0;
        a: {
            while (true) {
                $y = $y + (-1) | 0;
                if (cmml_Level_getTile($level, $x, $y, $z))
                    break;
                if (!cmmlt_LiquidBlock_canFlow($this, $level, $x, $y, $z))
                    break a;
                var$7 = cmml_Level_setTile($level, $x, $y, $z, $this.$movingId);
                if (var$7)
                    $var8 = 1;
                if (!var$7)
                    break a;
                if ($this.$type === cmmll_LiquidType_LAVA)
                    break a;
            }
        }
        $y = $y + 1 | 0;
        if (!($this.$type !== cmmll_LiquidType_WATER && $var8))
            $var8 = $var8 | cmmlt_LiquidBlock_flow($this, $level, $x - 1 | 0, $y, $z) | cmmlt_LiquidBlock_flow($this, $level, $x + 1 | 0, $y, $z) | cmmlt_LiquidBlock_flow($this, $level, $x, $y, $z - 1 | 0) | cmmlt_LiquidBlock_flow($this, $level, $x, $y, $z + 1 | 0);
        if ($var8)
            cmml_Level_addToTickNextTick($level, $x, $y, $z, $this.$movingId);
        else
            cmml_Level_setTileNoUpdate($level, $x, $y, $z, $this.$stillId);
    }
    function cmmlt_LiquidBlock_canFlow($this, $var1, $var2, $var3, $var4) {
        var $var7, var$6, var$7, var$8, var$9, $var5, $var6;
        a: {
            if ($this.$type === cmmll_LiquidType_WATER) {
                $var7 = $var2 - 2 | 0;
                var$6 = $var2 + 2 | 0;
                var$7 = $var3 - 2 | 0;
                var$8 = $var3 + 2 | 0;
                var$9 = $var4 - 2 | 0;
                $var4 = $var4 + 2 | 0;
                while (true) {
                    if ($var7 > var$6)
                        break a;
                    $var5 = var$7;
                    while ($var5 <= var$8) {
                        $var6 = var$9;
                        while ($var6 <= $var4) {
                            $var3 = cmml_Level_getTile($var1, $var7, $var5, $var6);
                            cmmlt_Block_$callClinit();
                            if ($var3 == cmmlt_Block_SPONGE.$id)
                                return 0;
                            $var6 = $var6 + 1 | 0;
                        }
                        $var5 = $var5 + 1 | 0;
                    }
                    $var7 = $var7 + 1 | 0;
                }
            }
        }
        return 1;
    }
    function cmmlt_LiquidBlock_flow($this, $var1, $var2, $var3, $var4) {
        if (!cmml_Level_getTile($var1, $var2, $var3, $var4)) {
            if (!cmmlt_LiquidBlock_canFlow($this, $var1, $var2, $var3, $var4))
                return 0;
            if (cmml_Level_setTile($var1, $var2, $var3, $var4, $this.$movingId))
                cmml_Level_addToTickNextTick($var1, $var2, $var3, $var4, $this.$movingId);
        }
        return 0;
    }
    function cmmlt_LiquidBlock_getBrightness($this, $level, $x, $y, $z) {
        return $this.$type !== cmmll_LiquidType_LAVA ? cmml_Level_getBrightness($level, $x, $y, $z) : 100.0;
    }
    function cmmlt_LiquidBlock_canRenderSide($this, $level, $x, $y, $z, $side) {
        var var$6;
        a: {
            if ($x >= 0 && $y >= 0 && $z >= 0 && $x < $level.$width0 && $z < $level.$height0) {
                var$6 = cmml_Level_getTile($level, $x, $y, $z);
                if (var$6 != $this.$movingId && var$6 != $this.$stillId) {
                    b: {
                        if ($side == 1) {
                            if (!cmml_Level_getTile($level, $x - 1 | 0, $y, $z))
                                break b;
                            if (!cmml_Level_getTile($level, $x + 1 | 0, $y, $z))
                                break b;
                            if (!cmml_Level_getTile($level, $x, $y, $z - 1 | 0))
                                break b;
                            if (!cmml_Level_getTile($level, $x, $y, $z + 1 | 0))
                                break b;
                        }
                        $x = cmmlt_Block_canRenderSide($this, $level, $x, $y, $z, $side);
                        break a;
                    }
                    $x = 1;
                } else
                    $x = 0;
            } else
                $x = 0;
        }
        return $x;
    }
    function cmmlt_LiquidBlock_renderInside($this, $shapeRenderer, $x, $y, $z, $side) {
        var var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16;
        cmmlt_Block_renderInside($this, $shapeRenderer, $x, $y, $z, $side);
        var$6 = $this.$textureId0;
        var$7 = (var$6 % 16 | 0) / 16.0;
        var$8 = var$7 + 0.062437500804662704;
        var$9 = (var$6 / 16 | 0) / 16.0;
        var$10 = var$9 + 0.062437500804662704;
        var$11 = $x;
        var$12 = var$11 + $this.$x10;
        var$13 = var$11 + $this.$x2;
        var$11 = $y;
        var$14 = var$11 + $this.$y10;
        var$11 = var$11 + $this.$y2;
        var$15 = $z;
        var$16 = var$15 + $this.$z10;
        var$15 = var$15 + $this.$z2;
        if (!$side) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$14, var$15, var$8, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$14, var$16, var$8, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$14, var$16, var$7, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$14, var$15, var$7, var$10);
        }
        if ($side == 1) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$11, var$15, var$7, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$11, var$16, var$7, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$11, var$16, var$8, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$11, var$15, var$8, var$10);
        }
        if ($side == 2) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$14, var$16, var$8, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$14, var$16, var$7, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$11, var$16, var$7, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$11, var$16, var$8, var$9);
        }
        if ($side == 3) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$11, var$15, var$8, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$14, var$15, var$8, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$14, var$15, var$7, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$11, var$15, var$7, var$9);
        }
        if ($side == 4) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$14, var$15, var$8, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$14, var$16, var$7, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$11, var$16, var$7, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$12, var$11, var$15, var$8, var$9);
        }
        if ($side == 5) {
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$11, var$15, var$7, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$11, var$16, var$8, var$9);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$14, var$16, var$8, var$10);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, var$13, var$14, var$15, var$7, var$10);
        }
    }
    function cmmlt_LiquidBlock_isOpaque($this) {
        return 1;
    }
    function cmmlt_LiquidBlock_isSolid($this) {
        return 0;
    }
    function cmmlt_LiquidBlock_getLiquidType($this) {
        return $this.$type;
    }
    function cmmlt_LiquidBlock_onNeighborChange($this, $var1, $var2, $var3, $var4, $var5) {
        var $var6, var$7, var$8;
        a: {
            if ($var5) {
                cmmlt_Block_$callClinit();
                $var6 = cmmlt_Block_blocks.data[$var5].$getLiquidType();
                var$7 = $this.$type;
                var$8 = cmmll_LiquidType_WATER;
                if (var$7 === var$8 && $var6 === cmmll_LiquidType_LAVA)
                    break a;
                if ($var6 === var$8 && var$7 === cmmll_LiquidType_LAVA)
                    break a;
            }
            cmml_Level_addToTickNextTick($var1, $var2, $var3, $var4, $var5);
            return;
        }
        cmml_Level_setTile($var1, $var2, $var3, $var4, cmmlt_Block_STONE.$id);
    }
    function cmmlt_LiquidBlock_getTickDelay($this) {
        return $this.$type !== cmmll_LiquidType_LAVA ? 0 : 5;
    }
    function cmmlt_LiquidBlock_dropItems($this, $var1, $var2, $var3, $var4, $var5) {}
    function cmmlt_LiquidBlock_onBreak($this, $var1, $var2, $var3, $var4) {}
    function cmmlt_LiquidBlock_getDropCount($this) {
        return 0;
    }
    function cmmlt_LiquidBlock_getRenderPass($this) {
        return $this.$type !== cmmll_LiquidType_WATER ? 0 : 1;
    }
    function cmmlt_LiquidBlock_getCollisionBox($this, $x, $y, $z) {
        return null;
    }
    function cmmll_LiquidType() {
        jl_Object.call(this);
        this.$values = null;
    }
    var cmmll_LiquidType_NOT_LIQUID = null;
    var cmmll_LiquidType_WATER = null;
    var cmmll_LiquidType_LAVA = null;
    function cmmll_LiquidType__init_(var_0) {
        var var_1 = new cmmll_LiquidType();
        cmmll_LiquidType__init_0(var_1, var_0);
        return var_1;
    }
    function cmmll_LiquidType__init_0($this, $type) {
        var var$2, var$3;
        var$2 = $rt_createArray(cmmll_LiquidType, 4);
        var$3 = var$2.data;
        $this.$values = var$2;
        var$3[$type] = $this;
    }
    function cmmll_LiquidType__clinit_() {
        cmmll_LiquidType_NOT_LIQUID = cmmll_LiquidType__init_(0);
        cmmll_LiquidType_WATER = cmmll_LiquidType__init_(1);
        cmmll_LiquidType_LAVA = cmmll_LiquidType__init_(2);
    }
    var cmmlt_StillLiquidBlock = $rt_classWithoutFields(cmmlt_LiquidBlock);
    function cmmlt_StillLiquidBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_StillLiquidBlock();
        cmmlt_StillLiquidBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_StillLiquidBlock__init_0($this, $var1, $var2) {
        cmmlt_LiquidBlock__init_0($this, $var1, $var2);
        $this.$movingId = $var1 - 1 | 0;
        $this.$stillId = $var1;
        cmmlt_Block_setPhysics($this, 0);
    }
    function cmmlt_StillLiquidBlock_update($this, $level, $x, $y, $z, $rand) {}
    function cmmlt_StillLiquidBlock_onNeighborChange($this, $var1, $var2, $var3, $var4, $var5) {
        var $var6, $var7, var$8, var$9;
        $var6 = 0;
        if (!cmml_Level_getTile($var1, $var2 - 1 | 0, $var3, $var4))
            $var6 = 1;
        if (!cmml_Level_getTile($var1, $var2 + 1 | 0, $var3, $var4))
            $var6 = 1;
        if (!cmml_Level_getTile($var1, $var2, $var3, $var4 - 1 | 0))
            $var6 = 1;
        if (!cmml_Level_getTile($var1, $var2, $var3, $var4 + 1 | 0))
            $var6 = 1;
        if (!cmml_Level_getTile($var1, $var2, $var3 - 1 | 0, $var4))
            $var6 = 1;
        a: {
            if ($var5) {
                cmmlt_Block_$callClinit();
                $var7 = cmmlt_Block_blocks.data[$var5].$getLiquidType();
                var$8 = $this.$type;
                var$9 = cmmll_LiquidType_WATER;
                if (!(var$8 === var$9 && $var7 === cmmll_LiquidType_LAVA)) {
                    if ($var7 !== var$9)
                        break a;
                    if (var$8 !== cmmll_LiquidType_LAVA)
                        break a;
                }
                cmml_Level_setTile($var1, $var2, $var3, $var4, cmmlt_Block_STONE.$id);
                return;
            }
        }
        if ($var6) {
            cmml_Level_setTileNoUpdate($var1, $var2, $var3, $var4, $this.$movingId);
            cmml_Level_addToTickNextTick($var1, $var2, $var3, $var4, $this.$movingId);
        }
    }
    var cmmlt_SandBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_SandBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_SandBlock();
        cmmlt_SandBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_SandBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, $var1, $var2);
    }
    function cmmlt_SandBlock_onPlace($this, $level, $x, $y, $z) {
        cmmlt_SandBlock_fall($this, $level, $x, $y, $z);
    }
    function cmmlt_SandBlock_onNeighborChange($this, $var1, $var2, $var3, $var4, $var5) {
        cmmlt_SandBlock_fall($this, $var1, $var2, $var3, $var4);
    }
    function cmmlt_SandBlock_fall($this, $var1, $var2, $var3, $var4) {
        var var$5, $var8, var$7, var$8;
        var$5 = $var3;
        while (true) {
            $var8 = cmml_Level_getTile($var1, $var2, var$5 - 1 | 0, $var4);
            if ($var8) {
                cmmlt_Block_$callClinit();
                var$7 = cmmlt_Block_blocks.data[$var8].$getLiquidType();
                if (var$7 !== cmmll_LiquidType_WATER && var$7 !== cmmll_LiquidType_LAVA)
                    break;
            }
            if (var$5 <= 0)
                break;
            var$5 = var$5 + (-1) | 0;
        }
        if (var$5 != $var3) {
            $var8 = cmml_Level_getTile($var1, $var2, var$5, $var4);
            if ($var8 > 0) {
                cmmlt_Block_$callClinit();
                if (cmmlt_Block_blocks.data[$var8].$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID)
                    cmml_Level_setTileNoUpdate($var1, $var2, var$5, $var4, 0);
            }
            if (!$var1.$networkMode) {
                $var8 = cmml_Level_getTile($var1, $var2, $var3, $var4);
                var$8 = cmml_Level_getTile($var1, $var2, var$5, $var4);
                cmml_Level_setTileNoNeighborChange($var1, $var2, $var3, $var4, var$8);
                cmml_Level_setTileNoNeighborChange($var1, $var2, var$5, $var4, $var8);
                cmml_Level_updateNeighborsAt($var1, $var2, $var3, $var4, var$8);
                cmml_Level_updateNeighborsAt($var1, $var2, var$5, $var4, $var8);
            }
        }
    }
    var cmmlt_OreBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_OreBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_OreBlock();
        cmmlt_OreBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_OreBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, $var1, $var2);
    }
    function cmmlt_OreBlock_getDrop($this) {
        cmmlt_Block_$callClinit();
        return $this === cmmlt_Block_COAL_ORE ? cmmlt_Block_SLAB.$id : $this === cmmlt_Block_GOLD_ORE ? cmmlt_Block_GOLD_BLOCK.$id : $this !== cmmlt_Block_IRON_ORE ? $this.$id : cmmlt_Block_IRON_BLOCK.$id;
    }
    function cmmlt_OreBlock_getDropCount($this) {
        cmmlt_Block_$callClinit();
        return ju_Random_nextInt(cmmlt_Block_random, 3) + 1 | 0;
    }
    var cmmlt_WoodBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_WoodBlock__init_(var_0) {
        var var_1 = new cmmlt_WoodBlock();
        cmmlt_WoodBlock__init_0(var_1, var_0);
        return var_1;
    }
    function cmmlt_WoodBlock__init_0($this, $var1) {
        cmmlt_Block__init_0($this, 17);
        $this.$textureId0 = 20;
    }
    function cmmlt_WoodBlock_getDropCount($this) {
        cmmlt_Block_$callClinit();
        return ju_Random_nextInt(cmmlt_Block_random, 3) + 3 | 0;
    }
    function cmmlt_WoodBlock_getDrop($this) {
        cmmlt_Block_$callClinit();
        return cmmlt_Block_WOOD.$id;
    }
    function cmmlt_WoodBlock_getTextureId($this, $texture) {
        return $texture == 1 ? 21 : $texture ? 20 : 21;
    }
    function cmmlt_LeavesBaseBlock() {
        cmmlt_Block.call(this);
        this.$showNeighborSides = 0;
    }
    function cmmlt_LeavesBaseBlock_isSolid($this) {
        return 0;
    }
    function cmmlt_LeavesBaseBlock_canRenderSide($this, $level, $x, $y, $z, $side) {
        var $var6;
        $var6 = cmml_Level_getTile($level, $x, $y, $z);
        return !$this.$showNeighborSides && $var6 == $this.$id ? 0 : cmmlt_Block_canRenderSide($this, $level, $x, $y, $z, $side);
    }
    function cmmlt_LeavesBaseBlock_isOpaque($this) {
        return 0;
    }
    var cmmlt_LeavesBlock = $rt_classWithoutFields(cmmlt_LeavesBaseBlock);
    function cmmlt_LeavesBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_LeavesBlock();
        cmmlt_LeavesBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_LeavesBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, 18, 22);
        $this.$showNeighborSides = 1;
    }
    function cmmlt_LeavesBlock_getDropCount($this) {
        cmmlt_Block_$callClinit();
        return ju_Random_nextInt(cmmlt_Block_random, 10) ? 0 : 1;
    }
    function cmmlt_LeavesBlock_getDrop($this) {
        cmmlt_Block_$callClinit();
        return cmmlt_Block_SAPLING.$id;
    }
    var cmmlt_SpongeBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_SpongeBlock__init_(var_0) {
        var var_1 = new cmmlt_SpongeBlock();
        cmmlt_SpongeBlock__init_0(var_1, var_0);
        return var_1;
    }
    function cmmlt_SpongeBlock__init_0($this, $var1) {
        cmmlt_Block__init_0($this, 19);
        $this.$textureId0 = 48;
    }
    function cmmlt_SpongeBlock_onAdded($this, $level, $x, $y, $z) {
        var $var7, var$6, var$7, var$8, var$9, $var5, $var6;
        $var7 = $x - 2 | 0;
        var$6 = $x + 2 | 0;
        var$7 = $y - 2 | 0;
        var$8 = $y + 2 | 0;
        var$9 = $z - 2 | 0;
        $y = $z + 2 | 0;
        while ($var7 <= var$6) {
            $var5 = var$7;
            while ($var5 <= var$8) {
                $var6 = var$9;
                while ($var6 <= $y) {
                    a: {
                        $x = cmml_Level_getTile($level, $var7, $var5, $var6);
                        if ($x > 0) {
                            cmmlt_Block_$callClinit();
                            if (cmmlt_Block_blocks.data[$x].$getLiquidType() === cmmll_LiquidType_WATER) {
                                $x = 1;
                                break a;
                            }
                        }
                        $x = 0;
                    }
                    if ($x)
                        cmml_Level_setTileNoNeighborChange($level, $var7, $var5, $var6, 0);
                    $var6 = $var6 + 1 | 0;
                }
                $var5 = $var5 + 1 | 0;
            }
            $var7 = $var7 + 1 | 0;
        }
    }
    function cmmlt_SpongeBlock_onRemoved($this, $var1, $var2, $var3, $var4) {
        var $var7, var$6, var$7, var$8, var$9, $var5, $var6;
        $var7 = $var2 - 2 | 0;
        var$6 = $var2 + 2 | 0;
        var$7 = $var3 - 2 | 0;
        var$8 = $var3 + 2 | 0;
        var$9 = $var4 - 2 | 0;
        $var2 = $var4 + 2 | 0;
        while ($var7 <= var$6) {
            $var5 = var$7;
            while ($var5 <= var$8) {
                $var6 = var$9;
                while ($var6 <= $var2) {
                    cmml_Level_updateNeighborsAt($var1, $var7, $var5, $var6, cmml_Level_getTile($var1, $var7, $var5, $var6));
                    $var6 = $var6 + 1 | 0;
                }
                $var5 = $var5 + 1 | 0;
            }
            $var7 = $var7 + 1 | 0;
        }
    }
    function cmmlt_GlassBlock() {
        cmmlt_Block.call(this);
        this.$showNeighborSides0 = 0;
    }
    function cmmlt_GlassBlock__init_(var_0, var_1, var_2) {
        var var_3 = new cmmlt_GlassBlock();
        cmmlt_GlassBlock__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function cmmlt_GlassBlock__init_0($this, $var1, $var2, $var3) {
        cmmlt_Block__init_2($this, 20, 49);
        $this.$showNeighborSides0 = 0;
    }
    function cmmlt_GlassBlock_isSolid($this) {
        return 0;
    }
    function cmmlt_GlassBlock_canRenderSide($this, $level, $x, $y, $z, $side) {
        var $var6;
        $var6 = cmml_Level_getTile($level, $x, $y, $z);
        return !$this.$showNeighborSides0 && $var6 == $this.$id ? 0 : cmmlt_Block_canRenderSide($this, $level, $x, $y, $z, $side);
    }
    function cmmlt_GlassBlock_isOpaque($this) {
        return 0;
    }
    var cmmlt_MushroomBlock = $rt_classWithoutFields(cmmlt_FlowerBlock);
    function cmmlt_MushroomBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_MushroomBlock();
        cmmlt_MushroomBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_MushroomBlock__init_0($this, $var1, $var2) {
        cmmlt_FlowerBlock__init_0($this, $var1, $var2);
        cmmlt_Block_setBounds($this, 0.30000001192092896, 0.0, 0.30000001192092896, 0.699999988079071, 0.4000000059604645, 0.699999988079071);
    }
    function cmmlt_MushroomBlock_update($this, $level, $x, $y, $z, $rand) {
        var $var6;
        a: {
            $var6 = cmml_Level_getTile($level, $x, $y - 1 | 0, $z);
            if (!cmml_Level_isLit($level, $x, $y, $z)) {
                cmmlt_Block_$callClinit();
                if ($var6 == cmmlt_Block_STONE.$id)
                    break a;
                if ($var6 == cmmlt_Block_GRAVEL.$id)
                    break a;
                if ($var6 == cmmlt_Block_COBBLESTONE.$id)
                    break a;
            }
            cmml_Level_setTile($level, $x, $y, $z, 0);
        }
    }
    var cmmlt_MetalBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_MetalBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_MetalBlock();
        cmmlt_MetalBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_MetalBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_0($this, $var1);
        $this.$textureId0 = $var2;
    }
    function cmmlt_MetalBlock_getTextureId($this, $texture) {
        return $texture == 1 ? $this.$textureId0 - 16 | 0 : $texture ? $this.$textureId0 : $this.$textureId0 + 16 | 0;
    }
    function cmmlt_SlabBlock() {
        cmmlt_Block.call(this);
        this.$doubleSlab = 0;
    }
    function cmmlt_SlabBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_SlabBlock();
        cmmlt_SlabBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_SlabBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, $var1, 6);
        $this.$doubleSlab = $var2;
        if (!$var2)
            cmmlt_Block_setBounds($this, 0.0, 0.0, 0.0, 1.0, 0.5, 1.0);
    }
    function cmmlt_SlabBlock_getTextureId($this, $texture) {
        return $texture > 1 ? 5 : 6;
    }
    function cmmlt_SlabBlock_isSolid($this) {
        return $this.$doubleSlab;
    }
    function cmmlt_SlabBlock_onNeighborChange($this, $var1, $var2, $var3, $var4, $var5) {
        cmmlt_Block_$callClinit();
    }
    function cmmlt_SlabBlock_onAdded($this, $level, $x, $y, $z) {
        var var$5;
        cmmlt_Block_$callClinit();
        var$5 = $y - 1 | 0;
        if (cmml_Level_getTile($level, $x, var$5, $z) == cmmlt_Block_SLAB.$id) {
            cmml_Level_setTile($level, $x, $y, $z, 0);
            cmml_Level_setTile($level, $x, var$5, $z, cmmlt_Block_DOUBLE_SLAB.$id);
        }
    }
    function cmmlt_SlabBlock_getDrop($this) {
        cmmlt_Block_$callClinit();
        return cmmlt_Block_SLAB.$id;
    }
    function cmmlt_SlabBlock_isCube($this) {
        return $this.$doubleSlab;
    }
    function cmmlt_SlabBlock_canRenderSide($this, $level, $x, $y, $z, $side) {
        cmmlt_Block_$callClinit();
        if ($this !== cmmlt_Block_SLAB)
            cmmlt_Block_canRenderSide($this, $level, $x, $y, $z, $side);
        return $side == 1 ? 1 : !cmmlt_Block_canRenderSide($this, $level, $x, $y, $z, $side) ? 0 : !$side ? 1 : cmml_Level_getTile($level, $x, $y, $z) == $this.$id ? 0 : 1;
    }
    var cmmlt_TNTBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_TNTBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_TNTBlock();
        cmmlt_TNTBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_TNTBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, 46, 8);
    }
    function cmmlt_TNTBlock_getTextureId($this, $texture) {
        return !$texture ? $this.$textureId0 + 2 | 0 : $texture != 1 ? $this.$textureId0 : $this.$textureId0 + 1 | 0;
    }
    function cmmlt_TNTBlock_getDropCount($this) {
        return 0;
    }
    function cmmlt_TNTBlock_explode($this, $var1, $var2, $var3, $var4) {
        var var$5;
        if (!$var1.$creativeMode) {
            var$5 = cmmi_PrimedTnt__init_($var1, $var2 + 0.5, $var3 + 0.5, $var4 + 0.5);
            cmmlt_Block_$callClinit();
            var$5.$life = ju_Random_nextInt(cmmlt_Block_random, var$5.$life / 4 | 0) + (var$5.$life / 8 | 0) | 0;
            cmml_Level_addEntity($var1, var$5);
        }
    }
    function cmmlt_TNTBlock_spawnBreakParticles($this, $level, $x, $y, $z, $particleManager) {
        if ($level.$creativeMode)
            cmmlt_Block_spawnBreakParticles($this, $level, $x, $y, $z, $particleManager);
        else
            cmml_Level_addEntity($level, cmmi_PrimedTnt__init_($level, $x + 0.5, $y + 0.5, $z + 0.5));
    }
    var cmmlt_BookshelfBlock = $rt_classWithoutFields(cmmlt_Block);
    function cmmlt_BookshelfBlock__init_(var_0, var_1) {
        var var_2 = new cmmlt_BookshelfBlock();
        cmmlt_BookshelfBlock__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlt_BookshelfBlock__init_0($this, $var1, $var2) {
        cmmlt_Block__init_2($this, 47, 35);
    }
    function cmmlt_BookshelfBlock_getTextureId($this, $texture) {
        return $texture > 1 ? $this.$textureId0 : 4;
    }
    function cmmlt_BookshelfBlock_getDropCount($this) {
        return 0;
    }
    var jl_InterruptedException = $rt_classWithoutFields(jl_Exception);
    var otjc_JSWeakMap = $rt_classWithoutFields();
    var otjc_JSWeakRef = $rt_classWithoutFields();
    var otjc_JSMap = $rt_classWithoutFields();
    var otjc_JSFinalizationRegistryConsumer = $rt_classWithoutFields(0);
    var otji_JSWrapper$_clinit_$lambda$_30_0 = $rt_classWithoutFields();
    function otji_JSWrapper$_clinit_$lambda$_30_0_accept$exported$0(var$0, var$1) {
        var var$2;
        var$1 = otji_JSWrapper_jsToJava(var$1);
        var$2 = otji_JSWrapper_stringWrappers;
        var$1 = otji_JSWrapper_unwrap(var$1);
        var$2.delete(var$1);
    }
    var otjc_JSFinalizationRegistry = $rt_classWithoutFields();
    var otji_JSWrapper$_clinit_$lambda$_30_1 = $rt_classWithoutFields();
    function otji_JSWrapper$_clinit_$lambda$_30_1_accept$exported$0(var$0, var$1) {
        var var$2;
        var$1 = otji_JSWrapper_jsToJava(var$1);
        var$2 = otji_JSWrapper_numberWrappers;
        var$1 = otji_JSWrapper_unwrap(var$1);
        var$2.delete(var$1);
    }
    var jnc_StandardCharsets = $rt_classWithoutFields();
    var jnc_StandardCharsets_UTF_8 = null;
    var jnc_StandardCharsets_US_ASCII = null;
    var jnc_StandardCharsets_ISO_8859_1 = null;
    var jnc_StandardCharsets_UTF_16 = null;
    var jnc_StandardCharsets_UTF_16BE = null;
    var jnc_StandardCharsets_UTF_16LE = null;
    function jnc_StandardCharsets_$callClinit() {
        jnc_StandardCharsets_$callClinit = $rt_eraseClinit(jnc_StandardCharsets);
        jnc_StandardCharsets__clinit_();
    }
    function jnc_StandardCharsets__clinit_() {
        var var$1;
        jnci_UTF8Charset_$callClinit();
        jnc_StandardCharsets_UTF_8 = jnci_UTF8Charset_INSTANCE;
        var$1 = new jnci_AsciiCharset;
        jnc_Charset__init_(var$1, $rt_s(94), $rt_createArray(jl_String, 0));
        jnc_StandardCharsets_US_ASCII = var$1;
        var$1 = new jnci_Iso8859Charset;
        jnc_Charset__init_(var$1, $rt_s(95), $rt_createArray(jl_String, 0));
        jnc_StandardCharsets_ISO_8859_1 = var$1;
        jnc_StandardCharsets_UTF_16 = jnci_UTF16Charset__init_($rt_s(96), 1, 0);
        jnc_StandardCharsets_UTF_16BE = jnci_UTF16Charset__init_($rt_s(97), 0, 0);
        jnc_StandardCharsets_UTF_16LE = jnci_UTF16Charset__init_($rt_s(98), 0, 1);
    }
    var otjt_ArrayBuffer = $rt_classWithoutFields();
    var otjt_ArrayBufferView = $rt_classWithoutFields();
    var otjt_Int16Array = $rt_classWithoutFields(otjt_ArrayBufferView);
    var otjt_Int8Array = $rt_classWithoutFields(otjt_ArrayBufferView);
    function jn_ByteBufferImpl() {
        var a = this; jn_ByteBuffer.call(a);
        a.$direct = 0;
        a.$readOnly = 0;
    }
    function jn_ByteBufferImpl_get($this) {
        var var$1, var$2, var$3, var$4;
        var$1 = $this.$position0;
        if (var$1 >= $this.$limit1) {
            var$2 = new jn_BufferUnderflowException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        var$3 = $this.$array1.data;
        var$4 = $this.$start5;
        $this.$position0 = var$1 + 1 | 0;
        return var$3[var$4 + var$1 | 0];
    }
    var jl_Readable = $rt_classWithoutFields(0);
    var jn_CharBuffer = $rt_classWithoutFields(jn_Buffer);
    function jn_CharBuffer_allocate($capacity) {
        var var$2, var$3;
        if ($capacity >= 0)
            return jn_CharBufferOverArray__init_(0, $capacity, $rt_createCharArray($capacity), 0, $capacity, 0);
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(99)), $capacity);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    function jn_CharBuffer_wrap($array, $offset, $length) {
        return jn_CharBufferOverArray__init_(0, $array.data.length, $array, $offset, $offset + $length | 0, 0);
    }
    function jn_CharBuffer_wrap0($array) {
        return jn_CharBuffer_wrap($array, 0, $array.data.length);
    }
    function jn_CharBuffer_get0($this, $dst, $offset, $length) {
        var var$4, var$5, $pos, var$7, var$8, $i, var$10, var$11;
        if ($offset >= 0) {
            var$4 = $dst.data;
            var$5 = var$4.length;
            if ($offset <= var$5) {
                $pos = $offset + $length | 0;
                if ($pos > var$5) {
                    var$7 = new jl_IndexOutOfBoundsException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(100)), $pos), $rt_s(80)), var$5);
                    jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$7);
                }
                if (jn_Buffer_remaining($this) < $length) {
                    var$8 = new jn_BufferUnderflowException;
                    jl_Throwable__init_0(var$8);
                    $rt_throw(var$8);
                }
                if ($length < 0) {
                    var$8 = new jl_IndexOutOfBoundsException;
                    var$7 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$7);
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$7, $rt_s(81)), $length), $rt_s(82));
                    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$7));
                    $rt_throw(var$8);
                }
                $pos = $this.$position0;
                $i = 0;
                while ($i < $length) {
                    var$10 = $offset + 1 | 0;
                    var$5 = $pos + 1 | 0;
                    var$4[$offset] = jn_CharBufferOverArray_getChar($this, $pos);
                    $i = $i + 1 | 0;
                    $offset = var$10;
                    $pos = var$5;
                }
                $this.$position0 = $this.$position0 + $length | 0;
                return $this;
            }
        }
        $dst = $dst.data;
        var$8 = new jl_IndexOutOfBoundsException;
        $length = $dst.length;
        var$11 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$11);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$11, $rt_s(83)), $offset), $rt_s(77)), $length), 41);
        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$11));
        $rt_throw(var$8);
    }
    function jn_CharBuffer_get($this, $dst) {
        return jn_CharBuffer_get0($this, $dst, 0, $dst.data.length);
    }
    function jn_CharBuffer_put($this, $src) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8;
        var$2 = 0;
        var$3 = jl_String_length($src);
        if ($this.$readOnly0) {
            $src = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0($src);
            $rt_throw($src);
        }
        var$4 = var$3 - var$2 | 0;
        if (jn_Buffer_remaining($this) < var$4) {
            $src = new jn_BufferOverflowException;
            jl_Throwable__init_0($src);
            $rt_throw($src);
        }
        if (var$2 > jl_String_length($src)) {
            var$5 = new jl_IndexOutOfBoundsException;
            var$3 = jl_String_length($src);
            $src = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($src);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($src, $rt_s(101)), var$2), $rt_s(77)), var$3), 41);
            jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString($src));
            $rt_throw(var$5);
        }
        if (var$3 > jl_String_length($src)) {
            var$5 = new jl_IndexOutOfBoundsException;
            var$2 = jl_String_length($src);
            $src = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($src);
            jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($src, $rt_s(102)), var$3), $rt_s(103)), var$2);
            jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString($src));
            $rt_throw(var$5);
        }
        if (var$2 > var$3) {
            $src = new jl_IndexOutOfBoundsException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(101)), var$2), $rt_s(104)), var$3);
            jl_Throwable__init_($src, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw($src);
        }
        var$6 = $this.$position0;
        while (var$2 < var$3) {
            var$7 = var$6 + 1 | 0;
            var$8 = var$2 + 1 | 0;
            jn_CharBufferOverArray_putChar($this, var$6, jl_String_charAt($src, var$2));
            var$6 = var$7;
            var$2 = var$8;
        }
        $this.$position0 = $this.$position0 + var$4 | 0;
        return $this;
    }
    function jn_CharBuffer_array($this) {
        return $this.$array2;
    }
    var cjj_GZIPException = $rt_classWithoutFields(ji_IOException);
    var otp_PlatformRunnable = $rt_classWithoutFields(0);
    var otr_EventQueue$Event = $rt_classWithoutFields(0);
    var jl_ThreadInterruptHandler = $rt_classWithoutFields(0);
    function jl_Thread$SleepHandler() {
        var a = this; jl_Object.call(a);
        a.$thread = null;
        a.$callback = null;
        a.$isInterrupted = 0;
        a.$scheduleId = 0;
    }
    function jl_Thread$SleepHandler_run($this) {
        var var$1;
        if (!$this.$isInterrupted) {
            var$1 = $this.$thread;
            var$1.$interruptHandler = null;
            jl_Thread_setCurrentThread(var$1);
            otpp_AsyncCallbackWrapper_complete($this.$callback, null);
        }
    }
    var jnci_AsciiCharset = $rt_classWithoutFields(jnc_Charset);
    function jnci_AsciiCharset_newDecoder($this) {
        var var$1;
        var$1 = new jnci_AsciiDecoder;
        jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
        return var$1;
    }
    var jnci_Iso8859Charset = $rt_classWithoutFields(jnc_Charset);
    function jnci_Iso8859Charset_newDecoder($this) {
        var var$1;
        var$1 = new jnci_Iso8859Decoder;
        jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
        return var$1;
    }
    function jnci_UTF16Charset() {
        var a = this; jnc_Charset.call(a);
        a.$bom = 0;
        a.$littleEndian = 0;
    }
    function jnci_UTF16Charset__init_(var_0, var_1, var_2) {
        var var_3 = new jnci_UTF16Charset();
        jnci_UTF16Charset__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jnci_UTF16Charset__init_0($this, $canonicalName, $bom, $littleEndian) {
        jnc_Charset__init_($this, $canonicalName, $rt_createArray(jl_String, 0));
        $this.$bom = $bom;
        $this.$littleEndian = $littleEndian;
    }
    function jnci_UTF16Charset_newDecoder($this) {
        var var$1, var$2, var$3;
        var$1 = new jnci_UTF16Decoder;
        var$2 = $this.$bom;
        var$3 = $this.$littleEndian;
        jnci_BufferedDecoder__init_(var$1, $this, 0.5, 0.5);
        var$1.$bom0 = var$2;
        var$1.$littleEndian0 = var$3;
        return var$1;
    }
    var cjj_Checksum = $rt_classWithoutFields(0);
    function cjj_Adler32() {
        var a = this; jl_Object.call(a);
        a.$s1 = Long_ZERO;
        a.$s2 = Long_ZERO;
    }
    function cjj_Adler32__init_() {
        var var_0 = new cjj_Adler32();
        cjj_Adler32__init_0(var_0);
        return var_0;
    }
    function cjj_Adler32__init_0($this) {
        $this.$s1 = Long_fromInt(1);
        $this.$s2 = Long_ZERO;
    }
    function cjj_Adler32_reset($this, $init) {
        $this.$s1 = Long_and($init, Long_fromInt(65535));
        $this.$s2 = Long_and(Long_shr($init, 16), Long_fromInt(65535));
    }
    function cjj_Adler32_reset0($this) {
        $this.$s1 = Long_fromInt(1);
        $this.$s2 = Long_ZERO;
    }
    function cjj_Adler32_getValue($this) {
        return Long_or(Long_shl($this.$s2, 16), $this.$s1);
    }
    function cjj_Adler32_update($this, $buf, $index, $len) {
        var var$4, var$5, $len1, $len2, var$8, $k, var$10;
        if ($len == 1) {
            $buf = $buf.data;
            var$4 = Long_add($this.$s1, Long_fromInt($buf[$index] & 255));
            $this.$s1 = var$4;
            var$5 = Long_add($this.$s2, var$4);
            $this.$s2 = var$5;
            $this.$s1 = Long_rem(var$4, Long_fromInt(65521));
            $this.$s2 = Long_rem(var$5, Long_fromInt(65521));
            return;
        }
        $len1 = $len / 5552 | 0;
        $len2 = $len % 5552 | 0;
        while (true) {
            var$8 = $len1 + (-1) | 0;
            if ($len1 <= 0)
                break;
            $k = 5552;
            while (true) {
                $len1 = $k + (-1) | 0;
                if ($k <= 0)
                    break;
                var$10 = $buf.data;
                var$4 = $this.$s1;
                $len = $index + 1 | 0;
                var$4 = Long_add(var$4, Long_fromInt(var$10[$index] & 255));
                $this.$s1 = var$4;
                $this.$s2 = Long_add($this.$s2, var$4);
                $k = $len1;
                $index = $len;
            }
            $this.$s1 = Long_rem($this.$s1, Long_fromInt(65521));
            $this.$s2 = Long_rem($this.$s2, Long_fromInt(65521));
            $len1 = var$8;
        }
        while (true) {
            $len = $len2 + (-1) | 0;
            if ($len2 <= 0)
                break;
            var$10 = $buf.data;
            var$4 = $this.$s1;
            var$8 = $index + 1 | 0;
            var$4 = Long_add(var$4, Long_fromInt(var$10[$index] & 255));
            $this.$s1 = var$4;
            $this.$s2 = Long_add($this.$s2, var$4);
            $len2 = $len;
            $index = var$8;
        }
        $this.$s1 = Long_rem($this.$s1, Long_fromInt(65521));
        $this.$s2 = Long_rem($this.$s2, Long_fromInt(65521));
    }
    var otjc_JSObjects = $rt_classWithoutFields();
    var jl_CloneNotSupportedException = $rt_classWithoutFields(jl_Exception);
    var ju_Map$Entry = $rt_classWithoutFields(0);
    function ju_MapEntry() {
        var a = this; jl_Object.call(a);
        a.$key0 = null;
        a.$value0 = null;
    }
    function ju_HashMap$HashEntry() {
        var a = this; ju_MapEntry.call(a);
        a.$origKeyHash = 0;
        a.$next2 = null;
    }
    function ju_HashMap$HashEntry__init_(var_0, var_1) {
        var var_2 = new ju_HashMap$HashEntry();
        ju_HashMap$HashEntry__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function ju_HashMap$HashEntry__init_0($this, $theKey, $hash) {
        var var$3;
        var$3 = null;
        $this.$key0 = $theKey;
        $this.$value0 = var$3;
        $this.$origKeyHash = $hash;
    }
    var jl_StringIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException);
    var oli_Keyboard = $rt_classWithoutFields();
    var oli_Keyboard_keys = null;
    var oli_Keyboard_keyName = null;
    var oli_Keyboard_keyMap = null;
    var oli_Keyboard_counter = 0;
    var oli_Keyboard_created = 0;
    var oli_Keyboard_repeat_enabled = 0;
    var oli_Keyboard_initialized = 0;
    var oli_Keyboard_keyEvents = null;
    var oli_Keyboard_keyStates = null;
    var oli_Keyboard_keyCount = 0;
    var oli_Keyboard_keydown = null;
    var oli_Keyboard_keyup = null;
    var oli_Keyboard_keypress = null;
    var oli_Keyboard_currentEventK = null;
    var oli_Keyboard_LWJGLKeyCodes = null;
    function oli_Keyboard_$callClinit() {
        oli_Keyboard_$callClinit = $rt_eraseClinit(oli_Keyboard);
        oli_Keyboard__clinit_();
    }
    function oli_Keyboard_initialize() {
        oli_Keyboard_$callClinit();
        if (oli_Keyboard_initialized)
            return;
        oli_Keyboard_initialized = 1;
    }
    function oli_Keyboard_create() {
        var $t, var$2, var$3, $$je;
        oli_Keyboard_$callClinit();
        a: {
            b: {
                try {
                    if (!oli_Keyboard_created)
                        break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                        $t = $$je;
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return;
            }
            c: {
                try {
                    if (oli_Keyboard_initialized)
                        break c;
                    oli_Keyboard_initialize();
                    break c;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                        $t = $$je;
                        break a;
                    } else {
                        throw $$e;
                    }
                }
            }
            d: {
                try {
                    var$2 = m_WebGL_window;
                    var$3 = oli_Keyboard$1__init_();
                    oli_Keyboard_keydown = var$3;
                    var$2.addEventListener("keydown", otji_JS_function(var$3, "handleEvent"));
                    $t = m_WebGL_window;
                    var$2 = oli_Keyboard$2__init_();
                    oli_Keyboard_keyup = var$2;
                    $t.addEventListener("keyup", otji_JS_function(var$2, "handleEvent"));
                    $t = m_WebGL_window;
                    var$2 = oli_Keyboard$3__init_();
                    oli_Keyboard_keypress = var$2;
                    $t.addEventListener("keypress", otji_JS_function(var$2, "handleEvent"));
                    oli_Keyboard_created = 1;
                    $t = oli_Keyboard_keyEvents;
                    if ($t === null)
                        break d;
                    ju_LinkedList_clear($t);
                    break d;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                        $t = $$je;
                        break a;
                    } else {
                        throw $$e;
                    }
                }
            }
            return;
        }
        var$3 = new ol_LWJGLException;
        jl_Throwable__init_4(var$3, $t);
        $rt_throw(var$3);
    }
    function oli_Keyboard_isKeyDown($key) {
        oli_Keyboard_$callClinit();
        return oli_Keyboard_keyStates.data[$key];
    }
    function oli_Keyboard_next() {
        var var$1, var$2;
        oli_Keyboard_$callClinit();
        a: {
            oli_Keyboard_currentEventK = null;
            if (!ju_AbstractCollection_isEmpty(oli_Keyboard_keyEvents)) {
                var$1 = otji_JSWrapper_unwrap(ju_AbstractSequentialList_remove(oli_Keyboard_keyEvents, 0));
                oli_Keyboard_currentEventK = var$1;
                if (var$1 !== null) {
                    var$2 = 1;
                    break a;
                }
            }
            var$2 = 0;
        }
        return var$2;
    }
    function oli_Keyboard_enableRepeatEvents($enable) {
        oli_Keyboard_$callClinit();
        oli_Keyboard_repeat_enabled = 1;
    }
    function oli_Keyboard_getEventKey() {
        var var$1;
        oli_Keyboard_$callClinit();
        var$1 = oli_Keyboard_currentEventK;
        return var$1 === null ? (-1) : oli_Keyboard_remap(var$1.which);
    }
    function oli_Keyboard_getEventKeyState() {
        var var$1;
        oli_Keyboard_$callClinit();
        var$1 = oli_Keyboard_currentEventK;
        return var$1 === null ? 0 : jl_String_equals($rt_str(var$1.type), $rt_s(105)) ? 0 : 1;
    }
    function oli_Keyboard_remap($k) {
        var var$2;
        oli_Keyboard_$callClinit();
        var$2 = oli_Keyboard_LWJGLKeyCodes.data;
        return $k <= var$2.length && $k >= 0 ? var$2[$k] : (-1);
    }
    function oli_Keyboard__clinit_() {
        var $keyIndex, var$2, $count, var$4, $key;
        oli_Keyboard_keys = $rt_createArrayFromData(jl_String, [$rt_s(106), $rt_s(107), $rt_s(108), $rt_s(109), $rt_s(110), $rt_s(111), $rt_s(112), $rt_s(113), $rt_s(114), $rt_s(115), $rt_s(116), $rt_s(1), $rt_s(117), $rt_s(118), $rt_s(119), $rt_s(120), $rt_s(121), $rt_s(122), $rt_s(123), $rt_s(124), $rt_s(125), $rt_s(126), $rt_s(127), $rt_s(128), $rt_s(129), $rt_s(130), $rt_s(131), $rt_s(132), $rt_s(133), $rt_s(134), $rt_s(135), $rt_s(136), $rt_s(137), $rt_s(138), $rt_s(139), $rt_s(140), $rt_s(141), $rt_s(142),
        $rt_s(143), $rt_s(144), $rt_s(145), $rt_s(146), $rt_s(147), $rt_s(148), $rt_s(149), $rt_s(150), $rt_s(151), $rt_s(152), $rt_s(153), $rt_s(154), $rt_s(155), $rt_s(156), $rt_s(157), $rt_s(158), $rt_s(159), $rt_s(160), $rt_s(161), $rt_s(162), $rt_s(163), $rt_s(164), $rt_s(165), $rt_s(166), $rt_s(167), $rt_s(168), $rt_s(169), $rt_s(170), $rt_s(171), $rt_s(172), $rt_s(173), $rt_s(174), $rt_s(175), $rt_s(176), $rt_s(177), $rt_s(178), $rt_s(179), $rt_s(180), $rt_s(181), $rt_s(182), $rt_s(183), $rt_s(184), $rt_s(185),
        $rt_s(186), $rt_s(187), $rt_s(188), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(189), $rt_s(190), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(191), $rt_s(192), $rt_s(193), $rt_s(194), $rt_s(195), $rt_s(196), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(197), $rt_s(198), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(199), $rt_s(3), $rt_s(200), $rt_s(3), $rt_s(201), $rt_s(3), $rt_s(3), $rt_s(3),
        $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(202), $rt_s(3), $rt_s(3), $rt_s(203), $rt_s(204), $rt_s(205), $rt_s(206), $rt_s(207), $rt_s(208), $rt_s(209), $rt_s(210), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(211), $rt_s(212), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(213), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3),
        $rt_s(3), $rt_s(214), $rt_s(3), $rt_s(215), $rt_s(3), $rt_s(216), $rt_s(217), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(218), $rt_s(219), $rt_s(3), $rt_s(220), $rt_s(221), $rt_s(222), $rt_s(3), $rt_s(223), $rt_s(3), $rt_s(224), $rt_s(3), $rt_s(225), $rt_s(226), $rt_s(227), $rt_s(228), $rt_s(229), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(3), $rt_s(230), $rt_s(231), $rt_s(232), $rt_s(233), $rt_s(234), $rt_s(235)]);
        oli_Keyboard_keyName = $rt_createArray(jl_String, 256);
        oli_Keyboard_keyMap = ju_HashMap__init_1(253);
        oli_Keyboard_created = 0;
        oli_Keyboard_repeat_enabled = 0;
        oli_Keyboard_keyEvents = ju_LinkedList__init_();
        oli_Keyboard_keyStates = $rt_createBooleanArray(256);
        oli_Keyboard_keyCount = 0;
        oli_Keyboard_keydown = null;
        oli_Keyboard_keyup = null;
        oli_Keyboard_keypress = null;
        oli_Keyboard_currentEventK = null;
        oli_Keyboard_LWJGLKeyCodes = $rt_createIntArrayFromData([(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), 14, 15, (-1), (-1), (-1), 28, (-1), (-1), 42, 29, 56, (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), 1, (-1), (-1), (-1), (-1), 57, 210, 201, 207, 199, 203, 200, 205, 208, 205, 208, (-1), (-1), 210, 211, 211, 11, 2, 3, 4, 5, 6, 7, 8, 9, 10, (-1), (-1), (-1), (-1), (-1), (-1), (-1), 30, 48, 46, 32, 18, 33, 34, 35, 23, 36, 37, 38, 50, 49, 24, 25, 16, 19, 31, 20, 22, 47, 17, 45, 21, 44, (-1), (-1),
        (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), 12, 52, 53, (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1),
        (-1), (-1), (-1), (-1), (-1), (-1), (-1), 39, 13, 51, 12, 52, 53, (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), 26, 43, 27, 40]);
        $keyIndex = 0;
        var$2 = oli_Keyboard_keys.data;
        $count = var$2.length;
        var$4 = 0;
        while (var$4 < $count) {
            $key = var$2[var$4];
            oli_Keyboard_keyName.data[$keyIndex] = $key;
            ju_HashMap_put(oli_Keyboard_keyMap, $key, jl_Integer_valueOf($keyIndex));
            $keyIndex = $keyIndex + 1 | 0;
            oli_Keyboard_counter = oli_Keyboard_counter + 1 | 0;
            var$4 = var$4 + 1 | 0;
        }
        $count = 0;
        var$2 = oli_Keyboard_LWJGLKeyCodes.data;
        $keyIndex = var$2.length;
        var$4 = 0;
        while (var$4 < $keyIndex) {
            if (jl_Integer_intValue(jl_Integer_valueOf(var$2[var$4])) != (-1))
                $count = $count + 1 | 0;
            var$4 = var$4 + 1 | 0;
        }
        oli_Keyboard_keyCount = $count;
    }
    var oli_Mouse = $rt_classWithoutFields();
    var oli_Mouse_created = 0;
    var oli_Mouse_x = 0;
    var oli_Mouse_y = 0;
    var oli_Mouse_dx = 0;
    var oli_Mouse_dy = 0;
    var oli_Mouse_dwheel = 0;
    var oli_Mouse_buttonName = null;
    var oli_Mouse_buttonMap = null;
    var oli_Mouse_initialized = 0;
    var oli_Mouse_grab_x = 0;
    var oli_Mouse_grab_y = 0;
    var oli_Mouse_isGrabbed = 0;
    var oli_Mouse_mouseEvents = null;
    var oli_Mouse_buttonStates = null;
    var oli_Mouse_isInsideWindow = 0;
    var oli_Mouse_contextmenu = null;
    var oli_Mouse_mousedown = null;
    var oli_Mouse_mouseup = null;
    var oli_Mouse_mousemove = null;
    var oli_Mouse_wheel = null;
    var oli_Mouse_pointerLockChange = null;
    var oli_Mouse_currentEvent = null;
    function oli_Mouse_initialize() {
        var $i, var$2, var$3;
        oli_Mouse_buttonName = $rt_createArray(jl_String, 16);
        $i = 0;
        while ($i < 16) {
            var$2 = oli_Mouse_buttonName.data;
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(236)), $i);
            var$2[$i] = jl_AbstractStringBuilder_toString(var$3);
            ju_HashMap_put(oli_Mouse_buttonMap, oli_Mouse_buttonName.data[$i], jl_Integer_valueOf($i));
            $i = $i + 1 | 0;
        }
        oli_Mouse_initialized = 1;
    }
    function oli_Mouse_create() {
        var $t, var$2, var$3, $$je;
        a: {
            b: {
                try {
                    if (!oli_Mouse_created)
                        break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                        $t = $$je;
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return;
            }
            c: {
                try {
                    if (oli_Mouse_initialized)
                        break c;
                    oli_Mouse_initialize();
                    break c;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                        $t = $$je;
                        break a;
                    } else {
                        throw $$e;
                    }
                }
            }
            d: {
                try {
                    var$2 = m_WebGL_window;
                    var$3 = oli_Mouse$1__init_();
                    oli_Mouse_contextmenu = var$3;
                    var$2.addEventListener("contextmenu", otji_JS_function(var$3, "handleEvent"));
                    $t = m_WebGL_canvas;
                    var$2 = oli_Mouse$2__init_();
                    oli_Mouse_mousedown = var$2;
                    $t.addEventListener("mousedown", otji_JS_function(var$2, "handleEvent"));
                    $t = m_WebGL_canvas;
                    var$2 = oli_Mouse$3__init_();
                    oli_Mouse_mouseup = var$2;
                    $t.addEventListener("mouseup", otji_JS_function(var$2, "handleEvent"));
                    $t = m_WebGL_canvas;
                    var$2 = oli_Mouse$4__init_();
                    oli_Mouse_mousemove = var$2;
                    $t.addEventListener("mousemove", otji_JS_function(var$2, "handleEvent"));
                    $t = m_WebGL_canvas;
                    var$2 = oli_Mouse$5__init_();
                    oli_Mouse_wheel = var$2;
                    $t.addEventListener("wheel", otji_JS_function(var$2, "handleEvent"));
                    $t = m_WebGL_canvas;
                    var$2 = oli_Mouse$6__init_();
                    oli_Mouse_pointerLockChange = var$2;
                    $t.addEventListener("pointerlockchange", otji_JS_function(var$2, "handleEvent"));
                    $t = m_WebGL_canvas;
                    var$2 = oli_Mouse$7__init_();
                    oli_Mouse_pointerLockChange = var$2;
                    $t.addEventListener("mouseleave", otji_JS_function(var$2, "handleEvent"));
                    $t = m_WebGL_canvas;
                    var$2 = oli_Mouse$8__init_();
                    oli_Mouse_pointerLockChange = var$2;
                    $t.addEventListener("mouseenter", otji_JS_function(var$2, "handleEvent"));
                    oli_Mouse_created = 1;
                    $t = oli_Mouse_mouseEvents;
                    if ($t === null)
                        break d;
                    ju_LinkedList_clear($t);
                    break d;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                        $t = $$je;
                        break a;
                    } else {
                        throw $$e;
                    }
                }
            }
            try {
                oli_Mouse_setGrabbed(oli_Mouse_isGrabbed);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Throwable) {
                    $t = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return;
        }
        var$3 = new ol_LWJGLException;
        jl_Throwable__init_4(var$3, $t);
        $rt_throw(var$3);
    }
    function oli_Mouse_isButtonDown($button) {
        return oli_Mouse_buttonStates.data[$button];
    }
    function oli_Mouse_next() {
        var var$1, var$2;
        a: {
            oli_Mouse_currentEvent = null;
            if (!ju_AbstractCollection_isEmpty(oli_Mouse_mouseEvents)) {
                var$1 = otji_JSWrapper_unwrap(ju_AbstractSequentialList_remove(oli_Mouse_mouseEvents, 0));
                oli_Mouse_currentEvent = var$1;
                if (var$1 !== null) {
                    var$2 = 1;
                    break a;
                }
            }
            var$2 = 0;
        }
        return var$2;
    }
    function oli_Mouse_getEventButton() {
        var var$1, $b;
        var$1 = oli_Mouse_currentEvent;
        if (var$1 === null)
            return (-1);
        $b = var$1.button;
        if ($b == 1)
            $b = 2;
        else if ($b == 2)
            $b = 1;
        return $b;
    }
    function oli_Mouse_getEventButtonState() {
        var var$1;
        var$1 = oli_Mouse_currentEvent;
        return var$1 === null ? 0 : jl_String_equals($rt_str(var$1.type), $rt_s(237));
    }
    function oli_Mouse_getEventDWheel() {
        return !jl_String_equals($rt_s(238), $rt_str(oli_Mouse_currentEvent.type)) ? 0 : oli_Mouse_currentEvent.deltaY === 0.0 ? 0 : oli_Mouse_currentEvent.deltaY <= 0.0 ? 1 : (-1);
    }
    function oli_Mouse_getX() {
        return oli_Mouse_x;
    }
    function oli_Mouse_getY() {
        return oli_Mouse_y;
    }
    function oli_Mouse_getDX() {
        var $result;
        $result = oli_Mouse_dx;
        oli_Mouse_dx = 0;
        return $result;
    }
    function oli_Mouse_getDY() {
        var $result;
        $result = oli_Mouse_dy;
        oli_Mouse_dy = 0;
        return $result;
    }
    function oli_Mouse_setGrabbed($grab) {
        var $grabbed;
        $grabbed = oli_Mouse_isGrabbed;
        oli_Mouse_isGrabbed = $grab;
        if (oli_Mouse_created) {
            if ($grab && !$grabbed) {
                oli_Mouse_grab_x = oli_Mouse_x;
                oli_Mouse_grab_y = oli_Mouse_y;
                oli_Mouse_dx = 0;
                oli_Mouse_dy = 0;
                m_WebGL_canvas.requestPointerLock();
            } else if (!$grab && $grabbed)
                m_WebGL_document.exitPointerLock();
            oli_Mouse_dwheel = 0;
            oli_Mouse_dy = 0;
            oli_Mouse_dx = 0;
        }
    }
    function oli_Mouse__clinit_() {
        oli_Mouse_buttonMap = ju_HashMap__init_1(16);
        oli_Mouse_mouseEvents = new ju_LinkedList;
        oli_Mouse_buttonStates = $rt_createBooleanArray(8);
        oli_Mouse_isInsideWindow = 1;
        oli_Mouse_contextmenu = null;
        oli_Mouse_mousedown = null;
        oli_Mouse_mouseup = null;
        oli_Mouse_mousemove = null;
        oli_Mouse_wheel = null;
        oli_Mouse_pointerLockChange = null;
        oli_Mouse_currentEvent = null;
    }
    var m_GLEnums = $rt_classWithoutFields();
    var olo_GL11 = $rt_classWithoutFields(m_GLEnums);
    var olo_GL11_webgl = null;
    var olo_GL11_alphaValue = 0.0;
    var olo_GL11_alpha = 0;
    var olo_GL11_currentWebGLProgram = 0;
    var olo_GL11_mat2 = null;
    var olo_GL11_mat3 = null;
    var olo_GL11_mat4 = null;
    var olo_GL11_textures = null;
    var olo_GL11_textureIndex = 0;
    var olo_GL11_textureArray = 0;
    var olo_GL11_colorArray = 0;
    var olo_GL11_normalArray = 0;
    var olo_GL11_isCompilingDisplayList = 0;
    var olo_GL11_compilingDisplayList = null;
    var olo_GL11_displayLists = null;
    var olo_GL11_displayListsInitialized = null;
    var olo_GL11_quadsToTrianglesBuffer = null;
    var olo_GL11_currentArray = null;
    var olo_GL11_bytesUploaded = 0;
    var olo_GL11_vertexDrawn = 0;
    var olo_GL11_triangleDrawn = 0;
    var olo_GL11_fogColorR = 0.0;
    var olo_GL11_fogColorG = 0.0;
    var olo_GL11_fogColorB = 0.0;
    var olo_GL11_fogColorA = 0.0;
    var olo_GL11_fogMode = 0;
    var olo_GL11_fogEnabled = 0;
    var olo_GL11_fogPremultiply = 0;
    var olo_GL11_fogStart = 0.0;
    var olo_GL11_fogEnd = 0.0;
    var olo_GL11_fogDensity = 0.0;
    var olo_GL11_texture2D = 0;
    var olo_GL11_lighting = 0;
    var olo_GL11_colorMaterial = 0;
    var olo_GL11_normalX = 0.0;
    var olo_GL11_normalY = 0.0;
    var olo_GL11_normalZ = 0.0;
    var olo_GL11_tex0X = 0.0;
    var olo_GL11_tex0Y = 0.0;
    var olo_GL11_colorR = 0.0;
    var olo_GL11_colorG = 0.0;
    var olo_GL11_colorB = 0.0;
    var olo_GL11_colorA = 0.0;
    var olo_GL11_matrixMode = 0;
    var olo_GL11_matModelV = null;
    var olo_GL11_matModelPointer = 0;
    var olo_GL11_matProjV = null;
    var olo_GL11_matProjPointer = 0;
    var olo_GL11_matTexV = null;
    var olo_GL11_matTexPointer = 0;
    var olo_GL11_matrixVector = null;
    var olo_GL11_unprojA = null;
    var olo_GL11_unprojB = null;
    var olo_GL11_unprojC = null;
    var olo_GL11_lightPos1vec = null;
    var olo_GL11_lightPos0vec = null;
    var olo_GL11_vertexBuffer = null;
    var olo_GL11_texCoordBuffer = null;
    var olo_GL11_viewportCache = null;
    var olo_GL11_materialAmbientR = 0.0;
    var olo_GL11_materialAmbientG = 0.0;
    var olo_GL11_materialAmbientB = 0.0;
    var olo_GL11_materialAmbientA = 0.0;
    var olo_GL11_materialDiffuseR = 0.0;
    var olo_GL11_materialDiffuseG = 0.0;
    var olo_GL11_materialDiffuseB = 0.0;
    var olo_GL11_materialDiffuseA = 0.0;
    var olo_GL11_materialSpecularR = 0.0;
    var olo_GL11_materialSpecularG = 0.0;
    var olo_GL11_materialSpecularB = 0.0;
    var olo_GL11_materialSpecularA = 0.0;
    var olo_GL11_materialEmissionR = 0.0;
    var olo_GL11_materialEmissionG = 0.0;
    var olo_GL11_materialEmissionB = 0.0;
    var olo_GL11_materialEmissionA = 0.0;
    var olo_GL11_materialBackAmbientR = 0.0;
    var olo_GL11_materialBackAmbientG = 0.0;
    var olo_GL11_materialBackAmbientB = 0.0;
    var olo_GL11_materialBackAmbientA = 0.0;
    var olo_GL11_materialBackDiffuseR = 0.0;
    var olo_GL11_materialBackDiffuseG = 0.0;
    var olo_GL11_materialBackDiffuseB = 0.0;
    var olo_GL11_materialBackDiffuseA = 0.0;
    var olo_GL11_materialBackSpecularR = 0.0;
    var olo_GL11_materialBackSpecularG = 0.0;
    var olo_GL11_materialBackSpecularB = 0.0;
    var olo_GL11_materialBackSpecularA = 0.0;
    var olo_GL11_materialBackEmissionR = 0.0;
    var olo_GL11_materialBackEmissionG = 0.0;
    var olo_GL11_materialBackEmissionB = 0.0;
    var olo_GL11_materialBackEmissionA = 0.0;
    var olo_GL11_displayListId = 0;
    var olo_GL11_blankUploadArray = null;
    var olo_GL11_bufferUpload = null;
    var olo_GL11_appendbufferindex = 0;
    var olo_GL11_appendbuffer = null;
    var olo_GL11_shaderWebGL = null;
    function olo_GL11_$callClinit() {
        olo_GL11_$callClinit = $rt_eraseClinit(olo_GL11);
        olo_GL11__clinit_();
    }
    function olo_GL11_glAlphaFunc($func, $ref) {
        olo_GL11_$callClinit();
        olo_GL11_alphaValue = $ref;
    }
    function olo_GL11_glClearColor($red, $green, $blue, $alpha) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.clearColor($red, $green, $blue, $alpha);
    }
    function olo_GL11_glClear($mask) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.clear($mask);
    }
    function olo_GL11_glCallLists($listsIntBuffer) {
        olo_GL11_$callClinit();
        while (jn_Buffer_hasRemaining($listsIntBuffer)) {
            olo_GL11_glCallList(jn_IntBufferImpl_get($listsIntBuffer));
        }
    }
    function olo_GL11_glDrawQuadArrays($p2, $p3) {
        var var$3, $v3, var$5, $i, $v1, $v2, $v4, var$10, var$11;
        olo_GL11_$callClinit();
        if (olo_GL11_quadsToTrianglesBuffer === null) {
            var$3 = $rt_createIntArray(49200);
            $v3 = var$3.data.length;
            var$5 = new jn_IntBufferOverArray;
            jn_IntBufferImpl__init_(var$5, $v3, 0, 0 + $v3 | 0);
            var$5.$start6 = 0;
            var$5.$readOnly1 = 0;
            var$5.$array3 = var$3;
            $i = 0;
            while ($i < 16384) {
                $v1 = $i * 4 | 0;
                $v2 = $v1 + 1 | 0;
                $v3 = $v1 + 2 | 0;
                $v4 = $v1 + 3 | 0;
                var$10 = $v2 << 16;
                jn_IntBufferImpl_put(var$5, $v1 | var$10);
                jn_IntBufferImpl_put(var$5, $v4 | var$10);
                jn_IntBufferImpl_put(var$5, $v3 | $v4 << 16);
                $i = $i + 1 | 0;
            }
            jn_Buffer_flip(var$5);
            var$11 = olo_GL11_glCreateBuffer();
            olo_GL11_quadsToTrianglesBuffer = var$11;
            olo_GL11_glBindBuffer(34963, var$11);
            $v4 = jn_Buffer_remaining(var$5);
            var$11 = new $rt_globals.Int32Array(olo_GL11_bufferUpload.buffer);
            var$10 = 0;
            while (var$10 < $v4) {
                $v1 = jn_IntBufferImpl_get(var$5);
                var$10;
                var$11[var$10] = $v1;
                var$10 = var$10 + 1 | 0;
            }
            var$5 = olo_GL11_bufferUpload.buffer;
            $v4 = $v4 * 4 | 0;
            var$11 = new $rt_globals.Uint8Array(var$5, 0, $v4);
            olo_GL11_webgl.bufferData(34963, var$11, 35044);
        }
        var$5 = olo_GL11_currentArray;
        if (!var$5.$isQuadBufferBound) {
            var$5.$isQuadBufferBound = 1;
            olo_GL11_glBindBuffer(34963, olo_GL11_quadsToTrianglesBuffer);
        }
        $i = ($p3 * 6 | 0) / 4 | 0;
        $p2 = ($p2 * 6 | 0) / 4 | 0;
        olo_GL11_webgl.drawElements(4, $i, 5123, $p2);
    }
    function olo_GL11_glBindVertexArray0($p1) {
        var var$2;
        olo_GL11_$callClinit();
        olo_GL11_currentArray = $p1;
        if ($p1 !== null) {
            var$2 = olo_GL11_webgl;
            $p1 = $p1.$obj1;
            var$2.bindVertexArray($p1);
            return;
        }
        $p1 = olo_GL11_webgl;
        var$2 = null;
        $p1.bindVertexArray(var$2);
    }
    function olo_GL11_glGenLists($range) {
        var $base, $i, $id, var$5, var$6, var$7;
        olo_GL11_$callClinit();
        $base = olo_GL11_displayListId + 1 | 0;
        $i = 0;
        while ($i < $range) {
            $id = olo_GL11_displayListId + 1 | 0;
            olo_GL11_displayListId = $id;
            var$5 = olo_GL11_displayLists;
            var$6 = jl_Integer_valueOf($id);
            var$7 = new olo_DisplayList;
            var$7.$id1 = $id;
            var$7.$array4 = null;
            var$7.$buffer4 = null;
            var$7.$mode3 = (-1);
            var$7.$length1 = 0;
            ju_HashMap_put(var$5, var$6, var$7);
            $i = $i + 1 | 0;
        }
        return $base;
    }
    function olo_GL11_glNewList($list, $mode) {
        var var$3;
        olo_GL11_$callClinit();
        if (!olo_GL11_isCompilingDisplayList) {
            var$3 = ju_HashMap_get(olo_GL11_displayLists, jl_Integer_valueOf($list));
            olo_GL11_compilingDisplayList = var$3;
            if (var$3 !== null) {
                var$3.$mode3 = (-1);
                var$3.$length1 = 0;
                olo_GL11_isCompilingDisplayList = 1;
            }
        }
    }
    function olo_GL11_glCallList($list) {
        var $d, var$3, var$4;
        olo_GL11_$callClinit();
        if (!olo_GL11_isCompilingDisplayList) {
            $d = ju_HashMap_get(olo_GL11_displayListsInitialized, jl_Integer_valueOf($list));
            if ($d !== null && $d.$length1 > 0) {
                olo_GL11_glBindShaders($d.$mode3 | 0 | (olo_GL11_colorMaterial && olo_GL11_lighting ? 8 : 0) | (!olo_GL11_fogEnabled ? 0 : 16) | (!olo_GL11_alpha ? 0 : 32) | (!olo_GL11_texture2D ? 0 : 64));
                olo_GL11_glBindVertexArray0($d.$array4);
                olo_GL11_glDrawQuadArrays(0, $d.$length1);
                var$3 = olo_GL11_vertexDrawn;
                var$4 = $d.$length1;
                olo_GL11_vertexDrawn = var$3 + ((var$4 * 6 | 0) / 4 | 0) | 0;
                olo_GL11_triangleDrawn = olo_GL11_triangleDrawn + (var$4 / 2 | 0) | 0;
            }
        }
    }
    function olo_GL11_glEndList() {
        var $f, var$2, $upload, $l;
        olo_GL11_$callClinit();
        if (olo_GL11_isCompilingDisplayList) {
            olo_GL11_isCompilingDisplayList = 0;
            $f = olo_GL11_appendbuffer.buffer;
            var$2 = olo_GL11_appendbufferindex;
            $f = new $rt_globals.Int32Array($f, 0, var$2);
            olo_GL11_appendbufferindex = 0;
            $upload = otji_JSWrapper_wrap($f);
            $l = olo_GL11_glArrayByteLength($upload);
            if ($l > 0) {
                $f = olo_GL11_compilingDisplayList;
                if ($f.$buffer4 === null) {
                    ju_HashMap_put(olo_GL11_displayListsInitialized, jl_Integer_valueOf($f.$id1), olo_GL11_compilingDisplayList);
                    olo_GL11_compilingDisplayList.$array4 = olo_GL11_glCreateVertexArray();
                    olo_GL11_compilingDisplayList.$buffer4 = olo_GL11_glCreateBuffer();
                    $f = m_WebGLShader_instance(olo_GL11_compilingDisplayList.$mode3);
                    olo_GL11_glBindVertexArray0(olo_GL11_compilingDisplayList.$array4);
                    olo_GL11_glBindBuffer(34962, olo_GL11_compilingDisplayList.$buffer4);
                    m_WebGLShader_setupArrayForProgram($f);
                }
                olo_GL11_glBindBuffer(34962, olo_GL11_compilingDisplayList.$buffer4);
                olo_GL11_glBufferData(34962, $upload, 35044);
                olo_GL11_bytesUploaded = olo_GL11_bytesUploaded + $l | 0;
            }
        }
    }
    function olo_GL11_glBlendFunc($sFactor, $dFactor) {
        olo_GL11_$callClinit();
        olo_GL11_fogPremultiply = $sFactor == 1 && $dFactor == 771 ? 1 : 0;
        olo_GL11_webgl.blendFunc($sFactor, $dFactor);
    }
    function olo_GL11_glBindTexture($target, $texture) {
        var $t, var$4;
        olo_GL11_$callClinit();
        $t = ju_HashMap_get(olo_GL11_textures, jl_Integer_valueOf($texture));
        if ($t !== null) {
            var$4 = olo_GL11_webgl;
            $t = $t.$obj2;
            var$4.bindTexture(3553, $t);
            return;
        }
        $t = olo_GL11_webgl;
        var$4 = null;
        $t.bindTexture(3553, var$4);
    }
    function olo_GL11_glBegin($mode) {
        olo_GL11_$callClinit();
        olo_GL11$ImmediateModeData_$callClinit();
        if (olo_GL11$ImmediateModeData_mode != (-1))
            olo_GL11_glEnd();
        olo_GL11$ImmediateModeData_mode = $mode;
        olo_GL11$ImmediateModeData_vertexPosition = 0;
        olo_GL11$ImmediateModeData_textureCoordPosition = 0;
    }
    function olo_GL11_glVertex3f($x, $y, $z) {
        olo_GL11_$callClinit();
    }
    function olo_GL11_glEnd() {
        olo_GL11_$callClinit();
        olo_GL11$ImmediateModeData_$callClinit();
        if (olo_GL11$ImmediateModeData_mode == (-1))
            return;
        olo_GL11$ImmediateModeData_mode = (-1);
    }
    function olo_GL11_glLineWidth($width) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.lineWidth($width);
    }
    function olo_GL11_glClearDepth($depth) {
        var var$2, var$3;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        var$3 =  -$depth;
        var$2.clearDepth(var$3);
    }
    function olo_GL11_glDrawArrays($mode, $first, $count, $buffer) {
        var var$5, $bl, var$7, var$8, $sb, var$10, var$11, var$12;
        olo_GL11_$callClinit();
        if (olo_GL11_isCompilingDisplayList) {
            if ($mode != 7)
                ji_PrintStream_println(jl_System_err(), $rt_s(239));
            else {
                var$5 = olo_GL11_compilingDisplayList;
                $mode = var$5.$mode3;
                if ($mode == (-1))
                    var$5.$mode3 = olo_GL11_glGetShaderMode0();
                else if ($mode != olo_GL11_glGetShaderMode0())
                    ji_PrintStream_println(jl_System_err(), $rt_s(240));
                var$5 = olo_GL11_compilingDisplayList;
                var$5.$length1 = var$5.$length1 + $count | 0;
                var$5 = otji_JSWrapper_unwrap($buffer);
                if ((olo_GL11_appendbufferindex + var$5.length | 0) < olo_GL11_appendbuffer.length) {
                    $buffer = olo_GL11_appendbuffer;
                    $mode = olo_GL11_appendbufferindex;
                    $buffer.set(var$5, $mode);
                    olo_GL11_appendbufferindex = olo_GL11_appendbufferindex + var$5.length | 0;
                }
            }
        } else {
            $bl = olo_GL11_glArrayByteLength($buffer);
            olo_GL11_bytesUploaded = olo_GL11_bytesUploaded + $bl | 0;
            olo_GL11_vertexDrawn = olo_GL11_vertexDrawn + $count | 0;
            olo_GL11_glBindShaders(0 | (!olo_GL11_colorArray ? 0 : 1) | (!olo_GL11_normalArray ? 0 : 2) | (!olo_GL11_textureArray ? 0 : 4) | (olo_GL11_colorMaterial && olo_GL11_lighting ? 8 : 0) | (!olo_GL11_fogEnabled ? 0 : 16) | (!olo_GL11_alpha ? 0 : 32) | (!olo_GL11_texture2D ? 0 : 64));
            var$5 = olo_GL11_shaderWebGL.$streamBuffer;
            var$7 = var$5.$buffers.data;
            var$8 = var$5.$currentBufferId;
            var$5.$currentBufferId = var$8 + 1 | 0;
            $sb = var$7[var$8 % var$7.length | 0];
            if ($sb.$vertexBuffer === null)
                $sb.$vertexBuffer = olo_GL11_glCreateBuffer();
            if ($sb.$vertexArray === null) {
                var$10 = olo_GL11_glCreateVertexArray();
                $sb.$vertexArray = var$10;
                var$5 = var$5.$initializer;
                var$11 = $sb.$vertexBuffer;
                var$5 = var$5.$_04;
                olo_GL11_glBindVertexArray0(var$10);
                olo_GL11_glBindBuffer(34962, var$11);
                m_WebGLShader_setupArrayForProgram(var$5);
            }
            if ($sb.$vertexBufferSize < $bl) {
                var$12 = ($bl & (-4096)) + 8192 | 0;
                olo_GL11_glBindBuffer(34962, $sb.$vertexBuffer);
                m_WebGL_webgl.bufferData(34962, var$12, 35040);
                $sb.$vertexBufferSize = var$12;
            }
            olo_GL11_glBindVertexArray0($sb.$vertexArray);
            olo_GL11_glBindBuffer(34962, $sb.$vertexBuffer);
            var$5 = olo_GL11_shaderWebGL;
            if (!var$5.$bufferIsInitialized) {
                var$5.$bufferIsInitialized = 1;
                olo_GL11_glBufferData(34962, olo_GL11_blankUploadArray, 35048);
            }
            var$5 = olo_GL11_webgl;
            $buffer = otji_JSWrapper_unwrap($buffer);
            var$5.bufferSubData(34962, 0, $buffer);
            if ($mode == 7) {
                olo_GL11_glDrawQuadArrays($first, $count);
                olo_GL11_triangleDrawn = olo_GL11_triangleDrawn + ($count / 2 | 0) | 0;
            } else {
                a: {
                    b: {
                        switch ($mode) {
                            case 1:
                                break;
                            case 2:
                            case 4:
                                break b;
                            case 3:
                                $mode = 3;
                                olo_GL11_triangleDrawn = olo_GL11_triangleDrawn + ($count - 1 | 0) | 0;
                                break a;
                            case 5:
                                $mode = 5;
                                olo_GL11_triangleDrawn = olo_GL11_triangleDrawn + ($count - 2 | 0) | 0;
                                break a;
                            case 6:
                                $mode = 6;
                                olo_GL11_triangleDrawn = olo_GL11_triangleDrawn + ($count - 2 | 0) | 0;
                                break a;
                            default:
                                break b;
                        }
                        $mode = 1;
                        olo_GL11_triangleDrawn = olo_GL11_triangleDrawn + ($count / 2 | 0) | 0;
                        break a;
                    }
                    $mode = 4;
                    olo_GL11_triangleDrawn = olo_GL11_triangleDrawn + ($count / 3 | 0) | 0;
                }
                olo_GL11_webgl.drawArrays($mode, $first, $count);
            }
        }
    }
    function olo_GL11_glEnableClientState($cap) {
        olo_GL11_$callClinit();
        a: {
            switch ($cap) {
                case 32885:
                    break;
                case 32886:
                    olo_GL11_colorArray = 1;
                    break a;
                case 32887:
                    break a;
                case 32888:
                    olo_GL11_textureArray = 1;
                    break a;
                default:
                    break a;
            }
            olo_GL11_normalArray = 1;
        }
    }
    function olo_GL11_glDisableClientState($cap) {
        olo_GL11_$callClinit();
        a: {
            switch ($cap) {
                case 32885:
                    break;
                case 32886:
                    olo_GL11_colorArray = 0;
                    break a;
                case 32887:
                    break a;
                case 32888:
                    olo_GL11_textureArray = 0;
                    break a;
                default:
                    break a;
            }
            olo_GL11_normalArray = 0;
        }
    }
    function olo_GL11_glEnable($cap) {
        olo_GL11_$callClinit();
        a: {
            b: {
                c: {
                    d: {
                        e: {
                            switch ($cap) {
                                case 2884:
                                    break e;
                                case 2896:
                                    olo_GL11_lighting = 1;
                                    break a;
                                case 2903:
                                    olo_GL11_colorMaterial = 1;
                                    break a;
                                case 2912:
                                    olo_GL11_fogEnabled = 1;
                                    break a;
                                case 2929:
                                    olo_GL11_webgl.enable(2929);
                                    break e;
                                case 3008:
                                    olo_GL11_alpha = 1;
                                    break a;
                                case 3042:
                                    break d;
                                case 3089:
                                    break b;
                                case 3553:
                                    olo_GL11_texture2D = 1;
                                    break a;
                                case 32823:
                                    break c;
                                case 32826:
                                    break;
                                default:
                                    break a;
                            }
                            break a;
                        }
                        olo_GL11_webgl.enable(2884);
                    }
                    olo_GL11_webgl.enable(3042);
                }
                olo_GL11_webgl.enable(32823);
            }
            olo_GL11_webgl.enable(3089);
        }
    }
    function olo_GL11_glDisable($cap) {
        olo_GL11_$callClinit();
        a: {
            b: {
                c: {
                    d: {
                        e: {
                            switch ($cap) {
                                case 2884:
                                    break e;
                                case 2896:
                                    olo_GL11_lighting = 0;
                                    break a;
                                case 2903:
                                    olo_GL11_colorMaterial = 0;
                                    break a;
                                case 2912:
                                    olo_GL11_fogEnabled = 0;
                                    break a;
                                case 2929:
                                    olo_GL11_webgl.disable(2929);
                                    break e;
                                case 3008:
                                    olo_GL11_alpha = 0;
                                    break a;
                                case 3042:
                                    break d;
                                case 3089:
                                    break b;
                                case 3553:
                                    olo_GL11_texture2D = 0;
                                    break a;
                                case 32823:
                                    break c;
                                case 32826:
                                    break;
                                default:
                                    break a;
                            }
                            break a;
                        }
                        olo_GL11_webgl.disable(2884);
                    }
                    olo_GL11_webgl.disable(3042);
                }
                olo_GL11_webgl.disable(32823);
            }
            olo_GL11_webgl.disable(3089);
        }
    }
    function olo_GL11_glCullFace($cull) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.cullFace($cull);
    }
    function olo_GL11_glNormal3f($nx, $ny, $nz) {
        var $len;
        olo_GL11_$callClinit();
        $len = jl_Math_sqrt($nx * $nx + $ny * $ny + $nz * $nz);
        olo_GL11_normalX = $nx / $len;
        olo_GL11_normalY = $ny / $len;
        olo_GL11_normalZ = $nz / $len;
    }
    function olo_GL11_glColor3f($red, $green, $blue) {
        olo_GL11_$callClinit();
        olo_GL11_colorR = $red;
        olo_GL11_colorG = $green;
        olo_GL11_colorB = $blue;
        olo_GL11_colorA = 1.0;
    }
    function olo_GL11_glColor4f($red, $green, $blue, $alpha) {
        olo_GL11_$callClinit();
        olo_GL11_colorR = $red;
        olo_GL11_colorG = $green;
        olo_GL11_colorB = $blue;
        olo_GL11_colorA = $alpha;
    }
    function olo_GL11_glDepthMask($flag) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.depthMask(!!$flag);
    }
    function olo_GL11_glDepthFunc($func) {
        var $func1;
        olo_GL11_$callClinit();
        a: {
            $func1 = 518;
            switch ($func) {
                case 514:
                    $func1 = 514;
                    break a;
                case 515:
                    $func1 = 518;
                    break a;
                case 516:
                    $func1 = 513;
                    break a;
                default:
            }
        }
        olo_GL11_webgl.depthFunc($func1);
    }
    function olo_GL11_glColorMask($red, $green, $blue, $alpha) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.colorMask(!!$red, !!$green, !!$blue, !!$alpha);
    }
    function olo_GL11_glTexParameteri($target, $pname, $param) {
        olo_GL11_$callClinit();
        if (!($param != 33071 && $param != 10496))
            $param = 33071;
        olo_GL11_webgl.texParameteri($target, $pname, $param);
    }
    function olo_GL11_glMatrixMode($mode) {
        olo_GL11_$callClinit();
        olo_GL11_matrixMode = $mode;
    }
    function olo_GL11_getMatrix() {
        olo_GL11_$callClinit();
        switch (olo_GL11_matrixMode) {
            case 5888:
                break;
            case 5889:
                return olo_GL11_matProjV.data[olo_GL11_matProjPointer];
            case 5890:
                return olo_GL11_matTexV.data[olo_GL11_matTexPointer];
            default:
        }
        return olo_GL11_matModelV.data[olo_GL11_matModelPointer];
    }
    function olo_GL11_glLoadIdentity() {
        olo_GL11_$callClinit();
        oluv_Matrix4f_setIdentity(olo_GL11_getMatrix());
    }
    function olo_GL11_glOrtho($left, $right, $bottom, $top, $zNear, $zFar) {
        var $res, var$8, var$9, var$10;
        olo_GL11_$callClinit();
        $res = olo_GL11_getMatrix();
        var$8 = $right - $left;
        $res.$m00 = 2.0 / var$8;
        $res.$m01 = 0.0;
        $res.$m02 = 0.0;
        $res.$m03 = 0.0;
        $res.$m10 = 0.0;
        var$9 = $top - $bottom;
        $res.$m11 = 2.0 / var$9;
        $res.$m12 = 0.0;
        $res.$m13 = 0.0;
        $res.$m20 = 0.0;
        $res.$m21 = 0.0;
        var$10 = $zFar - $zNear;
        $res.$m22 = 2.0 / var$10;
        $res.$m23 = 0.0;
        $res.$m30 =  -($right + $left) / var$8;
        $res.$m31 =  -($top + $bottom) / var$9;
        $res.$m32 = ($zFar + $zNear) / var$10;
        $res.$m33 = 1.0;
    }
    function olo_GL11_glTranslatef($x, $y, $z) {
        var var$4, var$5, var$6, var$7, var$8, var$9;
        olo_GL11_$callClinit();
        oluv_Vector3f_set(olo_GL11_matrixVector, $x, $y, $z);
        var$4 = olo_GL11_getMatrix();
        var$5 = olo_GL11_matrixVector;
        var$6 = var$4 !== null ? var$4 : oluv_Matrix4f__init_();
        $x = var$6.$m30;
        $y = var$4.$m00;
        $z = var$5.$x6;
        $y = $y * $z;
        var$7 = var$4.$m10;
        var$8 = var$5.$y5;
        var$7 = $y + var$7 * var$8;
        $y = var$4.$m20;
        var$9 = var$5.$z8;
        var$6.$m30 = $x + var$7 + $y * var$9;
        var$6.$m31 = var$6.$m31 + var$4.$m01 * $z + var$4.$m11 * var$8 + var$4.$m21 * var$9;
        var$6.$m32 = var$6.$m32 + var$4.$m02 * $z + var$4.$m12 * var$8 + var$4.$m22 * var$9;
        var$6.$m33 = var$6.$m33 + var$4.$m03 * $z + var$4.$m13 * var$8 + var$4.$m23 * var$9;
        if (!olo_GL11_isCompilingDisplayList)
            return;
        var$4 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$4, $rt_s(241));
        $rt_throw(var$4);
    }
    function olo_GL11_glRotatef($angle, $x, $y, $z) {
        var var$5;
        olo_GL11_$callClinit();
        oluv_Vector3f_set(olo_GL11_matrixVector, $x, $y, $z);
        var$5 = olo_GL11_getMatrix();
        oluv_Matrix4f_rotate($angle * 0.01745329238474369, olo_GL11_matrixVector, var$5, var$5);
        if (!olo_GL11_isCompilingDisplayList)
            return;
        var$5 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$5, $rt_s(241));
        $rt_throw(var$5);
    }
    function olo_GL11_glScalef($x, $y, $z) {
        var var$4, var$5, var$6;
        olo_GL11_$callClinit();
        oluv_Vector3f_set(olo_GL11_matrixVector, $x, $y, $z);
        var$4 = olo_GL11_getMatrix();
        var$5 = olo_GL11_matrixVector;
        var$6 = var$4 !== null ? var$4 : oluv_Matrix4f__init_();
        $x = var$4.$m00;
        $y = var$5.$x6;
        var$6.$m00 = $x * $y;
        var$6.$m01 = var$4.$m01 * $y;
        var$6.$m02 = var$4.$m02 * $y;
        var$6.$m03 = var$4.$m03 * $y;
        $x = var$4.$m10;
        $y = var$5.$y5;
        var$6.$m10 = $x * $y;
        var$6.$m11 = var$4.$m11 * $y;
        var$6.$m12 = var$4.$m12 * $y;
        var$6.$m13 = var$4.$m13 * $y;
        $x = var$4.$m20;
        $y = var$5.$z8;
        var$6.$m20 = $x * $y;
        var$6.$m21 = var$4.$m21 * $y;
        var$6.$m22 = var$4.$m22 * $y;
        var$6.$m23 = var$4.$m23 * $y;
        if (!olo_GL11_isCompilingDisplayList)
            return;
        var$4 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$4, $rt_s(241));
        $rt_throw(var$4);
    }
    function olo_GL11_glPushMatrix() {
        var var$1, var$2, var$3;
        olo_GL11_$callClinit();
        a: {
            switch (olo_GL11_matrixMode) {
                case 5888:
                    break;
                case 5889:
                    var$1 = olo_GL11_matProjPointer;
                    var$2 = olo_GL11_matProjV.data;
                    if (var$1 >= (var$2.length - 1 | 0)) {
                        ji_PrintStream_println(jl_System_err(), $rt_s(242));
                        break a;
                    }
                    var$1 = var$1 + 1 | 0;
                    olo_GL11_matProjPointer = var$1;
                    oluv_Matrix4f_load(var$2[var$1], var$2[var$1 - 1 | 0]);
                    break a;
                case 5890:
                    var$1 = olo_GL11_matTexPointer;
                    var$2 = olo_GL11_matTexV.data;
                    if (var$1 >= (var$2.length - 1 | 0)) {
                        ji_PrintStream_println(jl_System_err(), $rt_s(243));
                        break a;
                    }
                    var$1 = var$1 + 1 | 0;
                    olo_GL11_matTexPointer = var$1;
                    oluv_Matrix4f_load(var$2[var$1], var$2[var$1 - 1 | 0]);
                    break a;
                default:
            }
            var$3 = olo_GL11_matModelPointer;
            var$2 = olo_GL11_matModelV.data;
            if (var$3 >= (var$2.length - 1 | 0))
                ji_PrintStream_println(jl_System_err(), $rt_s(244));
            else {
                var$3 = var$3 + 1 | 0;
                olo_GL11_matModelPointer = var$3;
                oluv_Matrix4f_load(var$2[var$3], var$2[var$3 - 1 | 0]);
            }
        }
    }
    function olo_GL11_glPopMatrix() {
        var var$1;
        olo_GL11_$callClinit();
        a: {
            switch (olo_GL11_matrixMode) {
                case 5888:
                    break;
                case 5889:
                    var$1 = olo_GL11_matProjPointer;
                    if (var$1 <= 0) {
                        ji_PrintStream_println(jl_System_err(), $rt_s(245));
                        break a;
                    }
                    olo_GL11_matProjPointer = var$1 - 1 | 0;
                    break a;
                case 5890:
                    var$1 = olo_GL11_matTexPointer;
                    if (var$1 <= 0) {
                        ji_PrintStream_println(jl_System_err(), $rt_s(246));
                        break a;
                    }
                    olo_GL11_matTexPointer = var$1 - 1 | 0;
                    break a;
                default:
            }
            var$1 = olo_GL11_matModelPointer;
            if (var$1 <= 0)
                ji_PrintStream_println(jl_System_err(), $rt_s(247));
            else
                olo_GL11_matModelPointer = var$1 - 1 | 0;
        }
    }
    function olo_GL11_glGetFloat($pname, $param) {
        olo_GL11_$callClinit();
        a: {
            switch ($pname) {
                case 2982:
                    break;
                case 2983:
                    oluv_Matrix4f_store(olo_GL11_matProjV.data[olo_GL11_matProjPointer], $param);
                    break a;
                default:
            }
            oluv_Matrix4f_store(olo_GL11_matModelV.data[olo_GL11_matModelPointer], $param);
        }
    }
    function olo_GL11_glTexImage2D($target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels) {
        var $bufferData, $bufferLength, $array, $i;
        olo_GL11_$callClinit();
        if ($pixels === null) {
            $pixels = olo_GL11_webgl;
            $bufferData = null;
            $pixels.texImage2D(3553, $level, 32856, $width, $height, $border, 6408, 5121, $bufferData);
            return;
        }
        olo_GL11_bytesUploaded = olo_GL11_bytesUploaded + (jn_Buffer_remaining($pixels) * 4 | 0) | 0;
        if ($pixels instanceof jn_ByteBuffer) {
            $bufferLength = jn_Buffer_remaining($pixels);
            $array = olo_GL11_bufferUpload;
            $i = 0;
            while ($i < $bufferLength) {
                $target = (jn_ByteBufferImpl_get($pixels) & 255) << 16 >> 16;
                $i;
                $array[$i] = $target;
                $i = $i + 1 | 0;
            }
            $bufferData = new $rt_globals.Uint8Array(olo_GL11_bufferUpload.buffer, 0, $bufferLength);
            olo_GL11_webgl.texImage2D(3553, $level, 32856, $width, $height, $border, 6408, 5121, $bufferData);
        } else if (!($pixels instanceof jn_IntBuffer))
            ji_PrintStream_println(jl_System_err(), $rt_s(248));
        else {
            $bufferLength = jn_Buffer_remaining($pixels);
            $array = new $rt_globals.Int32Array(olo_GL11_bufferUpload.buffer);
            $i = 0;
            $pixels = $pixels;
            while ($i < $bufferLength) {
                $target = $pixels.$get4();
                $i;
                $array[$i] = $target;
                $i = $i + 1 | 0;
            }
            $pixels = olo_GL11_bufferUpload.buffer;
            $target = $bufferLength * 4 | 0;
            $bufferData = new $rt_globals.Uint8Array($pixels, 0, $target);
            olo_GL11_webgl.texImage2D(3553, $level, 32856, $width, $height, $border, 6408, 5121, $bufferData);
        }
    }
    function olo_GL11_glBufferData($p1, $p2, $p3) {
        var var$4;
        olo_GL11_$callClinit();
        var$4 = olo_GL11_webgl;
        $p2 = otji_JSWrapper_unwrap($p2);
        var$4.bufferData($p1, $p2, $p3);
    }
    function olo_GL11_glGetShaderMode0() {
        olo_GL11_$callClinit();
        return 0 | (!olo_GL11_colorArray ? 0 : 1) | (!olo_GL11_normalArray ? 0 : 2) | (!olo_GL11_textureArray ? 0 : 4);
    }
    function olo_GL11_glBindShaders($i) {
        var $s, var$3, var$4, var$5, var$6, var$7, var$8;
        olo_GL11_$callClinit();
        $s = m_WebGLShader_instance($i);
        olo_GL11_shaderWebGL = $s;
        olo_GL11_glUseProgram($s.$globject);
        if (olo_GL11_alpha) {
            var$3 = olo_GL11_alphaValue;
            if ($s.$alphaTestValue !== var$3) {
                $s.$alphaTestValue = var$3;
                olo_GL11_glUniform1f($s.$u_alphaTestF, var$3);
            }
        }
        var$4 = olo_GL11_colorR;
        var$3 = olo_GL11_colorG;
        var$5 = olo_GL11_colorB;
        var$6 = olo_GL11_colorA;
        if (!($s.$colorUniformR === var$4 && $s.$colorUniformG === var$3 && $s.$colorUniformB === var$5 && $s.$colorUniformA === var$6)) {
            $s.$colorUniformR = var$4;
            $s.$colorUniformG = var$3;
            $s.$colorUniformB = var$5;
            $s.$colorUniformA = var$6;
            olo_GL11_glUniform4f($s.$u_colorUniform, var$4, var$3, var$5, var$6);
        }
        if (olo_GL11_fogEnabled) {
            $i = (!olo_GL11_fogPremultiply ? 0 : 2) + olo_GL11_fogMode | 0;
            if ($s.$fogMode != $i) {
                $s.$fogMode = $i;
                olo_GL11_glUniform1i($s.$u_fogMode, $i % 2 | 0);
                olo_GL11_glUniform1f($s.$u_fogPremultiply, $i / 2 | 0);
            }
            var$3 = olo_GL11_fogColorR;
            var$5 = olo_GL11_fogColorG;
            var$6 = olo_GL11_fogColorB;
            var$4 = olo_GL11_fogColorA;
            if (!($s.$fogColorR === var$3 && $s.$fogColorG === var$5 && $s.$fogColorB === var$6 && $s.$fogColorA === var$4)) {
                $s.$fogColorR = var$3;
                $s.$fogColorG = var$5;
                $s.$fogColorB = var$6;
                $s.$fogColorA = var$4;
                olo_GL11_glUniform4f($s.$u_fogColor, var$3, var$5, var$6, var$4);
            }
            var$3 = olo_GL11_fogDensity;
            if ($s.$fogDensity !== var$3) {
                $s.$fogDensity = var$3;
                olo_GL11_glUniform1f($s.$u_fogDensity, var$3);
            }
            var$3 = olo_GL11_fogStart;
            var$5 = olo_GL11_fogEnd;
            if (!($s.$fogStart === var$3 && $s.$fogEnd0 === var$5)) {
                $s.$fogStart = var$3;
                $s.$fogEnd0 = var$5;
                olo_GL11_glUniform1f($s.$u_fogStart, var$3);
                olo_GL11_glUniform1f($s.$u_fogEnd, $s.$fogEnd0);
            }
        }
        var$7 = olo_GL11_matModelV.data[olo_GL11_matModelPointer];
        if (!jl_Object_equals(var$7, $s.$modelMatrix)) {
            oluv_Matrix4f_store0(oluv_Matrix4f_load($s.$modelMatrix, var$7), $s.$modelBuffer);
            olo_GL11_glUniformMat4fv($s.$u_matrix_m, $s.$modelBuffer);
        }
        var$7 = olo_GL11_matProjV.data[olo_GL11_matProjPointer];
        if (!jl_Object_equals(var$7, $s.$projectionMatrix)) {
            oluv_Matrix4f_store0(oluv_Matrix4f_load($s.$projectionMatrix, var$7), $s.$projectionBuffer);
            olo_GL11_glUniformMat4fv($s.$u_matrix_p, $s.$projectionBuffer);
        }
        var$7 = olo_GL11_matTexV.data[olo_GL11_matTexPointer];
        if (!jl_Object_equals(var$7, $s.$textureMatrix)) {
            oluv_Matrix4f_store0(oluv_Matrix4f_load($s.$textureMatrix, var$7), $s.$textureBuffer0);
            olo_GL11_glUniformMat4fv($s.$u_matrix_t, $s.$textureBuffer0);
        }
        if (olo_GL11_colorMaterial && olo_GL11_lighting) {
            var$3 = olo_GL11_normalX;
            var$5 = olo_GL11_normalY;
            var$6 = olo_GL11_normalZ;
            if (!($s.$normalUniformX === var$3 && $s.$normalUniformY === var$5 && $s.$normalUniformZ === var$6)) {
                $s.$normalUniformX = var$3;
                $s.$normalUniformY = var$5;
                $s.$normalUniformZ = var$6;
                olo_GL11_glUniform3f($s.$u_normalUniform, var$3, var$5, var$6);
            }
            var$7 = olo_GL11_lightPos0vec;
            var$8 = olo_GL11_lightPos1vec;
            if (!(oluv_Vector4f_equals(var$7, $s.$light0Pos) && oluv_Vector4f_equals(var$8, $s.$light1Pos))) {
                oluv_Vector4f_set($s.$light0Pos, var$7);
                oluv_Vector4f_set($s.$light1Pos, var$8);
                var$7 = $s.$u_light0Pos;
                var$8 = $s.$light0Pos;
                olo_GL11_glUniform3f(var$7, var$8.$x7, var$8.$y6, var$8.$z9);
                var$7 = $s.$u_light1Pos;
                var$8 = $s.$light1Pos;
                olo_GL11_glUniform3f(var$7, var$8.$x7, var$8.$y6, var$8.$z9);
            }
        }
        var$3 = olo_GL11_tex0X;
        var$5 = olo_GL11_tex0Y;
        if (!($s.$tex0x === var$3 && $s.$tex0y === var$5)) {
            $s.$tex0x = var$3;
            $s.$tex0y = var$5;
            $s = $s.$u_texCoordV0;
            if ($s !== null) {
                var$7 = olo_GL11_webgl;
                $s = $s.$obj3;
                var$7.uniform2f($s, var$3, var$5);
            }
        }
    }
    function olo_GL11_glCreateShader($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = new m_ShaderGL;
        var$2.$obj4 = olo_GL11_webgl.createShader($p1);
        return var$2;
    }
    function olo_GL11_glCreateProgram() {
        var var$1, var$2;
        olo_GL11_$callClinit();
        var$1 = new m_ProgramGL;
        var$1.$obj5 = olo_GL11_webgl.createProgram();
        var$2 = m_ProgramGL_progId + 1 | 0;
        m_ProgramGL_progId = var$2;
        var$1.$hashcode = var$2;
        return var$1;
    }
    function olo_GL11_glDetachShader($p1, $p2) {
        var var$3;
        olo_GL11_$callClinit();
        var$3 = olo_GL11_webgl;
        $p1 = $p1.$obj5;
        $p2 = $p2.$obj4;
        var$3.detachShader($p1, $p2);
    }
    function olo_GL11_glDeleteShader($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        $p1 = $p1.$obj4;
        var$2.deleteShader($p1);
    }
    function olo_GL11_glCompileShader($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        $p1 = $p1.$obj4;
        var$2.compileShader($p1);
    }
    function olo_GL11_glAttachShader($p1, $p2) {
        var var$3;
        olo_GL11_$callClinit();
        var$3 = olo_GL11_webgl;
        $p1 = $p1.$obj5;
        $p2 = $p2.$obj4;
        var$3.attachShader($p1, $p2);
    }
    function olo_GL11_glLinkProgram($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        $p1 = $p1.$obj5;
        var$2.linkProgram($p1);
    }
    function olo_GL11_glShaderSource($p1, $p2) {
        var var$3;
        olo_GL11_$callClinit();
        var$3 = olo_GL11_webgl;
        $p1 = $p1.$obj4;
        var$3.shaderSource($p1, $rt_ustr($p2));
    }
    function olo_GL11_glGetShaderHeader() {
        olo_GL11_$callClinit();
        return $rt_s(249);
    }
    function olo_GL11_glGetShaderInfoLog($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        $p1 = $p1.$obj4;
        return $rt_str(var$2.getShaderInfoLog($p1));
    }
    function olo_GL11_glGetProgramInfoLog($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        $p1 = $p1.$obj5;
        return $rt_str(var$2.getProgramInfoLog($p1));
    }
    function olo_GL11_glGetProgramLinked($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        $p1 = $p1.$obj5;
        return var$2.getProgramParameter($p1, 35714) != 1 ? 0 : 1;
    }
    function olo_GL11_glGetShaderCompiled($p1) {
        var var$2;
        olo_GL11_$callClinit();
        var$2 = olo_GL11_webgl;
        $p1 = $p1.$obj4;
        return var$2.getShaderParameter($p1, 35713) != 1 ? 0 : 1;
    }
    function olo_GL11_glBindAttributeLocation($p1, $p2, $p3) {
        var var$4;
        olo_GL11_$callClinit();
        var$4 = olo_GL11_webgl;
        $p1 = $p1.$obj5;
        var$4.bindAttribLocation($p1, $p2, $rt_ustr($p3));
    }
    function olo_GL11_glGetUniformLocation($p1, $p2) {
        var $u;
        olo_GL11_$callClinit();
        $u = olo_GL11_webgl;
        $p1 = $p1.$obj5;
        $u = $u.getUniformLocation($p1, $rt_ustr($p2));
        if ($u === null)
            $p1 = null;
        else {
            $p1 = new m_UniformGL;
            $p1.$obj3 = $u;
        }
        return $p1;
    }
    function olo_GL11_glUseProgram($p1) {
        var var$2, var$3, var$4;
        olo_GL11_$callClinit();
        if ($p1 !== null) {
            var$2 = olo_GL11_currentWebGLProgram;
            var$3 = $p1.$hashcode;
            if (var$2 != var$3) {
                olo_GL11_currentWebGLProgram = var$3;
                var$4 = olo_GL11_webgl;
                $p1 = $p1.$obj5;
                var$4.useProgram($p1);
            }
        }
    }
    function olo_GL11_glUniform1f($p1, $p2) {
        var var$3;
        olo_GL11_$callClinit();
        if ($p1 !== null) {
            var$3 = olo_GL11_webgl;
            $p1 = $p1.$obj3;
            var$3.uniform1f($p1, $p2);
        }
    }
    function olo_GL11_glUniform3f($p1, $p2, $p3, $p4) {
        var var$5;
        olo_GL11_$callClinit();
        if ($p1 !== null) {
            var$5 = olo_GL11_webgl;
            $p1 = $p1.$obj3;
            var$5.uniform3f($p1, $p2, $p3, $p4);
        }
    }
    function olo_GL11_glUniform4f($p1, $p2, $p3, $p4, $p5) {
        var var$6, var$7;
        olo_GL11_$callClinit();
        if ($p1 !== null) {
            var$6 = olo_GL11_webgl;
            var$7 = $p1.$obj3;
            var$6.uniform4f(var$7, $p2, $p3, $p4, $p5);
        }
    }
    function olo_GL11_glUniform1i($p1, $p2) {
        var var$3;
        olo_GL11_$callClinit();
        if ($p1 !== null) {
            var$3 = olo_GL11_webgl;
            $p1 = $p1.$obj3;
            var$3.uniform1i($p1, $p2);
        }
    }
    function olo_GL11_glUniformMat4fv($p1, $mat) {
        var var$3, var$4;
        olo_GL11_$callClinit();
        olo_GL11_mat4.set($mat.data);
        if ($p1 !== null) {
            var$3 = olo_GL11_webgl;
            var$4 = $p1.$obj3;
            $p1 = olo_GL11_mat4;
            var$3.uniformMatrix4fv(var$4, !!0, $p1);
        }
    }
    function olo_GL11_glEnableVertexAttribArray($p1) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.enableVertexAttribArray($p1);
    }
    function olo_GL11_glVertexAttribPointer($p1, $p2, $p3, $p4, $p5, $p6) {
        olo_GL11_$callClinit();
        olo_GL11_webgl.vertexAttribPointer($p1, $p2, $p3, !!$p4, $p5, $p6);
    }
    function olo_GL11_glCreateVertexArray() {
        var var$1;
        olo_GL11_$callClinit();
        var$1 = new m_BufferArrayGL;
        var$1.$obj1 = olo_GL11_webgl.createVertexArray();
        var$1.$isQuadBufferBound = 0;
        return var$1;
    }
    function olo_GL11_glCreateBuffer() {
        var var$1;
        olo_GL11_$callClinit();
        var$1 = new m_BufferGL;
        var$1.$obj6 = olo_GL11_webgl.createBuffer();
        return var$1;
    }
    function olo_GL11_glBindBuffer($p1, $p2) {
        var var$3;
        olo_GL11_$callClinit();
        var$3 = olo_GL11_webgl;
        $p2 = $p2 !== null ? $p2.$obj6 : null;
        var$3.bindBuffer($p1, $p2);
    }
    function olo_GL11_glTexSubImage2D($target, $level, $xoffset, $yoffset, $width, $height, $format, $type, $pixels) {
        var $length, $deevis, $i, $data;
        olo_GL11_$callClinit();
        olo_GL11_bytesUploaded = olo_GL11_bytesUploaded + (jn_Buffer_remaining($pixels) * 4 | 0) | 0;
        $length = jn_Buffer_remaining($pixels);
        $deevis = new $rt_globals.Int32Array(olo_GL11_bufferUpload.buffer);
        $i = 0;
        while ($i < $length) {
            $format = jn_ByteBufferImpl_get($pixels);
            $i;
            $deevis[$i] = $format;
            $i = $i + 1 | 0;
        }
        $pixels = olo_GL11_bufferUpload.buffer;
        $format = $length * 4 | 0;
        $data = new $rt_globals.Uint8Array($pixels, 0, $format);
        switch ($target) {
            case 3553:
                break;
            default:
        }
        olo_GL11_webgl.texSubImage2D(3553, $level, $xoffset, $yoffset, $width, $height, 6408, 5121, $data);
    }
    function olo_GL11_glGenTextures($buf) {
        var $i, var$3, var$4, var$5, var$6, var$7;
        olo_GL11_$callClinit();
        $i = $buf.$position0;
        while ($i < $buf.$limit1) {
            var$3 = olo_GL11_textureIndex + 1 | 0;
            olo_GL11_textureIndex = var$3;
            if (var$3 >= 256)
                olo_GL11_textureIndex = 1;
            var$4 = olo_GL11_textures;
            var$5 = jl_Integer_valueOf(olo_GL11_textureIndex);
            var$6 = new m_TextureGL;
            var$7 = olo_GL11_webgl.createTexture();
            var$6.$w = (-1);
            var$6.$h1 = (-1);
            var$6.$nearest = 1;
            var$6.$anisotropic = 0;
            var$6.$obj2 = var$7;
            ju_HashMap_put(var$4, var$5, var$6);
            jn_IntBufferImpl_put0($buf, $i, olo_GL11_textureIndex);
            $i = $i + 1 | 0;
        }
    }
    function olo_GL11_glFogi($pname, $param) {
        olo_GL11_$callClinit();
        a: {
            if ($pname == 2917) {
                b: {
                    switch ($param) {
                        case 2048:
                            break;
                        case 9729:
                            break b;
                        default:
                            break b;
                    }
                    olo_GL11_fogMode = 2;
                    break a;
                }
                olo_GL11_fogMode = 1;
            }
        }
    }
    function olo_GL11_glFogf($pname, $param) {
        olo_GL11_$callClinit();
        a: {
            switch ($pname) {
                case 2914:
                    break;
                case 2915:
                    olo_GL11_fogStart = $param;
                    break a;
                case 2916:
                    olo_GL11_fogEnd = $param;
                    break a;
                default:
                    break a;
            }
            olo_GL11_fogDensity = $param;
        }
    }
    function olo_GL11_glArrayByteLength($obj) {
        olo_GL11_$callClinit();
        return (otji_JSWrapper_unwrap($obj)).byteLength;
    }
    function olo_GL11_gluPerspective($fovy, $aspect, $zNear, $zFar) {
        var $res, var$6, $cotangent;
        olo_GL11_$callClinit();
        $res = olo_GL11_getMatrix();
        var$6 = $fovy * 0.01745329238474369 * 0.5;
        $cotangent = jl_Math_cos(var$6) / jl_Math_sin(var$6);
        $res.$m00 = $cotangent / $aspect;
        $res.$m01 = 0.0;
        $res.$m02 = 0.0;
        $res.$m03 = 0.0;
        $res.$m10 = 0.0;
        $res.$m11 = $cotangent;
        $res.$m12 = 0.0;
        $res.$m13 = 0.0;
        $res.$m20 = 0.0;
        $res.$m21 = 0.0;
        $fovy = $zFar + $zNear;
        $aspect = $zFar - $zNear;
        $res.$m22 = $fovy / $aspect;
        $res.$m23 = (-1.0);
        $res.$m30 = 0.0;
        $res.$m31 = 0.0;
        $res.$m32 = 2.0 * $zFar * $zNear / $aspect;
        $res.$m33 = 0.0;
    }
    function olo_GL11_glViewport($x, $y, $width, $height) {
        var var$5;
        olo_GL11_$callClinit();
        var$5 = olo_GL11_viewportCache.data;
        var$5[0] = $x;
        var$5[1] = $y;
        var$5[2] = $width;
        var$5[3] = $height;
        olo_GL11_webgl.viewport($x, $y, $width, $height);
    }
    function olo_GL11_glShadeModel($shade) {
        olo_GL11_$callClinit();
    }
    function olo_GL11__clinit_() {
        var $i, var$2;
        olo_GL11_isCompilingDisplayList = 0;
        olo_GL11_compilingDisplayList = null;
        olo_GL11_displayLists = ju_HashMap__init_();
        olo_GL11_displayListsInitialized = ju_HashMap__init_();
        olo_GL11_displayListId = 0;
        olo_GL11_blankUploadArray = otji_JSWrapper_wrap(new $rt_globals.Int32Array(525000));
        olo_GL11_bufferUpload = new $rt_globals.Uint8Array(new $rt_globals.ArrayBuffer(4194304));
        olo_GL11_appendbufferindex = 0;
        olo_GL11_appendbuffer = new $rt_globals.Int32Array(new $rt_globals.ArrayBuffer(2100000));
        olo_GL11_webgl = m_WebGL_webgl;
        olo_GL11_alphaValue = 0.10000000149011612;
        olo_GL11_alpha = 0;
        olo_GL11_currentWebGLProgram = (-1);
        olo_GL11_mat2 = new $rt_globals.Float32Array(4);
        olo_GL11_mat3 = new $rt_globals.Float32Array(9);
        olo_GL11_mat4 = new $rt_globals.Float32Array(16);
        olo_GL11_textures = ju_HashMap__init_1(256);
        olo_GL11_textureIndex = 0;
        olo_GL11_textureArray = 0;
        olo_GL11_colorArray = 0;
        olo_GL11_normalArray = 0;
        olo_GL11_quadsToTrianglesBuffer = null;
        olo_GL11_currentArray = null;
        olo_GL11_bytesUploaded = 0;
        olo_GL11_vertexDrawn = 0;
        olo_GL11_triangleDrawn = 0;
        olo_GL11_fogColorR = 1.0;
        olo_GL11_fogColorG = 1.0;
        olo_GL11_fogColorB = 1.0;
        olo_GL11_fogColorA = 1.0;
        olo_GL11_fogMode = 1;
        olo_GL11_fogEnabled = 0;
        olo_GL11_fogPremultiply = 0;
        olo_GL11_fogStart = 1.0;
        olo_GL11_fogEnd = 1.0;
        olo_GL11_fogDensity = 1.0;
        olo_GL11_texture2D = 0;
        olo_GL11_lighting = 0;
        olo_GL11_colorMaterial = 0;
        olo_GL11_normalX = 1.0;
        olo_GL11_normalY = 0.0;
        olo_GL11_normalZ = 0.0;
        olo_GL11_tex0X = 0.0;
        olo_GL11_tex0Y = 0.0;
        olo_GL11_colorR = 1.0;
        olo_GL11_colorG = 1.0;
        olo_GL11_colorB = 1.0;
        olo_GL11_colorA = 1.0;
        olo_GL11_matrixMode = 5888;
        olo_GL11_matModelV = $rt_createArray(oluv_Matrix4f, 32);
        olo_GL11_matModelPointer = 0;
        olo_GL11_matProjV = $rt_createArray(oluv_Matrix4f, 6);
        olo_GL11_matProjPointer = 0;
        olo_GL11_matTexV = $rt_createArray(oluv_Matrix4f, 16);
        olo_GL11_matTexPointer = 0;
        $i = 0;
        while (true) {
            var$2 = olo_GL11_matModelV.data;
            if ($i >= var$2.length)
                break;
            var$2[$i] = oluv_Matrix4f__init_();
            $i = $i + 1 | 0;
        }
        $i = 0;
        while (true) {
            var$2 = olo_GL11_matProjV.data;
            if ($i >= var$2.length)
                break;
            var$2[$i] = oluv_Matrix4f__init_();
            $i = $i + 1 | 0;
        }
        $i = 0;
        while (true) {
            var$2 = olo_GL11_matTexV.data;
            if ($i >= var$2.length)
                break;
            var$2[$i] = oluv_Matrix4f__init_();
            $i = $i + 1 | 0;
        }
        olo_GL11_matrixVector = new oluv_Vector3f;
        olo_GL11_unprojA = oluv_Matrix4f__init_();
        olo_GL11_unprojB = oluv_Matrix4f__init_();
        olo_GL11_unprojC = new oluv_Vector4f;
        olo_GL11_lightPos1vec = new oluv_Vector4f;
        olo_GL11_lightPos0vec = new oluv_Vector4f;
        olo_GL11_vertexBuffer = olo_GL11_webgl.createBuffer();
        olo_GL11_texCoordBuffer = olo_GL11_webgl.createBuffer();
        olo_GL11_viewportCache = $rt_createIntArray(4);
        olo_GL11_materialAmbientR = 0.30000001192092896;
        olo_GL11_materialAmbientG = 0.30000001192092896;
        olo_GL11_materialAmbientB = 0.30000001192092896;
        olo_GL11_materialAmbientA = 1.0;
        olo_GL11_materialDiffuseR = 0.800000011920929;
        olo_GL11_materialDiffuseG = 0.5;
        olo_GL11_materialDiffuseB = 0.30000001192092896;
        olo_GL11_materialDiffuseA = 1.0;
        olo_GL11_materialSpecularR = 0.4000000059604645;
        olo_GL11_materialSpecularG = 0.4000000059604645;
        olo_GL11_materialSpecularB = 0.4000000059604645;
        olo_GL11_materialSpecularA = 1.0;
        olo_GL11_materialEmissionR = 0.0;
        olo_GL11_materialEmissionG = 0.0;
        olo_GL11_materialEmissionB = 0.0;
        olo_GL11_materialEmissionA = 1.0;
        olo_GL11_materialBackAmbientR = 0.20000000298023224;
        olo_GL11_materialBackAmbientG = 0.20000000298023224;
        olo_GL11_materialBackAmbientB = 0.4000000059604645;
        olo_GL11_materialBackAmbientA = 1.0;
        olo_GL11_materialBackDiffuseR = 0.6000000238418579;
        olo_GL11_materialBackDiffuseG = 0.30000001192092896;
        olo_GL11_materialBackDiffuseB = 0.5;
        olo_GL11_materialBackDiffuseA = 1.0;
        olo_GL11_materialBackSpecularR = 0.20000000298023224;
        olo_GL11_materialBackSpecularG = 0.20000000298023224;
        olo_GL11_materialBackSpecularB = 0.20000000298023224;
        olo_GL11_materialBackSpecularA = 1.0;
        olo_GL11_materialBackEmissionR = 0.0;
        olo_GL11_materialBackEmissionG = 0.0;
        olo_GL11_materialBackEmissionB = 0.20000000298023224;
        olo_GL11_materialBackEmissionA = 1.0;
        olo_GL11_shaderWebGL = null;
    }
    function cmm_GameSettings() {
        var a = this; jl_Object.call(a);
        a.$music = 0;
        a.$sound = 0;
        a.$invertMouse = 0;
        a.$showFrameRate = 0;
        a.$viewDistance = 0;
        a.$viewBobbing = 0;
        a.$anaglyph = 0;
        a.$limitFramerate = 0;
        a.$forwardKey = null;
        a.$leftKey = null;
        a.$backKey = null;
        a.$rightKey = null;
        a.$jumpKey = null;
        a.$buildKey = null;
        a.$chatKey = null;
        a.$toggleFogKey = null;
        a.$saveLocationKey = null;
        a.$loadLocationKey = null;
        a.$bindings = null;
        a.$minecraft4 = null;
        a.$settingsFile = null;
        a.$settingCount = 0;
    }
    var cmm_GameSettings_renderDistances = null;
    function cmm_GameSettings_$callClinit() {
        cmm_GameSettings_$callClinit = $rt_eraseClinit(cmm_GameSettings);
        cmm_GameSettings__clinit_();
    }
    function cmm_GameSettings__init_(var_0, var_1) {
        var var_2 = new cmm_GameSettings();
        cmm_GameSettings__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmm_GameSettings__init_0($this, $minecraft, $minecraftFolder) {
        var var$3;
        cmm_GameSettings_$callClinit();
        $this.$music = 1;
        $this.$sound = 1;
        $this.$invertMouse = 0;
        $this.$showFrameRate = 0;
        $this.$viewDistance = 0;
        $this.$viewBobbing = 1;
        $this.$anaglyph = 0;
        $this.$limitFramerate = 0;
        $this.$forwardKey = cmm_KeyBinding__init_($rt_s(250), 17);
        $this.$leftKey = cmm_KeyBinding__init_($rt_s(251), 30);
        $this.$backKey = cmm_KeyBinding__init_($rt_s(252), 31);
        $this.$rightKey = cmm_KeyBinding__init_($rt_s(253), 32);
        $this.$jumpKey = cmm_KeyBinding__init_($rt_s(254), 57);
        $this.$buildKey = cmm_KeyBinding__init_($rt_s(255), 48);
        $this.$chatKey = cmm_KeyBinding__init_($rt_s(256), 20);
        $this.$toggleFogKey = cmm_KeyBinding__init_($rt_s(257), 33);
        $this.$saveLocationKey = cmm_KeyBinding__init_($rt_s(258), 28);
        var$3 = cmm_KeyBinding__init_($rt_s(259), 19);
        $this.$loadLocationKey = var$3;
        $this.$bindings = $rt_createArrayFromData(cmm_KeyBinding, [$this.$forwardKey, $this.$leftKey, $this.$backKey, $this.$rightKey, $this.$jumpKey, $this.$buildKey, $this.$chatKey, $this.$toggleFogKey, $this.$saveLocationKey, var$3]);
        $this.$settingCount = 8;
        $this.$minecraft4 = $minecraft;
        $this.$settingsFile = ji_File__init_0($minecraftFolder, $rt_s(260));
        cmm_GameSettings_load($this);
    }
    function cmm_GameSettings_getBinding($this, $key) {
        var var$2, var$3, var$4, var$5;
        var$2 = $this.$bindings.data;
        var$3 = var$2[$key].$name4;
        $key = var$2[$key].$key;
        oli_Keyboard_$callClinit();
        var$4 = oli_Keyboard_keyName.data[$key];
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$5, var$3), $rt_s(7)), var$4);
        return jl_AbstractStringBuilder_toString(var$5);
    }
    function cmm_GameSettings_toggleSetting($this, $setting, $fogValue) {
        var $textureManager, $iterator, $i, $s, $image, $var6, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var6 = $thread.pop();$image = $thread.pop();$s = $thread.pop();$i = $thread.pop();$iterator = $thread.pop();$textureManager = $thread.pop();$fogValue = $thread.pop();$setting = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if (!$setting)
                $this.$music = $this.$music ? 0 : 1;
            if ($setting == 1)
                $this.$sound = $this.$sound ? 0 : 1;
            if ($setting == 2)
                $this.$invertMouse = $this.$invertMouse ? 0 : 1;
            if ($setting == 3)
                $this.$showFrameRate = $this.$showFrameRate ? 0 : 1;
            if ($setting == 4)
                $this.$viewDistance = ($this.$viewDistance + $fogValue | 0) & 3;
            if ($setting == 5)
                $this.$viewBobbing = $this.$viewBobbing ? 0 : 1;
            a: {
                if ($setting == 6) {
                    $this.$anaglyph = $this.$anaglyph ? 0 : 1;
                    $textureManager = $this.$minecraft4.$textureManager;
                    $iterator = ju_HashMap$1_iterator(ju_HashMap_keySet($textureManager.$textureImages));
                    while (ju_HashMap$AbstractMapIterator_hasNext($iterator)) {
                        $i = (ju_HashMap$KeyIterator_next($iterator)).$value;
                        cmmr_TextureManager_load0($textureManager, ju_HashMap_get($textureManager.$textureImages, jl_Integer_valueOf($i)), $i);
                    }
                    $iterator = ju_HashMap$1_iterator(ju_HashMap_keySet($textureManager.$textures));
                    while (true) {
                        if (!ju_HashMap$AbstractMapIterator_hasNext($iterator))
                            break a;
                        $s = ju_HashMap$KeyIterator_next($iterator);
                        try {
                            $image = jl_Class_getResourceAsStream($rt_cls(cmmr_TextureManager), $s);
                            $ptr = 1;
                            continue main;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $var6 = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        jl_Throwable_printStackTrace($var6);
                    }
                }
            }
            if ($setting == 7)
                $this.$limitFramerate = $this.$limitFramerate ? 0 : 1;
            cmm_GameSettings_save($this);
            return;
        case 1:
            b: {
                try {
                    $tmp = nPm_ImageIO_read($image);
                    if ($rt_suspending()) {
                        break main;
                    }
                    $image = $tmp;
                    cmmr_TextureManager_load0($textureManager, $image, jl_Integer_intValue(ju_HashMap_get($textureManager.$textures, $s)));
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $var6 = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($var6);
            }
            while (ju_HashMap$AbstractMapIterator_hasNext($iterator)) {
                $s = ju_HashMap$KeyIterator_next($iterator);
                try {
                    $image = jl_Class_getResourceAsStream($rt_cls(cmmr_TextureManager), $s);
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $var6 = $$je;
                    } else {
                        throw $$e;
                    }
                }
                jl_Throwable_printStackTrace($var6);
            }
            if ($setting == 7)
                $this.$limitFramerate = $this.$limitFramerate ? 0 : 1;
            cmm_GameSettings_save($this);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $setting, $fogValue, $textureManager, $iterator, $i, $s, $image, $var6, $ptr);
    }
    function cmm_GameSettings_getSetting($this, $id) {
        var var$2, var$3;
        a: {
            if (!$id) {
                var$2 = !$this.$music ? $rt_s(261) : $rt_s(262);
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(263)), var$2);
                var$2 = jl_AbstractStringBuilder_toString(var$3);
                break a;
            }
            if ($id == 1) {
                var$2 = !$this.$sound ? $rt_s(261) : $rt_s(262);
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(264)), var$2);
                var$2 = jl_AbstractStringBuilder_toString(var$3);
                break a;
            }
            if ($id == 2) {
                var$2 = !$this.$invertMouse ? $rt_s(261) : $rt_s(262);
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(265)), var$2);
                var$2 = jl_AbstractStringBuilder_toString(var$3);
                break a;
            }
            if ($id == 3) {
                var$2 = !$this.$showFrameRate ? $rt_s(261) : $rt_s(262);
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(266)), var$2);
                var$2 = jl_AbstractStringBuilder_toString(var$3);
                break a;
            }
            if ($id == 4) {
                cmm_GameSettings_$callClinit();
                var$2 = cmm_GameSettings_renderDistances.data[$this.$viewDistance];
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(267)), var$2);
                var$2 = jl_AbstractStringBuilder_toString(var$3);
                break a;
            }
            if ($id == 5) {
                var$2 = !$this.$viewBobbing ? $rt_s(261) : $rt_s(262);
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(268)), var$2);
                var$2 = jl_AbstractStringBuilder_toString(var$3);
                break a;
            }
            if ($id == 6) {
                var$2 = !$this.$anaglyph ? $rt_s(261) : $rt_s(262);
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(269)), var$2);
                var$2 = jl_AbstractStringBuilder_toString(var$3);
                break a;
            }
            if ($id != 7) {
                var$2 = $rt_s(3);
                break a;
            }
            var$2 = !$this.$limitFramerate ? $rt_s(261) : $rt_s(262);
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(270)), var$2);
            var$2 = jl_AbstractStringBuilder_toString(var$3);
        }
        return var$2;
    }
    function cmm_GameSettings_load($this) {
        var $reader, $fileReader, $setting, $index, var$5, $e, var$7, $$je;
        a: {
            try {
                if (ji_File_exists($this.$settingsFile)) {
                    $reader = ji_BufferedReader__init_(ji_FileReader__init_($this.$settingsFile));
                    while (true) {
                        $fileReader = ji_BufferedReader_readLine($reader);
                        if ($fileReader === null)
                            break;
                        $setting = (jl_String_split($fileReader, $rt_s(271))).data;
                        if (jl_String_equals($setting[0], $rt_s(272)))
                            $this.$music = jl_String_equals($setting[1], $rt_s(19));
                        if (jl_String_equals($setting[0], $rt_s(273)))
                            $this.$sound = jl_String_equals($setting[1], $rt_s(19));
                        if (jl_String_equals($setting[0], $rt_s(274)))
                            $this.$invertMouse = jl_String_equals($setting[1], $rt_s(19));
                        if (jl_String_equals($setting[0], $rt_s(275)))
                            $this.$showFrameRate = jl_String_equals($setting[1], $rt_s(19));
                        if (jl_String_equals($setting[0], $rt_s(276)))
                            $this.$viewDistance = jl_Integer_parseInt0($setting[1]);
                        if (jl_String_equals($setting[0], $rt_s(277)))
                            $this.$viewBobbing = jl_String_equals($setting[1], $rt_s(19));
                        if (jl_String_equals($setting[0], $rt_s(278)))
                            $this.$anaglyph = jl_String_equals($setting[1], $rt_s(19));
                        if (jl_String_equals($setting[0], $rt_s(279)))
                            $this.$limitFramerate = jl_String_equals($setting[1], $rt_s(19));
                        $index = 0;
                        while (true) {
                            var$5 = $this.$bindings.data;
                            if ($index >= var$5.length)
                                break;
                            $fileReader = $setting[0];
                            $e = var$5[$index].$name4;
                            var$7 = jl_StringBuilder__init_();
                            jl_StringBuilder_append(jl_StringBuilder_append(var$7, $rt_s(280)), $e);
                            if (jl_String_equals($fileReader, jl_StringBuilder_toString(var$7)))
                                $this.$bindings.data[$index].$key = jl_Integer_parseInt0($setting[1]);
                            $index = $index + 1 | 0;
                        }
                    }
                    ji_BufferedReader_close($reader);
                }
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            ji_PrintStream_println(jl_System_out(), $rt_s(281));
            jl_Throwable_printStackTrace($e);
        }
    }
    function cmm_GameSettings_save($this) {
        var $fileWriter, $writer, $binding, $e, var$5, var$6, $$je;
        a: {
            b: {
                try {
                    $fileWriter = ji_FileWriter__init_($this.$settingsFile);
                    $writer = ji_PrintWriter__init_($fileWriter);
                    $binding = $this.$music;
                    $fileWriter = jl_StringBuilder__init_();
                    jl_StringBuilder_append4(jl_StringBuilder_append($fileWriter, $rt_s(282)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($fileWriter));
                    $binding = $this.$sound;
                    $fileWriter = jl_StringBuilder__init_();
                    jl_StringBuilder_append4(jl_StringBuilder_append($fileWriter, $rt_s(283)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($fileWriter));
                    $binding = $this.$invertMouse;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append4(jl_StringBuilder_append($e, $rt_s(284)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($e));
                    $binding = $this.$showFrameRate;
                    $fileWriter = jl_StringBuilder__init_();
                    jl_StringBuilder_append4(jl_StringBuilder_append($fileWriter, $rt_s(285)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($fileWriter));
                    $binding = $this.$viewDistance;
                    $fileWriter = jl_StringBuilder__init_();
                    jl_StringBuilder_append0(jl_StringBuilder_append($fileWriter, $rt_s(286)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($fileWriter));
                    $binding = $this.$viewBobbing;
                    $fileWriter = jl_StringBuilder__init_();
                    jl_StringBuilder_append4(jl_StringBuilder_append($fileWriter, $rt_s(287)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($fileWriter));
                    $binding = $this.$anaglyph;
                    $e = jl_StringBuilder__init_();
                    jl_StringBuilder_append4(jl_StringBuilder_append($e, $rt_s(288)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($e));
                    $binding = $this.$limitFramerate;
                    $fileWriter = jl_StringBuilder__init_();
                    jl_StringBuilder_append4(jl_StringBuilder_append($fileWriter, $rt_s(289)), $binding);
                    ji_PrintWriter_println($writer, jl_StringBuilder_toString($fileWriter));
                    $binding = 0;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                        break b;
                    } else {
                        throw $$e;
                    }
                }
                while (true) {
                    try {
                        var$5 = $this.$bindings.data;
                        if ($binding >= var$5.length)
                            break;
                        $fileWriter = var$5[$binding].$name4;
                        var$6 = var$5[$binding].$key;
                        $e = jl_StringBuilder__init_();
                        jl_StringBuilder_append0(jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append($e, $rt_s(280)), $fileWriter), 58), var$6);
                        ji_PrintWriter_println($writer, jl_StringBuilder_toString($e));
                        $binding = $binding + 1 | 0;
                        continue;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $e = $$je;
                            break b;
                        } else {
                            throw $$e;
                        }
                    }
                }
                try {
                    ji_PrintWriter_close($writer);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
            }
            ji_PrintStream_println(jl_System_out(), $rt_s(290));
            jl_Throwable_printStackTrace($e);
        }
    }
    function cmm_GameSettings__clinit_() {
        cmm_GameSettings_renderDistances = $rt_createArrayFromData(jl_String, [$rt_s(291), $rt_s(292), $rt_s(293), $rt_s(294)]);
    }
    function ji_File() {
        jl_Object.call(this);
        this.$path = null;
    }
    var ji_File_separatorChar = 0;
    var ji_File_separator = null;
    var ji_File_pathSeparatorChar = 0;
    var ji_File_pathSeparator = null;
    function ji_File_$callClinit() {
        ji_File_$callClinit = $rt_eraseClinit(ji_File);
        ji_File__clinit_();
    }
    function ji_File__init_0(var_0, var_1) {
        var var_2 = new ji_File();
        ji_File__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function ji_File__init_(var_0) {
        var var_1 = new ji_File();
        ji_File__init_2(var_1, var_0);
        return var_1;
    }
    function ji_File__init_1($this, $dir, $name) {
        var var$3, var$4, var$5;
        ji_File_$callClinit();
        ju_Objects_requireNonNull($name);
        if ($dir === null)
            $dir = ji_File_fixSlashes($name);
        else {
            $dir = ji_File_fixSlashes($dir.$path);
            if (!(jl_String_isEmpty($name) && !jl_String_isEmpty($dir))) {
                $name = ji_File_fixSlashes($name);
                var$3 = 0;
                while (var$3 < jl_String_length($name) && jl_String_charAt($name, var$3) == ji_File_separatorChar) {
                    var$3 = var$3 + 1 | 0;
                }
                if (var$3 > 0)
                    $name = jl_String_substring($name, var$3);
                if (!jl_String_isEmpty($dir) && jl_String_charAt($dir, jl_String_length($dir) - 1 | 0) == ji_File_separatorChar) {
                    var$4 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$4);
                    jl_StringBuilder_append(jl_StringBuilder_append(var$4, $dir), $name);
                    $dir = jl_AbstractStringBuilder_toString(var$4);
                } else {
                    var$5 = ji_File_separatorChar;
                    var$4 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$4);
                    $dir = jl_StringBuilder_append(var$4, $dir);
                    jl_AbstractStringBuilder_append($dir, var$5);
                    jl_StringBuilder_append($dir, $name);
                    $dir = jl_AbstractStringBuilder_toString(var$4);
                }
            }
        }
        $this.$path = $dir;
    }
    function ji_File__init_2($this, $path) {
        ji_File_$callClinit();
        ju_Objects_requireNonNull($path);
        $this.$path = ji_File_fixSlashes($path);
    }
    function ji_File_getName($this) {
        var var$1, $separatorIndex, var$3;
        var$1 = $this.$path;
        ji_File_$callClinit();
        $separatorIndex = jl_String_lastIndexOf1(var$1, ji_File_separator, jl_String_length(var$1));
        if ($separatorIndex < 0)
            var$3 = $this.$path;
        else {
            var$3 = $this.$path;
            var$3 = jl_String_substring0(var$3, $separatorIndex + 1 | 0, jl_String_length(var$3));
        }
        return var$3;
    }
    function ji_File_fs() {
        var var$1, var$2, var$3;
        ji_File_$callClinit();
        if (otrf_VirtualFileSystemProvider_instance === null) {
            var$1 = new otrfm_InMemoryVirtualFileSystem;
            var$2 = new otrfm_InMemoryVirtualDirectory;
            otrfm_AbstractInMemoryVirtualFile__init_(var$2, $rt_s(3));
            var$3 = new ju_LinkedHashMap;
            ju_HashMap__init_0(var$3);
            var$3.$accessOrder = 0;
            var$3.$head0 = null;
            var$2.$children = var$3;
            var$1.$root = var$2;
            var$1.$userDir = $rt_s(6);
            otrf_VirtualFileSystemProvider_instance = var$1;
        }
        return otrf_VirtualFileSystemProvider_instance;
    }
    function ji_File_isAbsolutePath($this, $path) {
        ji_File_fs();
        return !jl_String_isEmpty($path) && jl_String_charAt($path, 0) == ji_File_separatorChar ? 1 : 0;
    }
    function ji_File_isDriveLetter($c) {
        ji_File_$callClinit();
        a: {
            b: {
                if (!($c >= 97 && $c <= 122)) {
                    if ($c < 65)
                        break b;
                    if ($c > 90)
                        break b;
                }
                $c = 1;
                break a;
            }
            $c = 0;
        }
        return $c;
    }
    function ji_File_getCanonicalPathImpl($this) {
        var $result, $numSeparators, var$3, $i, $sepLocations, var$6, $newResult, $newLength, $lastSlash, $foundDots, $i_0, $j;
        if (ji_File_isAbsolutePath($this, $this.$path))
            $result = $this.$path;
        else {
            $result = (ji_File_fs()).$userDir;
            if (!jl_String_isEmpty($this.$path)) {
                $numSeparators = jl_String_length($result);
                var$3 = new jl_StringBuilder;
                var$3.$buffer1 = $rt_createCharArray(jl_String_length($result));
                $i = 0;
                while (true) {
                    $sepLocations = var$3.$buffer1.data;
                    if ($i >= $sepLocations.length)
                        break;
                    $sepLocations[$i] = jl_String_charAt($result, $i);
                    $i = $i + 1 | 0;
                }
                var$3.$length0 = jl_String_length($result);
                if (jl_String_charAt($result, $numSeparators - 1 | 0) == ji_File_separatorChar)
                    ji_File_fs();
                else if (jl_String_charAt($this.$path, 0) != ji_File_separatorChar)
                    jl_StringBuilder_append1(var$3, ji_File_separator);
                jl_StringBuilder_append1(var$3, $this.$path);
                $result = jl_AbstractStringBuilder_toString(var$3);
            }
        }
        $numSeparators = 1;
        $i = 0;
        while ($i < jl_String_length($result)) {
            if (jl_String_charAt($result, $i) == ji_File_separatorChar)
                $numSeparators = $numSeparators + 1 | 0;
            $i = $i + 1 | 0;
        }
        var$6 = $rt_createIntArray($numSeparators).data;
        ji_File_fs();
        $newResult = $rt_createCharArray(jl_String_length($result) + 1 | 0);
        $sepLocations = $newResult.data;
        $newLength = 0;
        $lastSlash = 0;
        $foundDots = 0;
        var$6[$lastSlash] = 0;
        $i_0 = 0;
        a: {
            while (true) {
                if ($i_0 > jl_String_length($result))
                    break a;
                if ($i_0 < 0) {
                    $numSeparators = $newLength + 1 | 0;
                    $sepLocations[$newLength] = jl_String_charAt($result, $i_0);
                } else if ($i_0 != jl_String_length($result) && jl_String_charAt($result, $i_0) != ji_File_separatorChar) {
                    if (jl_String_charAt($result, $i_0) == 46) {
                        $foundDots = $foundDots + 1 | 0;
                        $numSeparators = $newLength;
                    } else {
                        if ($foundDots > 0) {
                            $j = 0;
                            while ($j < $foundDots) {
                                $numSeparators = $newLength + 1 | 0;
                                $sepLocations[$newLength] = 46;
                                $j = $j + 1 | 0;
                                $newLength = $numSeparators;
                            }
                        }
                        $numSeparators = $newLength + 1 | 0;
                        $sepLocations[$newLength] = jl_String_charAt($result, $i_0);
                        $foundDots = 0;
                    }
                } else {
                    if ($i_0 == jl_String_length($result) && !$foundDots)
                        break;
                    $numSeparators = $rt_compare($foundDots, 1);
                    if (!$numSeparators) {
                        $foundDots = 0;
                        $numSeparators = $newLength;
                    } else if ($numSeparators <= 0) {
                        $lastSlash = $lastSlash + 1 | 0;
                        var$6[$lastSlash] = $newLength;
                        $numSeparators = $newLength + 1 | 0;
                        $sepLocations[$newLength] = ji_File_separatorChar;
                    } else {
                        $numSeparators = $foundDots - 1 | 0;
                        $lastSlash = $lastSlash <= $numSeparators ? 0 : $lastSlash - $numSeparators | 0;
                        $numSeparators = var$6[$lastSlash] + 1 | 0;
                        $foundDots = 0;
                    }
                }
                $i_0 = $i_0 + 1 | 0;
                $newLength = $numSeparators;
            }
        }
        if ($newLength > 1 && $sepLocations[$newLength - 1 | 0] == ji_File_separatorChar)
            $newLength = $newLength + (-1) | 0;
        return jl_String__init_5($newResult, 0, $newLength);
    }
    function ji_File_getParent($this) {
        var $length, var$2, $index, var$4;
        $length = jl_String_length($this.$path);
        var$2 = $this.$path;
        ji_File_$callClinit();
        $index = jl_String_lastIndexOf(var$2, ji_File_separatorChar);
        if ($index != (-1)) {
            var$4 = jl_String_charAt($this.$path, $length - 1 | 0);
            $length = ji_File_separatorChar;
            if (var$4 != $length) {
                a: {
                    if (jl_String_indexOf0($this.$path, $length) == $index) {
                        if (ji_File_isAbsolutePath($this, $this.$path))
                            break a;
                        if (!$index)
                            break a;
                    }
                    return jl_String_substring0($this.$path, 0, $index);
                }
                return jl_String_substring0($this.$path, 0, $index + 1 | 0);
            }
        }
        return null;
    }
    function ji_File_exists($this) {
        var $virtualFile;
        $virtualFile = ji_File_findVirtualFile($this);
        if ($virtualFile === null)
            return 0;
        return !otrfm_VirtualFileImpl_isDirectory($virtualFile) && !otrfm_VirtualFileImpl_isFile($virtualFile) ? 0 : 1;
    }
    function ji_File_fixSlashes($origPath) {
        var $length, $newLength, $foundSlash, $newPath, $i, var$7, $pathChar, var$9;
        ji_File_$callClinit();
        $length = jl_String_length($origPath);
        $newLength = 0;
        ji_File_fs();
        $foundSlash = 0;
        $newPath = jl_String_toCharArray($origPath);
        $i = 0;
        while ($i < $length) {
            var$7 = $newPath.data;
            $pathChar = var$7[$i];
            if ($pathChar != 47 && $pathChar != ji_File_separatorChar) {
                var$9 = $newLength + 1 | 0;
                var$7[$newLength] = $pathChar;
                $foundSlash = 0;
            } else if ($foundSlash && $i)
                var$9 = $newLength;
            else {
                var$9 = $newLength + 1 | 0;
                var$7[$newLength] = ji_File_separatorChar;
                $foundSlash = 1;
            }
            $i = $i + 1 | 0;
            $newLength = var$9;
        }
        if ($foundSlash && !($newLength <= 1 && $newPath.data[0] == 47))
            $newLength = $newLength + (-1) | 0;
        return jl_String__init_5($newPath, 0, $newLength);
    }
    function ji_File_findVirtualFile($this) {
        var var$1, var$2, var$3;
        var$1 = ji_File_fs();
        var$2 = ji_File_getCanonicalPathImpl($this);
        var$3 = new otrfm_VirtualFileImpl;
        var$3.$fs0 = var$1;
        var$3.$path0 = var$2;
        return var$3;
    }
    function ji_File__clinit_() {
        ji_File_fs();
        ji_File_separatorChar = 47;
        ji_File_separator = jl_String_valueOf(47);
        ji_File_fs();
        ji_File_pathSeparatorChar = 58;
        ji_File_pathSeparator = jl_String_valueOf(58);
    }
    function cmmr_TextureManager() {
        var a = this; jl_Object.call(a);
        a.$textures = null;
        a.$textureImages = null;
        a.$idBuffer = null;
        a.$textureBuffer = null;
        a.$animations = null;
        a.$settings0 = null;
    }
    function cmmr_TextureManager__init_(var_0) {
        var var_1 = new cmmr_TextureManager();
        cmmr_TextureManager__init_0(var_1, var_0);
        return var_1;
    }
    function cmmr_TextureManager__init_0($this, $var1) {
        $this.$textures = ju_HashMap__init_();
        $this.$textureImages = ju_HashMap__init_();
        $this.$idBuffer = ol_BufferUtils_createIntBuffer(1);
        $this.$textureBuffer = ol_BufferUtils_createByteBuffer(262144);
        $this.$animations = ju_ArrayList__init_();
        $this.$settings0 = $var1;
    }
    function cmmr_TextureManager_load($this, $var1) {
        var var$2, $var4, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var4 = $thread.pop();var$2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$2 = ju_HashMap_get($this.$textures, $var1);
            if (var$2 !== null)
                return var$2.$value;
            try {
                jn_IntBuffer_clear($this.$idBuffer);
                olo_GL11_glGenTextures($this.$idBuffer);
                $var4 = jn_IntBufferImpl_get0($this.$idBuffer, 0);
                var$2 = nPm_LWJGLUtil_getResourceAsStream($var1);
                $ptr = 1;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                } else {
                    throw $$e;
                }
            }
            $var1 = new jl_RuntimeException;
            jl_Throwable__init_($var1, $rt_s(295));
            $rt_throw($var1);
        case 1:
            a: {
                try {
                    $tmp = nPm_ImageIO_read(var$2);
                    if ($rt_suspending()) {
                        break main;
                    }
                    var$2 = $tmp;
                    cmmr_TextureManager_load0($this, var$2, $var4);
                    ju_HashMap_put($this.$textures, $var1, jl_Integer_valueOf($var4));
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $var4;
            }
            $var1 = new jl_RuntimeException;
            jl_Throwable__init_($var1, $rt_s(295));
            $rt_throw($var1);
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, var$2, $var4, $ptr);
    }
    function cmmr_TextureManager_load0($this, $var1, $var2) {
        var var$3, $var3, $var4, var$6, $var5, var$8, $var11, var$10, $var6, $var10, $var8, $var9, var$15;
        olo_GL11_glBindTexture(3553, $var2);
        olo_GL11_glTexParameteri(3553, 10241, 9728);
        olo_GL11_glTexParameteri(3553, 10240, 9728);
        var$3 = $var1.$w0;
        $var3 = $var1.$h2;
        $var2 = $rt_imul(var$3, $var3);
        $var4 = $rt_createIntArray($var2);
        var$6 = $var4.data;
        $var5 = $rt_createByteArray($var2 << 2);
        var$8 = $var5.data;
        nPm_BufferedImage_getRGB($var1, 0, 0, var$3, $var3, $var4, 0, var$3);
        $var11 = 0;
        var$10 = var$6.length;
        while ($var11 < var$10) {
            $var6 = var$6[$var11] >>> 24 | 0;
            $var10 = var$6[$var11] >> 16 & 255;
            $var8 = var$6[$var11] >> 8 & 255;
            $var9 = var$6[$var11] & 255;
            if ($this.$settings0.$anaglyph) {
                var$15 = $var10 * 30 | 0;
                $var10 = ((var$15 + ($var8 * 59 | 0) | 0) + ($var9 * 11 | 0) | 0) / 100 | 0;
                $var8 = (var$15 + ($var8 * 70 | 0) | 0) / 100 | 0;
                $var9 = (var$15 + ($var9 * 70 | 0) | 0) / 100 | 0;
            }
            $var2 = $var11 << 2;
            var$8[$var2] = $var10 << 24 >> 24;
            var$8[$var2 + 1 | 0] = $var8 << 24 >> 24;
            var$8[$var2 + 2 | 0] = $var9 << 24 >> 24;
            var$8[$var2 + 3 | 0] = $var6 << 24 >> 24;
            $var11 = $var11 + 1 | 0;
        }
        jn_Buffer_clear($this.$textureBuffer);
        jn_ByteBuffer_put($this.$textureBuffer, $var5);
        $var1 = $this.$textureBuffer;
        jn_Buffer_position0($var1, 0);
        jn_Buffer_limit0($var1, var$8.length);
        olo_GL11_glTexImage2D(3553, 0, 6408, var$3, $var3, 0, 6408, 5121, $this.$textureBuffer);
    }
    function cmmr_TextureManager_registerAnimation($this, $var1) {
        ju_ArrayList_add($this.$animations, $var1);
        $var1.$animate();
    }
    function cmmrt_TextureFX() {
        var a = this; jl_Object.call(a);
        a.$textureData = null;
        a.$textureId = 0;
        a.$anaglyph0 = 0;
    }
    function cmmrt_TextureFX__init_(var_0) {
        var var_1 = new cmmrt_TextureFX();
        cmmrt_TextureFX__init_0(var_1, var_0);
        return var_1;
    }
    function cmmrt_TextureFX__init_0($this, $textureID) {
        $this.$textureData = $rt_createByteArray(1024);
        $this.$anaglyph0 = 0;
        $this.$textureId = $textureID;
    }
    function cmmrt_TextureLavaFX() {
        var a = this; cmmrt_TextureFX.call(a);
        a.$red = null;
        a.$green = null;
        a.$blue = null;
        a.$alpha = null;
    }
    function cmmrt_TextureLavaFX__init_() {
        var var_0 = new cmmrt_TextureLavaFX();
        cmmrt_TextureLavaFX__init_0(var_0);
        return var_0;
    }
    function cmmrt_TextureLavaFX__init_0($this) {
        cmmlt_Block_$callClinit();
        cmmrt_TextureFX__init_0($this, cmmlt_Block_LAVA.$textureId0);
        $this.$red = $rt_createFloatArray(256);
        $this.$green = $rt_createFloatArray(256);
        $this.$blue = $rt_createFloatArray(256);
        $this.$alpha = $rt_createFloatArray(256);
    }
    function cmmrt_TextureLavaFX_animate($this) {
        var $var1, $var2, $var3, $var4, $var5, $var6, $var9, $var7, $var8, var$10, $var10, var$12, var$13;
        $var1 = 0;
        while ($var1 < 16) {
            $var2 = 0;
            while ($var2 < 16) {
                $var3 = 0.0;
                $var4 = cmu_MathHelper_sin($var2 * 3.1415927410125732 * 2.0 / 16.0) * 1.2000000476837158 | 0;
                $var5 = cmu_MathHelper_sin($var1 * 3.1415927410125732 * 2.0 / 16.0) * 1.2000000476837158 | 0;
                $var6 = $var1 - 1 | 0;
                while (true) {
                    $var9 = $var1 + 1 | 0;
                    if ($var6 > $var9)
                        break;
                    $var7 = $var2 - 1 | 0;
                    while ($var7 <= ($var2 + 1 | 0)) {
                        $var8 = ($var6 + $var4 | 0) & 15;
                        $var9 = ($var7 + $var5 | 0) & 15;
                        $var3 = $var3 + $this.$red.data[$var8 + ($var9 << 4) | 0];
                        $var7 = $var7 + 1 | 0;
                    }
                    $var6 = $var6 + 1 | 0;
                }
                var$10 = $this.$green.data;
                $var7 = $var1 + ($var2 << 4) | 0;
                $var3 = $var3 / 10.0;
                $var10 = $this.$blue.data;
                $var5 = $var1 & 15;
                $var4 = ($var2 & 15) << 4;
                var$12 = $var10[$var5 + $var4 | 0];
                $var8 = $var9 & 15;
                var$13 = var$12 + $var10[$var8 + $var4 | 0];
                $var2 = $var2 + 1 | 0;
                $var9 = ($var2 & 15) << 4;
                var$10[$var7] = $var3 + (var$13 + $var10[$var8 + $var9 | 0] + $var10[$var5 + $var9 | 0]) / 4.0 * 0.800000011920929;
                $var3 = $var10[$var7];
                var$10 = $this.$alpha.data;
                $var10[$var7] = $var3 + var$10[$var7] * 0.009999999776482582;
                if ($var10[$var7] < 0.0)
                    $var10[$var7] = 0.0;
                var$10[$var7] = var$10[$var7] - 0.05999999865889549;
                if (jl_Math_random() < 0.005)
                    $this.$alpha.data[$var7] = 1.5;
            }
            $var1 = $var1 + 1 | 0;
        }
        $var10 = $this.$green;
        $this.$green = $this.$red;
        $this.$red = $var10;
        $var2 = 0;
        while ($var2 < 256) {
            $var3 = $var10.data[$var2] * 2.0;
            if ($var3 > 1.0)
                $var3 = 1.0;
            if ($var3 < 0.0)
                $var3 = 0.0;
            $var8 = $var3 * 100.0 + 155.0 | 0;
            var$12 = $var3 * $var3;
            $var9 = var$12 * 255.0 | 0;
            $var7 = var$12 * $var3 * $var3 * 128.0 | 0;
            if ($this.$anaglyph0) {
                $var5 = $var8 * 30 | 0;
                $var8 = (($var5 + ($var9 * 59 | 0) | 0) + ($var7 * 11 | 0) | 0) / 100 | 0;
                $var9 = ($var5 + ($var9 * 70 | 0) | 0) / 100 | 0;
                $var7 = ($var5 + ($var7 * 70 | 0) | 0) / 100 | 0;
            }
            var$10 = $this.$textureData.data;
            $var1 = $var2 << 2;
            var$10[$var1] = $var8 << 24 >> 24;
            var$10[$var1 + 1 | 0] = $var9 << 24 >> 24;
            var$10[$var1 + 2 | 0] = $var7 << 24 >> 24;
            var$10[$var1 + 3 | 0] = (-1);
            $var2 = $var2 + 1 | 0;
        }
    }
    function cmmrt_TextureWaterFX() {
        var a = this; cmmrt_TextureFX.call(a);
        a.$red0 = null;
        a.$blue0 = null;
        a.$green0 = null;
        a.$alpha0 = null;
        a.$updates = 0;
    }
    function cmmrt_TextureWaterFX__init_() {
        var var_0 = new cmmrt_TextureWaterFX();
        cmmrt_TextureWaterFX__init_0(var_0);
        return var_0;
    }
    function cmmrt_TextureWaterFX__init_0($this) {
        cmmlt_Block_$callClinit();
        cmmrt_TextureFX__init_0($this, cmmlt_Block_WATER.$textureId0);
        $this.$red0 = $rt_createFloatArray(256);
        $this.$blue0 = $rt_createFloatArray(256);
        $this.$green0 = $rt_createFloatArray(256);
        $this.$alpha0 = $rt_createFloatArray(256);
        $this.$updates = 0;
    }
    function cmmrt_TextureWaterFX_animate($this) {
        var $var1, $var2, $var3, $var4, $var5, $var6, var$7, $var2_0, $var8, $var9, $var7, $var10;
        $this.$updates = $this.$updates + 1 | 0;
        $var1 = 0;
        while ($var1 < 16) {
            $var2 = 0;
            while ($var2 < 16) {
                $var3 = 0.0;
                $var4 = $var1 - 1 | 0;
                while ($var4 <= ($var1 + 1 | 0)) {
                    $var5 = $var4 & 15;
                    $var6 = $var2 & 15;
                    $var3 = $var3 + $this.$red0.data[$var5 + ($var6 << 4) | 0];
                    $var4 = $var4 + 1 | 0;
                }
                var$7 = $this.$blue0.data;
                $var4 = $var1 + ($var2 << 4) | 0;
                var$7[$var4] = $var3 / 3.299999952316284 + $this.$green0.data[$var4] * 0.800000011920929;
                $var2 = $var2 + 1 | 0;
            }
            $var1 = $var1 + 1 | 0;
        }
        $var2 = 0;
        while ($var2 < 16) {
            $var2_0 = 0;
            while ($var2_0 < 16) {
                $var8 = $this.$green0.data;
                $var1 = $var2 + ($var2_0 << 4) | 0;
                $var3 = $var8[$var1];
                var$7 = $this.$alpha0.data;
                $var8[$var1] = $var3 + var$7[$var1] * 0.05000000074505806;
                if ($var8[$var1] < 0.0)
                    $var8[$var1] = 0.0;
                var$7[$var1] = var$7[$var1] - 0.10000000149011612;
                if (jl_Math_random() < 0.05)
                    $this.$alpha0.data[$var1] = 0.5;
                $var2_0 = $var2_0 + 1 | 0;
            }
            $var2 = $var2 + 1 | 0;
        }
        $var8 = $this.$blue0;
        $this.$blue0 = $this.$red0;
        $this.$red0 = $var8;
        $var2 = 0;
        while ($var2 < 256) {
            $var3 = $var8.data[$var2];
            if ($var3 > 1.0)
                $var3 = 1.0;
            if ($var3 < 0.0)
                $var3 = 0.0;
            $var9 = $var3 * $var3;
            $var5 = 32.0 + $var9 * 32.0 | 0;
            $var4 = 50.0 + $var9 * 64.0 | 0;
            $var7 = 255;
            $var10 = 146.0 + $var9 * 50.0 | 0;
            if ($this.$anaglyph0) {
                $var1 = $var5 * 30 | 0;
                $var5 = (($var1 + ($var4 * 59 | 0) | 0) + 2805 | 0) / 100 | 0;
                $var4 = ($var1 + ($var4 * 70 | 0) | 0) / 100 | 0;
                $var7 = ($var1 + 17850 | 0) / 100 | 0;
            }
            var$7 = $this.$textureData.data;
            $var1 = $var2 << 2;
            var$7[$var1] = $var5 << 24 >> 24;
            var$7[$var1 + 1 | 0] = $var4 << 24 >> 24;
            var$7[$var1 + 2 | 0] = $var7 << 24 >> 24;
            var$7[$var1 + 3 | 0] = $var10 << 24 >> 24;
            $var2 = $var2 + 1 | 0;
        }
    }
    function cmmg_FontRenderer() {
        var a = this; jl_Object.call(a);
        a.$widthmap = null;
        a.$fontTexture = 0;
        a.$settings2 = null;
    }
    function cmmg_FontRenderer__init_0(var_0, var_1, var_2) {
        var var_3 = new cmmg_FontRenderer();
        cmmg_FontRenderer__init_(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function cmmg_FontRenderer__init_($this, $var1, $var2, $var3) {
        var $var13, $var14, $var4, $var5, $var6, var$9, $var15, $var10, $var7, $var8, $var9, $var11, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var11 = $thread.pop();$var9 = $thread.pop();$var8 = $thread.pop();$var7 = $thread.pop();$var10 = $thread.pop();$var15 = $thread.pop();var$9 = $thread.pop();$var6 = $thread.pop();$var5 = $thread.pop();$var4 = $thread.pop();$var14 = $thread.pop();$var13 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $this.$widthmap = $rt_createIntArray(256);
            $this.$fontTexture = 0;
            $this.$settings2 = $var1;
            try {
                $var1 = nPm_LWJGLUtil_getResourceAsStream($var2);
                $ptr = 1;
                continue main;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $var13 = $$je;
                } else {
                    throw $$e;
                }
            }
            $var1 = new jl_RuntimeException;
            jl_Throwable__init_4($var1, $var13);
            $rt_throw($var1);
        case 1:
            a: {
                try {
                    $tmp = nPm_ImageIO_read($var1);
                    if ($rt_suspending()) {
                        break main;
                    }
                    $var14 = $tmp;
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $var13 = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $var1 = new jl_RuntimeException;
                jl_Throwable__init_4($var1, $var13);
                $rt_throw($var1);
            }
            $var4 = $var14.$w0;
            $var5 = $var14.$h2;
            $var6 = $rt_createIntArray($rt_imul($var4, $var5));
            var$9 = $var6.data;
            nPm_BufferedImage_getRGB($var14, 0, 0, $var4, $var5, $var6, 0, $var4);
            $var15 = 0;
            while ($var15 < 128) {
                $var10 = $var15 % 16 | 0;
                $var7 = $var15 / 16 | 0;
                $var8 = 0;
                $var9 = 0;
                $var5 = $var10 << 3;
                $var7 = $var7 << 3;
                while ($var8 < 8 && !$var9) {
                    $var10 = $var5 + $var8 | 0;
                    $var9 = 1;
                    $var11 = 0;
                    while ($var11 < 8 && $var9) {
                        if ((var$9[$var10 + $rt_imul($var7 + $var11 | 0, $var4) | 0] & 255) > 128)
                            $var9 = 0;
                        $var11 = $var11 + 1 | 0;
                    }
                    $var8 = $var8 + 1 | 0;
                }
                if ($var15 == 32)
                    $var8 = 4;
                $this.$widthmap.data[$var15] = $var8;
                $var15 = $var15 + 1 | 0;
            }
            $ptr = 2;
        case 2:
            $tmp = cmmr_TextureManager_load($var3, $var2);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = $tmp;
            $this.$fontTexture = $var4;
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var13, $var14, $var4, $var5, $var6, var$9, $var15, $var10, $var7, $var8, $var9, $var11, $ptr);
    }
    function cmmg_FontRenderer_render($this, $var1, $var2, $var3, $var4) {
        cmmg_FontRenderer_render0($this, $var1, $var2 + 1 | 0, $var3 + 1 | 0, $var4, 1);
        cmmg_FontRenderer_render0($this, $var1, $var2, $var3, $var4, 0);
    }
    function cmmg_FontRenderer_render0($this, $var1, $var2, $var3, $var4, $var5) {
        var $var12, $var6, $var7, $var8, var$10, var$11, var$12, $var9, $var9_0, $var10, $var11, var$17, var$18, var$19, var$20, var$21, var$22, $var13;
        if ($var1 !== null) {
            $var12 = jl_String_toCharArray($var1);
            if ($var5)
                $var4 = ($var4 & 16579836) >> 2;
            olo_GL11_glBindTexture(3553, $this.$fontTexture);
            cmmr_ShapeRenderer_$callClinit();
            $var6 = cmmr_ShapeRenderer_instance;
            cmmr_ShapeRenderer_begin($var6);
            cmmr_ShapeRenderer_color0($var6, $var4);
            $var7 = 0;
            $var8 = 0;
            var$10 = $var3;
            var$11 = var$10 + 7.989999771118164;
            while (true) {
                var$12 = $var12.data;
                $var3 = var$12.length;
                if ($var8 >= $var3)
                    break;
                if (var$12[$var8] == 38) {
                    $var4 = $var8 + 1 | 0;
                    if ($var3 > $var4) {
                        $var9 = jl_String_indexOf0($rt_s(296), var$12[$var4]);
                        if ($var9 < 0)
                            $var9 = 15;
                        $var9_0 = ($var9 & 8) << 3;
                        $var10 = (($var9 & 1) * 191 | 0) + $var9_0 | 0;
                        $var11 = ((($var9 & 2) >> 1) * 191 | 0) + $var9_0 | 0;
                        $var3 = ((($var9 & 4) >> 2) * 191 | 0) + $var9_0 | 0;
                        if ($this.$settings2.$anaglyph) {
                            $var9_0 = $var3 * 30 | 0;
                            $var3 = (($var9_0 + ($var11 * 59 | 0) | 0) + ($var10 * 11 | 0) | 0) / 100 | 0;
                            $var11 = ($var9_0 + ($var11 * 70 | 0) | 0) / 100 | 0;
                            $var10 = ($var9_0 + ($var10 * 70 | 0) | 0) / 100 | 0;
                        }
                        $var3 = $var3 << 16 | $var11 << 8 | $var10;
                        $var8 = $var8 + 2 | 0;
                        if ($var5)
                            $var3 = ($var3 & 16579836) >> 2;
                        cmmr_ShapeRenderer_color0($var6, $var3);
                    }
                }
                $var3 = (var$12[$var8] % 16 | 0) << 3;
                $var9 = (var$12[$var8] / 16 | 0) << 3;
                var$17 = $var2 + $var7 | 0;
                var$18 = $var3;
                var$19 = var$18 / 128.0;
                var$20 = $var9;
                var$21 = (var$20 + 7.989999771118164) / 128.0;
                cmmr_ShapeRenderer_vertexUV($var6, var$17, var$11, 0.0, var$19, var$21);
                var$22 = var$17 + 7.989999771118164;
                $var13 = (var$18 + 7.989999771118164) / 128.0;
                cmmr_ShapeRenderer_vertexUV($var6, var$22, var$11, 0.0, $var13, var$21);
                var$20 = var$20 / 128.0;
                cmmr_ShapeRenderer_vertexUV($var6, var$22, var$10, 0.0, $var13, var$20);
                cmmr_ShapeRenderer_vertexUV($var6, var$17, var$10, 0.0, var$19, var$20);
                $var7 = $var7 + $this.$widthmap.data[var$12[$var8]] | 0;
                $var8 = $var8 + 1 | 0;
            }
            cmmr_ShapeRenderer_end($var6);
        }
    }
    function cmmg_FontRenderer_getWidth($this, $var1) {
        var $var4, $var2, $var3, var$5;
        if ($var1 === null)
            return 0;
        $var4 = jl_String_toCharArray($var1);
        $var2 = 0;
        $var3 = 0;
        while (true) {
            var$5 = $var4.data;
            if ($var3 >= var$5.length)
                break;
            if (var$5[$var3] == 38)
                $var3 = $var3 + 1 | 0;
            else
                $var2 = $var2 + $this.$widthmap.data[var$5[$var3]] | 0;
            $var3 = $var3 + 1 | 0;
        }
        return $var2;
    }
    function cmmr_LevelRenderer() {
        var a = this; jl_Object.call(a);
        a.$level0 = null;
        a.$textureManager0 = null;
        a.$listId = 0;
        a.$buffer2 = null;
        a.$chunks = null;
        a.$loadQueue = null;
        a.$chunkCache = null;
        a.$xChunks = 0;
        a.$yChunks = 0;
        a.$zChunks = 0;
        a.$baseListId = 0;
        a.$minecraft3 = null;
        a.$chunkDataCache = null;
        a.$ticks0 = 0;
        a.$lastLoadX = 0.0;
        a.$lastLoadY = 0.0;
        a.$lastLoadZ = 0.0;
        a.$cracks = 0.0;
    }
    function cmmr_LevelRenderer__init_(var_0, var_1) {
        var var_2 = new cmmr_LevelRenderer();
        cmmr_LevelRenderer__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmr_LevelRenderer__init_0($this, $var1, $var2) {
        $this.$buffer2 = ol_BufferUtils_createIntBuffer(65536);
        $this.$chunks = ju_ArrayList__init_();
        $this.$chunkDataCache = $rt_createIntArray(50000);
        $this.$ticks0 = 0;
        $this.$lastLoadX = (-9999.0);
        $this.$lastLoadY = (-9999.0);
        $this.$lastLoadZ = (-9999.0);
        $this.$minecraft3 = $var1;
        $this.$textureManager0 = $var2;
        $this.$listId = olo_GL11_glGenLists(2);
        $this.$baseListId = olo_GL11_glGenLists(524288);
    }
    function cmmr_LevelRenderer_refresh($this) {
        var $var1, var$2, $var11, $var8, $var2, $var3, $var4, var$8, $var12, var$10, $var5, $var6, $var7, $var10, $var13, $var8_0, var$17, var$18, var$19;
        a: {
            if ($this.$chunkCache !== null) {
                $var1 = 0;
                while (true) {
                    var$2 = $this.$chunkCache.data;
                    if ($var1 >= var$2.length)
                        break a;
                    cmmr_Chunk_dispose(var$2[$var1]);
                    $var1 = $var1 + 1 | 0;
                }
            }
        }
        $var11 = $this.$level0;
        $var8 = $var11.$width0 / 16 | 0;
        $this.$xChunks = $var8;
        $var1 = $var11.$depth / 16 | 0;
        $this.$yChunks = $var1;
        $var2 = $var11.$height0 / 16 | 0;
        $this.$zChunks = $var2;
        $var8 = $rt_imul($rt_imul($var8, $var1), $var2);
        $this.$chunkCache = $rt_createArray(cmmr_Chunk, $var8);
        $this.$loadQueue = $rt_createArray(cmmr_Chunk, $var8);
        $var1 = 0;
        $var2 = 0;
        while ($var2 < $this.$xChunks) {
            $var3 = 0;
            while ($var3 < $this.$yChunks) {
                $var4 = 0;
                while ($var4 < $this.$zChunks) {
                    $this.$chunkCache.data[$rt_imul($rt_imul($var4, $this.$yChunks) + $var3 | 0, $this.$xChunks) + $var2 | 0] = cmmr_Chunk__init_($this.$level0, $var2 << 4, $var3 << 4, $var4 << 4, 16, $this.$baseListId + $var1 | 0);
                    var$8 = $this.$loadQueue.data;
                    $var8 = $rt_imul($rt_imul($var4, $this.$yChunks) + $var3 | 0, $this.$xChunks) + $var2 | 0;
                    var$8[$var8] = $this.$chunkCache.data[$var8];
                    $var1 = $var1 + 2 | 0;
                    $var4 = $var4 + 1 | 0;
                }
                $var3 = $var3 + 1 | 0;
            }
            $var2 = $var2 + 1 | 0;
        }
        $var8 = 0;
        while ($var8 < ju_ArrayList_size($this.$chunks)) {
            (ju_ArrayList_get($this.$chunks, $var8)).$loaded = 0;
            $var8 = $var8 + 1 | 0;
        }
        ju_ArrayList_clear($this.$chunks);
        olo_GL11_glNewList($this.$listId, 4864);
        olo_GL11_glColor4f(0.5, 0.5, 0.5, 1.0);
        cmmr_ShapeRenderer_$callClinit();
        $var11 = cmmr_ShapeRenderer_instance;
        $var12 = cmml_Level_getGroundLevel($this.$level0);
        var$10 = $this.$level0;
        $var8 = var$10.$width0;
        if (128 <= $var8)
            $var8 = 128;
        $var5 = var$10.$height0;
        if ($var8 <= $var5)
            $var5 = $var8;
        $var6 = 2048 / $var5 | 0;
        cmmr_ShapeRenderer_begin($var11);
        $var4 = $rt_imul( -$var5 | 0, $var6);
        $var7 = $var4;
        while (true) {
            $var8 = $this.$level0.$width0;
            $var3 = $rt_imul($var5, $var6);
            if ($var7 >= ($var8 + $var3 | 0))
                break;
            $var8 = $var4;
            while (true) {
                var$10 = $this.$level0;
                $var1 = var$10.$height0;
                if ($var8 >= ($var1 + $var3 | 0))
                    break;
                $var10 = $var7 < 0 ? $var12 : $var8 < 0 ? $var12 : $var7 >= var$10.$width0 ? $var12 : $var8 < $var1 ? 0.0 : $var12;
                $var13 = $var7;
                $var8_0 = $var8 + $var5 | 0;
                var$17 = $var8_0;
                var$18 = $var5;
                cmmr_ShapeRenderer_vertexUV($var11, $var13, $var10, var$17, 0.0, var$18);
                var$19 = $var7 + $var5 | 0;
                cmmr_ShapeRenderer_vertexUV($var11, var$19, $var10, var$17, var$18, var$18);
                var$17 = $var8;
                cmmr_ShapeRenderer_vertexUV($var11, var$19, $var10, var$17, var$18, 0.0);
                cmmr_ShapeRenderer_vertexUV($var11, $var13, $var10, var$17, 0.0, 0.0);
                $var8 = $var8_0;
            }
            $var7 = $var7 + $var5 | 0;
        }
        cmmr_ShapeRenderer_end($var11);
        olo_GL11_glColor3f(0.800000011920929, 0.800000011920929, 0.800000011920929);
        cmmr_ShapeRenderer_begin($var11);
        $var1 = 0;
        while ($var1 < $this.$level0.$width0) {
            $var10 = $var1;
            cmmr_ShapeRenderer_vertexUV($var11, $var10, 0.0, 0.0, 0.0, 0.0);
            $var1 = $var1 + $var5 | 0;
            $var13 = $var1;
            var$18 = $var5;
            cmmr_ShapeRenderer_vertexUV($var11, $var13, 0.0, 0.0, var$18, 0.0);
            cmmr_ShapeRenderer_vertexUV($var11, $var13, $var12, 0.0, var$18, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, $var10, $var12, 0.0, 0.0, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, $var10, $var12, $this.$level0.$height0, 0.0, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, $var13, $var12, $this.$level0.$height0, var$18, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, $var13, 0.0, $this.$level0.$height0, var$18, 0.0);
            cmmr_ShapeRenderer_vertexUV($var11, $var10, 0.0, $this.$level0.$height0, 0.0, 0.0);
        }
        olo_GL11_glColor3f(0.6000000238418579, 0.6000000238418579, 0.6000000238418579);
        $var1 = 0;
        while ($var1 < $this.$level0.$height0) {
            var$19 = $var1;
            cmmr_ShapeRenderer_vertexUV($var11, 0.0, $var12, var$19, 0.0, 0.0);
            $var1 = $var1 + $var5 | 0;
            var$17 = $var1;
            var$18 = $var5;
            cmmr_ShapeRenderer_vertexUV($var11, 0.0, $var12, var$17, var$18, 0.0);
            cmmr_ShapeRenderer_vertexUV($var11, 0.0, 0.0, var$17, var$18, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, 0.0, 0.0, var$19, 0.0, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, $this.$level0.$width0, 0.0, var$19, 0.0, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, $this.$level0.$width0, 0.0, var$17, var$18, $var12);
            cmmr_ShapeRenderer_vertexUV($var11, $this.$level0.$width0, $var12, var$17, var$18, 0.0);
            cmmr_ShapeRenderer_vertexUV($var11, $this.$level0.$width0, $var12, var$19, 0.0, 0.0);
        }
        cmmr_ShapeRenderer_end($var11);
        olo_GL11_glEndList();
        olo_GL11_glNewList($this.$listId + 1 | 0, 4864);
        olo_GL11_glColor3f(1.0, 1.0, 1.0);
        $var12 = cmml_Level_getWaterLevel($this.$level0);
        olo_GL11_glBlendFunc(770, 771);
        $var11 = cmmr_ShapeRenderer_instance;
        var$10 = $this.$level0;
        $var1 = var$10.$width0;
        if (128 <= $var1)
            $var1 = 128;
        $var8 = var$10.$height0;
        if ($var1 <= $var8)
            $var8 = $var1;
        $var1 = 2048 / $var8 | 0;
        cmmr_ShapeRenderer_begin($var11);
        $var2 = $rt_imul( -$var8 | 0, $var1);
        $var13 = $var12 - 0.10000000149011612;
        $var8_0 = $var2;
        while (true) {
            $var5 = $this.$level0.$width0;
            $var6 = $rt_imul($var8, $var1);
            if ($var8_0 >= ($var5 + $var6 | 0))
                break;
            $var5 = $var2;
            while (true) {
                var$10 = $this.$level0;
                $var4 = var$10.$height0;
                if ($var5 >= ($var4 + $var6 | 0))
                    break;
                if (!($var8_0 >= 0 && $var5 >= 0 && $var8_0 < var$10.$width0 && $var5 < $var4)) {
                    $var12 = $var8_0;
                    $var10 = $var5 + $var8 | 0;
                    var$19 = $var8;
                    cmmr_ShapeRenderer_vertexUV($var11, $var12, $var13, $var10, 0.0, var$19);
                    var$17 = $var8_0 + $var8 | 0;
                    cmmr_ShapeRenderer_vertexUV($var11, var$17, $var13, $var10, var$19, var$19);
                    var$18 = $var5;
                    cmmr_ShapeRenderer_vertexUV($var11, var$17, $var13, var$18, var$19, 0.0);
                    cmmr_ShapeRenderer_vertexUV($var11, $var12, $var13, var$18, 0.0, 0.0);
                    cmmr_ShapeRenderer_vertexUV($var11, $var12, $var13, var$18, 0.0, 0.0);
                    cmmr_ShapeRenderer_vertexUV($var11, var$17, $var13, var$18, var$19, 0.0);
                    cmmr_ShapeRenderer_vertexUV($var11, var$17, $var13, $var10, var$19, var$19);
                    cmmr_ShapeRenderer_vertexUV($var11, $var12, $var13, $var10, 0.0, var$19);
                }
                $var5 = $var5 + $var8 | 0;
            }
            $var8_0 = $var8_0 + $var8 | 0;
        }
        cmmr_ShapeRenderer_end($var11);
        olo_GL11_glDisable(3042);
        olo_GL11_glEndList();
        $var11 = $this.$level0;
        cmmr_LevelRenderer_queueChunks($this, 0, 0, 0, $var11.$width0, $var11.$depth, $var11.$height0);
    }
    function cmmr_LevelRenderer_sortChunks($this, $var1, $var2) {
        var var$3, $var3, var$5, $var4, var$7, $var5, var$9, var$10, $var6, $var7, var$13, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$13 = $thread.pop();$var7 = $thread.pop();$var6 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();$var5 = $thread.pop();var$7 = $thread.pop();$var4 = $thread.pop();var$5 = $thread.pop();$var3 = $thread.pop();var$3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$3 = $var1.$x;
            $var3 = var$3 - $this.$lastLoadX;
            var$5 = $var1.$y;
            $var4 = var$5 - $this.$lastLoadY;
            var$7 = $var1.$z;
            $var5 = var$7 - $this.$lastLoadZ;
            if ($var3 * $var3 + $var4 * $var4 + $var5 * $var5 > 64.0) {
                $this.$lastLoadX = var$3;
                $this.$lastLoadY = var$5;
                $this.$lastLoadZ = var$7;
                var$9 = $this.$loadQueue;
                var$10 = new cmmr_ChunkDistanceComparator;
                var$10.$player2 = $var1;
                ju_Arrays_sort(var$9, var$10);
            }
            $var6 = 0;
            $var7 = 0;
            while (true) {
                var$9 = $this.$loadQueue.data;
                if ($var7 >= var$9.length)
                    break;
                $var1 = var$9[$var7];
                var$9 = $this.$chunkDataCache;
                if ($var1.$visible && !$var1.$dirty.data[$var2]) {
                    var$9 = var$9.data;
                    var$13 = $var6 + 1 | 0;
                    var$9[$var6] = $var1.$baseListId0 + $var2 | 0;
                    $var6 = var$13;
                }
                $var7 = $var7 + 1 | 0;
            }
            jn_Buffer_clear($this.$buffer2);
            jn_IntBuffer_put($this.$buffer2, $this.$chunkDataCache, 0, $var6);
            jn_Buffer_flip($this.$buffer2);
            if (jn_Buffer_remaining($this.$buffer2) <= 0)
                return jn_Buffer_remaining($this.$buffer2);
            $var2 = 3553;
            $var1 = $this.$textureManager0;
            var$10 = $rt_s(43);
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load($var1, var$10);
            if ($rt_suspending()) {
                break main;
            }
            $var6 = $tmp;
            olo_GL11_glBindTexture($var2, $var6);
            olo_GL11_glCallLists($this.$buffer2);
            return jn_Buffer_remaining($this.$buffer2);
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, var$3, $var3, var$5, $var4, var$7, $var5, var$9, var$10, $var6, $var7, var$13, $ptr);
    }
    function cmmr_LevelRenderer_queueChunks($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7, var$8, var$9, $var7, $var8, var$12, var$13;
        var$7 = $var1 / 16 | 0;
        var$8 = $var2 / 16 | 0;
        var$9 = $var3 / 16 | 0;
        $var2 = $var4 / 16 | 0;
        $var3 = $var5 / 16 | 0;
        $var4 = $var6 / 16 | 0;
        if (var$7 < 0)
            var$7 = 0;
        if (var$8 < 0)
            var$8 = 0;
        if (var$9 < 0)
            var$9 = 0;
        $var1 = $this.$xChunks - 1 | 0;
        if ($var2 <= $var1)
            $var1 = $var2;
        $var2 = $this.$yChunks - 1 | 0;
        if ($var3 <= $var2)
            $var2 = $var3;
        $var3 = $this.$zChunks - 1 | 0;
        if ($var4 <= $var3)
            $var3 = $var4;
        while (var$7 <= $var1) {
            $var7 = var$8;
            while ($var7 <= $var2) {
                $var8 = var$9;
                while ($var8 <= $var3) {
                    var$12 = $this.$chunkCache.data;
                    $var4 = $rt_imul($rt_imul($var8, $this.$yChunks) + $var7 | 0, $this.$xChunks) + var$7 | 0;
                    var$13 = var$12[$var4];
                    if (!var$13.$loaded) {
                        var$13.$loaded = 1;
                        ju_ArrayList_add($this.$chunks, var$12[$var4]);
                    }
                    $var8 = $var8 + 1 | 0;
                }
                $var7 = $var7 + 1 | 0;
            }
            var$7 = var$7 + 1 | 0;
        }
    }
    function cmm_Entity() {
        var a = this; jl_Object.call(a);
        a.$level2 = null;
        a.$xo = 0.0;
        a.$yo = 0.0;
        a.$zo = 0.0;
        a.$x = 0.0;
        a.$y = 0.0;
        a.$z = 0.0;
        a.$xd0 = 0.0;
        a.$yd0 = 0.0;
        a.$zd0 = 0.0;
        a.$yRot = 0.0;
        a.$xRot = 0.0;
        a.$yRotO = 0.0;
        a.$xRotO = 0.0;
        a.$bb = null;
        a.$onGround = 0;
        a.$horizontalCollision = 0;
        a.$collision = 0;
        a.$slide = 0;
        a.$removed = 0;
        a.$heightOffset = 0.0;
        a.$bbWidth = 0.0;
        a.$bbHeight = 0.0;
        a.$walkDistO = 0.0;
        a.$walkDist = 0.0;
        a.$makeStepSound = 0;
        a.$fallDistance = 0.0;
        a.$nextStep = 0;
        a.$blockMap0 = null;
        a.$xOld = 0.0;
        a.$yOld = 0.0;
        a.$zOld = 0.0;
        a.$textureId1 = 0;
        a.$ySlideOffset = 0.0;
        a.$footSize = 0.0;
        a.$noPhysics = 0;
        a.$pushthrough = 0.0;
        a.$hovered = 0;
    }
    function cmm_Entity__init_($this, $var1) {
        $this.$onGround = 0;
        $this.$horizontalCollision = 0;
        $this.$collision = 0;
        $this.$slide = 1;
        $this.$removed = 0;
        $this.$heightOffset = 0.0;
        $this.$bbWidth = 0.6000000238418579;
        $this.$bbHeight = 1.7999999523162842;
        $this.$walkDistO = 0.0;
        $this.$walkDist = 0.0;
        $this.$makeStepSound = 1;
        $this.$fallDistance = 0.0;
        $this.$nextStep = 1;
        $this.$textureId1 = 0;
        $this.$ySlideOffset = 0.0;
        $this.$footSize = 0.0;
        $this.$noPhysics = 0;
        $this.$pushthrough = 0.0;
        $this.$hovered = 0;
        $this.$level2 = $var1;
        cmm_Entity_setPos($this, 0.0, 0.0, 0.0);
    }
    function cmm_Entity_remove($this) {
        $this.$removed = 1;
    }
    function cmm_Entity_setSize($this, $var1, $var2) {
        $this.$bbWidth = $var1;
        $this.$bbHeight = $var2;
    }
    function cmm_Entity_setPos($this, $var1, $var2, $var3) {
        var $var4, $var5;
        $this.$x = $var1;
        $this.$y = $var2;
        $this.$z = $var3;
        $var4 = $this.$bbWidth / 2.0;
        $var5 = $this.$bbHeight / 2.0;
        $this.$bb = cmmp_AABB__init_0($var1 - $var4, $var2 - $var5, $var3 - $var4, $var1 + $var4, $var2 + $var5, $var3 + $var4);
    }
    function cmm_Entity_turn($this, $var1, $var2) {
        var $var3, $var4, var$5;
        $var3 = $this.$xRot;
        $var4 = $this.$yRot;
        var$5 = $var4 + $var1 * 0.15;
        $this.$yRot = var$5;
        $var1 = $var3 - $var2 * 0.15;
        $this.$xRot = $var1;
        if ($var1 < (-90.0))
            $this.$xRot = (-90.0);
        if ($this.$xRot > 90.0)
            $this.$xRot = 90.0;
        $this.$xRotO = $this.$xRotO + $this.$xRot - $var3;
        $this.$yRotO = $this.$yRotO + var$5 - $var4;
    }
    function cmm_Entity_isFree($this, $var1, $var2, $var3) {
        var var$4, $var4, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15;
        var$4 = $this.$bb;
        $var4 = cmmp_AABB__init_0(var$4.$x00 + $var3, var$4.$y00 + $var2, var$4.$z00 + $var3, var$4.$x1 + $var1, var$4.$y1 + $var2, var$4.$z1 + $var3);
        if ((cmml_Level_getCubes($this.$level2, $var4)).$size0 > 0)
            var$6 = 0;
        else {
            var$4 = $this.$level2;
            $var1 = $var4.$x00;
            var$7 = $var1 | 0;
            var$8 = ($var4.$x1 | 0) + 1 | 0;
            var$9 = $var4.$y00;
            var$10 = var$9 | 0;
            var$11 = ($var4.$y1 | 0) + 1 | 0;
            $var2 = $var4.$z00;
            var$12 = $var2 | 0;
            var$13 = ($var4.$z1 | 0) + 1 | 0;
            if ($var1 < 0.0)
                var$7 = var$7 + (-1) | 0;
            if (var$9 < 0.0)
                var$10 = var$10 + (-1) | 0;
            if ($var2 < 0.0)
                var$12 = var$12 + (-1) | 0;
            if (var$7 < 0)
                var$7 = 0;
            if (var$10 < 0)
                var$10 = 0;
            if (var$12 < 0)
                var$12 = 0;
            var$14 = var$4.$width0;
            if (var$8 <= var$14)
                var$14 = var$8;
            var$6 = var$4.$depth;
            if (var$11 <= var$6)
                var$6 = var$11;
            var$8 = var$4.$height0;
            if (var$13 <= var$8)
                var$8 = var$13;
            a: {
                while (var$7 < var$14) {
                    var$15 = var$10;
                    while (var$15 < var$6) {
                        var$13 = var$12;
                        while (var$13 < var$8) {
                            cmmlt_Block_$callClinit();
                            $var4 = cmmlt_Block_blocks.data[cmml_Level_getTile(var$4, var$7, var$15, var$13)];
                            if ($var4 !== null && $var4.$getLiquidType() !== cmmll_LiquidType_NOT_LIQUID) {
                                var$6 = 1;
                                break a;
                            }
                            var$13 = var$13 + 1 | 0;
                        }
                        var$15 = var$15 + 1 | 0;
                    }
                    var$7 = var$7 + 1 | 0;
                }
                var$6 = 0;
            }
            var$6 = var$6 ? 0 : 1;
        }
        return var$6;
    }
    function cmm_Entity_move($this, $var1, $var2, $var3) {
        var var$4, $var4, $var5, $var9, $var10, $var11, var$10, var$11, var$12, $var16, $var12, $var15, $var18, $var17, var$18, $var14, $var19;
        if ($this.$noPhysics) {
            cmmp_AABB_move($this.$bb, $var1, $var2, $var3);
            var$4 = $this.$bb;
            $this.$x = (var$4.$x00 + var$4.$x1) / 2.0;
            $this.$y = var$4.$y00 + $this.$heightOffset - $this.$ySlideOffset;
            $this.$z = (var$4.$z00 + var$4.$z1) / 2.0;
        } else {
            $var4 = $this.$x;
            $var5 = $this.$z;
            $var9 = cmmp_AABB_copy($this.$bb);
            $var10 = cmml_Level_getCubes($this.$level2, cmmp_AABB_expand($this.$bb, $var1, $var2, $var3));
            $var11 = 0;
            var$10 = $var2;
            while ($var11 < ju_ArrayList_size($var10)) {
                var$10 = cmmp_AABB_clipYCollide(ju_ArrayList_get($var10, $var11), $this.$bb, var$10);
                $var11 = $var11 + 1 | 0;
            }
            cmmp_AABB_move($this.$bb, 0.0, var$10, 0.0);
            if ($this.$slide) {
                var$11 = $var3;
                var$12 = $var1;
            } else if ($var2 === var$10) {
                var$11 = $var3;
                var$12 = $var1;
            } else {
                var$11 = 0.0;
                var$10 = 0.0;
                var$12 = 0.0;
            }
            a: {
                b: {
                    if (!$this.$onGround) {
                        if ($var2 === var$10)
                            break b;
                        if ($var2 >= 0.0)
                            break b;
                    }
                    $var16 = 1;
                    break a;
                }
                $var16 = 0;
            }
            $var12 = 0;
            while ($var12 < ju_ArrayList_size($var10)) {
                var$12 = cmmp_AABB_clipXCollide(ju_ArrayList_get($var10, $var12), $this.$bb, var$12);
                $var12 = $var12 + 1 | 0;
            }
            cmmp_AABB_move($this.$bb, var$12, 0.0, 0.0);
            if (!$this.$slide && $var1 !== var$12) {
                var$11 = 0.0;
                var$10 = 0.0;
                var$12 = 0.0;
            }
            $var15 = 0;
            while ($var15 < ju_ArrayList_size($var10)) {
                var$11 = cmmp_AABB_clipZCollide(ju_ArrayList_get($var10, $var15), $this.$bb, var$11);
                $var15 = $var15 + 1 | 0;
            }
            cmmp_AABB_move($this.$bb, 0.0, 0.0, var$11);
            if (!$this.$slide && $var3 !== var$11) {
                var$11 = 0.0;
                var$10 = 0.0;
                var$12 = 0.0;
            }
            $var18 = $this.$footSize;
            if ($var18 <= 0.0) {
                $var17 = var$12;
                $var18 = var$10;
                var$18 = var$11;
            } else if (!$var16) {
                $var17 = var$12;
                $var18 = var$10;
                var$18 = var$11;
            } else if ($this.$ySlideOffset >= 0.05000000074505806) {
                $var17 = var$12;
                $var18 = var$10;
                var$18 = var$11;
            } else if ($var1 === var$12 && $var3 === var$11) {
                $var17 = var$12;
                $var18 = var$10;
                var$18 = var$11;
            } else {
                $var14 = cmmp_AABB_copy($this.$bb);
                var$4 = cmmp_AABB_copy($var9);
                $this.$bb = var$4;
                $var9 = cmml_Level_getCubes($this.$level2, cmmp_AABB_expand(var$4, $var1, $var18, $var3));
                $var15 = 0;
                while ($var15 < ju_ArrayList_size($var9)) {
                    $var18 = cmmp_AABB_clipYCollide(ju_ArrayList_get($var9, $var15), $this.$bb, $var18);
                    $var15 = $var15 + 1 | 0;
                }
                cmmp_AABB_move($this.$bb, 0.0, $var18, 0.0);
                if ($this.$slide) {
                    var$18 = $var3;
                    $var17 = $var1;
                } else if ($var2 === $var18) {
                    var$18 = $var3;
                    $var17 = $var1;
                } else {
                    var$18 = 0.0;
                    $var18 = 0.0;
                    $var17 = 0.0;
                }
                $var19 = 0;
                while ($var19 < ju_ArrayList_size($var9)) {
                    $var17 = cmmp_AABB_clipXCollide(ju_ArrayList_get($var9, $var19), $this.$bb, $var17);
                    $var19 = $var19 + 1 | 0;
                }
                cmmp_AABB_move($this.$bb, $var17, 0.0, 0.0);
                if (!$this.$slide && $var1 !== $var17) {
                    var$18 = 0.0;
                    $var18 = 0.0;
                    $var17 = 0.0;
                }
                $var19 = 0;
                while ($var19 < ju_ArrayList_size($var9)) {
                    var$18 = cmmp_AABB_clipZCollide(ju_ArrayList_get($var9, $var19), $this.$bb, var$18);
                    $var19 = $var19 + 1 | 0;
                }
                cmmp_AABB_move($this.$bb, 0.0, 0.0, var$18);
                if (!$this.$slide && $var3 !== var$18) {
                    var$18 = 0.0;
                    $var18 = 0.0;
                    $var17 = 0.0;
                }
                if (var$12 * var$12 + var$11 * var$11 >= $var17 * $var17 + var$18 * var$18) {
                    $this.$bb = cmmp_AABB_copy($var14);
                    $var17 = var$12;
                    $var18 = var$10;
                    var$18 = var$11;
                } else
                    $this.$ySlideOffset = $this.$ySlideOffset + 0.5;
            }
            $var19 = $rt_compare($var1, $var17);
            $var15 = !$var19 && $var3 === var$18 ? 0 : 1;
            $this.$horizontalCollision = $var15;
            $var11 = $rt_compare($var2, $var18);
            $var16 = $var11 && $var2 < 0.0 ? 1 : 0;
            $this.$onGround = $var16;
            $this.$collision = !$var15 && !$var11 ? 0 : 1;
            if ($var16) {
                $var1 = $this.$fallDistance;
                if ($var1 > 0.0) {
                    $this.$causeFallDamage($var1);
                    $this.$fallDistance = 0.0;
                }
            } else if ($var18 < 0.0)
                $this.$fallDistance = $this.$fallDistance - $var18;
            if ($var19)
                $this.$xd0 = 0.0;
            if ($var11)
                $this.$yd0 = 0.0;
            if ($var3 !== var$18)
                $this.$zd0 = 0.0;
            var$4 = $this.$bb;
            $var1 = (var$4.$x00 + var$4.$x1) / 2.0;
            $this.$x = $var1;
            $this.$y = var$4.$y00 + $this.$heightOffset - $this.$ySlideOffset;
            $var2 = (var$4.$z00 + var$4.$z1) / 2.0;
            $this.$z = $var2;
            $var18 = $var1 - $var4;
            $var17 = $var2 - $var5;
            $this.$walkDist = $this.$walkDist + cmu_MathHelper_sqrt($var18 * $var18 + $var17 * $var17) * 0.6;
            if ($this.$makeStepSound) {
                $var19 = cmml_Level_getTile($this.$level2, $this.$x | 0, $this.$y - 0.20000000298023224 - $this.$heightOffset | 0, $this.$z | 0);
                $var1 = $this.$walkDist;
                $var15 = $this.$nextStep;
                if ($var1 > $var15 && $var19 > 0) {
                    $this.$nextStep = $var15 + 1 | 0;
                    cmmlt_Block_$callClinit();
                    var$4 = cmmlt_Block_blocks.data[$var19].$stepsound;
                    cmmlt_Tile$SoundType_$callClinit();
                    if (var$4 !== cmmlt_Tile$SoundType_none) {
                        $var14 = var$4.$name0;
                        $var9 = jl_StringBuilder__init_();
                        jl_StringBuilder_append(jl_StringBuilder_append($var9, $rt_s(60)), $var14);
                        cmm_Entity_playSound($this, jl_StringBuilder_toString($var9), cmmlt_Tile$SoundType_getVolume(var$4) * 0.75, cmmlt_Tile$SoundType_getPitch(var$4));
                    }
                }
            }
            $this.$ySlideOffset = $this.$ySlideOffset * 0.4000000059604645;
        }
    }
    function cmm_Entity_causeFallDamage($this, $var1) {}
    function cmm_Entity_isInWater($this) {
        return cmml_Level_containsLiquid($this.$level2, cmmp_AABB_grow($this.$bb, 0.0, (-0.4000000059604645), 0.0), cmmll_LiquidType_WATER);
    }
    function cmm_Entity_isUnderWater($this) {
        var var$1;
        var$1 = cmml_Level_getTile($this.$level2, $this.$x | 0, $this.$y + 0.11999999731779099 | 0, $this.$z | 0);
        if (!var$1)
            var$1 = 0;
        else {
            cmmlt_Block_$callClinit();
            var$1 = jl_Object_equals(cmmlt_Block_blocks.data[var$1].$getLiquidType(), cmmll_LiquidType_WATER);
        }
        return var$1;
    }
    function cmm_Entity_isInLava($this) {
        return cmml_Level_containsLiquid($this.$level2, cmmp_AABB_grow($this.$bb, 0.0, (-0.4000000059604645), 0.0), cmmll_LiquidType_LAVA);
    }
    function cmm_Entity_moveRelative($this, $var1, $var2, $var3) {
        var var$4, var$5;
        var$4 = cmu_MathHelper_sqrt($var1 * $var1 + $var2 * $var2);
        if (var$4 >= 0.009999999776482582) {
            if (var$4 < 1.0)
                var$4 = 1.0;
            $var3 = $var3 / var$4;
            $var1 = $var1 * $var3;
            $var3 = $var2 * $var3;
            var$4 = cmu_MathHelper_sin($this.$yRot * 3.1415927410125732 / 180.0);
            var$5 = cmu_MathHelper_cos($this.$yRot * 3.1415927410125732 / 180.0);
            $this.$xd0 = $this.$xd0 + $var1 * var$5 - $var3 * var$4;
            $this.$zd0 = $this.$zd0 + $var3 * var$5 + $var1 * var$4;
        }
    }
    function cmm_Entity_getBrightness($this, $var1) {
        var $var4, $var2, $var3;
        $var4 = $this.$x | 0;
        $var2 = $this.$y + $this.$heightOffset / 2.0 - 0.5 | 0;
        $var3 = $this.$z | 0;
        return cmml_Level_getBrightness($this.$level2, $var4, $var2, $var3);
    }
    function cmm_Entity_render($this, $var1, $var2) {}
    function cmm_Entity_setLevel($this, $var1) {
        $this.$level2 = $var1;
    }
    function cmm_Entity_playSound($this, $var1, $var2, $var3) {}
    function cmm_Entity_distanceTo($this, $var1, $var2, $var3) {
        var $var4;
        $var1 = $this.$x - $var1;
        $var2 = $this.$y - $var2;
        $var4 = $this.$z - $var3;
        return cmu_MathHelper_sqrt($var1 * $var1 + $var2 * $var2 + $var4 * $var4);
    }
    function cmm_Entity_playerTouch($this, $var1) {}
    function cmm_Entity_push($this, $var1) {
        var $var2, $var3, var$4;
        $var2 = $var1.$x - $this.$x;
        $var3 = $var1.$z - $this.$z;
        var$4 = $var2 * $var2 + $var3 * $var3;
        if (var$4 >= 0.009999999776482582) {
            var$4 = cmu_MathHelper_sqrt(var$4);
            $var2 = $var2 / var$4;
            $var3 = $var3 / var$4;
            $var2 = $var2 / var$4;
            var$4 = $var3 / var$4;
            $var2 = $var2 * 0.05000000074505806;
            var$4 = var$4 * 0.05000000074505806;
            $var3 = 1.0 - $this.$pushthrough;
            $var2 = $var2 * $var3;
            var$4 = var$4 * $var3;
            cmm_Entity_push0($this,  -$var2, 0.0,  -var$4);
            cmm_Entity_push0($var1, $var2, 0.0, var$4);
        }
    }
    function cmm_Entity_push0($this, $var1, $var2, $var3) {
        $this.$xd0 = $this.$xd0 + $var1;
        $this.$yd0 = $this.$yd0 + $var2;
        $this.$zd0 = $this.$zd0 + $var3;
    }
    function cmm_Entity_hurt($this, $var1, $var2) {}
    function cmm_Entity_intersects($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7;
        var$7 = $this.$bb;
        return $var4 > var$7.$x00 && $var1 < var$7.$x1 ? ($var5 > var$7.$y00 && $var2 < var$7.$y1 ? ($var6 > var$7.$z00 && $var3 < var$7.$z1 ? 1 : 0) : 0) : 0;
    }
    function cmm_Entity_isPickable($this) {
        return 0;
    }
    function cmm_Entity_isPushable($this) {
        return 0;
    }
    function cmm_Entity_isShootable($this) {
        return 0;
    }
    function cmm_Entity_awardKillScore($this, $var1, $var2) {}
    function cmm_Entity_shouldRender($this, $var1) {
        var $var2, $var3, $var4;
        $var2 = $this.$x - $var1.$x3;
        $var3 = $this.$y - $var1.$y3;
        $var4 = $this.$z - $var1.$z3;
        return cmm_Entity_shouldRenderAtSqrDistance($this, $var2 * $var2 + $var3 * $var3 + $var4 * $var4);
    }
    function cmm_Entity_shouldRenderAtSqrDistance($this, $var1) {
        var var$2, $var2;
        var$2 = $this.$bb;
        $var2 = (var$2.$x1 - var$2.$x00 + var$2.$y1 - var$2.$y00 + var$2.$z1 - var$2.$z00) / 3.0 * 64.0;
        return $var1 >= $var2 * $var2 ? 0 : 1;
    }
    function cmm_Entity_renderHover($this, $var1, $var2) {}
    function cmmi_Item() {
        var a = this; cmm_Entity.call(a);
        a.$xd1 = 0.0;
        a.$yd1 = 0.0;
        a.$zd1 = 0.0;
        a.$rot = 0.0;
        a.$resource = 0;
        a.$tickCount = 0;
        a.$age = 0;
    }
    var cmmi_Item_models = null;
    function cmmi_Item__init_(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new cmmi_Item();
        cmmi_Item__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function cmmi_Item__init_0($this, $level1, $x, $y, $z, $block) {
        cmm_Entity__init_($this, $level1);
        $this.$age = 0;
        cmm_Entity_setSize($this, 0.25, 0.25);
        $this.$heightOffset = $this.$bbHeight / 2.0;
        cmm_Entity_setPos($this, $x, $y, $z);
        $this.$resource = $block;
        $this.$rot = jl_Math_random() * 360.0;
        $this.$xd1 = jl_Math_random() * 0.20000000298023224 - 0.10000000149011612;
        $this.$yd1 = 0.20000000298023224;
        $this.$zd1 = jl_Math_random() * 0.20000000298023224 - 0.10000000149011612;
        $this.$makeStepSound = 0;
    }
    function cmmi_Item_tick($this) {
        var var$1, var$2, var$3, var$4;
        $this.$xo = $this.$x;
        $this.$yo = $this.$y;
        $this.$zo = $this.$z;
        var$1 = $this.$yd1 - 0.03999999910593033;
        $this.$yd1 = var$1;
        cmm_Entity_move($this, $this.$xd1, var$1, $this.$zd1);
        var$1 = $this.$xd1 * 0.9800000190734863;
        $this.$xd1 = var$1;
        var$2 = $this.$yd1 * 0.9800000190734863;
        $this.$yd1 = var$2;
        var$3 = $this.$zd1 * 0.9800000190734863;
        $this.$zd1 = var$3;
        if ($this.$onGround) {
            $this.$xd1 = var$1 * 0.699999988079071;
            $this.$zd1 = var$3 * 0.699999988079071;
            $this.$yd1 = var$2 * (-0.5);
        }
        $this.$tickCount = $this.$tickCount + 1 | 0;
        var$4 = $this.$age + 1 | 0;
        $this.$age = var$4;
        if (var$4 >= 6000)
            cmm_Entity_remove($this);
    }
    function cmmi_Item_render($this, $textureManager, $unknown0) {
        var var$3, var$4, $brightness, $unknown1, $unknown2, var$8, var$9, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();$unknown2 = $thread.pop();$unknown1 = $thread.pop();$brightness = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();$unknown0 = $thread.pop();$textureManager = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$3 = $rt_s(43);
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load($textureManager, var$3);
            if ($rt_suspending()) {
                break main;
            }
            var$4 = $tmp;
            $this.$textureId1 = var$4;
            olo_GL11_glBindTexture(3553, var$4);
            $brightness = cmml_Level_getBrightness($this.$level2, $this.$x | 0, $this.$y | 0, $this.$z | 0);
            $unknown1 = $this.$rot + ($this.$tickCount + $unknown0) * 3.0;
            olo_GL11_glPushMatrix();
            olo_GL11_glColor4f($brightness, $brightness, $brightness, 1.0);
            $brightness = cmu_MathHelper_sin($unknown1 / 10.0);
            $unknown2 = $brightness * 0.10000000149011612 + 0.10000000149011612;
            var$8 = $this.$xo;
            var$8 = var$8 + ($this.$x - var$8) * $unknown0;
            var$9 = $this.$yo;
            $unknown2 = var$9 + ($this.$y - var$9) * $unknown0 + $unknown2;
            var$9 = $this.$zo;
            olo_GL11_glTranslatef(var$8, $unknown2, var$9 + ($this.$z - var$9) * $unknown0);
            olo_GL11_glRotatef($unknown1, 0.0, 1.0, 0.0);
            cmmi_ItemModel_generateList(cmmi_Item_models.data[$this.$resource]);
            $unknown0 = $brightness * 0.5 + 0.5;
            $unknown0 = $unknown0 * $unknown0;
            olo_GL11_glColor4f(1.0, 1.0, 1.0, $unknown0 * $unknown0 * 0.4000000059604645);
            olo_GL11_glDisable(3553);
            olo_GL11_glEnable(3042);
            olo_GL11_glBlendFunc(770, 1);
            olo_GL11_glDisable(3008);
            cmmi_ItemModel_generateList(cmmi_Item_models.data[$this.$resource]);
            olo_GL11_glEnable(3008);
            olo_GL11_glDisable(3042);
            olo_GL11_glBlendFunc(770, 771);
            olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
            olo_GL11_glPopMatrix();
            olo_GL11_glEnable(3553);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $textureManager, $unknown0, var$3, var$4, $brightness, $unknown1, $unknown2, var$8, var$9, $ptr);
    }
    function cmmi_Item_playerTouch($this, $player) {
        var $takeEntityAnim;
        if (cmmp_Player_addResource($player, $this.$resource)) {
            $takeEntityAnim = cmmi_TakeEntityAnim__init_($this.$level2, $this, $player);
            cmml_Level_addEntity($this.$level2, $takeEntityAnim);
            cmm_Entity_remove($this);
        }
    }
    function cmmi_Item_initModels() {
        var $unknown0, $var1;
        $unknown0 = 0;
        while ($unknown0 < 256) {
            cmmlt_Block_$callClinit();
            $var1 = cmmlt_Block_blocks.data[$unknown0];
            if ($var1 !== null)
                cmmi_Item_models.data[$unknown0] = cmmi_ItemModel__init_($var1.$textureId0);
            $unknown0 = $unknown0 + 1 | 0;
        }
    }
    function cmmi_Item__clinit_() {
        cmmi_Item_models = $rt_createArray(cmmi_ItemModel, 256);
    }
    function cmmm_ModelManager() {
        var a = this; jl_Object.call(a);
        a.$human = null;
        a.$armoredHuman = null;
        a.$creeper = null;
        a.$skeleton = null;
        a.$zombie = null;
        a.$pig = null;
        a.$sheep = null;
        a.$spider = null;
        a.$sheepFur = null;
    }
    function cmmm_ModelManager__init_() {
        var var_0 = new cmmm_ModelManager();
        cmmm_ModelManager__init_0(var_0);
        return var_0;
    }
    function cmmm_ModelManager__init_0($this) {
        var var$1, var$2;
        $this.$human = cmmm_HumanoidModel__init_0(0.0);
        $this.$armoredHuman = cmmm_HumanoidModel__init_0(1.0);
        $this.$creeper = cmmm_CreeperModel__init_();
        var$1 = new cmmm_SkeletonModel;
        cmmm_ZombieModel__init_(var$1);
        var$2 = cmmm_ModelPart__init_(40, 16);
        var$1.$rightArm = var$2;
        cmmm_ModelPart_setBounds(var$2, (-1.0), (-2.0), (-1.0), 2, 12, 2, 0.0);
        cmmm_ModelPart_setPosition(var$1.$rightArm, (-5.0), 2.0, 0.0);
        var$2 = cmmm_ModelPart__init_(40, 16);
        var$1.$leftArm = var$2;
        var$2.$mirror = 1;
        cmmm_ModelPart_setBounds(var$2, (-1.0), (-2.0), (-1.0), 2, 12, 2, 0.0);
        cmmm_ModelPart_setPosition(var$1.$leftArm, 5.0, 2.0, 0.0);
        var$2 = cmmm_ModelPart__init_(0, 16);
        var$1.$rightLeg = var$2;
        cmmm_ModelPart_setBounds(var$2, (-1.0), 0.0, (-1.0), 2, 12, 2, 0.0);
        cmmm_ModelPart_setPosition(var$1.$rightLeg, (-2.0), 12.0, 0.0);
        var$2 = cmmm_ModelPart__init_(0, 16);
        var$1.$leftLeg = var$2;
        var$2.$mirror = 1;
        cmmm_ModelPart_setBounds(var$2, (-1.0), 0.0, (-1.0), 2, 12, 2, 0.0);
        cmmm_ModelPart_setPosition(var$1.$leftLeg, 2.0, 12.0, 0.0);
        $this.$skeleton = var$1;
        $this.$zombie = cmmm_ZombieModel__init_0();
        var$1 = new cmmm_PigModel;
        cmmm_AnimalModel__init_(var$1, 6, 0.0);
        $this.$pig = var$1;
        var$1 = new cmmm_SheepModel;
        cmmm_AnimalModel__init_(var$1, 12, 0.0);
        var$2 = cmmm_ModelPart__init_(0, 0);
        var$1.$head1 = var$2;
        cmmm_ModelPart_setBounds(var$2, (-3.0), (-4.0), (-6.0), 6, 6, 8, 0.0);
        cmmm_ModelPart_setPosition(var$1.$head1, 0.0, 6.0, (-8.0));
        var$2 = cmmm_ModelPart__init_(28, 8);
        var$1.$body0 = var$2;
        cmmm_ModelPart_setBounds(var$2, (-4.0), (-10.0), (-7.0), 8, 16, 6, 0.0);
        cmmm_ModelPart_setPosition(var$1.$body0, 0.0, 5.0, 2.0);
        $this.$sheep = var$1;
        $this.$spider = cmmm_SpiderModel__init_();
        $this.$sheepFur = cmmm_SheepFurModel__init_();
    }
    function cmmm_ModelManager_getModel($this, $var1) {
        a: {
            if (jl_String_equals($var1, $rt_s(49))) {
                $var1 = $this.$human;
                break a;
            }
            if (jl_String_equals($var1, $rt_s(297))) {
                $var1 = $this.$armoredHuman;
                break a;
            }
            if (jl_String_equals($var1, $rt_s(298))) {
                $var1 = $this.$creeper;
                break a;
            }
            if (jl_String_equals($var1, $rt_s(299))) {
                $var1 = $this.$skeleton;
                break a;
            }
            if (jl_String_equals($var1, $rt_s(300))) {
                $var1 = $this.$zombie;
                break a;
            }
            if (jl_String_equals($var1, $rt_s(301))) {
                $var1 = $this.$pig;
                break a;
            }
            if (jl_String_equals($var1, $rt_s(302))) {
                $var1 = $this.$sheep;
                break a;
            }
            if (jl_String_equals($var1, $rt_s(303))) {
                $var1 = $this.$spider;
                break a;
            }
            if (!jl_String_equals($var1, $rt_s(304))) {
                $var1 = null;
                break a;
            }
            $var1 = $this.$sheepFur;
        }
        return $var1;
    }
    function cmmm_Mob() {
        var a = this; cmm_Entity.call(a);
        a.$invulnerableDuration = 0;
        a.$rot0 = 0.0;
        a.$timeOffs = 0.0;
        a.$speed0 = 0.0;
        a.$rotA = 0.0;
        a.$yBodyRot = 0.0;
        a.$yBodyRotO = 0.0;
        a.$oRun = 0.0;
        a.$run0 = 0.0;
        a.$animStep = 0.0;
        a.$animStepO = 0.0;
        a.$tickCount0 = 0;
        a.$hasHair = 0;
        a.$textureName = null;
        a.$allowAlpha = 0;
        a.$rotOffs = 0.0;
        a.$modelName = null;
        a.$bobStrength = 0.0;
        a.$deathScore = 0;
        a.$renderOffset = 0.0;
        a.$health = 0;
        a.$lastHealth = 0;
        a.$invulnerableTime = 0;
        a.$airSupply = 0;
        a.$hurtTime = 0;
        a.$hurtDuration = 0;
        a.$hurtDir = 0.0;
        a.$deathTime = 0;
        a.$attackTime = 0;
        a.$oTilt = 0.0;
        a.$tilt = 0.0;
        a.$dead = 0;
        a.$ai = null;
    }
    var cmmm_Mob_modelCache = null;
    function cmmm_Mob__init_0(var_0) {
        var var_1 = new cmmm_Mob();
        cmmm_Mob__init_(var_1, var_0);
        return var_1;
    }
    function cmmm_Mob__init_($this, $var1) {
        cmm_Entity__init_($this, $var1);
        $this.$invulnerableDuration = 20;
        $this.$rotA = (jl_Math_random() + 1.0) * 0.009999999776482582;
        $this.$yBodyRot = 0.0;
        $this.$yBodyRotO = 0.0;
        $this.$tickCount0 = 0;
        $this.$hasHair = 1;
        $this.$textureName = $rt_s(305);
        $this.$allowAlpha = 1;
        $this.$rotOffs = 0.0;
        $this.$modelName = null;
        $this.$bobStrength = 1.0;
        $this.$deathScore = 0;
        $this.$renderOffset = 0.0;
        $this.$health = 20;
        $this.$invulnerableTime = 0;
        $this.$airSupply = 300;
        $this.$hurtDir = 0.0;
        $this.$deathTime = 0;
        $this.$attackTime = 0;
        $this.$dead = 0;
        cmm_Entity_setPos($this, $this.$x, $this.$y, $this.$z);
        $this.$timeOffs = jl_Math_random() * 12398.0;
        $this.$rot0 = jl_Math_random() * 3.1415927410125732 * 2.0;
        $this.$speed0 = 1.0;
        $this.$ai = cmmma_BasicAI__init_0();
        $this.$footSize = 0.5;
    }
    function cmmm_Mob_isPickable($this) {
        return $this.$removed ? 0 : 1;
    }
    function cmmm_Mob_isPushable($this) {
        return $this.$removed ? 0 : 1;
    }
    function cmmm_Mob_tick($this) {
        var $var7, var$2, $var1, $var2, $var3, $var4, $var5, $var6;
        $this.$walkDistO = $this.$walkDist;
        $this.$xo = $this.$x;
        $this.$yo = $this.$y;
        $this.$zo = $this.$z;
        $this.$xRotO = $this.$xRot;
        $this.$yRotO = $this.$yRot;
        $this.$oTilt = $this.$tilt;
        $var7 = $this.$attackTime;
        if ($var7 > 0)
            $this.$attackTime = $var7 - 1 | 0;
        $var7 = $this.$hurtTime;
        if ($var7 > 0)
            $this.$hurtTime = $var7 - 1 | 0;
        $var7 = $this.$invulnerableTime;
        if ($var7 > 0)
            $this.$invulnerableTime = $var7 - 1 | 0;
        if ($this.$health <= 0) {
            $var7 = $this.$deathTime + 1 | 0;
            $this.$deathTime = $var7;
            if ($var7 > 20) {
                var$2 = $this.$ai;
                if (var$2 !== null)
                    var$2.$beforeRemove();
                $this.$remove2();
            }
        }
        if (!cmm_Entity_isUnderWater($this))
            $this.$airSupply = 300;
        else {
            $var7 = $this.$airSupply;
            if ($var7 <= 0)
                $this.$hurt(null, 2);
            else
                $this.$airSupply = $var7 - 1 | 0;
        }
        if (cmm_Entity_isInWater($this))
            $this.$fallDistance = 0.0;
        if (cmm_Entity_isInLava($this))
            $this.$hurt(null, 10);
        $this.$animStepO = $this.$animStep;
        $this.$yBodyRotO = $this.$yBodyRot;
        $this.$yRotO = $this.$yRot;
        $this.$xRotO = $this.$xRot;
        $this.$tickCount0 = $this.$tickCount0 + 1 | 0;
        $this.$aiStep();
        $var1 = $this.$x - $this.$xo;
        $var2 = $this.$z - $this.$zo;
        $var3 = cmu_MathHelper_sqrt($var1 * $var1 + $var2 * $var2);
        $var4 = $this.$yBodyRot;
        $var5 = 0.0;
        $this.$oRun = $this.$run0;
        $var6 = 0.0;
        if ($var3 > 0.05000000074505806) {
            $var6 = 1.0;
            $var5 = $var3 * 3.0;
            $var4 = jl_Math_atan2($var2, $var1) * 180.0 / 3.1415927410125732 - 90.0;
        }
        if (!$this.$onGround)
            $var6 = 0.0;
        $var1 = $this.$run0;
        $this.$run0 = $var1 + ($var6 - $var1) * 0.30000001192092896;
        $var1 = $this.$yBodyRot;
        $var2 = $var4 - $var1;
        while ($var2 < (-180.0)) {
            $var2 = $var2 + 360.0;
        }
        while ($var2 >= 180.0) {
            $var2 = $var2 - 360.0;
        }
        $var1 = $var1 + $var2 * 0.10000000149011612;
        $this.$yBodyRot = $var1;
        $var2 = $this.$yRot;
        $var3 = $var2 - $var1;
        while ($var3 < (-180.0)) {
            $var3 = $var3 + 360.0;
        }
        while ($var3 >= 180.0) {
            $var3 = $var3 - 360.0;
        }
        $var7 = $var3 >= (-90.0) && $var3 < 90.0 ? 0 : 1;
        if ($var3 < (-75.0))
            $var3 = (-75.0);
        if ($var3 >= 75.0)
            $var3 = 75.0;
        $var1 = $var2 - $var3;
        $this.$yBodyRot = $var1;
        $var6 = $var1 + $var3 * 0.10000000149011612;
        $this.$yBodyRot = $var6;
        if ($var7)
            $var5 =  -$var5;
        while (true) {
            $var3 = $this.$yRotO;
            if ($var2 - $var3 >= (-180.0))
                break;
            $this.$yRotO = $var3 - 360.0;
        }
        while (true) {
            $var1 = $this.$yRotO;
            if ($var2 - $var1 < 180.0)
                break;
            $this.$yRotO = $var1 + 360.0;
        }
        while (true) {
            $var1 = $this.$yBodyRotO;
            if ($var6 - $var1 >= (-180.0))
                break;
            $this.$yBodyRotO = $var1 - 360.0;
        }
        while (true) {
            $var1 = $this.$yBodyRotO;
            if ($var6 - $var1 < 180.0)
                break;
            $this.$yBodyRotO = $var1 + 360.0;
        }
        while (true) {
            $var1 = $this.$xRot;
            $var2 = $this.$xRotO;
            if ($var1 - $var2 >= (-180.0))
                break;
            $this.$xRotO = $var2 - 360.0;
        }
        while (true) {
            $var2 = $this.$xRotO;
            if ($var1 - $var2 < 180.0)
                break;
            $this.$xRotO = $var2 + 360.0;
        }
        $this.$animStep = $this.$animStep + $var5;
    }
    function cmmm_Mob_aiStep($this) {
        var var$1;
        var$1 = $this.$ai;
        if (var$1 !== null)
            var$1.$tick0($this.$level2, $this);
    }
    function cmmm_Mob_bindTexture($this, $var1) {
        var var$2, var$3, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$2 = $this.$textureName;
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load($var1, var$2);
            if ($rt_suspending()) {
                break main;
            }
            var$3 = $tmp;
            $this.$textureId1 = var$3;
            olo_GL11_glBindTexture(3553, var$3);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, var$2, var$3, $ptr);
    }
    function cmmm_Mob_render($this, $var1, $var2) {
        var var$3, $var6, var$5, var$6, var$7, $var7, $var10, $var4, $var5, var$12, $var8, var$14, var$15, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$15 = $thread.pop();var$14 = $thread.pop();$var8 = $thread.pop();var$12 = $thread.pop();$var5 = $thread.pop();$var4 = $thread.pop();$var10 = $thread.pop();$var7 = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();$var6 = $thread.pop();var$3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if ($this.$modelName === null)
                return;
            var$3 = $this.$attackTime - $var2;
            if (var$3 < 0.0)
                var$3 = 0.0;
            while (true) {
                $var6 = $this.$yBodyRotO;
                var$5 = $this.$yBodyRot;
                if ($var6 - var$5 >= (-180.0))
                    break;
                $this.$yBodyRotO = $var6 + 360.0;
            }
            while (true) {
                var$6 = $this.$yBodyRotO;
                if (var$6 - var$5 < 180.0)
                    break;
                $this.$yBodyRotO = var$6 - 360.0;
            }
            while (true) {
                $var6 = $this.$xRotO;
                var$7 = $this.$xRot;
                if ($var6 - var$7 >= (-180.0))
                    break;
                $this.$xRotO = $var6 + 360.0;
            }
            while (true) {
                $var7 = $this.$xRotO;
                if ($var7 - var$7 < 180.0)
                    break;
                $this.$xRotO = $var7 - 360.0;
            }
            while (true) {
                $var10 = $this.$yRotO;
                $var6 = $this.$yRot;
                if ($var10 - $var6 >= (-180.0))
                    break;
                $this.$yRotO = $var10 + 360.0;
            }
            while (true) {
                $var10 = $this.$yRotO;
                if ($var10 - $var6 < 180.0)
                    break;
                $this.$yRotO = $var10 - 360.0;
            }
            $var4 = var$6 + (var$5 - var$6) * $var2;
            $var5 = $this.$oRun;
            $var5 = $var5 + ($this.$run0 - $var5) * $var2;
            $var6 = $var10 + ($var6 - $var10) * $var2;
            $var7 = $var7 + (var$7 - $var7) * $var2;
            var$12 = $var6 - $var4;
            olo_GL11_glPushMatrix();
            $var10 = $this.$animStepO;
            $var8 = $var10 + ($this.$animStep - $var10) * $var2;
            $var10 = $this.$getBrightness1($var2);
            olo_GL11_glColor3f($var10, $var10, $var10);
            var$14 = 0.0625;
            $var10 =  -jl_Math_abs(cmu_MathHelper_cos($var8 * 0.6661999821662903)) * 5.0 * $var5 * $this.$bobStrength - 23.0;
            $var6 = $this.$xo;
            $var6 = $var6 + ($this.$x - $var6) * $var2;
            var$5 = $this.$yo;
            var$5 = var$5 + ($this.$y - var$5) * $var2 - 1.6200000047683716 + $this.$renderOffset;
            var$6 = $this.$zo;
            olo_GL11_glTranslatef($var6, var$5, var$6 + ($this.$z - var$6) * $var2);
            $var6 = $this.$hurtTime - $var2;
            var$15 = $rt_compare($var6, 0.0);
            if (!(var$15 <= 0 && $this.$health > 0)) {
                if (var$15 < 0)
                    var$6 = 0.0;
                else {
                    $var6 = $var6 / $this.$hurtDuration;
                    var$6 = cmu_MathHelper_sin($var6 * $var6 * $var6 * $var6 * 3.1415927410125732) * 14.0;
                }
                if ($this.$health <= 0) {
                    $var6 = ($this.$deathTime + $var2) / 20.0;
                    var$6 = var$6 + $var6 * $var6 * 800.0;
                    if (var$6 > 90.0)
                        var$6 = 90.0;
                }
                $var6 = $this.$hurtDir;
                var$5 = 180.0 - $var4;
                olo_GL11_glRotatef(var$5 + $this.$rotOffs, 0.0, 1.0, 0.0);
                olo_GL11_glScalef(1.0, 1.0, 1.0);
                olo_GL11_glRotatef( -$var6, 0.0, 1.0, 0.0);
                olo_GL11_glRotatef( -var$6, 0.0, 0.0, 1.0);
                olo_GL11_glRotatef($var6, 0.0, 1.0, 0.0);
                olo_GL11_glRotatef( -(var$5 + $this.$rotOffs), 0.0, 1.0, 0.0);
            }
            olo_GL11_glTranslatef(0.0,  -$var10 * var$14, 0.0);
            olo_GL11_glScalef(1.0, (-1.0), 1.0);
            olo_GL11_glRotatef(180.0 - $var4 + $this.$rotOffs, 0.0, 1.0, 0.0);
            if ($this.$allowAlpha)
                olo_GL11_glDisable(2884);
            else
                olo_GL11_glDisable(3008);
            olo_GL11_glScalef((-1.0), 1.0, 1.0);
            (cmmm_ModelManager_getModel(cmmm_Mob_modelCache, $this.$modelName)).$attackOffset = var$3 / 5.0;
            $ptr = 1;
        case 1:
            $this.$bindTexture($var1);
            if ($rt_suspending()) {
                break main;
            }
            $ptr = 2;
        case 2:
            $this.$renderModel($var1, $var8, $var2, $var5, var$12, $var7, var$14);
            if ($rt_suspending()) {
                break main;
            }
            if ($this.$invulnerableTime <= ($this.$invulnerableDuration - 10 | 0)) {
                olo_GL11_glEnable(3008);
                if ($this.$allowAlpha)
                    olo_GL11_glEnable(2884);
                olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
                olo_GL11_glPopMatrix();
                return;
            }
            olo_GL11_glColor4f(1.0, 1.0, 1.0, 0.75);
            olo_GL11_glEnable(3042);
            olo_GL11_glBlendFunc(770, 1);
            $ptr = 3;
        case 3:
            $this.$bindTexture($var1);
            if ($rt_suspending()) {
                break main;
            }
            $ptr = 4;
        case 4:
            $this.$renderModel($var1, $var8, $var2, $var5, var$12, $var7, var$14);
            if ($rt_suspending()) {
                break main;
            }
            olo_GL11_glDisable(3042);
            olo_GL11_glBlendFunc(770, 771);
            olo_GL11_glEnable(3008);
            if ($this.$allowAlpha)
                olo_GL11_glEnable(2884);
            olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
            olo_GL11_glPopMatrix();
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, var$3, $var6, var$5, var$6, var$7, $var7, $var10, $var4, $var5, var$12, $var8, var$14, var$15, $ptr);
    }
    function cmmm_Mob_renderModel($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        (cmmm_ModelManager_getModel(cmmm_Mob_modelCache, $this.$modelName)).$render8($var2, $var4, $this.$tickCount0 + $var3, $var5, $var6, $var7);
    }
    function cmmm_Mob_hurt($this, $var1, $var2) {
        var $var3, var$4, var$5, $var4;
        if (!$this.$level2.$creativeMode && $this.$health > 0) {
            $this.$ai.$hurt($var1, $var2);
            $var3 = $this.$invulnerableTime;
            var$4 = $this.$invulnerableDuration;
            if ($var3 > var$4 / 2.0) {
                var$4 = $this.$lastHealth - $var2 | 0;
                if (var$4 >= $this.$health)
                    return;
                $this.$health = var$4;
            } else {
                var$5 = $this.$health;
                $this.$lastHealth = var$5;
                $this.$invulnerableTime = var$4;
                $this.$health = var$5 - $var2 | 0;
                $this.$hurtDuration = 10;
                $this.$hurtTime = 10;
            }
            $this.$hurtDir = 0.0;
            if ($var1 === null)
                $this.$hurtDir = (jl_Math_random() * 2.0 | 0) * 180 | 0;
            else {
                $var3 = $var1.$x - $this.$x;
                $var4 = $var1.$z - $this.$z;
                $this.$hurtDir = jl_Math_atan2($var4, $var3) * 180.0 / 3.1415927410125732 - $this.$yRot;
                cmmm_Mob_knockback($this, $var1, $var2, $var3, $var4);
            }
            if ($this.$health <= 0)
                $this.$die($var1);
        }
    }
    function cmmm_Mob_knockback($this, $var1, $var2, $var3, $var4) {
        var $var5, var$6, var$7, var$8;
        $var5 = cmu_MathHelper_sqrt($var3 * $var3 + $var4 * $var4);
        var$6 = $this.$xd0 / 2.0;
        $this.$xd0 = var$6;
        var$7 = $this.$yd0 / 2.0;
        $this.$yd0 = var$7;
        var$8 = $this.$zd0 / 2.0;
        $this.$zd0 = var$8;
        $this.$xd0 = var$6 - $var3 / $var5 * 0.4000000059604645;
        $var3 = var$7 + 0.4000000059604645;
        $this.$yd0 = $var3;
        $this.$zd0 = var$8 - $var4 / $var5 * 0.4000000059604645;
        if ($var3 > 0.4000000059604645)
            $this.$yd0 = 0.4000000059604645;
    }
    function cmmm_Mob_die($this, $var1) {
        var var$2;
        if (!$this.$level2.$creativeMode) {
            var$2 = $this.$deathScore;
            if (var$2 > 0 && $var1 !== null)
                $var1.$awardKillScore($this, var$2);
            $this.$dead = 1;
        }
    }
    function cmmm_Mob_causeFallDamage($this, $var1) {
        var var$2;
        if (!$this.$level2.$creativeMode) {
            var$2 = jl_Math_ceil($var1 - 3.0) | 0;
            if (var$2 > 0)
                $this.$hurt(null, var$2);
        }
    }
    function cmmm_Mob_travel($this, $var1, $var2) {
        var $var3, var$4, $var3_0;
        if (cmm_Entity_isInWater($this)) {
            $var3 = $this.$y;
            cmm_Entity_moveRelative($this, $var1, $var2, 0.019999999552965164);
            cmm_Entity_move($this, $this.$xd0, $this.$yd0, $this.$zd0);
            $var1 = $this.$xd0 * 0.800000011920929;
            $this.$xd0 = $var1;
            $var2 = $this.$yd0 * 0.800000011920929;
            $this.$yd0 = $var2;
            var$4 = $this.$zd0 * 0.800000011920929;
            $this.$zd0 = var$4;
            $var2 = $var2 - 0.02;
            $this.$yd0 = $var2;
            if ($this.$horizontalCollision && cmm_Entity_isFree($this, $var1, $var2 + 0.6000000238418579 - $this.$y + $var3, var$4))
                $this.$yd0 = 0.30000001192092896;
        } else if (cmm_Entity_isInLava($this)) {
            $var3 = $this.$y;
            cmm_Entity_moveRelative($this, $var1, $var2, 0.019999999552965164);
            cmm_Entity_move($this, $this.$xd0, $this.$yd0, $this.$zd0);
            $var1 = $this.$xd0 * 0.5;
            $this.$xd0 = $var1;
            $var2 = $this.$yd0 * 0.5;
            $this.$yd0 = $var2;
            $var3_0 = $this.$zd0 * 0.5;
            $this.$zd0 = $var3_0;
            $var2 = $var2 - 0.02;
            $this.$yd0 = $var2;
            if ($this.$horizontalCollision && cmm_Entity_isFree($this, $var1, $var2 + 0.6000000238418579 - $this.$y + $var3, $var3_0))
                $this.$yd0 = 0.30000001192092896;
        } else {
            cmm_Entity_moveRelative($this, $var1, $var2, !$this.$onGround ? 0.019999999552965164 : 0.10000000149011612);
            cmm_Entity_move($this, $this.$xd0, $this.$yd0, $this.$zd0);
            $var1 = $this.$xd0 * 0.9100000262260437;
            $this.$xd0 = $var1;
            $var2 = $this.$yd0 * 0.9800000190734863;
            $this.$yd0 = $var2;
            $var3 = $this.$zd0 * 0.9100000262260437;
            $this.$zd0 = $var3;
            $this.$yd0 = $var2 - 0.08;
            if ($this.$onGround) {
                $this.$xd0 = $var1 * 0.6000000238418579;
                $this.$zd0 = $var3 * 0.6000000238418579;
            }
        }
    }
    function cmmm_Mob_isShootable($this) {
        return 1;
    }
    function cmmp_ParticleManager() {
        var a = this; jl_Object.call(a);
        a.$particles = null;
        a.$textureManager1 = null;
    }
    function cmmp_ParticleManager__init_(var_0, var_1) {
        var var_2 = new cmmp_ParticleManager();
        cmmp_ParticleManager__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmp_ParticleManager__init_0($this, $var1, $var2) {
        var $var3;
        $this.$particles = $rt_createArray(ju_List, 2);
        if ($var1 !== null)
            $var1.$particleEngine = $this;
        $this.$textureManager1 = $var2;
        $var3 = 0;
        while ($var3 < 2) {
            $this.$particles.data[$var3] = ju_ArrayList__init_();
            $var3 = $var3 + 1 | 0;
        }
    }
    function cmmp_ParticleManager_spawnParticle($this, $var1) {
        var $var2;
        $var2 = $var1.$getParticleTexture();
        ju_ArrayList_add($this.$particles.data[$var2], $var1);
    }
    function cmmp_ParticleManager_tick($this) {
        var $var1, $var2, var$3, var$4, var$5;
        $var1 = 0;
        while ($var1 < 2) {
            $var2 = 0;
            while (true) {
                var$3 = $this.$particles.data;
                if ($var2 >= var$3[$var1].$size0)
                    break;
                var$4 = ju_ArrayList_get(var$3[$var1], $var2);
                var$4.$tick();
                if (!var$4.$removed)
                    var$5 = $var2;
                else {
                    var$4 = $this.$particles.data[$var1];
                    var$5 = $var2 + (-1) | 0;
                    ju_ArrayList_remove(var$4, $var2);
                }
                $var2 = var$5 + 1 | 0;
            }
            $var1 = $var1 + 1 | 0;
        }
    }
    function cmmg_Screen() {
        jl_Object.call(this);
        this.$imgZ = 0.0;
    }
    function cmmg_Screen__init_() {
        var var_0 = new cmmg_Screen();
        cmmg_Screen__init_0(var_0);
        return var_0;
    }
    function cmmg_Screen__init_0($this) {
        $this.$imgZ = 0.0;
    }
    function cmmg_Screen_drawBox($var0, $var1, $var2, $var3, $var4) {
        var $var5, $var6, $var7, $var9, $var8, var$11;
        $var5 = ($var4 >>> 24 | 0) / 255.0;
        $var6 = ($var4 >> 16 & 255) / 255.0;
        $var7 = ($var4 >> 8 & 255) / 255.0;
        $var9 = ($var4 & 255) / 255.0;
        cmmr_ShapeRenderer_$callClinit();
        $var8 = cmmr_ShapeRenderer_instance;
        olo_GL11_glEnable(3042);
        olo_GL11_glDisable(3553);
        olo_GL11_glBlendFunc(770, 771);
        olo_GL11_glColor4f($var6, $var7, $var9, $var5);
        cmmr_ShapeRenderer_begin($var8);
        $var7 = $var0;
        $var9 = $var3;
        cmmr_ShapeRenderer_vertex($var8, $var7, $var9, 0.0);
        var$11 = $var2;
        cmmr_ShapeRenderer_vertex($var8, var$11, $var9, 0.0);
        $var9 = $var1;
        cmmr_ShapeRenderer_vertex($var8, var$11, $var9, 0.0);
        cmmr_ShapeRenderer_vertex($var8, $var7, $var9, 0.0);
        cmmr_ShapeRenderer_end($var8);
        olo_GL11_glEnable(3553);
        olo_GL11_glDisable(3042);
    }
    function cmmg_Screen_drawFadingBox($var0, $var1, $var2, $var3, $var4, $var5) {
        var $var6, $var7, $var8, $var12, $var9, $var10, $var11, $var13;
        $var6 = ($var4 >>> 24 | 0) / 255.0;
        $var7 = ($var4 >> 16 & 255) / 255.0;
        $var8 = ($var4 >> 8 & 255) / 255.0;
        $var12 = ($var4 & 255) / 255.0;
        $var9 = ($var5 >>> 24 | 0) / 255.0;
        $var10 = ($var5 >> 16 & 255) / 255.0;
        $var11 = ($var5 >> 8 & 255) / 255.0;
        $var13 = ($var5 & 255) / 255.0;
        olo_GL11_glDisable(3553);
        olo_GL11_glEnable(3042);
        olo_GL11_glBlendFunc(770, 771);
        olo_GL11_glBegin(7);
        olo_GL11_glColor4f($var7, $var8, $var12, $var6);
        olo_GL11_glColor4f($var10, $var11, $var13, $var9);
        olo_GL11_glEnd();
        olo_GL11_glDisable(3042);
        olo_GL11_glEnable(3553);
    }
    function cmmg_Screen_drawCenteredString($var0, $var1, $var2, $var3, $var4) {
        cmmg_FontRenderer_render($var0, $var1, $var2 - (cmmg_FontRenderer_getWidth($var0, $var1) / 2 | 0) | 0, $var3, $var4);
    }
    function cmmg_Screen_drawImage($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var $var9, var$8, var$9, var$10, var$11, var$12, var$13, var$14, $var7, $var8;
        cmmr_ShapeRenderer_$callClinit();
        $var9 = cmmr_ShapeRenderer_instance;
        cmmr_ShapeRenderer_begin($var9);
        var$8 = $var1;
        var$9 = $var2 + $var6 | 0;
        var$10 = $this.$imgZ;
        var$11 = $var3 * 0.00390625;
        var$12 = ($var4 + $var6 | 0) * 0.00390625;
        cmmr_ShapeRenderer_vertexUV($var9, var$8, var$9, var$10, var$11, var$12);
        var$10 = $var1 + $var5 | 0;
        var$13 = $this.$imgZ;
        var$14 = ($var3 + $var5 | 0) * 0.00390625;
        cmmr_ShapeRenderer_vertexUV($var9, var$10, var$9, var$13, var$14, var$12);
        var$13 = $var2;
        $var7 = $this.$imgZ;
        $var8 = $var4 * 0.00390625;
        cmmr_ShapeRenderer_vertexUV($var9, var$10, var$13, $var7, var$14, $var8);
        cmmr_ShapeRenderer_vertexUV($var9, var$8, var$13, $this.$imgZ, var$11, $var8);
        cmmr_ShapeRenderer_end($var9);
    }
    function cmmg_HUDScreen() {
        var a = this; cmmg_Screen.call(a);
        a.$chat = null;
        a.$random3 = null;
        a.$mc = null;
        a.$width1 = 0;
        a.$height1 = 0;
        a.$hoveredPlayer = null;
        a.$ticks1 = 0;
    }
    function cmmg_HUDScreen__init_(var_0, var_1, var_2) {
        var var_3 = new cmmg_HUDScreen();
        cmmg_HUDScreen__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function cmmg_HUDScreen__init_0($this, $var1, $var2, $var3) {
        cmmg_Screen__init_0($this);
        $this.$chat = ju_ArrayList__init_();
        $this.$random3 = new ju_Random;
        $this.$hoveredPlayer = null;
        $this.$ticks1 = 0;
        $this.$mc = $var1;
        $this.$width1 = ($var2 * 240 | 0) / $var3 | 0;
        $this.$height1 = ($var3 * 240 | 0) / $var3 | 0;
    }
    function cmmg_HUDScreen_render($this, $var1, $var2, $var3, $var4) {
        var $var23, $var5, $var6, $var7, $var8, $var24, $var9, $var10, $var11, $var12, $var13, $var14, $var15, $var26, var$19, $var16, $var19, $var21, $var25, $var27, $var20, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var20 = $thread.pop();$var27 = $thread.pop();$var25 = $thread.pop();$var21 = $thread.pop();$var19 = $thread.pop();$var16 = $thread.pop();var$19 = $thread.pop();$var26 = $thread.pop();$var15 = $thread.pop();$var14 = $thread.pop();$var13 = $thread.pop();$var12 = $thread.pop();$var11 = $thread.pop();$var10 = $thread.pop();$var9 = $thread.pop();$var24 = $thread.pop();$var8 = $thread.pop();$var7 = $thread.pop();$var6 = $thread.pop();$var5 = $thread.pop();$var23 = $thread.pop();$var4
            = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $var23 = $this.$mc;
            $var5 = $var23.$fontRenderer;
            cmmr_Renderer_enableGuiMode($var23.$renderer);
            $var6 = $this.$mc.$textureManager;
            $var2 = 3553;
            $var23 = $rt_s(306);
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load($var6, $var23);
            if ($rt_suspending()) {
                break main;
            }
            $var3 = $tmp;
            olo_GL11_glBindTexture($var2, $var3);
            cmmr_ShapeRenderer_$callClinit();
            $var7 = cmmr_ShapeRenderer_instance;
            olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
            olo_GL11_glEnable(3042);
            $var8 = $this.$mc.$player.$inventory;
            $this.$imgZ = (-90.0);
            cmmg_Screen_drawImage($this, ($this.$width1 / 2 | 0) - 91 | 0, $this.$height1 - 22 | 0, 0, 0, 182, 22);
            cmmg_Screen_drawImage($this, ((($this.$width1 / 2 | 0) - 91 | 0) - 1 | 0) + ($var8.$selected0 * 20 | 0) | 0, ($this.$height1 - 22 | 0) - 1 | 0, 0, 22, 24, 22);
            $var2 = 3553;
            $var23 = $this.$mc.$textureManager;
            $var24 = $rt_s(307);
            $ptr = 2;
        case 2:
            $tmp = cmmr_TextureManager_load($var23, $var24);
            if ($rt_suspending()) {
                break main;
            }
            $var3 = $tmp;
            olo_GL11_glBindTexture($var2, $var3);
            cmmg_Screen_drawImage($this, ($this.$width1 / 2 | 0) - 7 | 0, ($this.$height1 / 2 | 0) - 7 | 0, 0, 0, 16, 16);
            $var23 = $this.$mc.$player;
            $var2 = $var23.$invulnerableTime;
            $var9 = (($var2 / 3 | 0) % 2 | 0) != 1 ? 0 : 1;
            if ($var2 < 10)
                $var9 = 0;
            a: {
                $var10 = $var23.$health;
                $var11 = $var23.$lastHealth;
                ju_Random_setSeed($this.$random3, Long_fromInt($rt_imul($this.$ticks1, 312871)));
                if (cmmg_GameMode_isSurvival($this.$mc.$gamemode)) {
                    $var12 = 0;
                    $var4 = $rt_compare($var10, 4);
                    while ($var12 < 10) {
                        $var13 = 0;
                        if ($var9)
                            $var13 = 1;
                        $var14 = (($this.$width1 / 2 | 0) - 91 | 0) + ($var12 << 3) | 0;
                        $var15 = $this.$height1 - 32 | 0;
                        if ($var4 <= 0)
                            $var15 = $var15 + ju_Random_nextInt($this.$random3, 2) | 0;
                        cmmg_Screen_drawImage($this, $var14, $var15, 16 + ($var13 * 9 | 0) | 0, 0, 9, 9);
                        if ($var9) {
                            $var2 = $rt_compare(($var12 << 1) + 1 | 0, $var11);
                            if ($var2 < 0)
                                cmmg_Screen_drawImage($this, $var14, $var15, 70, 0, 9, 9);
                            if (!$var2)
                                cmmg_Screen_drawImage($this, $var14, $var15, 79, 0, 9, 9);
                        }
                        $var2 = $rt_compare(($var12 << 1) + 1 | 0, $var10);
                        if ($var2 < 0)
                            cmmg_Screen_drawImage($this, $var14, $var15, 52, 0, 9, 9);
                        if (!$var2)
                            cmmg_Screen_drawImage($this, $var14, $var15, 61, 0, 9, 9);
                        $var12 = $var12 + 1 | 0;
                    }
                    if (cmm_Entity_isUnderWater($this.$mc.$player)) {
                        $var2 = jl_Math_ceil(($this.$mc.$player.$airSupply - 2 | 0) * 10.0 / 300.0) | 0;
                        $var26 = (jl_Math_ceil($this.$mc.$player.$airSupply * 10.0 / 300.0) | 0) - $var2 | 0;
                        $var14 = 0;
                        $var3 = $var2 + $var26 | 0;
                        while (true) {
                            if ($var14 >= $var3)
                                break a;
                            if ($var14 >= $var2)
                                cmmg_Screen_drawImage($this, (($this.$width1 / 2 | 0) - 91 | 0) + ($var14 << 3) | 0, ($this.$height1 - 32 | 0) - 9 | 0, 25, 18, 9, 9);
                            else
                                cmmg_Screen_drawImage($this, (($this.$width1 / 2 | 0) - 91 | 0) + ($var14 << 3) | 0, ($this.$height1 - 32 | 0) - 9 | 0, 16, 18, 9, 9);
                            $var14 = $var14 + 1 | 0;
                        }
                    }
                }
            }
            olo_GL11_glDisable(3042);
            $var12 = 0;
            while (true) {
                var$19 = $var8.$slots.data;
                if ($var12 >= var$19.length)
                    break;
                $var26 = (($this.$width1 / 2 | 0) - 90 | 0) + ($var12 * 20 | 0) | 0;
                $var14 = $this.$height1 - 16 | 0;
                $var3 = var$19[$var12];
                if ($var3 > 0) {
                    olo_GL11_glPushMatrix();
                    olo_GL11_glTranslatef($var26, $var14, (-50.0));
                    var$19 = $var8.$popTime.data;
                    if (var$19[$var12] > 0) {
                        $var16 = (var$19[$var12] - $var1) / 5.0;
                        $var19 = $var16 * $var16 * 3.1415927410125732;
                        $var21 =  -cmu_MathHelper_sin($var19) * 8.0;
                        $var19 = cmu_MathHelper_sin($var19) + 1.0;
                        $var16 = cmu_MathHelper_sin($var16 * 3.1415927410125732) + 1.0;
                        olo_GL11_glTranslatef(10.0, $var21 + 10.0, 0.0);
                        olo_GL11_glScalef($var19, $var16, 1.0);
                        olo_GL11_glTranslatef((-10.0), (-10.0), 0.0);
                    }
                    olo_GL11_glScalef(10.0, 10.0, 10.0);
                    olo_GL11_glTranslatef(1.0, 0.5, 0.0);
                    olo_GL11_glRotatef((-30.0), 1.0, 0.0, 0.0);
                    olo_GL11_glRotatef(45.0, 0.0, 1.0, 0.0);
                    olo_GL11_glTranslatef((-1.5), 0.5, 0.5);
                    olo_GL11_glScalef((-1.0), (-1.0), (-1.0));
                    $var23 = $rt_s(43);
                    $ptr = 3;
                    continue main;
                }
                $var12 = $var12 + 1 | 0;
            }
            cmmg_FontRenderer_render($var5, $rt_s(308), 2, 2, 16777215);
            $var23 = $this.$mc;
            if ($var23.$settings.$showFrameRate)
                cmmg_FontRenderer_render($var5, $var23.$debug, 2, 12, 16777215);
            $var23 = $this.$mc;
            if ($var23.$gamemode instanceof cmmg_SurvivalGameMode) {
                $var2 = cmmp_Player_getScore($var23.$player);
                $var23 = jl_StringBuilder__init_();
                jl_StringBuilder_append0(jl_StringBuilder_append($var23, $rt_s(309)), $var2);
                $var24 = jl_StringBuilder_toString($var23);
                cmmg_FontRenderer_render($var5, $var24, ($this.$width1 - cmmg_FontRenderer_getWidth($var5, $var24) | 0) - 2 | 0, 2, 16777215);
                $var2 = $this.$mc.$player.$arrows;
                $var23 = jl_StringBuilder__init_();
                jl_StringBuilder_append0(jl_StringBuilder_append($var23, $rt_s(310)), $var2);
                cmmg_FontRenderer_render($var5, jl_StringBuilder_toString($var23), ($this.$width1 / 2 | 0) + 8 | 0, $this.$height1 - 33 | 0, 16777215);
            }
            $var25 = 10;
            $var27 = 0;
            if ($this.$mc.$currentScreen instanceof cmmg_ChatInputScreen) {
                $var25 = 20;
                $var27 = 1;
            }
            $var14 = 0;
            while ($var14 < ju_ArrayList_size($this.$chat) && $var14 < $var25) {
                if (!((ju_ArrayList_get($this.$chat, $var14)).$time >= 200 && !$var27))
                    cmmg_FontRenderer_render($var5, (ju_ArrayList_get($this.$chat, $var14)).$message0, 2, (($this.$height1 - 8 | 0) - ($var14 * 9 | 0) | 0) - 20 | 0, 16777215);
                $var14 = $var14 + 1 | 0;
            }
            $this.$hoveredPlayer = null;
            return;
        case 3:
            $tmp = cmmr_TextureManager_load($var6, $var23);
            if ($rt_suspending()) {
                break main;
            }
            $var20 = $tmp;
            olo_GL11_glBindTexture(3553, $var20);
            cmmr_ShapeRenderer_begin($var7);
            cmmlt_Block_$callClinit();
            cmmlt_Block_blocks.data[$var3].$renderFullbright($var7);
            cmmr_ShapeRenderer_end($var7);
            olo_GL11_glPopMatrix();
            var$19 = $var8.$count0.data;
            if (var$19[$var12] > 1) {
                $var2 = var$19[$var12];
                $var23 = jl_StringBuilder__init_();
                jl_StringBuilder_append0($var23, $var2);
                $var23 = jl_StringBuilder_toString($var23);
                cmmg_FontRenderer_render($var5, $var23, ($var26 + 19 | 0) - cmmg_FontRenderer_getWidth($var5, $var23) | 0, $var14 + 6 | 0, 16777215);
            }
            while (true) {
                $var12 = $var12 + 1 | 0;
                var$19 = $var8.$slots.data;
                if ($var12 >= var$19.length)
                    break;
                $var26 = (($this.$width1 / 2 | 0) - 90 | 0) + ($var12 * 20 | 0) | 0;
                $var14 = $this.$height1 - 16 | 0;
                $var3 = var$19[$var12];
                if ($var3 <= 0)
                    continue;
                else {
                    olo_GL11_glPushMatrix();
                    olo_GL11_glTranslatef($var26, $var14, (-50.0));
                    var$19 = $var8.$popTime.data;
                    if (var$19[$var12] > 0) {
                        $var16 = (var$19[$var12] - $var1) / 5.0;
                        $var19 = $var16 * $var16 * 3.1415927410125732;
                        $var21 =  -cmu_MathHelper_sin($var19) * 8.0;
                        $var19 = cmu_MathHelper_sin($var19) + 1.0;
                        $var16 = cmu_MathHelper_sin($var16 * 3.1415927410125732) + 1.0;
                        olo_GL11_glTranslatef(10.0, $var21 + 10.0, 0.0);
                        olo_GL11_glScalef($var19, $var16, 1.0);
                        olo_GL11_glTranslatef((-10.0), (-10.0), 0.0);
                    }
                    olo_GL11_glScalef(10.0, 10.0, 10.0);
                    olo_GL11_glTranslatef(1.0, 0.5, 0.0);
                    olo_GL11_glRotatef((-30.0), 1.0, 0.0, 0.0);
                    olo_GL11_glRotatef(45.0, 0.0, 1.0, 0.0);
                    olo_GL11_glTranslatef((-1.5), 0.5, 0.5);
                    olo_GL11_glScalef((-1.0), (-1.0), (-1.0));
                    $var23 = $rt_s(43);
                    continue main;
                }
            }
            cmmg_FontRenderer_render($var5, $rt_s(308), 2, 2, 16777215);
            $var23 = $this.$mc;
            if ($var23.$settings.$showFrameRate)
                cmmg_FontRenderer_render($var5, $var23.$debug, 2, 12, 16777215);
            $var23 = $this.$mc;
            if ($var23.$gamemode instanceof cmmg_SurvivalGameMode) {
                $var2 = cmmp_Player_getScore($var23.$player);
                $var23 = jl_StringBuilder__init_();
                jl_StringBuilder_append0(jl_StringBuilder_append($var23, $rt_s(309)), $var2);
                $var24 = jl_StringBuilder_toString($var23);
                cmmg_FontRenderer_render($var5, $var24, ($this.$width1 - cmmg_FontRenderer_getWidth($var5, $var24) | 0) - 2 | 0, 2, 16777215);
                $var2 = $this.$mc.$player.$arrows;
                $var23 = jl_StringBuilder__init_();
                jl_StringBuilder_append0(jl_StringBuilder_append($var23, $rt_s(310)), $var2);
                cmmg_FontRenderer_render($var5, jl_StringBuilder_toString($var23), ($this.$width1 / 2 | 0) + 8 | 0, $this.$height1 - 33 | 0, 16777215);
            }
            $var25 = 10;
            $var27 = 0;
            if ($this.$mc.$currentScreen instanceof cmmg_ChatInputScreen) {
                $var25 = 20;
                $var27 = 1;
            }
            $var14 = 0;
            while ($var14 < ju_ArrayList_size($this.$chat) && $var14 < $var25) {
                if (!((ju_ArrayList_get($this.$chat, $var14)).$time >= 200 && !$var27))
                    cmmg_FontRenderer_render($var5, (ju_ArrayList_get($this.$chat, $var14)).$message0, 2, (($this.$height1 - 8 | 0) - ($var14 * 9 | 0) | 0) - 20 | 0, 16777215);
                $var14 = $var14 + 1 | 0;
            }
            $this.$hoveredPlayer = null;
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, $var23, $var5, $var6, $var7, $var8, $var24, $var9, $var10, $var11, $var12, $var13, $var14, $var15, $var26, var$19, $var16, $var19, $var21, $var25, $var27, $var20, $ptr);
    }
    function cmmp_Player() {
        var a = this; cmmm_Mob.call(a);
        a.$input = null;
        a.$inventory = null;
        a.$userType = 0;
        a.$oBob = 0.0;
        a.$bob = 0.0;
        a.$score = 0;
        a.$arrows = 0;
    }
    var cmmp_Player_newTextureId = 0;
    var cmmp_Player_newTexture = null;
    function cmmp_Player_resetPos($this) {
        var var$1, var$2, var$3, var$4;
        $this.$heightOffset = 1.6200000047683716;
        cmm_Entity_setSize($this, 0.6000000238418579, 1.7999999523162842);
        var$1 = $this.$level2;
        if (var$1 !== null) {
            var$2 = var$1.$xSpawn + 0.5;
            var$3 = var$1.$ySpawn;
            var$4 = var$1.$zSpawn + 0.5;
            a: {
                while (true) {
                    if (var$3 <= 0.0)
                        break a;
                    cmm_Entity_setPos($this, var$2, var$3, var$4);
                    if (!(cmml_Level_getCubes($this.$level2, $this.$bb)).$size0)
                        break;
                    var$3 = var$3 + 1.0;
                }
            }
            $this.$zd0 = 0.0;
            $this.$yd0 = 0.0;
            $this.$xd0 = 0.0;
            $this.$yRot = $this.$level2.$rotSpawn;
            $this.$xRot = 0.0;
        }
        var$1 = $this.$level2;
        if (var$1 !== null)
            var$1.$player0 = $this;
        $this.$health = 20;
        $this.$deathTime = 0;
    }
    function cmmp_Player_aiStep($this) {
        var var$1, $var4, var$3, $var1, $var2, var$6;
        var$1 = $this.$inventory;
        $var4 = 0;
        while (true) {
            var$3 = var$1.$popTime.data;
            if ($var4 >= var$3.length)
                break;
            if (var$3[$var4] > 0)
                var$3[$var4] = var$3[$var4] - 1 | 0;
            $var4 = $var4 + 1 | 0;
        }
        $this.$oBob = $this.$bob;
        var$1 = $this.$input;
        var$1.$xxa = 0.0;
        var$1.$jumping = 0.0;
        var$3 = var$1.$keyStates.data;
        if (var$3[0])
            var$1.$jumping = (-1.0);
        if (var$3[1])
            var$1.$jumping = var$1.$jumping + 1.0;
        if (var$3[2])
            var$1.$xxa = (-1.0);
        if (var$3[3])
            var$1.$xxa = var$1.$xxa + 1.0;
        var$1.$yya = var$3[4];
        cmmm_Mob_aiStep($this);
        $var1 = $this.$xd0;
        $var1 = $var1 * $var1;
        $var2 = $this.$zd0;
        $var1 = cmu_MathHelper_sqrt($var1 + $var2 * $var2);
        $var2 = jl_Math_atan( -$this.$yd0 * 0.20000000298023224) * 15.0;
        if ($var1 > 0.10000000149011612)
            $var1 = 0.10000000149011612;
        $var4 = $this.$onGround;
        if (!($var4 && $this.$health > 0))
            $var1 = 0.0;
        if (!(!$var4 && $this.$health > 0))
            $var2 = 0.0;
        a: {
            var$6 = $this.$bob;
            $this.$bob = var$6 + ($var1 - var$6) * 0.4000000059604645;
            $var1 = $this.$tilt;
            $this.$tilt = $var1 + ($var2 - $var1) * 0.800000011920929;
            if ($this.$health > 0) {
                var$1 = cmml_Level_findEntities($this.$level2, $this, cmmp_AABB_grow($this.$bb, 1.0, 0.0, 1.0));
                if (var$1 !== null) {
                    $var4 = 0;
                    while (true) {
                        if ($var4 >= var$1.$size0)
                            break a;
                        (ju_ArrayList_get(var$1, $var4)).$playerTouch($this);
                        $var4 = $var4 + 1 | 0;
                    }
                }
            }
        }
    }
    function cmmp_Player_render($this, $var1, $var2) {}
    function cmmp_Player_releaseAllKeys($this) {
        var var$1, var$2, var$3;
        var$1 = $this.$input;
        var$2 = 0;
        while (true) {
            var$3 = var$1.$keyStates.data;
            if (var$2 >= var$3.length)
                break;
            var$3[var$2] = 0;
            var$2 = var$2 + 1 | 0;
        }
    }
    function cmmp_Player_setKey($this, $var1, $var2) {
        var var$3, var$4, var$5;
        var$3 = $this.$input;
        var$4 = (-1);
        var$5 = var$3.$settings1;
        if ($var1 == var$5.$forwardKey.$key)
            var$4 = 0;
        if ($var1 == var$5.$backKey.$key)
            var$4 = 1;
        if ($var1 == var$5.$leftKey.$key)
            var$4 = 2;
        if ($var1 == var$5.$rightKey.$key)
            var$4 = 3;
        if ($var1 == var$5.$jumpKey.$key)
            var$4 = 4;
        if (var$4 >= 0)
            var$3.$keyStates.data[var$4] = $var2;
    }
    function cmmp_Player_addResource($this, $var1) {
        var var$2, var$3, var$4;
        var$2 = $this.$inventory;
        var$3 = cmmp_Inventory_getSlot(var$2, $var1);
        if (var$3 < 0)
            var$3 = cmmp_Inventory_getSlot(var$2, (-1));
        if (var$3 < 0)
            $var1 = 0;
        else {
            var$4 = var$2.$count0.data;
            if (var$4[var$3] >= 99)
                $var1 = 0;
            else {
                var$2.$slots.data[var$3] = $var1;
                var$4[var$3] = var$4[var$3] + 1 | 0;
                var$2.$popTime.data[var$3] = 5;
                $var1 = 1;
            }
        }
        return $var1;
    }
    function cmmp_Player_getScore($this) {
        return $this.$score;
    }
    function cmmp_Player_getModel($this) {
        return cmmm_ModelManager_getModel(cmmm_Mob_modelCache, $this.$modelName);
    }
    function cmmp_Player_die($this, $var1) {
        cmm_Entity_setSize($this, 0.20000000298023224, 0.20000000298023224);
        cmm_Entity_setPos($this, $this.$x, $this.$y, $this.$z);
        $this.$yd0 = 0.10000000149011612;
        if ($var1 === null) {
            $this.$zd0 = 0.0;
            $this.$xd0 = 0.0;
        } else {
            $this.$xd0 =  -cmu_MathHelper_cos(($this.$hurtDir + $this.$yRot) * 3.1415927410125732 / 180.0) * 0.10000000149011612;
            $this.$zd0 =  -cmu_MathHelper_sin(($this.$hurtDir + $this.$yRot) * 3.1415927410125732 / 180.0) * 0.10000000149011612;
        }
        $this.$heightOffset = 0.10000000149011612;
    }
    function cmmp_Player_remove($this) {}
    function cmmp_Player_awardKillScore($this, $var1, $var2) {
        $this.$score = $this.$score + $var2 | 0;
    }
    function cmmp_Player_isShootable($this) {
        return 1;
    }
    function cmmp_Player_bindTexture($this, $var1) {
        var var$2, $var2, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var2 = $thread.pop();var$2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$2 = cmmp_Player_newTexture;
            if (var$2 !== null) {
                jn_Buffer_clear($var1.$idBuffer);
                olo_GL11_glGenTextures($var1.$idBuffer);
                $var2 = jn_IntBufferImpl_get0($var1.$idBuffer, 0);
                cmmr_TextureManager_load0($var1, var$2, $var2);
                ju_HashMap_put($var1.$textureImages, jl_Integer_valueOf($var2), var$2);
                cmmp_Player_newTextureId = $var2;
                cmmp_Player_newTexture = null;
            }
            $var2 = cmmp_Player_newTextureId;
            if ($var2 >= 0) {
                olo_GL11_glBindTexture(3553, $var2);
                return;
            }
            var$2 = $rt_s(305);
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load($var1, var$2);
            if ($rt_suspending()) {
                break main;
            }
            $var2 = $tmp;
            olo_GL11_glBindTexture(3553, $var2);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, var$2, $var2, $ptr);
    }
    function cmmp_Player_hurt($this, $var1, $var2) {
        if (!$this.$level2.$creativeMode)
            cmmm_Mob_hurt($this, $var1, $var2);
    }
    function cmmp_Player__clinit_() {
        cmmp_Player_newTextureId = (-1);
    }
    var cmu_MathHelper = $rt_classWithoutFields();
    var cmu_MathHelper_SIN_TABLE = null;
    function cmu_MathHelper_sin($var0) {
        return cmu_MathHelper_SIN_TABLE.data[($var0 * 10430.3779296875 | 0) & 65535];
    }
    function cmu_MathHelper_cos($var0) {
        return cmu_MathHelper_SIN_TABLE.data[($var0 * 10430.3779296875 + 16384.0 | 0) & 65535];
    }
    function cmu_MathHelper_sqrt($var0) {
        return jl_Math_sqrt($var0);
    }
    function cmu_MathHelper__clinit_() {
        var $var0;
        cmu_MathHelper_SIN_TABLE = $rt_createFloatArray(65536);
        $var0 = 0;
        while ($var0 < 65536) {
            cmu_MathHelper_SIN_TABLE.data[$var0] = jl_Math_sin($var0 * 3.141592653589793 * 2.0 / 65536.0);
            $var0 = $var0 + 1 | 0;
        }
    }
    var cmmg_CreativeGameMode = $rt_classWithoutFields(cmmg_GameMode);
    function cmm_MovingObjectPosition() {
        var a = this; jl_Object.call(a);
        a.$entityPos = 0;
        a.$x0 = 0;
        a.$y0 = 0;
        a.$z0 = 0;
        a.$face = 0;
        a.$vec = null;
        a.$entity0 = null;
    }
    function cmm_MovingObjectPosition__init_0(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new cmm_MovingObjectPosition();
        cmm_MovingObjectPosition__init_1(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function cmm_MovingObjectPosition__init_(var_0) {
        var var_1 = new cmm_MovingObjectPosition();
        cmm_MovingObjectPosition__init_2(var_1, var_0);
        return var_1;
    }
    function cmm_MovingObjectPosition__init_1($this, $x, $y, $z, $side, $blockPos) {
        $this.$entityPos = 0;
        $this.$x0 = $x;
        $this.$y0 = $y;
        $this.$z0 = $z;
        $this.$face = $side;
        $this.$vec = cmmm_Vec3D__init_($blockPos.$x3, $blockPos.$y3, $blockPos.$z3);
    }
    function cmm_MovingObjectPosition__init_2($this, $entity) {
        $this.$entityPos = 1;
        $this.$entity0 = $entity;
    }
    function cmml_Level() {
        var a = this; jl_Object.call(a);
        a.$width0 = 0;
        a.$height0 = 0;
        a.$depth = 0;
        a.$blocks0 = null;
        a.$name5 = null;
        a.$creator = null;
        a.$createTime = Long_ZERO;
        a.$xSpawn = 0;
        a.$ySpawn = 0;
        a.$zSpawn = 0;
        a.$rotSpawn = 0.0;
        a.$listeners = null;
        a.$blockers = null;
        a.$random1 = null;
        a.$randId = 0;
        a.$tickList = null;
        a.$blockMap = null;
        a.$networkMode = 0;
        a.$rendererContext$5cd64a7f = null;
        a.$creativeMode = 0;
        a.$waterLevel = 0;
        a.$skyColor = 0;
        a.$fogColor = 0;
        a.$cloudColor = 0;
        a.$unprocessed = 0;
        a.$tickCount1 = 0;
        a.$player0 = null;
        a.$particleEngine = null;
        a.$font = null;
        a.$growTrees = 0;
    }
    function cmml_Level__init_() {
        var var_0 = new cmml_Level();
        cmml_Level__init_0(var_0);
        return var_0;
    }
    function cmml_Level__init_0($this) {
        var var$1;
        $this.$listeners = ju_ArrayList__init_();
        var$1 = new ju_Random;
        $this.$random1 = var$1;
        $this.$randId = ju_Random_nextInt0(var$1);
        $this.$tickList = ju_ArrayList__init_();
        $this.$networkMode = 0;
        $this.$unprocessed = 0;
        $this.$tickCount1 = 0;
        $this.$growTrees = 0;
    }
    function cmml_Level_initTransient($this) {
        var var$1, var$2, var$3, var$4, var$5;
        if ($this.$blocks0 === null) {
            var$1 = new jl_RuntimeException;
            jl_Throwable__init_(var$1, $rt_s(311));
            $rt_throw(var$1);
        }
        $this.$listeners = ju_ArrayList__init_();
        var$2 = $rt_createIntArray($rt_imul($this.$width0, $this.$height0));
        $this.$blockers = var$2;
        ju_Arrays_fill(var$2, $this.$depth);
        cmml_Level_calcLightDepths($this, 0, 0, $this.$width0, $this.$height0);
        var$1 = new ju_Random;
        $this.$random1 = var$1;
        $this.$randId = ju_Random_nextInt0(var$1);
        $this.$tickList = ju_ArrayList__init_();
        if (!$this.$waterLevel)
            $this.$waterLevel = $this.$depth / 2 | 0;
        if (!$this.$skyColor)
            $this.$skyColor = 10079487;
        if (!$this.$fogColor)
            $this.$fogColor = 16777215;
        if (!$this.$cloudColor)
            $this.$cloudColor = 16777215;
        if (!$this.$xSpawn && !$this.$ySpawn && !$this.$zSpawn)
            cmml_Level_findSpawn($this);
        if ($this.$blockMap === null) {
            var$1 = new cmml_BlockMap;
            var$3 = $this.$width0;
            var$4 = $this.$depth;
            var$5 = $this.$height0;
            var$1.$slot = cmml_BlockMap$Slot__init_(var$1, null);
            var$1.$slot2 = cmml_BlockMap$Slot__init_(var$1, null);
            var$1.$all = ju_ArrayList__init_();
            var$1.$tmp = ju_ArrayList__init_();
            var$3 = var$3 / 16 | 0;
            var$1.$width2 = var$3;
            var$4 = var$4 / 16 | 0;
            var$1.$depth0 = var$4;
            var$5 = var$5 / 16 | 0;
            var$1.$height2 = var$5;
            if (!var$3)
                var$1.$width2 = 1;
            if (!var$4)
                var$1.$depth0 = 1;
            if (!var$5)
                var$1.$height2 = 1;
            var$1.$entityGrid = $rt_createArray(ju_ArrayList, $rt_imul($rt_imul(var$1.$width2, var$1.$depth0), var$1.$height2));
            var$3 = 0;
            while (var$3 < var$1.$width2) {
                var$4 = 0;
                while (var$4 < var$1.$depth0) {
                    var$5 = 0;
                    while (var$5 < var$1.$height2) {
                        var$1.$entityGrid.data[$rt_imul($rt_imul(var$5, var$1.$depth0) + var$4 | 0, var$1.$width2) + var$3 | 0] = ju_ArrayList__init_();
                        var$5 = var$5 + 1 | 0;
                    }
                    var$4 = var$4 + 1 | 0;
                }
                var$3 = var$3 + 1 | 0;
            }
            $this.$blockMap = var$1;
        }
    }
    function cmml_Level_setData($this, $var1, $var2, $var3, $var4) {
        var var$5;
        $this.$width0 = $var1;
        $this.$height0 = $var3;
        $this.$depth = $var2;
        $this.$blocks0 = $var4;
        $var4 = $rt_createIntArray($rt_imul($var1, $var3));
        $this.$blockers = $var4;
        ju_Arrays_fill($var4, $var2);
        cmml_Level_calcLightDepths($this, 0, 0, $var1, $var3);
        $var1 = 0;
        while (true) {
            var$5 = $this.$listeners;
            if ($var1 >= var$5.$size0)
                break;
            cmmr_LevelRenderer_refresh(ju_ArrayList_get(var$5, $var1));
            $var1 = $var1 + 1 | 0;
        }
        ju_ArrayList_clear($this.$tickList);
        cmml_Level_findSpawn($this);
        cmml_Level_initTransient($this);
    }
    function cmml_Level_findSpawn($this) {
        var $var1, $var2, $var3, $var4, $var5;
        $var1 = new ju_Random;
        $var2 = 0;
        while (true) {
            $var2 = $var2 + 1 | 0;
            $var3 = ju_Random_nextInt($var1, $this.$width0 / 2 | 0) + ($this.$width0 / 4 | 0) | 0;
            $var4 = ju_Random_nextInt($var1, $this.$height0 / 2 | 0) + ($this.$height0 / 4 | 0) | 0;
            $var5 = cmml_Level_getHighestTile($this, $var3, $var4) + 1 | 0;
            if ($var2 == 10000) {
                $this.$xSpawn = $var3;
                $this.$ySpawn = (-100);
                $this.$zSpawn = $var4;
                return;
            }
            if ($var5 > cmml_Level_getWaterLevel($this))
                break;
        }
        $this.$xSpawn = $var3;
        $this.$ySpawn = $var5;
        $this.$zSpawn = $var4;
    }
    function cmml_Level_calcLightDepths($this, $var5, $var2, $var3, $var4) {
        var var$5, var$6, $var6, $var7, $var8, var$10, $var9, var$12;
        var$5 = $var5 + $var3 | 0;
        var$6 = $var2 + $var4 | 0;
        while ($var5 < var$5) {
            $var6 = $var2;
            while ($var6 < var$6) {
                $var7 = $this.$blockers.data[$var5 + $rt_imul($var6, $this.$width0) | 0];
                $var8 = $this.$depth - 1 | 0;
                while ($var8 > 0) {
                    cmmlt_Block_$callClinit();
                    var$10 = cmmlt_Block_blocks.data[cmml_Level_getTile($this, $var5, $var8, $var6)];
                    if (var$10 !== null ? var$10.$isOpaque() : 0)
                        break;
                    $var8 = $var8 + (-1) | 0;
                }
                a: {
                    $this.$blockers.data[$var5 + $rt_imul($var6, $this.$width0) | 0] = $var8;
                    $var3 = $rt_compare($var7, $var8);
                    if ($var3) {
                        $var9 = $var3 >= 0 ? $var8 : $var7;
                        if ($var3 > 0)
                            $var8 = $var7;
                        var$12 = 0;
                        while (true) {
                            var$10 = $this.$listeners;
                            if (var$12 >= var$10.$size0)
                                break a;
                            cmmr_LevelRenderer_queueChunks(ju_ArrayList_get(var$10, var$12), $var5 - 1 | 0, $var9 - 1 | 0, $var6 - 1 | 0, $var5 + 1 | 0, $var8 + 1 | 0, $var6 + 1 | 0);
                            var$12 = var$12 + 1 | 0;
                        }
                    }
                }
                $var6 = $var6 + 1 | 0;
            }
            $var5 = $var5 + 1 | 0;
        }
    }
    function cmml_Level_getCubes($this, $var1) {
        var $var2, var$3, $var3, $var4, var$6, $var5, $var6, var$9, $var7, $var8, $var9, $var10, var$14;
        $var2 = ju_ArrayList__init_();
        var$3 = $var1.$x00;
        $var3 = var$3 | 0;
        $var4 = ($var1.$x1 | 0) + 1 | 0;
        var$6 = $var1.$y00;
        $var5 = var$6 | 0;
        $var6 = ($var1.$y1 | 0) + 1 | 0;
        var$9 = $var1.$z00;
        $var7 = var$9 | 0;
        $var8 = ($var1.$z1 | 0) + 1 | 0;
        if (var$3 < 0.0)
            $var3 = $var3 + (-1) | 0;
        if (var$6 < 0.0)
            $var5 = $var5 + (-1) | 0;
        if (var$9 < 0.0)
            $var7 = $var7 + (-1) | 0;
        while ($var3 < $var4) {
            $var9 = $var5;
            while ($var9 < $var6) {
                $var10 = $var7;
                while ($var10 < $var8) {
                    if ($var3 >= 0 && $var9 >= 0 && $var10 >= 0 && $var3 < $this.$width0 && $var9 < $this.$depth && $var10 < $this.$height0) {
                        cmmlt_Block_$callClinit();
                        var$14 = cmmlt_Block_blocks.data[cmml_Level_getTile($this, $var3, $var9, $var10)];
                        if (var$14 !== null) {
                            var$14 = var$14.$getCollisionBox($var3, $var9, $var10);
                            if (var$14 !== null && cmmp_AABB_intersectsInner($var1, var$14))
                                ju_ArrayList_add($var2, var$14);
                        }
                    } else if (!($var3 >= 0 && $var9 >= 0 && $var10 >= 0 && $var3 < $this.$width0 && $var10 < $this.$height0)) {
                        cmmlt_Block_$callClinit();
                        var$14 = cmmlt_Block_BEDROCK.$getCollisionBox($var3, $var9, $var10);
                        if (var$14 !== null && cmmp_AABB_intersectsInner($var1, var$14))
                            ju_ArrayList_add($var2, var$14);
                    }
                    $var10 = $var10 + 1 | 0;
                }
                $var9 = $var9 + 1 | 0;
            }
            $var3 = $var3 + 1 | 0;
        }
        return $var2;
    }
    function cmml_Level_setTileNoNeighborChange($this, $var1, $var2, $var3, $var4) {
        return !$this.$networkMode ? cmml_Level_netSetTileNoNeighborChange($this, $var1, $var2, $var3, $var4) : 0;
    }
    function cmml_Level_netSetTileNoNeighborChange($this, $var1, $var2, $var3, $var4) {
        var var$5, $var5, var$7, var$8, var$9, var$10, var$11;
        if ($var1 >= 0 && $var2 >= 0 && $var3 >= 0) {
            var$5 = $this.$width0;
            if ($var1 < var$5 && $var2 < $this.$depth) {
                $var5 = $this.$height0;
                if ($var3 < $var5) {
                    if ($var4 == $this.$blocks0.data[$rt_imul($rt_imul($var2, $var5) + $var3 | 0, var$5) + $var1 | 0])
                        return 0;
                    if (!$var4 && !($var1 && $var3 && $var1 != (var$5 - 1 | 0) && $var3 != ($var5 - 1 | 0))) {
                        var$7 = $var2;
                        if (var$7 >= cmml_Level_getGroundLevel($this) && var$7 < cmml_Level_getWaterLevel($this)) {
                            cmmlt_Block_$callClinit();
                            $var4 = cmmlt_Block_WATER.$id;
                        }
                    }
                    var$8 = $this.$blocks0.data;
                    var$9 = $rt_imul($rt_imul($var2, $this.$height0) + $var3 | 0, $this.$width0) + $var1 | 0;
                    $var5 = var$8[var$9];
                    var$8[var$9] = $var4 << 24 >> 24;
                    if ($var5) {
                        cmmlt_Block_$callClinit();
                        cmmlt_Block_blocks.data[$var5].$onRemoved($this, $var1, $var2, $var3);
                    }
                    if ($var4) {
                        cmmlt_Block_$callClinit();
                        cmmlt_Block_blocks.data[$var4].$onAdded($this, $var1, $var2, $var3);
                    }
                    cmml_Level_calcLightDepths($this, $var1, $var3, 1, 1);
                    $var4 = 0;
                    var$9 = $var1 - 1 | 0;
                    $var5 = $var2 - 1 | 0;
                    var$5 = $var3 - 1 | 0;
                    $var1 = $var1 + 1 | 0;
                    $var2 = $var2 + 1 | 0;
                    var$10 = $var3 + 1 | 0;
                    while (true) {
                        var$11 = $this.$listeners;
                        if ($var4 >= var$11.$size0)
                            break;
                        cmmr_LevelRenderer_queueChunks(ju_ArrayList_get(var$11, $var4), var$9, $var5, var$5, $var1, $var2, var$10);
                        $var4 = $var4 + 1 | 0;
                    }
                    return 1;
                }
            }
        }
        return 0;
    }
    function cmml_Level_setTile($this, $var1, $var2, $var3, $var4) {
        if ($this.$networkMode)
            return 0;
        if (!cmml_Level_setTileNoNeighborChange($this, $var1, $var2, $var3, $var4))
            return 0;
        cmml_Level_updateNeighborsAt($this, $var1, $var2, $var3, $var4);
        return 1;
    }
    function cmml_Level_netSetTile($this, $var1, $var2, $var3, $var4) {
        if (!cmml_Level_netSetTileNoNeighborChange($this, $var1, $var2, $var3, $var4))
            return 0;
        cmml_Level_updateNeighborsAt($this, $var1, $var2, $var3, $var4);
        return 1;
    }
    function cmml_Level_updateNeighborsAt($this, $var1, $var2, $var3, $var4) {
        cmml_Level_updateTile($this, $var1 - 1 | 0, $var2, $var3, $var4);
        cmml_Level_updateTile($this, $var1 + 1 | 0, $var2, $var3, $var4);
        cmml_Level_updateTile($this, $var1, $var2 - 1 | 0, $var3, $var4);
        cmml_Level_updateTile($this, $var1, $var2 + 1 | 0, $var3, $var4);
        cmml_Level_updateTile($this, $var1, $var2, $var3 - 1 | 0, $var4);
        cmml_Level_updateTile($this, $var1, $var2, $var3 + 1 | 0, $var4);
    }
    function cmml_Level_setTileNoUpdate($this, $var1, $var2, $var3, $var4) {
        var var$5, var$6, var$7;
        if ($var1 >= 0 && $var2 >= 0 && $var3 >= 0) {
            var$5 = $this.$width0;
            if ($var1 < var$5 && $var2 < $this.$depth) {
                var$6 = $this.$height0;
                if ($var3 < var$6) {
                    var$7 = $this.$blocks0.data;
                    $var1 = $rt_imul($rt_imul($var2, var$6) + $var3 | 0, var$5) + $var1 | 0;
                    if ($var4 == var$7[$var1])
                        return 0;
                    var$7[$var1] = $var4 << 24 >> 24;
                    return 1;
                }
            }
        }
        return 0;
    }
    function cmml_Level_updateTile($this, $var1, $var2, $var3, $var4) {
        var var$5, var$6, var$7;
        if ($var1 >= 0 && $var2 >= 0 && $var3 >= 0) {
            var$5 = $this.$width0;
            if ($var1 < var$5 && $var2 < $this.$depth) {
                var$6 = $this.$height0;
                if ($var3 < var$6) {
                    cmmlt_Block_$callClinit();
                    var$7 = cmmlt_Block_blocks.data[$this.$blocks0.data[$rt_imul($rt_imul($var2, var$6) + $var3 | 0, var$5) + $var1 | 0]];
                    if (var$7 !== null)
                        var$7.$onNeighborChange($this, $var1, $var2, $var3, $var4);
                }
            }
        }
    }
    function cmml_Level_isLit($this, $var1, $var2, $var3) {
        var var$4;
        a: {
            if ($var1 >= 0 && $var2 >= 0 && $var3 >= 0) {
                var$4 = $this.$width0;
                if ($var1 < var$4 && $var2 < $this.$depth && $var3 < $this.$height0) {
                    if ($var2 < $this.$blockers.data[$var1 + $rt_imul($var3, var$4) | 0]) {
                        $var1 = 0;
                        break a;
                    }
                    $var1 = 1;
                    break a;
                }
            }
            $var1 = 1;
        }
        return $var1;
    }
    function cmml_Level_getTile($this, $var1, $var2, $var3) {
        var var$4, var$5;
        a: {
            if ($var1 >= 0 && $var2 >= 0 && $var3 >= 0) {
                var$4 = $this.$width0;
                if ($var1 < var$4 && $var2 < $this.$depth) {
                    var$5 = $this.$height0;
                    if ($var3 < var$5) {
                        $var1 = $this.$blocks0.data[$rt_imul($rt_imul($var2, var$5) + $var3 | 0, var$4) + $var1 | 0] & 255;
                        break a;
                    }
                }
            }
            $var1 = 0;
        }
        return $var1;
    }
    function cmml_Level_isSolidTile($this, $var1, $var2, $var3) {
        var var$4;
        cmmlt_Block_$callClinit();
        var$4 = cmmlt_Block_blocks.data[cmml_Level_getTile($this, $var1, $var2, $var3)];
        return var$4 !== null ? var$4.$isSolid0() : 0;
    }
    function cmml_Level_tickEntities($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        var$1 = $this.$blockMap;
        var$2 = 0;
        while (true) {
            var$3 = var$1.$all;
            if (var$2 >= var$3.$size0)
                break;
            var$3 = ju_ArrayList_get(var$3, var$2);
            var$3.$tick();
            if (var$3.$removed) {
                var$4 = var$1.$all;
                var$5 = var$2 + (-1) | 0;
                ju_ArrayList_remove(var$4, var$2);
                cmml_BlockMap$Slot_remove(cmml_BlockMap$Slot_init(var$1.$slot, var$3.$xOld, var$3.$yOld, var$3.$zOld), var$3);
            } else {
                var$6 = var$3.$xOld / 16.0 | 0;
                var$7 = var$3.$yOld / 16.0 | 0;
                var$8 = var$3.$zOld / 16.0 | 0;
                var$5 = var$3.$x / 16.0 | 0;
                var$9 = var$3.$y / 16.0 | 0;
                var$10 = var$3.$z / 16.0 | 0;
                if (var$6 == var$5 && var$7 == var$9 && var$8 == var$10)
                    var$5 = var$2;
                else {
                    cmml_BlockMap_moved(var$1, var$3);
                    var$5 = var$2;
                }
            }
            var$2 = var$5 + 1 | 0;
        }
    }
    function cmml_Level_tick($this) {
        var $var7, $var1, $var2, $var6, $var13, $var3, $var4, $var5, $var7_0, var$10, $var10, $var11, $var6_0;
        $var7 = $this.$tickCount1 + 1 | 0;
        $this.$tickCount1 = $var7;
        $var1 = 1;
        $var2 = 1;
        while (true) {
            $var6 = 1 << $var1;
            $var13 = $this.$width0;
            if ($var6 >= $var13)
                break;
            $var1 = $var1 + 1 | 0;
        }
        while (true) {
            $var6 = 1 << $var2;
            $var3 = $this.$height0;
            if ($var6 >= $var3)
                break;
            $var2 = $var2 + 1 | 0;
        }
        a: {
            $var3 = $var3 - 1 | 0;
            $var4 = $var13 - 1 | 0;
            $var5 = $this.$depth - 1 | 0;
            if (!($var7 % 5 | 0)) {
                $var6 = $this.$tickList.$size0;
                $var7_0 = 0;
                while (true) {
                    if ($var7_0 >= $var6)
                        break a;
                    var$10 = ju_ArrayList_remove($this.$tickList, 0);
                    $var7 = var$10.$ticks2;
                    if ($var7 > 0) {
                        var$10.$ticks2 = $var7 - 1 | 0;
                        ju_ArrayList_add($this.$tickList, var$10);
                    } else {
                        $var13 = var$10.$x8;
                        $var10 = var$10.$y7;
                        $var11 = var$10.$z11;
                        if ($var13 >= 0 && $var10 >= 0 && $var11 >= 0 && $var13 < $this.$width0 && $var10 < $this.$depth && $var11 < $this.$height0 ? 1 : 0) {
                            $var7 = $this.$blocks0.data[$rt_imul($rt_imul($var10, $this.$height0) + $var11 | 0, $this.$width0) + $var13 | 0];
                            if ($var7 == var$10.$block0 && $var7 > 0) {
                                cmmlt_Block_$callClinit();
                                cmmlt_Block_blocks.data[$var7].$update4($this, $var13, $var10, $var11, $this.$random1);
                            }
                        }
                    }
                    $var7_0 = $var7_0 + 1 | 0;
                }
            }
        }
        $var6 = $this.$unprocessed + $rt_imul($rt_imul($this.$width0, $this.$height0), $this.$depth) | 0;
        $this.$unprocessed = $var6;
        $var6_0 = $var6 / 200 | 0;
        $this.$unprocessed = $var6 - ($var6_0 * 200 | 0) | 0;
        $var7 = 0;
        while ($var7 < $var6_0) {
            $var6 = ($this.$randId * 3 | 0) + 1013904223 | 0;
            $this.$randId = $var6;
            $var6 = $var6 >> 2;
            $var13 = $var6 & $var4;
            $var10 = $var6 >> $var1 & $var3;
            $var6 = $var6 >> ($var1 + $var2 | 0) & $var5;
            $var11 = $this.$blocks0.data[$rt_imul($rt_imul($var6, $this.$height0) + $var10 | 0, $this.$width0) + $var13 | 0];
            cmmlt_Block_$callClinit();
            if (cmmlt_Block_physics.data[$var11])
                cmmlt_Block_blocks.data[$var11].$update4($this, $var13, $var6, $var10, $this.$random1);
            $var7 = $var7 + 1 | 0;
        }
    }
    function cmml_Level_getGroundLevel($this) {
        return cmml_Level_getWaterLevel($this) - 2.0;
    }
    function cmml_Level_getWaterLevel($this) {
        return $this.$waterLevel;
    }
    function cmml_Level_containsLiquid($this, $var1, $var2) {
        var var$3, $var11, $var4, var$6, $var5, $var6, var$9, $var7, $var8, var$12, $var9;
        var$3 = $var1.$x00;
        $var11 = var$3 | 0;
        $var4 = ($var1.$x1 | 0) + 1 | 0;
        var$6 = $var1.$y00;
        $var5 = var$6 | 0;
        $var6 = ($var1.$y1 | 0) + 1 | 0;
        var$9 = $var1.$z00;
        $var7 = var$9 | 0;
        $var8 = ($var1.$z1 | 0) + 1 | 0;
        if (var$3 < 0.0)
            $var11 = $var11 + (-1) | 0;
        if (var$6 < 0.0)
            $var5 = $var5 + (-1) | 0;
        if (var$9 < 0.0)
            $var7 = $var7 + (-1) | 0;
        if ($var11 < 0)
            $var11 = 0;
        if ($var5 < 0)
            $var5 = 0;
        if ($var7 < 0)
            $var7 = 0;
        var$12 = $this.$width0;
        if ($var4 <= var$12)
            var$12 = $var4;
        $var4 = $this.$depth;
        if ($var6 <= $var4)
            $var4 = $var6;
        $var6 = $this.$height0;
        if ($var8 <= $var6)
            $var6 = $var8;
        while ($var11 < var$12) {
            $var8 = $var5;
            while ($var8 < $var4) {
                $var9 = $var7;
                while ($var9 < $var6) {
                    cmmlt_Block_$callClinit();
                    $var1 = cmmlt_Block_blocks.data[cmml_Level_getTile($this, $var11, $var8, $var9)];
                    if ($var1 !== null && $var1.$getLiquidType() === $var2)
                        return 1;
                    $var9 = $var9 + 1 | 0;
                }
                $var8 = $var8 + 1 | 0;
            }
            $var11 = $var11 + 1 | 0;
        }
        return 0;
    }
    function cmml_Level_addToTickNextTick($this, $var1, $var2, $var3, $var4) {
        var $var5;
        if (!$this.$networkMode) {
            $var5 = new cmml_NextTickListEntry;
            $var5.$x8 = $var1;
            $var5.$y7 = $var2;
            $var5.$z11 = $var3;
            $var5.$block0 = $var4;
            if ($var4 > 0) {
                cmmlt_Block_$callClinit();
                $var5.$ticks2 = cmmlt_Block_blocks.data[$var4].$getTickDelay();
            }
            ju_ArrayList_add($this.$tickList, $var5);
        }
    }
    function cmml_Level_isFree($this, $var1) {
        return (cmml_BlockMap_getEntities($this.$blockMap, null, $var1)).$size0 ? 0 : 1;
    }
    function cmml_Level_findEntities($this, $var1, $var2) {
        return cmml_BlockMap_getEntities($this.$blockMap, $var1, $var2);
    }
    function cmml_Level_isSolid($this, $var1, $var2, $var3, $var4) {
        var var$5, var$6, var$7, var$8;
        var$5 = $var1 - $var4;
        var$6 = $var2 - $var4;
        var$7 = $var3 - $var4;
        if (cmml_Level_isSolid0($this, var$5, var$6, var$7))
            var$8 = 1;
        else {
            $var3 = $var3 + $var4;
            if (cmml_Level_isSolid0($this, var$5, var$6, $var3))
                var$8 = 1;
            else {
                $var2 = $var2 + $var4;
                if (cmml_Level_isSolid0($this, var$5, $var2, var$7))
                    var$8 = 1;
                else if (cmml_Level_isSolid0($this, var$5, $var2, $var3))
                    var$8 = 1;
                else {
                    $var1 = $var1 + $var4;
                    var$8 = cmml_Level_isSolid0($this, $var1, var$6, var$7) ? 1 : cmml_Level_isSolid0($this, $var1, var$6, $var3) ? 1 : !cmml_Level_isSolid0($this, $var1, $var2, var$7) ? cmml_Level_isSolid0($this, $var1, $var2, $var3) : 1;
                }
            }
        }
        return var$8;
    }
    function cmml_Level_isSolid0($this, $var1, $var2, $var3) {
        var var$4;
        a: {
            var$4 = cmml_Level_getTile($this, $var1 | 0, $var2 | 0, $var3 | 0);
            if (var$4 > 0) {
                cmmlt_Block_$callClinit();
                if (cmmlt_Block_blocks.data[var$4].$isSolid0()) {
                    var$4 = 1;
                    break a;
                }
            }
            var$4 = 0;
        }
        return var$4;
    }
    function cmml_Level_getHighestTile($this, $var1, $var2) {
        var $var3, var$4;
        $var3 = $this.$depth;
        while (true) {
            var$4 = $var3 - 1 | 0;
            if (cmml_Level_getTile($this, $var1, var$4, $var2)) {
                cmmlt_Block_$callClinit();
                if (cmmlt_Block_blocks.data[cmml_Level_getTile($this, $var1, var$4, $var2)].$getLiquidType() === cmmll_LiquidType_NOT_LIQUID)
                    break;
            }
            if ($var3 <= 0)
                break;
            $var3 = $var3 + (-1) | 0;
        }
        return $var3;
    }
    function cmml_Level_setSpawnPos($this, $var1, $var2, $var3, $var4) {
        $this.$xSpawn = $var1;
        $this.$ySpawn = $var2;
        $this.$zSpawn = $var3;
        $this.$rotSpawn = $var4;
    }
    function cmml_Level_getBrightness($this, $var1, $var2, $var3) {
        return !cmml_Level_isLit($this, $var1, $var2, $var3) ? 0.6000000238418579 : 1.0;
    }
    function cmml_Level_clip($this, $var1, $var2) {
        var $var3, $var4, $var5, $var6, $var7, $var8, $var9, $var9_0, $var10, $var11, $var12, $var13, $var14, $var15, var$17, var$18, $var16, var$20, $var17, var$22, $var18, $var24, var$25, $var22, $var21;
        if (!($rt_globals.isNaN($var1.$x3) ? 1 : 0) && !($rt_globals.isNaN($var1.$y3) ? 1 : 0) && !($rt_globals.isNaN($var1.$z3) ? 1 : 0)) {
            if (!($rt_globals.isNaN($var2.$x3) ? 1 : 0) && !($rt_globals.isNaN($var2.$y3) ? 1 : 0) && !($rt_globals.isNaN($var2.$z3) ? 1 : 0)) {
                $var3 = jl_Math_floor($var2.$x3) | 0;
                $var4 = jl_Math_floor($var2.$y3) | 0;
                $var5 = jl_Math_floor($var2.$z3) | 0;
                $var6 = jl_Math_floor($var1.$x3) | 0;
                $var7 = jl_Math_floor($var1.$y3) | 0;
                $var8 = jl_Math_floor($var1.$z3) | 0;
                $var9 = 20;
                a: {
                    b: while (true) {
                        $var9_0 = $var9 + (-1) | 0;
                        if ($var9 < 0)
                            return null;
                        if ($rt_globals.isNaN($var1.$x3) ? 1 : 0)
                            break a;
                        if ($rt_globals.isNaN($var1.$y3) ? 1 : 0)
                            break a;
                        if ($rt_globals.isNaN($var1.$z3) ? 1 : 0)
                            break a;
                        if ($var6 == $var3 && $var7 == $var4 && $var8 == $var5)
                            return null;
                        $var10 = 999.0;
                        $var11 = 999.0;
                        $var12 = 999.0;
                        $var9 = $rt_compare($var3, $var6);
                        if ($var9 > 0)
                            $var10 = $var6 + 1.0;
                        if ($var9 < 0)
                            $var10 = $var6;
                        $var6 = $rt_compare($var4, $var7);
                        if ($var6 > 0)
                            $var11 = $var7 + 1.0;
                        if ($var6 < 0)
                            $var11 = $var7;
                        $var7 = $rt_compare($var5, $var8);
                        if ($var7 > 0)
                            $var12 = $var8 + 1.0;
                        if ($var7 < 0)
                            $var12 = $var8;
                        $var13 = 999.0;
                        $var14 = 999.0;
                        $var15 = 999.0;
                        var$17 = $var2.$x3;
                        var$18 = $var1.$x3;
                        $var16 = var$17 - var$18;
                        var$17 = $var2.$y3;
                        var$20 = $var1.$y3;
                        $var17 = var$17 - var$20;
                        var$17 = $var2.$z3;
                        var$22 = $var1.$z3;
                        $var18 = var$17 - var$22;
                        if ($var10 !== 999.0)
                            $var13 = ($var10 - var$18) / $var16;
                        if ($var11 !== 999.0)
                            $var14 = ($var11 - var$20) / $var17;
                        if ($var12 !== 999.0)
                            $var15 = ($var12 - var$22) / $var18;
                        if ($var13 < $var14 && $var13 < $var15) {
                            $var24 = $var9 <= 0 ? 5 : 4;
                            $var1.$x3 = $var10;
                            $var1.$y3 = var$20 + $var17 * $var13;
                            $var1.$z3 = var$22 + $var18 * $var13;
                        } else if ($var14 >= $var15) {
                            $var24 = $var7 <= 0 ? 3 : 2;
                            $var1.$x3 = var$18 + $var16 * $var15;
                            $var1.$y3 = var$20 + $var17 * $var15;
                            $var1.$z3 = $var12;
                        } else {
                            $var24 = $var6 <= 0 ? 1 : 0;
                            $var1.$x3 = var$18 + $var16 * $var14;
                            $var1.$y3 = $var11;
                            $var1.$z3 = var$22 + $var18 * $var14;
                        }
                        var$25 = cmmm_Vec3D__init_($var1.$x3, $var1.$y3, $var1.$z3);
                        $var13 = jl_Math_floor($var1.$x3);
                        var$25.$x3 = $var13;
                        $var6 = $var13 | 0;
                        if ($var24 == 5) {
                            $var6 = $var6 + (-1) | 0;
                            var$25.$x3 = $var13 + 1.0;
                        }
                        $var13 = jl_Math_floor($var1.$y3);
                        var$25.$y3 = $var13;
                        $var7 = $var13 | 0;
                        if ($var24 == 1) {
                            $var7 = $var7 + (-1) | 0;
                            var$25.$y3 = $var13 + 1.0;
                        }
                        $var14 = jl_Math_floor($var1.$z3);
                        var$25.$z3 = $var14;
                        $var8 = $var14 | 0;
                        if ($var24 == 3) {
                            $var8 = $var8 + (-1) | 0;
                            var$25.$z3 = $var14 + 1.0;
                        }
                        c: {
                            $var22 = cmml_Level_getTile($this, $var6, $var7, $var8);
                            cmmlt_Block_$callClinit();
                            $var21 = cmmlt_Block_blocks.data[$var22];
                            if ($var22 > 0 && $var21.$getLiquidType() === cmmll_LiquidType_NOT_LIQUID) {
                                if (!$var21.$isCube()) {
                                    var$25 = cmmlt_Block_clip($var21, $var6, $var7, $var8, $var1, $var2);
                                    if (var$25 === null)
                                        break c;
                                    else
                                        return var$25;
                                }
                                var$25 = cmmlt_Block_clip($var21, $var6, $var7, $var8, $var1, $var2);
                                if (var$25 !== null)
                                    break b;
                            }
                        }
                        $var9 = $var9_0;
                    }
                    return var$25;
                }
                return null;
            }
            return null;
        }
        return null;
    }
    function cmml_Level_maybeGrowTree($this, $var1, $var2, $var3) {
        var $var4, $var5, $var8, $var10, $var6, $var7, $var8_0, $var9, $var9_0, $var13, var$14, $var12, $var11;
        $var4 = ju_Random_nextInt($this.$random1, 3) + 4 | 0;
        $var5 = 1;
        $var8 = ($var2 + 1 | 0) + $var4 | 0;
        $var10 = $var8 - 2 | 0;
        $var6 = $var2;
        while ($var6 <= $var8) {
            $var7 = 1;
            if ($var6 == $var2)
                $var7 = 0;
            if ($var6 >= $var10)
                $var7 = 2;
            $var8_0 = $var1 - $var7 | 0;
            while ($var8_0 <= ($var1 + $var7 | 0) && $var5) {
                $var9 = $var3 - $var7 | 0;
                while ($var9 <= ($var3 + $var7 | 0) && $var5) {
                    a: {
                        if ($var8_0 >= 0 && $var6 >= 0 && $var9 >= 0) {
                            $var9_0 = $this.$width0;
                            if ($var8_0 < $var9_0 && $var6 < $this.$depth) {
                                $var13 = $this.$height0;
                                if ($var9 < $var13) {
                                    if (!($this.$blocks0.data[$rt_imul($rt_imul($var6, $var13) + $var9 | 0, $var9_0) + $var8_0 | 0] & 255))
                                        break a;
                                    $var5 = 0;
                                    break a;
                                }
                            }
                        }
                        $var5 = 0;
                    }
                    $var9 = $var9 + 1 | 0;
                }
                $var8_0 = $var8_0 + 1 | 0;
            }
            $var6 = $var6 + 1 | 0;
        }
        if (!$var5)
            return 0;
        var$14 = $this.$blocks0.data;
        $var13 = $var2 - 1 | 0;
        $var5 = var$14[$rt_imul($rt_imul($var13, $this.$height0) + $var3 | 0, $this.$width0) + $var1 | 0] & 255;
        cmmlt_Block_$callClinit();
        if ($var5 == cmmlt_Block_GRASS.$id && $var2 < (($this.$depth - $var4 | 0) - 1 | 0)) {
            cmml_Level_setTile($this, $var1, $var13, $var3, cmmlt_Block_DIRT.$id);
            $var13 = ($var2 - 3 | 0) + $var4 | 0;
            $var5 = $var2 + $var4 | 0;
            while ($var13 <= $var5) {
                $var8 = $var13 - $var5 | 0;
                $var9_0 = 1 - ($var8 / 2 | 0) | 0;
                $var10 = $var1 - $var9_0 | 0;
                $var6 = $var1 + $var9_0 | 0;
                $var8_0 = $var3 - $var9_0 | 0;
                $var9 = $var3 + $var9_0 | 0;
                while ($var10 <= $var6) {
                    $var12 = $var10 - $var1 | 0;
                    $var7 = $var8_0;
                    while ($var7 <= $var9) {
                        b: {
                            $var11 = $var7 - $var3 | 0;
                            if (jl_Math_abs0($var12) == $var9_0 && jl_Math_abs0($var11) == $var9_0) {
                                if (!ju_Random_nextInt($this.$random1, 2))
                                    break b;
                                if (!$var8)
                                    break b;
                            }
                            cmml_Level_setTile($this, $var10, $var13, $var7, cmmlt_Block_LEAVES.$id);
                        }
                        $var7 = $var7 + 1 | 0;
                    }
                    $var10 = $var10 + 1 | 0;
                }
                $var13 = $var13 + 1 | 0;
            }
            $var13 = 0;
            while ($var13 < $var4) {
                cmml_Level_setTile($this, $var1, $var2 + $var13 | 0, $var3, cmmlt_Block_LOG.$id);
                $var13 = $var13 + 1 | 0;
            }
            return 1;
        }
        return 0;
    }
    function cmml_Level_addEntity($this, $var1) {
        var var$2;
        var$2 = $this.$blockMap;
        ju_ArrayList_add(var$2.$all, $var1);
        cmml_BlockMap$Slot_add(cmml_BlockMap$Slot_init(var$2.$slot, $var1.$x, $var1.$y, $var1.$z), $var1);
        $var1.$xOld = $var1.$x;
        $var1.$yOld = $var1.$y;
        $var1.$zOld = $var1.$z;
        $var1.$blockMap0 = var$2;
        $var1.$level2 = $this;
    }
    function cmml_Level_explode($this, $var1, $var2, $var3, $var4, $var5) {
        var $var6, $var7, $var8, $var9, $var10, $var11, $var13, var$13, $var12, $var13_0, $var14, $var15, $var16, $var17, var$20, var$21, var$22, var$23, var$24, $var18;
        $var6 = $var2 - $var5 - 1.0 | 0;
        $var7 = $var2 + $var5 + 1.0 | 0;
        $var8 = $var3 - $var5 - 1.0 | 0;
        $var9 = $var3 + $var5 + 1.0 | 0;
        $var10 = $var4 - $var5 - 1.0 | 0;
        $var11 = $var4 + $var5 + 1.0 | 0;
        $var13 = $var9 - 1 | 0;
        var$13 = $var5 * $var5;
        $var12 = $var6;
        while ($var12 < $var7) {
            $var13_0 = $var13;
            while ($var13_0 >= $var8) {
                $var14 = $var10;
                while ($var14 < $var11) {
                    a: {
                        $var15 = $var12 + 0.5 - $var2;
                        $var16 = $var13_0 + 0.5 - $var3;
                        $var17 = $var14 + 0.5 - $var4;
                        if ($var12 < 0)
                            break a;
                        if ($var13_0 < 0)
                            break a;
                        if ($var14 < 0)
                            break a;
                        if ($var12 >= $this.$width0)
                            break a;
                        if ($var13_0 >= $this.$depth)
                            break a;
                        if ($var14 >= $this.$height0)
                            break a;
                        if ($var15 * $var15 + $var16 * $var16 + $var17 * $var17 >= var$13)
                            break a;
                        var$20 = cmml_Level_getTile($this, $var12, $var13_0, $var14);
                        if (var$20 <= 0)
                            break a;
                        cmmlt_Block_$callClinit();
                        var$21 = cmmlt_Block_blocks.data;
                        if (!var$21[var$20].$explodes)
                            break a;
                        var$21[var$20].$dropItems($this, $var12, $var13_0, $var14, 0.30000001192092896);
                        cmml_Level_setTile($this, $var12, $var13_0, $var14, 0);
                        cmmlt_Block_blocks.data[var$20].$explode($this, $var12, $var13_0, $var14);
                    }
                    $var14 = $var14 + 1 | 0;
                }
                $var13_0 = $var13_0 + (-1) | 0;
            }
            $var12 = $var12 + 1 | 0;
        }
        var$22 = $this.$blockMap;
        var$13 = $var6;
        var$23 = $var8;
        $var16 = $var10;
        $var15 = $var7;
        $var17 = $var9;
        var$24 = $var11;
        ju_ArrayList_clear(var$22.$tmp);
        $var18 = cmml_BlockMap_getEntities0(var$22, $var1, var$13, var$23, $var16, $var15, $var17, var$24, var$22.$tmp);
        $var13 = 0;
        while ($var13 < $var18.$size0) {
            var$22 = ju_ArrayList_get($var18, $var13);
            $var16 = cmm_Entity_distanceTo(var$22, $var2, $var3, $var4) / $var5;
            if ($var16 <= 1.0)
                var$22.$hurt($var1, (1.0 - $var16) * 15.0 + 1.0 | 0);
            $var13 = $var13 + 1 | 0;
        }
    }
    function cmmr_Chunk() {
        var a = this; jl_Object.call(a);
        a.$level3 = null;
        a.$baseListId0 = 0;
        a.$x9 = 0;
        a.$y8 = 0;
        a.$z12 = 0;
        a.$width3 = 0;
        a.$height3 = 0;
        a.$depth1 = 0;
        a.$visible = 0;
        a.$dirty = null;
        a.$loaded = 0;
    }
    var cmmr_Chunk_renderer = null;
    var cmmr_Chunk_chunkUpdates = 0;
    function cmmr_Chunk_$callClinit() {
        cmmr_Chunk_$callClinit = $rt_eraseClinit(cmmr_Chunk);
        cmmr_Chunk__clinit_();
    }
    function cmmr_Chunk__init_(var_0, var_1, var_2, var_3, var_4, var_5) {
        var var_6 = new cmmr_Chunk();
        cmmr_Chunk__init_0(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
        return var_6;
    }
    function cmmr_Chunk__init_0($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        cmmr_Chunk_$callClinit();
        $this.$baseListId0 = (-1);
        $this.$visible = 0;
        $this.$dirty = $rt_createBooleanArray(2);
        $this.$level3 = $var1;
        $this.$x9 = $var2;
        $this.$y8 = $var3;
        $this.$z12 = $var4;
        $this.$depth1 = 16;
        $this.$height3 = 16;
        $this.$width3 = 16;
        cmu_MathHelper_sqrt(768.0);
        $this.$baseListId0 = $var6;
        cmmr_Chunk_setAllDirty($this);
    }
    function cmmr_Chunk_update($this) {
        var $var1, $var2, $var3, $var4, $var5, $var6, $var7, $var8, $var9, $var10, $var11, $var12, var$13, var$14;
        cmmr_Chunk_$callClinit();
        cmmr_Chunk_chunkUpdates = cmmr_Chunk_chunkUpdates + 1 | 0;
        $var1 = $this.$x9;
        $var2 = $this.$y8;
        $var3 = $this.$z12;
        $var4 = $var1 + $this.$width3 | 0;
        $var5 = $var2 + $this.$height3 | 0;
        $var6 = $var3 + $this.$depth1 | 0;
        $var7 = 0;
        while ($var7 < 2) {
            $this.$dirty.data[$var7] = 1;
            $var7 = $var7 + 1 | 0;
        }
        $var7 = 0;
        a: {
            while (true) {
                if ($var7 >= 2)
                    break a;
                $var8 = 0;
                $var9 = 0;
                olo_GL11_glNewList($this.$baseListId0 + $var7 | 0, 4864);
                cmmr_ShapeRenderer_begin(cmmr_Chunk_renderer);
                $var10 = $var1;
                while ($var10 < $var4) {
                    $var11 = $var2;
                    while ($var11 < $var5) {
                        $var12 = $var3;
                        while ($var12 < $var6) {
                            var$13 = cmml_Level_getTile($this.$level3, $var10, $var11, $var12);
                            if (var$13 > 0) {
                                cmmlt_Block_$callClinit();
                                var$14 = cmmlt_Block_blocks.data[var$13];
                                if (var$14.$getRenderPass() != $var7)
                                    $var8 = 1;
                                else
                                    $var9 = $var9 | var$14.$render9($this.$level3, $var10, $var11, $var12, cmmr_Chunk_renderer);
                            }
                            $var12 = $var12 + 1 | 0;
                        }
                        $var11 = $var11 + 1 | 0;
                    }
                    $var10 = $var10 + 1 | 0;
                }
                cmmr_ShapeRenderer_end(cmmr_Chunk_renderer);
                olo_GL11_glEndList();
                if ($var9)
                    $this.$dirty.data[$var7] = 0;
                if (!$var8)
                    break;
                $var7 = $var7 + 1 | 0;
            }
        }
    }
    function cmmr_Chunk_distanceSquared($this, $var1) {
        var $var2, $var3, $var4;
        $var2 = $var1.$x - $this.$x9;
        $var3 = $var1.$y - $this.$y8;
        $var4 = $var1.$z - $this.$z12;
        return $var2 * $var2 + $var3 * $var3 + $var4 * $var4;
    }
    function cmmr_Chunk_setAllDirty($this) {
        var $var1;
        $var1 = 0;
        while ($var1 < 2) {
            $this.$dirty.data[$var1] = 1;
            $var1 = $var1 + 1 | 0;
        }
    }
    function cmmr_Chunk_dispose($this) {
        cmmr_Chunk_setAllDirty($this);
        $this.$level3 = null;
    }
    function cmmr_Chunk_clip($this, $var1) {
        var var$2, var$3, var$4, var$5, var$6;
        var$2 = $this.$x9;
        var$3 = var$2;
        var$4 = $this.$y8;
        var$5 = var$4;
        var$6 = $this.$z12;
        $this.$visible = cmmr_Frustrum_isBoxInFrustrum($var1, var$3, var$5, var$6, var$2 + $this.$width3 | 0, var$4 + $this.$height3 | 0, var$6 + $this.$depth1 | 0);
    }
    function cmmr_Chunk__clinit_() {
        cmmr_ShapeRenderer_$callClinit();
        cmmr_Chunk_renderer = cmmr_ShapeRenderer_instance;
        cmmr_Chunk_chunkUpdates = 0;
    }
    var jl_Math = $rt_classWithoutFields();
    function jl_Math_sin(var$1) {
        return Math.sin(var$1);
    }
    function jl_Math_cos(var$1) {
        return Math.cos(var$1);
    }
    function jl_Math_atan(var$1) {
        return Math.atan(var$1);
    }
    function jl_Math_log(var$1) {
        return Math.log(var$1);
    }
    function jl_Math_sqrt(var$1) {
        return Math.sqrt(var$1);
    }
    function jl_Math_ceil(var$1) {
        return Math.ceil(var$1);
    }
    function jl_Math_floor(var$1) {
        return Math.floor(var$1);
    }
    function jl_Math_pow($x, $y) {
        return jl_Math_powImpl($x, $y);
    }
    function jl_Math_powImpl(var$1, var$2) {
        return Math.pow(var$1, var$2);
    }
    function jl_Math_atan2(var$1, var$2) {
        return Math.atan2(var$1, var$2);
    }
    function jl_Math_random() {
        return jl_Math_randomImpl();
    }
    function jl_Math_randomImpl() {
        return Math.random();
    }
    function jl_Math_min($a, $b) {
        if ($a < $b)
            $b = $a;
        return $b;
    }
    function jl_Math_max($a, $b) {
        if ($a > $b)
            $b = $a;
        return $b;
    }
    function jl_Math_maxImpl(var$1, var$2) {
        return Math.max(var$1, var$2);
    }
    function jl_Math_max0($a, $b) {
        return jl_Math_maxImpl($a, $b);
    }
    function jl_Math_minImpl(var$1, var$2) {
        return Math.min(var$1, var$2);
    }
    function jl_Math_abs0($n) {
        if ($n < 0)
            $n =  -$n | 0;
        return $n;
    }
    function jl_Math_absImpl(var$1) {
        return Math.abs(var$1);
    }
    function jl_Math_abs($n) {
        return jl_Math_absImpl($n);
    }
    function cmmr_Frustrum() {
        var a = this; jl_Object.call(a);
        a.$frustrum = null;
        a.$projection = null;
        a.$modelview = null;
        a.$clipping = null;
    }
    function cmmr_Frustrum_isBoxInFrustrum($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var $var7, var$8;
        $var7 = 0;
        while ($var7 < 6) {
            var$8 = $this.$frustrum.data;
            if (var$8[$var7].data[0] * $var1 + var$8[$var7].data[1] * $var2 + var$8[$var7].data[2] * $var3 + var$8[$var7].data[3] <= 0.0 && var$8[$var7].data[0] * $var4 + var$8[$var7].data[1] * $var2 + var$8[$var7].data[2] * $var3 + var$8[$var7].data[3] <= 0.0 && var$8[$var7].data[0] * $var1 + var$8[$var7].data[1] * $var5 + var$8[$var7].data[2] * $var3 + var$8[$var7].data[3] <= 0.0 && var$8[$var7].data[0] * $var4 + var$8[$var7].data[1] * $var5 + var$8[$var7].data[2] * $var3 + var$8[$var7].data[3] <= 0.0 && var$8[$var7].data[0]
            * $var1 + var$8[$var7].data[1] * $var2 + var$8[$var7].data[2] * $var6 + var$8[$var7].data[3] <= 0.0 && var$8[$var7].data[0] * $var4 + var$8[$var7].data[1] * $var2 + var$8[$var7].data[2] * $var6 + var$8[$var7].data[3] <= 0.0 && var$8[$var7].data[0] * $var1 + var$8[$var7].data[1] * $var5 + var$8[$var7].data[2] * $var6 + var$8[$var7].data[3] <= 0.0 && var$8[$var7].data[0] * $var4 + var$8[$var7].data[1] * $var5 + var$8[$var7].data[2] * $var6 + var$8[$var7].data[3] <= 0.0)
                return 0;
            $var7 = $var7 + 1 | 0;
        }
        return 1;
    }
    function cmmr_FrustrumImpl() {
        var a = this; cmmr_Frustrum.call(a);
        a.$projectionBuff = null;
        a.$modelviewBuff = null;
        a.$unused0 = null;
    }
    var cmmr_FrustrumImpl_instance = null;
    function cmmr_FrustrumImpl_$callClinit() {
        cmmr_FrustrumImpl_$callClinit = $rt_eraseClinit(cmmr_FrustrumImpl);
        cmmr_FrustrumImpl__clinit_();
    }
    function cmmr_FrustrumImpl_update() {
        var $var0, var$2, var$3, var$4, var$5, var$6;
        cmmr_FrustrumImpl_$callClinit();
        $var0 = cmmr_FrustrumImpl_instance;
        jn_FloatBuffer_clear($var0.$projectionBuff);
        jn_FloatBuffer_clear($var0.$modelviewBuff);
        jn_FloatBuffer_clear($var0.$unused0);
        olo_GL11_glGetFloat(2983, $var0.$projectionBuff);
        olo_GL11_glGetFloat(2982, $var0.$modelviewBuff);
        jn_FloatBuffer_limit(jn_FloatBuffer_flip($var0.$projectionBuff), 16);
        jn_FloatBuffer_get($var0.$projectionBuff, $var0.$projection);
        jn_FloatBuffer_limit(jn_FloatBuffer_flip($var0.$modelviewBuff), 16);
        jn_FloatBuffer_get($var0.$modelviewBuff, $var0.$modelview);
        var$2 = $var0.$clipping.data;
        var$3 = $var0.$modelview.data;
        var$4 = var$3[0];
        var$5 = $var0.$projection.data;
        var$2[0] = var$4 * var$5[0] + var$3[1] * var$5[4] + var$3[2] * var$5[8] + var$3[3] * var$5[12];
        var$2[1] = var$3[0] * var$5[1] + var$3[1] * var$5[5] + var$3[2] * var$5[9] + var$3[3] * var$5[13];
        var$2[2] = var$3[0] * var$5[2] + var$3[1] * var$5[6] + var$3[2] * var$5[10] + var$3[3] * var$5[14];
        var$2[3] = var$3[0] * var$5[3] + var$3[1] * var$5[7] + var$3[2] * var$5[11] + var$3[3] * var$5[15];
        var$2[4] = var$3[4] * var$5[0] + var$3[5] * var$5[4] + var$3[6] * var$5[8] + var$3[7] * var$5[12];
        var$2[5] = var$3[4] * var$5[1] + var$3[5] * var$5[5] + var$3[6] * var$5[9] + var$3[7] * var$5[13];
        var$2[6] = var$3[4] * var$5[2] + var$3[5] * var$5[6] + var$3[6] * var$5[10] + var$3[7] * var$5[14];
        var$2[7] = var$3[4] * var$5[3] + var$3[5] * var$5[7] + var$3[6] * var$5[11] + var$3[7] * var$5[15];
        var$2[8] = var$3[8] * var$5[0] + var$3[9] * var$5[4] + var$3[10] * var$5[8] + var$3[11] * var$5[12];
        var$2[9] = var$3[8] * var$5[1] + var$3[9] * var$5[5] + var$3[10] * var$5[9] + var$3[11] * var$5[13];
        var$2[10] = var$3[8] * var$5[2] + var$3[9] * var$5[6] + var$3[10] * var$5[10] + var$3[11] * var$5[14];
        var$2[11] = var$3[8] * var$5[3] + var$3[9] * var$5[7] + var$3[10] * var$5[11] + var$3[11] * var$5[15];
        var$2[12] = var$3[12] * var$5[0] + var$3[13] * var$5[4] + var$3[14] * var$5[8] + var$3[15] * var$5[12];
        var$2[13] = var$3[12] * var$5[1] + var$3[13] * var$5[5] + var$3[14] * var$5[9] + var$3[15] * var$5[13];
        var$2[14] = var$3[12] * var$5[2] + var$3[13] * var$5[6] + var$3[14] * var$5[10] + var$3[15] * var$5[14];
        var$2[15] = var$3[12] * var$5[3] + var$3[13] * var$5[7] + var$3[14] * var$5[11] + var$3[15] * var$5[15];
        var$3 = $var0.$frustrum;
        var$5 = var$3.data;
        var$5[0].data[0] = var$2[3] - var$2[0];
        var$5[0].data[1] = var$2[7] - var$2[4];
        var$5[0].data[2] = var$2[11] - var$2[8];
        var$5[0].data[3] = var$2[15] - var$2[12];
        cmmr_FrustrumImpl_normalize(var$3, 0);
        var$3 = $var0.$frustrum;
        var$5 = var$3.data;
        var$6 = var$5[1].data;
        var$2 = $var0.$clipping.data;
        var$6[0] = var$2[3] + var$2[0];
        var$5[1].data[1] = var$2[7] + var$2[4];
        var$5[1].data[2] = var$2[11] + var$2[8];
        var$5[1].data[3] = var$2[15] + var$2[12];
        cmmr_FrustrumImpl_normalize(var$3, 1);
        var$3 = $var0.$frustrum;
        var$5 = var$3.data;
        var$6 = var$5[2].data;
        var$2 = $var0.$clipping.data;
        var$6[0] = var$2[3] + var$2[1];
        var$5[2].data[1] = var$2[7] + var$2[5];
        var$5[2].data[2] = var$2[11] + var$2[9];
        var$5[2].data[3] = var$2[15] + var$2[13];
        cmmr_FrustrumImpl_normalize(var$3, 2);
        var$3 = $var0.$frustrum;
        var$5 = var$3.data;
        var$6 = var$5[3].data;
        var$2 = $var0.$clipping.data;
        var$6[0] = var$2[3] - var$2[1];
        var$5[3].data[1] = var$2[7] - var$2[5];
        var$5[3].data[2] = var$2[11] - var$2[9];
        var$5[3].data[3] = var$2[15] - var$2[13];
        cmmr_FrustrumImpl_normalize(var$3, 3);
        var$3 = $var0.$frustrum;
        var$5 = var$3.data;
        var$6 = var$5[4].data;
        var$2 = $var0.$clipping.data;
        var$6[0] = var$2[3] - var$2[2];
        var$5[4].data[1] = var$2[7] - var$2[6];
        var$5[4].data[2] = var$2[11] - var$2[10];
        var$5[4].data[3] = var$2[15] - var$2[14];
        cmmr_FrustrumImpl_normalize(var$3, 4);
        var$3 = $var0.$frustrum;
        var$5 = var$3.data;
        var$6 = var$5[5].data;
        var$2 = $var0.$clipping.data;
        var$6[0] = var$2[3] + var$2[2];
        var$5[5].data[1] = var$2[7] + var$2[6];
        var$5[5].data[2] = var$2[11] + var$2[10];
        var$5[5].data[3] = var$2[15] + var$2[14];
        cmmr_FrustrumImpl_normalize(var$3, 5);
        return cmmr_FrustrumImpl_instance;
    }
    function cmmr_FrustrumImpl_normalize($var0, $var1) {
        var $var2, var$4;
        cmmr_FrustrumImpl_$callClinit();
        $var0 = $var0.data;
        $var2 = cmu_MathHelper_sqrt($var0[$var1].data[0] * $var0[$var1].data[0] + $var0[$var1].data[1] * $var0[$var1].data[1] + $var0[$var1].data[2] * $var0[$var1].data[2]);
        var$4 = $var0[$var1].data;
        var$4[0] = var$4[0] / $var2;
        var$4 = $var0[$var1].data;
        var$4[1] = var$4[1] / $var2;
        var$4 = $var0[$var1].data;
        var$4[2] = var$4[2] / $var2;
        $var0 = $var0[$var1].data;
        $var0[3] = $var0[3] / $var2;
    }
    function cmmr_FrustrumImpl__clinit_() {
        var var$1;
        var$1 = new cmmr_FrustrumImpl;
        cmmr_FrustrumImpl_$callClinit();
        var$1.$frustrum = $rt_createFloatMultiArray([16, 16]);
        var$1.$projection = $rt_createFloatArray(16);
        var$1.$modelview = $rt_createFloatArray(16);
        var$1.$clipping = $rt_createFloatArray(16);
        var$1.$projectionBuff = ol_BufferUtils_createFloatBuffer(16);
        var$1.$modelviewBuff = ol_BufferUtils_createFloatBuffer(16);
        var$1.$unused0 = ol_BufferUtils_createFloatBuffer(16);
        cmmr_FrustrumImpl_instance = var$1;
    }
    function cmmr_ChunkDirtyDistanceComparator() {
        jl_Object.call(this);
        this.$player3 = null;
    }
    function cmmr_ChunkDirtyDistanceComparator__init_(var_0) {
        var var_1 = new cmmr_ChunkDirtyDistanceComparator();
        cmmr_ChunkDirtyDistanceComparator__init_0(var_1, var_0);
        return var_1;
    }
    function cmmr_ChunkDirtyDistanceComparator__init_0($this, $player) {
        $this.$player3 = $player;
    }
    function cmmr_ChunkDirtyDistanceComparator_compare($this, $o1, $o2) {
        var $chunk, $other, var$5;
        $chunk = $o1;
        $other = $o2;
        if (!$chunk.$visible && $other.$visible)
            return (-1);
        if (!$other.$visible)
            return 1;
        var$5 = $rt_compare(cmmr_Chunk_distanceSquared($chunk, $this.$player3), cmmr_Chunk_distanceSquared($other, $this.$player3));
        if (!var$5)
            return 0;
        if (var$5 <= 0)
            return 1;
        return (-1);
    }
    var ju_Collections = $rt_classWithoutFields();
    var ju_Collections_EMPTY_SET = null;
    var ju_Collections_EMPTY_MAP = null;
    var ju_Collections_EMPTY_LIST = null;
    var ju_Collections_EMPTY_ITERATOR = null;
    var ju_Collections_EMPTY_LIST_ITERATOR = null;
    var ju_Collections_reverseOrder = null;
    function ju_Collections_sort($list, $c) {
        var $array, var$4, $i, var$6;
        if ($c === null)
            $c = ju_Comparator$NaturalOrder_INSTANCE;
        $array = $rt_createArray(jl_Object, $list.$size0);
        var$4 = $array.data;
        ju_AbstractCollection_toArray($list, $array);
        ju_Arrays_sort($array, $c);
        $i = 0;
        var$6 = var$4.length;
        while ($i < var$6) {
            $c = var$4[$i];
            ju_ArrayList_checkIndex($list, $i);
            $list.$array0.data[$i] = $c;
            $i = $i + 1 | 0;
        }
    }
    function ju_Collections__clinit_() {
        ju_Collections_EMPTY_SET = new ju_Collections$1;
        ju_Collections_EMPTY_MAP = new ju_Collections$2;
        ju_Collections_EMPTY_LIST = new ju_Collections$3;
        ju_Collections_EMPTY_ITERATOR = new ju_Collections$4;
        ju_Collections_EMPTY_LIST_ITERATOR = new ju_Collections$5;
        ju_Collections_reverseOrder = new ju_Collections$_clinit_$lambda$_59_0;
    }
    function cmmr_ShapeRenderer() {
        var a = this; jl_Object.call(a);
        a.$intBuffer = null;
        a.$floatBuffer = null;
        a.$vertices1 = 0;
        a.$colorValue = 0;
        a.$u1 = 0.0;
        a.$v1 = 0.0;
        a.$color1 = 0;
        a.$texture = 0;
        a.$rawBufferIndex = 0;
        a.$noColor0 = 0;
        a.$normal0 = 0;
        a.$hasNormals = 0;
    }
    var cmmr_ShapeRenderer_instance = null;
    function cmmr_ShapeRenderer_$callClinit() {
        cmmr_ShapeRenderer_$callClinit = $rt_eraseClinit(cmmr_ShapeRenderer);
        cmmr_ShapeRenderer__clinit_();
    }
    function cmmr_ShapeRenderer_end($this) {
        var var$1, var$2, var$3;
        if ($this.$vertices1 > 0) {
            if ($this.$texture)
                olo_GL11_glEnableClientState(32888);
            if ($this.$color1)
                olo_GL11_glEnableClientState(32886);
            if ($this.$hasNormals)
                olo_GL11_glEnableClientState(32885);
            var$1 = $this.$vertices1;
            var$2 = $this.$intBuffer.buffer;
            var$3 = $this.$vertices1 * 7 | 0;
            olo_GL11_glDrawArrays(7, 0, var$1, otji_JSWrapper_wrap(new $rt_globals.Int32Array(var$2, 0, var$3)));
            if ($this.$texture)
                olo_GL11_glDisableClientState(32888);
            if ($this.$color1)
                olo_GL11_glDisableClientState(32886);
            if ($this.$hasNormals)
                olo_GL11_glDisableClientState(32885);
        }
        cmmr_ShapeRenderer_clear($this);
    }
    function cmmr_ShapeRenderer_clear($this) {
        $this.$vertices1 = 0;
        $this.$rawBufferIndex = 0;
    }
    function cmmr_ShapeRenderer_begin($this) {
        cmmr_ShapeRenderer_clear($this);
        $this.$hasNormals = 0;
        $this.$color1 = 0;
        $this.$texture = 0;
        $this.$noColor0 = 0;
    }
    function cmmr_ShapeRenderer_color($this, $par1, $par2, $par3) {
        cmmr_ShapeRenderer_setColorOpaque($this, $par1 * 255.0 | 0, $par2 * 255.0 | 0, $par3 * 255.0 | 0);
    }
    function cmmr_ShapeRenderer_setColorOpaque($this, $par1, $par2, $par3) {
        if (!$this.$noColor0) {
            if ($par1 > 255)
                $par1 = 255;
            if ($par2 > 255)
                $par2 = 255;
            if ($par3 > 255)
                $par3 = 255;
            if ($par1 < 0)
                $par1 = 0;
            if ($par2 < 0)
                $par2 = 0;
            if ($par3 < 0)
                $par3 = 0;
            $this.$color1 = 1;
            $this.$colorValue = (-16777216) | $par3 << 16 | $par2 << 8 | $par1;
        }
    }
    function cmmr_ShapeRenderer_vertexUV($this, $var1, $var2, $var3, $var4, $var5) {
        $this.$texture = 1;
        $this.$u1 = $var4;
        $this.$v1 = $var5;
        cmmr_ShapeRenderer_vertex($this, $var1, $var2, $var3);
    }
    function cmmr_ShapeRenderer_vertex($this, $var1, $var2, $var3) {
        var $bufferIndex, $intBuffer0, $floatBuffer0, var$7, var$8;
        $this.$vertices1 = $this.$vertices1 + 1 | 0;
        $bufferIndex = $this.$rawBufferIndex;
        $intBuffer0 = $this.$intBuffer;
        $floatBuffer0 = $this.$floatBuffer;
        var$7 = $bufferIndex + 0 | 0;
        var$7;
        $floatBuffer0[var$7] = $var1;
        var$7 = $bufferIndex + 1 | 0;
        var$7;
        $floatBuffer0[var$7] = $var2;
        var$7 = $bufferIndex + 2 | 0;
        var$7;
        $floatBuffer0[var$7] = $var3;
        if ($this.$texture) {
            var$7 = $bufferIndex + 3 | 0;
            $var1 = $this.$u1;
            var$7;
            $floatBuffer0[var$7] = $var1;
            var$7 = $bufferIndex + 4 | 0;
            $var1 = $this.$v1;
            var$7;
            $floatBuffer0[var$7] = $var1;
        }
        if ($this.$color1) {
            var$7 = $bufferIndex + 5 | 0;
            var$8 = $this.$colorValue;
            var$7;
            $intBuffer0[var$7] = var$8;
        }
        if ($this.$hasNormals) {
            $bufferIndex = $bufferIndex + 6 | 0;
            var$7 = $this.$normal0;
            $bufferIndex;
            $intBuffer0[$bufferIndex] = var$7;
        }
        $this.$rawBufferIndex = $this.$rawBufferIndex + 7 | 0;
    }
    function cmmr_ShapeRenderer_color0($this, $par1) {
        cmmr_ShapeRenderer_setColorOpaque($this, $par1 >> 16 & 255, $par1 >> 8 & 255, $par1 & 255);
    }
    function cmmr_ShapeRenderer_noColor($this) {
        $this.$noColor0 = 1;
    }
    function cmmr_ShapeRenderer_normal($this, $var1, $var2, $var3) {
        $this.$hasNormals = 1;
        $this.$normal0 = (($var1 * 125.0 | 0) + 125 | 0) & 255 | ((($var2 * 125.0 | 0) + 125 | 0) & 255) << 8 | ((($var3 * 125.0 | 0) + 125 | 0) & 255) << 16;
    }
    function cmmr_ShapeRenderer__clinit_() {
        var var$1, var$2;
        var$1 = new cmmr_ShapeRenderer;
        cmmr_ShapeRenderer_$callClinit();
        var$1.$vertices1 = 0;
        var$1.$color1 = 0;
        var$1.$texture = 0;
        var$1.$rawBufferIndex = 0;
        var$1.$noColor0 = 0;
        var$1.$hasNormals = 0;
        var$2 = new $rt_globals.ArrayBuffer(2100000);
        var$1.$intBuffer = new $rt_globals.Int32Array(var$2);
        var$1.$floatBuffer = new $rt_globals.Float32Array(var$2);
        cmmr_ShapeRenderer_instance = var$1;
    }
    function cmmp_Particle() {
        var a = this; cmm_Entity.call(a);
        a.$xd = 0.0;
        a.$yd = 0.0;
        a.$zd = 0.0;
        a.$tex = 0;
        a.$uo = 0.0;
        a.$vo = 0.0;
        a.$age0 = 0;
        a.$lifetime = 0;
        a.$size3 = 0.0;
        a.$gravity = 0.0;
        a.$rCol = 0.0;
        a.$gCol = 0.0;
        a.$bCol = 0.0;
    }
    function cmmp_Particle__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6) {
        var var_7 = new cmmp_Particle();
        cmmp_Particle__init_0(var_7, var_0, var_1, var_2, var_3, var_4, var_5, var_6);
        return var_7;
    }
    function cmmp_Particle__init_0($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        var $var8;
        cmm_Entity__init_($this, $var1);
        $this.$age0 = 0;
        $this.$lifetime = 0;
        cmm_Entity_setSize($this, 0.20000000298023224, 0.20000000298023224);
        $this.$heightOffset = $this.$bbHeight / 2.0;
        cmm_Entity_setPos($this, $var2, $var3, $var4);
        $this.$bCol = 1.0;
        $this.$gCol = 1.0;
        $this.$rCol = 1.0;
        $this.$xd = $var5 + (jl_Math_random() * 2.0 - 1.0) * 0.4000000059604645;
        $this.$yd = $var6 + (jl_Math_random() * 2.0 - 1.0) * 0.4000000059604645;
        $this.$zd = $var7 + (jl_Math_random() * 2.0 - 1.0) * 0.4000000059604645;
        $var8 = (jl_Math_random() + jl_Math_random() + 1.0) * 0.15000000596046448;
        $var2 = $this.$xd;
        $var2 = $var2 * $var2;
        $var3 = $this.$yd;
        $var2 = $var2 + $var3 * $var3;
        $var3 = $this.$zd;
        $var2 = cmu_MathHelper_sqrt($var2 + $var3 * $var3);
        $this.$xd = $this.$xd / $var2 * $var8 * 0.4000000059604645;
        $this.$yd = $this.$yd / $var2 * $var8 * 0.4000000059604645 + 0.10000000149011612;
        $this.$zd = $this.$zd / $var2 * $var8 * 0.4000000059604645;
        $this.$uo = jl_Math_random() * 3.0;
        $this.$vo = jl_Math_random() * 3.0;
        $this.$size3 = jl_Math_random() * 0.5 + 0.5;
        $this.$lifetime = 4.0 / (jl_Math_random() * 0.9 + 0.1) | 0;
        $this.$age0 = 0;
        $this.$makeStepSound = 0;
    }
    function cmmp_Particle_tick($this) {
        var var$1, var$2, var$3;
        $this.$xo = $this.$x;
        $this.$yo = $this.$y;
        $this.$zo = $this.$z;
        var$1 = $this.$age0;
        $this.$age0 = var$1 + 1 | 0;
        if (var$1 >= $this.$lifetime)
            cmm_Entity_remove($this);
        var$2 = $this.$yd - 0.04 * $this.$gravity;
        $this.$yd = var$2;
        cmm_Entity_move($this, $this.$xd, var$2, $this.$zd);
        var$2 = $this.$xd * 0.9800000190734863;
        $this.$xd = var$2;
        $this.$yd = $this.$yd * 0.9800000190734863;
        var$3 = $this.$zd * 0.9800000190734863;
        $this.$zd = var$3;
        if ($this.$onGround) {
            $this.$xd = var$2 * 0.699999988079071;
            $this.$zd = var$3 * 0.699999988079071;
        }
    }
    function cmmp_Particle_render($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        var var$8, var$9, $var9, var$11, $var11, $var12, $var14, $var13, $var15, var$17, var$18, var$19;
        var$8 = $this.$tex;
        var$9 = (var$8 % 16 | 0) / 16.0;
        $var9 = var$9 + 0.062437500804662704;
        var$11 = (var$8 / 16 | 0) / 16.0;
        $var11 = var$11 + 0.062437500804662704;
        $var12 = 0.10000000149011612 * $this.$size3;
        $var14 = $this.$xo;
        $var13 = $var14 + ($this.$x - $var14) * $var2;
        $var14 = $this.$yo;
        $var14 = $var14 + ($this.$y - $var14) * $var2;
        $var15 = $this.$zo;
        $var15 = $var15 + ($this.$z - $var15) * $var2;
        $var2 = cmm_Entity_getBrightness($this, $var2);
        cmmr_ShapeRenderer_color($var1, $this.$rCol * $var2, $this.$gCol * $var2, $this.$bCol * $var2);
        $var2 = $var3 * $var12;
        $var3 = $var13 - $var2;
        $var6 = $var6 * $var12;
        var$17 = $var3 - $var6;
        $var4 = $var4 * $var12;
        var$18 = $var14 - $var4;
        $var5 = $var5 * $var12;
        var$19 = $var15 - $var5;
        $var7 = $var7 * $var12;
        cmmr_ShapeRenderer_vertexUV($var1, var$17, var$18, var$19 - $var7, var$9, $var11);
        $var3 = $var3 + $var6;
        $var4 = $var14 + $var4;
        cmmr_ShapeRenderer_vertexUV($var1, $var3, $var4, var$19 + $var7, var$9, var$11);
        $var2 = $var13 + $var2;
        $var3 = $var2 + $var6;
        $var5 = $var15 + $var5;
        cmmr_ShapeRenderer_vertexUV($var1, $var3, $var4, $var5 + $var7, $var9, var$11);
        cmmr_ShapeRenderer_vertexUV($var1, $var2 - $var6, var$18, $var5 - $var7, $var9, $var11);
    }
    function cmmp_Particle_getParticleTexture($this) {
        return 0;
    }
    function cmmp_AABB() {
        var a = this; jl_Object.call(a);
        a.$epsilon = 0.0;
        a.$x00 = 0.0;
        a.$y00 = 0.0;
        a.$z00 = 0.0;
        a.$x1 = 0.0;
        a.$y1 = 0.0;
        a.$z1 = 0.0;
    }
    function cmmp_AABB__init_0(var_0, var_1, var_2, var_3, var_4, var_5) {
        var var_6 = new cmmp_AABB();
        cmmp_AABB__init_(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
        return var_6;
    }
    function cmmp_AABB__init_($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        $this.$epsilon = 0.0;
        $this.$x00 = $var1;
        $this.$y00 = $var2;
        $this.$z00 = $var3;
        $this.$x1 = $var4;
        $this.$y1 = $var5;
        $this.$z1 = $var6;
    }
    function cmmp_AABB_expand($this, $var1, $var2, $var3) {
        var $var4, $var5, $var6, $var7, $var8, $var9, var$10;
        $var4 = $this.$x00;
        $var5 = $this.$y00;
        $var6 = $this.$z00;
        $var7 = $this.$x1;
        $var8 = $this.$y1;
        $var9 = $this.$z1;
        var$10 = $rt_compare($var1, 0.0);
        if (var$10 < 0)
            $var4 = $var4 + $var1;
        if (var$10 > 0)
            $var7 = $var7 + $var1;
        var$10 = $rt_compare($var2, 0.0);
        if (var$10 < 0)
            $var5 = $var5 + $var2;
        if (var$10 > 0)
            $var8 = $var8 + $var2;
        var$10 = $rt_compare($var3, 0.0);
        if (var$10 < 0)
            $var6 = $var6 + $var3;
        if (var$10 > 0)
            $var9 = $var9 + $var3;
        return cmmp_AABB__init_0($var4, $var5, $var6, $var7, $var8, $var9);
    }
    function cmmp_AABB_grow($this, $var1, $var2, $var3) {
        return cmmp_AABB__init_0($this.$x00 - $var1, $this.$y00 - $var2, $this.$z00 - $var3, $var1 + $this.$x1, $var2 + $this.$y1, $this.$z1 + $var3);
    }
    function cmmp_AABB_clipXCollide($this, $var1, $var2) {
        var var$3, var$4;
        if ($var1.$y1 > $this.$y00 && $var1.$y00 < $this.$y1) {
            if ($var1.$z1 > $this.$z00 && $var1.$z00 < $this.$z1) {
                if ($var2 <= 0.0)
                    var$3 = $var2;
                else {
                    var$3 = $var1.$x1;
                    var$4 = $this.$x00;
                    if (var$3 > var$4)
                        var$3 = $var2;
                    else {
                        var$3 = var$4 - var$3 - $this.$epsilon;
                        if (var$3 >= $var2)
                            var$3 = $var2;
                    }
                }
                if (var$3 >= 0.0)
                    $var2 = var$3;
                else {
                    $var2 = $var1.$x00;
                    var$4 = $this.$x1;
                    if ($var2 < var$4)
                        $var2 = var$3;
                    else {
                        $var2 = var$4 - $var2 + $this.$epsilon;
                        if ($var2 <= var$3)
                            $var2 = var$3;
                    }
                }
                return $var2;
            }
            return $var2;
        }
        return $var2;
    }
    function cmmp_AABB_clipYCollide($this, $var1, $var2) {
        var var$3, var$4;
        if ($var1.$x1 > $this.$x00 && $var1.$x00 < $this.$x1) {
            if ($var1.$z1 > $this.$z00 && $var1.$z00 < $this.$z1) {
                if ($var2 <= 0.0)
                    var$3 = $var2;
                else {
                    var$3 = $var1.$y1;
                    var$4 = $this.$y00;
                    if (var$3 > var$4)
                        var$3 = $var2;
                    else {
                        var$3 = var$4 - var$3 - $this.$epsilon;
                        if (var$3 >= $var2)
                            var$3 = $var2;
                    }
                }
                if (var$3 >= 0.0)
                    $var2 = var$3;
                else {
                    $var2 = $var1.$y00;
                    var$4 = $this.$y1;
                    if ($var2 < var$4)
                        $var2 = var$3;
                    else {
                        $var2 = var$4 - $var2 + $this.$epsilon;
                        if ($var2 <= var$3)
                            $var2 = var$3;
                    }
                }
                return $var2;
            }
            return $var2;
        }
        return $var2;
    }
    function cmmp_AABB_clipZCollide($this, $var1, $var2) {
        var var$3, var$4;
        if ($var1.$x1 > $this.$x00 && $var1.$x00 < $this.$x1) {
            if ($var1.$y1 > $this.$y00 && $var1.$y00 < $this.$y1) {
                if ($var2 <= 0.0)
                    var$3 = $var2;
                else {
                    var$3 = $var1.$z1;
                    var$4 = $this.$z00;
                    if (var$3 > var$4)
                        var$3 = $var2;
                    else {
                        var$3 = var$4 - var$3 - $this.$epsilon;
                        if (var$3 >= $var2)
                            var$3 = $var2;
                    }
                }
                if (var$3 >= 0.0)
                    $var2 = var$3;
                else {
                    $var2 = $var1.$z00;
                    var$4 = $this.$z1;
                    if ($var2 < var$4)
                        $var2 = var$3;
                    else {
                        $var2 = var$4 - $var2 + $this.$epsilon;
                        if ($var2 <= var$3)
                            $var2 = var$3;
                    }
                }
                return $var2;
            }
            return $var2;
        }
        return $var2;
    }
    function cmmp_AABB_intersectsInner($this, $var1) {
        return $var1.$x1 >= $this.$x00 && $var1.$x00 <= $this.$x1 ? ($var1.$y1 >= $this.$y00 && $var1.$y00 <= $this.$y1 ? ($var1.$z1 >= $this.$z00 && $var1.$z00 <= $this.$z1 ? 1 : 0) : 0) : 0;
    }
    function cmmp_AABB_move($this, $var1, $var2, $var3) {
        $this.$x00 = $this.$x00 + $var1;
        $this.$y00 = $this.$y00 + $var2;
        $this.$z00 = $this.$z00 + $var3;
        $this.$x1 = $this.$x1 + $var1;
        $this.$y1 = $this.$y1 + $var2;
        $this.$z1 = $this.$z1 + $var3;
    }
    function cmmp_AABB_copy($this) {
        return cmmp_AABB__init_0($this.$x00, $this.$y00, $this.$z00, $this.$x1, $this.$y1, $this.$z1);
    }
    function cmmp_AABB_clip($this, $var1, $var2) {
        var $var3, $var4, $var5, $var6, $var7, $var8, $var9;
        $var3 = cmmm_Vec3D_getXIntersection($var1, $var2, $this.$x00);
        $var4 = cmmm_Vec3D_getXIntersection($var1, $var2, $this.$x1);
        $var5 = cmmm_Vec3D_getYIntersection($var1, $var2, $this.$y00);
        $var6 = cmmm_Vec3D_getYIntersection($var1, $var2, $this.$y1);
        $var7 = cmmm_Vec3D_getZIntersection($var1, $var2, $this.$z00);
        $var2 = cmmm_Vec3D_getZIntersection($var1, $var2, $this.$z1);
        if (!cmmp_AABB_xIntersects($this, $var3))
            $var3 = null;
        if (!cmmp_AABB_xIntersects($this, $var4))
            $var4 = null;
        if (!cmmp_AABB_yIntersects($this, $var5))
            $var5 = null;
        if (!cmmp_AABB_yIntersects($this, $var6))
            $var6 = null;
        if (!cmmp_AABB_zIntersects($this, $var7))
            $var7 = null;
        if (!cmmp_AABB_zIntersects($this, $var2))
            $var2 = null;
        $var8 = null;
        if ($var3 !== null)
            $var8 = $var3;
        if ($var4 !== null && !($var8 !== null && cmmm_Vec3D_distanceSquared($var1, $var4) >= cmmm_Vec3D_distanceSquared($var1, $var8)))
            $var8 = $var4;
        if ($var5 !== null && !($var8 !== null && cmmm_Vec3D_distanceSquared($var1, $var5) >= cmmm_Vec3D_distanceSquared($var1, $var8)))
            $var8 = $var5;
        if ($var6 !== null && !($var8 !== null && cmmm_Vec3D_distanceSquared($var1, $var6) >= cmmm_Vec3D_distanceSquared($var1, $var8)))
            $var8 = $var6;
        if ($var7 !== null && !($var8 !== null && cmmm_Vec3D_distanceSquared($var1, $var7) >= cmmm_Vec3D_distanceSquared($var1, $var8)))
            $var8 = $var7;
        if ($var2 !== null && !($var8 !== null && cmmm_Vec3D_distanceSquared($var1, $var2) >= cmmm_Vec3D_distanceSquared($var1, $var8)))
            $var8 = $var2;
        if ($var8 === null)
            return null;
        $var9 = (-1);
        if ($var8 === $var3)
            $var9 = 4;
        if ($var8 === $var4)
            $var9 = 5;
        if ($var8 === $var5)
            $var9 = 0;
        if ($var8 === $var6)
            $var9 = 1;
        if ($var8 === $var7)
            $var9 = 2;
        if ($var8 === $var2)
            $var9 = 3;
        return cmm_MovingObjectPosition__init_0(0, 0, 0, $var9, $var8);
    }
    function cmmp_AABB_xIntersects($this, $var1) {
        var var$2, var$3;
        a: {
            if ($var1 === null)
                var$2 = 0;
            else {
                var$3 = $var1.$y3;
                if (var$3 >= $this.$y00 && var$3 <= $this.$y1) {
                    var$3 = $var1.$z3;
                    if (var$3 >= $this.$z00 && var$3 <= $this.$z1) {
                        var$2 = 1;
                        break a;
                    }
                }
                var$2 = 0;
            }
        }
        return var$2;
    }
    function cmmp_AABB_yIntersects($this, $var1) {
        var var$2, var$3;
        a: {
            if ($var1 === null)
                var$2 = 0;
            else {
                var$3 = $var1.$x3;
                if (var$3 >= $this.$x00 && var$3 <= $this.$x1) {
                    var$3 = $var1.$z3;
                    if (var$3 >= $this.$z00 && var$3 <= $this.$z1) {
                        var$2 = 1;
                        break a;
                    }
                }
                var$2 = 0;
            }
        }
        return var$2;
    }
    function cmmp_AABB_zIntersects($this, $var1) {
        var var$2, var$3;
        a: {
            if ($var1 === null)
                var$2 = 0;
            else {
                var$3 = $var1.$x3;
                if (var$3 >= $this.$x00 && var$3 <= $this.$x1) {
                    var$3 = $var1.$y3;
                    if (var$3 >= $this.$y00 && var$3 <= $this.$y1) {
                        var$2 = 1;
                        break a;
                    }
                }
                var$2 = 0;
            }
        }
        return var$2;
    }
    var ji_EOFException = $rt_classWithoutFields(ji_IOException);
    function cmmm_Vertex() {
        var a = this; jl_Object.call(a);
        a.$vector = null;
        a.$u2 = 0.0;
        a.$v2 = 0.0;
    }
    function cmmm_Vertex__init_(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new cmmm_Vertex();
        cmmm_Vertex__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function cmmm_Vertex__init_0($this, $var1, $var2, $var3, $var4, $var5) {
        $this.$vector = cmmm_Vec3D__init_($var1, $var2, $var3);
        $this.$u2 = $var4;
        $this.$v2 = $var5;
    }
    function cmmm_Vertex_create($this, $var1, $var2) {
        var var$3;
        var$3 = new cmmm_Vertex;
        var$3.$vector = $this.$vector;
        var$3.$u2 = $var1;
        var$3.$v2 = $var2;
        return var$3;
    }
    function cmmm_TexturedQuad() {
        jl_Object.call(this);
        this.$vertices0 = null;
    }
    function cmmm_TexturedQuad__init_0(var_0) {
        var var_1 = new cmmm_TexturedQuad();
        cmmm_TexturedQuad__init_1(var_1, var_0);
        return var_1;
    }
    function cmmm_TexturedQuad__init_2(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new cmmm_TexturedQuad();
        cmmm_TexturedQuad__init_(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function cmmm_TexturedQuad__init_3(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new cmmm_TexturedQuad();
        cmmm_TexturedQuad__init_4(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function cmmm_TexturedQuad__init_1($this, $var1) {
        $this.$vertices0 = $var1;
    }
    function cmmm_TexturedQuad__init_($this, $var1, $var2, $var3, $var4, $var5) {
        var var$6, var$7, var$8, var$9, var$10;
        var$6 = $var1.data;
        cmmm_TexturedQuad__init_1($this, $var1);
        var$7 = var$6[0];
        var$8 = $var4 / 64.0 - 0.0015625000232830644;
        var$9 = $var3 / 32.0 + 0.0031250000465661287;
        var$6[0] = cmmm_Vertex_create(var$7, var$8, var$9);
        var$7 = var$6[1];
        var$10 = $var2 / 64.0 + 0.0015625000232830644;
        var$6[1] = cmmm_Vertex_create(var$7, var$10, var$9);
        var$7 = var$6[2];
        var$9 = $var5 / 32.0 - 0.0031250000465661287;
        var$6[2] = cmmm_Vertex_create(var$7, var$10, var$9);
        var$6[3] = cmmm_Vertex_create(var$6[3], var$8, var$9);
    }
    function cmmm_TexturedQuad__init_4($this, $var1, $var2, $var3, $var4, $var5) {
        var var$6;
        var$6 = $var1.data;
        cmmm_TexturedQuad__init_1($this, $var1);
        var$6[0] = cmmm_Vertex_create(var$6[0], $var4, $var3);
        var$6[1] = cmmm_Vertex_create(var$6[1], $var2, $var3);
        var$6[2] = cmmm_Vertex_create(var$6[2], $var2, $var5);
        var$6[3] = cmmm_Vertex_create(var$6[3], $var4, $var5);
    }
    function jl_Thread$start$lambda$_4_0() {
        jl_Object.call(this);
        this.$_01 = null;
    }
    function jl_Thread$start$lambda$_4_0_run(var$0) {
        var var$1, var$2, var$3, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();var$1 = $thread.pop();var$0 = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$1 = var$0.$_01;
            a: {
                try {
                    try {
                        jl_Thread_$callClinit();
                        jl_Thread_activeCount = jl_Thread_activeCount + 1 | 0;
                        jl_Thread_setCurrentThread(var$1);
                        $ptr = 1;
                        continue main;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Throwable) {
                            var$2 = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    jl_DefaultUncaughtExceptionHandler_uncaughtException(jl_Thread_getUncaughtExceptionHandler(var$1), var$1, var$2);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    var$2 = $$je;

                }
                var$3 = var$1.$finishedLock;
                $ptr = 2;
                continue main;
            }
            var$2 = var$1.$finishedLock;
            $ptr = 4;
            continue main;
        case 1:
            a: {
                b: {
                    c: {
                        try {
                            var$1.$run();
                            if ($rt_suspending()) {
                                break main;
                            }
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Throwable) {
                                var$2 = $$je;
                                break c;
                            } else{
                                var$2 = $$je;
                                break b;
                            }
                        }
                        var$2 = var$1.$finishedLock;
                        $ptr = 3;
                        continue main;
                    }
                    try {
                        jl_DefaultUncaughtExceptionHandler_uncaughtException(jl_Thread_getUncaughtExceptionHandler(var$1), var$1, var$2);
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;

                    }
                }
                var$3 = var$1.$finishedLock;
                $ptr = 2;
                continue main;
            }
            var$2 = var$1.$finishedLock;
            $ptr = 4;
            continue main;
        case 2:
            jl_Object_monitorEnter(var$3);
            if ($rt_suspending()) {
                break main;
            }
            a: {
                try {
                    jl_Object_notifyAll(var$3);
                    jl_Object_monitorExit(var$3);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    var$1 = $$je;

                }
                jl_Object_monitorExit(var$3);
                $rt_throw(var$1);
            }
            var$1.$alive = 0;
            jl_Thread_activeCount = jl_Thread_activeCount - 1 | 0;
            jl_Thread_setCurrentThread(jl_Thread_mainThread);
            $rt_throw(var$2);
        case 3:
            jl_Object_monitorEnter(var$2);
            if ($rt_suspending()) {
                break main;
            }
            a: {
                try {
                    jl_Object_notifyAll(var$2);
                    jl_Object_monitorExit(var$2);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    var$1 = $$je;

                }
                jl_Object_monitorExit(var$2);
                $rt_throw(var$1);
            }
            var$1.$alive = 0;
            jl_Thread_activeCount = jl_Thread_activeCount - 1 | 0;
            jl_Thread_setCurrentThread(jl_Thread_mainThread);
            return;
        case 4:
            jl_Object_monitorEnter(var$2);
            if ($rt_suspending()) {
                break main;
            }
            a: {
                try {
                    jl_Object_notifyAll(var$2);
                    jl_Object_monitorExit(var$2);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    var$1 = $$je;

                }
                jl_Object_monitorExit(var$2);
                $rt_throw(var$1);
            }
            var$1.$alive = 0;
            jl_Thread_activeCount = jl_Thread_activeCount - 1 | 0;
            jl_Thread_setCurrentThread(jl_Thread_mainThread);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push(var$0, var$1, var$2, var$3, $ptr);
    }
    var otjt_Uint8Array = $rt_classWithoutFields(otjt_ArrayBufferView);
    function cjj_Inflate() {
        var a = this; jl_Object.call(a);
        a.$mode2 = 0;
        a.$method = 0;
        a.$was = Long_ZERO;
        a.$need = Long_ZERO;
        a.$marker = 0;
        a.$wrap0 = 0;
        a.$wbits = 0;
        a.$blocks = null;
        a.$z4 = null;
        a.$flags1 = 0;
        a.$need_bytes = 0;
        a.$crcbuf = null;
        a.$gheader = null;
        a.$tmp_string = null;
    }
    var cjj_Inflate_mark = null;
    function cjj_Inflate_inflate($this, $f) {
        var $e, var$3, $r, var$5, $foo, var$7, var$8, $b, var$10, $$je;
        $e = $this.$z4;
        if ($e !== null && $e.$next_in !== null) {
            var$3 = $f != 4 ? 0 : (-5);
            $r = (-5);
            a: {
                b: {
                    c: {
                        d: {
                            e: {
                                f: {
                                    g: {
                                        h: {
                                            i: while (true) {
                                                j: {
                                                    k: {
                                                        l: {
                                                            m: {
                                                                n: {
                                                                    o: {
                                                                        p: {
                                                                            q: {
                                                                                r: {
                                                                                    s: {
                                                                                        t: {
                                                                                            u: {
                                                                                                v: {
                                                                                                    w: {
                                                                                                        switch ($this.$mode2) {
                                                                                                            case 6:
                                                                                                                $this.$mode2 = 13;
                                                                                                                $this.$z4.$msg = $rt_s(312);
                                                                                                                $this.$marker = 0;
                                                                                                                return (-2);
                                                                                                            case 7:
                                                                                                                $r = cjj_InfBlocks_proc($this.$blocks, $r);
                                                                                                                if ($r == (-3)) {
                                                                                                                    $this.$mode2 = 13;
                                                                                                                    $this.$marker = 0;
                                                                                                                    continue i;
                                                                                                                }
                                                                                                                if (!$r)
                                                                                                                    $r = var$3;
                                                                                                                if ($r != 1)
                                                                                                                    break i;
                                                                                                                $this.$was = $this.$z4.$adler.$getValue();
                                                                                                                cjj_InfBlocks_reset($this.$blocks);
                                                                                                                if (!$this.$wrap0) {
                                                                                                                    $this.$mode2 = 12;
                                                                                                                    $r = var$3;
                                                                                                                    continue i;
                                                                                                                }
                                                                                                                $this.$mode2 = 8;
                                                                                                                $r = var$3;
                                                                                                                break w;
                                                                                                            case 12:
                                                                                                                break e;
                                                                                                            case 13:
                                                                                                                return (-3);
                                                                                                            case 14:
                                                                                                                break r;
                                                                                                            case 23:
                                                                                                                try {
                                                                                                                    $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                                                                } catch ($$e) {
                                                                                                                    $$je = $rt_wrapException($$e);
                                                                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                                                                        $e = $$je;
                                                                                                                        return $e.$r0;
                                                                                                                    } else {
                                                                                                                        throw $$e;
                                                                                                                    }
                                                                                                                }
                                                                                                                var$5 = $this.$need;
                                                                                                                $f = Long_lo(var$5) & 65535;
                                                                                                                $this.$flags1 = $f;
                                                                                                                if (($f & 255) != 8) {
                                                                                                                    $this.$z4.$msg = $rt_s(313);
                                                                                                                    $this.$mode2 = 13;
                                                                                                                    continue i;
                                                                                                                }
                                                                                                                if ($f & 57344) {
                                                                                                                    $this.$z4.$msg = $rt_s(314);
                                                                                                                    $this.$mode2 = 13;
                                                                                                                    continue i;
                                                                                                                }
                                                                                                                if ($f & 512)
                                                                                                                    cjj_Inflate_checksum($this, 2, var$5);
                                                                                                                $this.$mode2 = 16;
                                                                                                                break p;
                                                                                                            case 2:
                                                                                                                break d;
                                                                                                            case 3:
                                                                                                                break c;
                                                                                                            case 4:
                                                                                                                break b;
                                                                                                            case 5:
                                                                                                                var$3 = $r;
                                                                                                                break a;
                                                                                                            case 8:
                                                                                                                break w;
                                                                                                            case 9:
                                                                                                                break v;
                                                                                                            case 10:
                                                                                                                break u;
                                                                                                            case 11:
                                                                                                                break t;
                                                                                                            case 15:
                                                                                                                break s;
                                                                                                            case 16:
                                                                                                                break p;
                                                                                                            case 17:
                                                                                                                break o;
                                                                                                            case 18:
                                                                                                                break n;
                                                                                                            case 19:
                                                                                                                break q;
                                                                                                            case 20:
                                                                                                                break l;
                                                                                                            case 21:
                                                                                                                break k;
                                                                                                            case 22:
                                                                                                                break;
                                                                                                            default:
                                                                                                                return (-2);
                                                                                                        }
                                                                                                        break j;
                                                                                                    }
                                                                                                    $e = $this.$z4;
                                                                                                    $f = $e.$avail_in;
                                                                                                    if (!$f)
                                                                                                        return $r;
                                                                                                    $e.$avail_in = $f - 1 | 0;
                                                                                                    $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                                    $foo = $e.$next_in.data;
                                                                                                    $f = $e.$next_in_index;
                                                                                                    $e.$next_in_index = $f + 1 | 0;
                                                                                                    $this.$need = Long_and(Long_fromInt(($foo[$f] & 255) << 24), Long_create(4278190080, 0));
                                                                                                    $this.$mode2 = 9;
                                                                                                    $r = var$3;
                                                                                                }
                                                                                                $e = $this.$z4;
                                                                                                $f = $e.$avail_in;
                                                                                                if (!$f)
                                                                                                    return $r;
                                                                                                $e.$avail_in = $f - 1 | 0;
                                                                                                $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                                var$5 = $this.$need;
                                                                                                $foo = $e.$next_in.data;
                                                                                                $f = $e.$next_in_index;
                                                                                                $e.$next_in_index = $f + 1 | 0;
                                                                                                $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$f] & 255) << 16), Long_fromInt(16711680)));
                                                                                                $this.$mode2 = 10;
                                                                                                $r = var$3;
                                                                                            }
                                                                                            $e = $this.$z4;
                                                                                            $f = $e.$avail_in;
                                                                                            if (!$f)
                                                                                                return $r;
                                                                                            $e.$avail_in = $f - 1 | 0;
                                                                                            $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                            var$5 = $this.$need;
                                                                                            $foo = $e.$next_in.data;
                                                                                            $f = $e.$next_in_index;
                                                                                            $e.$next_in_index = $f + 1 | 0;
                                                                                            $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$f] & 255) << 8), Long_fromInt(65280)));
                                                                                            $this.$mode2 = 11;
                                                                                            $r = var$3;
                                                                                        }
                                                                                        $e = $this.$z4;
                                                                                        $f = $e.$avail_in;
                                                                                        if (!$f)
                                                                                            return $r;
                                                                                        $e.$avail_in = $f - 1 | 0;
                                                                                        $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                        var$5 = $this.$need;
                                                                                        $foo = $e.$next_in.data;
                                                                                        $f = $e.$next_in_index;
                                                                                        $e.$next_in_index = $f + 1 | 0;
                                                                                        var$5 = Long_add(var$5, Long_and(Long_fromInt($foo[$f]), Long_fromInt(255)));
                                                                                        $this.$need = var$5;
                                                                                        $f = $this.$flags1;
                                                                                        if ($f)
                                                                                            $this.$need = Long_and(Long_or(Long_or(Long_or(Long_shr(Long_and(var$5, Long_fromInt(-16777216)), 24), Long_shr(Long_and(var$5, Long_fromInt(16711680)), 8)), Long_shl(Long_and(var$5, Long_fromInt(65280)), 8)), Long_shl(Long_and(var$5, Long_fromInt(65535)), 24)), Long_create(4294967295, 0));
                                                                                        $r = Long_lo($this.$was);
                                                                                        var$5 = $this.$need;
                                                                                        if ($r != Long_lo(var$5))
                                                                                            $e.$msg = $rt_s(315);
                                                                                        else if ($f) {
                                                                                            $e = $this.$gheader;
                                                                                            if ($e !== null)
                                                                                                $e.$crc = var$5;
                                                                                        }
                                                                                        $this.$mode2 = 15;
                                                                                        $r = var$3;
                                                                                    }
                                                                                    if (!($this.$wrap0 && $this.$flags1)) {
                                                                                        $e = $this.$z4.$msg;
                                                                                        if ($e === null)
                                                                                            break f;
                                                                                        if (!jl_String_equals($e, $rt_s(315)))
                                                                                            break f;
                                                                                        $this.$mode2 = 13;
                                                                                        $this.$marker = 5;
                                                                                        continue i;
                                                                                    }
                                                                                    try {
                                                                                        $r = cjj_Inflate_readBytes($this, 4, $r, var$3);
                                                                                    } catch ($$e) {
                                                                                        $$je = $rt_wrapException($$e);
                                                                                        if ($$je instanceof cjj_Inflate$Return) {
                                                                                            $e = $$je;
                                                                                            return $e.$r0;
                                                                                        } else {
                                                                                            throw $$e;
                                                                                        }
                                                                                    }
                                                                                    $e = $this.$z4.$msg;
                                                                                    if ($e !== null && jl_String_equals($e, $rt_s(315))) {
                                                                                        $this.$mode2 = 13;
                                                                                        $this.$marker = 5;
                                                                                        continue i;
                                                                                    }
                                                                                    var$5 = $this.$need;
                                                                                    $e = $this.$z4;
                                                                                    if (Long_eq(var$5, Long_and($e.$total_out, Long_create(4294967295, 0)))) {
                                                                                        $e.$msg = null;
                                                                                        break f;
                                                                                    }
                                                                                    $e.$msg = $rt_s(316);
                                                                                    $this.$mode2 = 13;
                                                                                    continue i;
                                                                                }
                                                                                if (!$this.$wrap0) {
                                                                                    $this.$mode2 = 7;
                                                                                    continue i;
                                                                                }
                                                                                try {
                                                                                    $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                                } catch ($$e) {
                                                                                    $$je = $rt_wrapException($$e);
                                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                                        $e = $$je;
                                                                                        return $e.$r0;
                                                                                    } else {
                                                                                        throw $$e;
                                                                                    }
                                                                                }
                                                                                $f = $this.$wrap0;
                                                                                var$7 = $rt_compare($f, 4);
                                                                                if (!(var$7 && !($f & 2)) && Long_eq($this.$need, Long_fromInt(35615))) {
                                                                                    if (!var$7)
                                                                                        $this.$wrap0 = 2;
                                                                                    $this.$z4.$adler = cjj_CRC32__init_();
                                                                                    cjj_Inflate_checksum($this, 2, $this.$need);
                                                                                    if ($this.$gheader === null)
                                                                                        $this.$gheader = cjj_GZIPHeader__init_();
                                                                                    $this.$mode2 = 23;
                                                                                    continue i;
                                                                                }
                                                                                if ($f & 2) {
                                                                                    $this.$mode2 = 13;
                                                                                    $this.$z4.$msg = $rt_s(317);
                                                                                    continue i;
                                                                                }
                                                                                $this.$flags1 = 0;
                                                                                var$5 = $this.$need;
                                                                                var$8 = Long_lo(var$5) & 255;
                                                                                $this.$method = var$8;
                                                                                $b = Long_lo(Long_shr(var$5, 8)) & 255;
                                                                                if (!($f & 1 && !(((var$8 << 8) + $b | 0) % 31 | 0)) && (var$8 & 15) != 8) {
                                                                                    if (var$7) {
                                                                                        $this.$mode2 = 13;
                                                                                        $this.$z4.$msg = $rt_s(317);
                                                                                        continue i;
                                                                                    }
                                                                                    $e = $this.$z4;
                                                                                    $e.$next_in_index = $e.$next_in_index - 2 | 0;
                                                                                    $e.$avail_in = $e.$avail_in + 2 | 0;
                                                                                    $e.$total_in = Long_sub($e.$total_in, Long_fromInt(2));
                                                                                    $this.$wrap0 = 0;
                                                                                    $this.$mode2 = 7;
                                                                                    continue i;
                                                                                }
                                                                                if ((var$8 & 15) != 8) {
                                                                                    $this.$mode2 = 13;
                                                                                    $this.$z4.$msg = $rt_s(313);
                                                                                    continue i;
                                                                                }
                                                                                if (!var$7)
                                                                                    $this.$wrap0 = 1;
                                                                                if (((var$8 >> 4) + 8 | 0) > $this.$wbits) {
                                                                                    $this.$mode2 = 13;
                                                                                    $this.$z4.$msg = $rt_s(318);
                                                                                    continue i;
                                                                                }
                                                                                $this.$z4.$adler = cjj_Adler32__init_();
                                                                                if ($b & 32) {
                                                                                    $this.$mode2 = 2;
                                                                                    break d;
                                                                                }
                                                                                $this.$mode2 = 7;
                                                                                continue i;
                                                                            }
                                                                            break m;
                                                                        }
                                                                        try {
                                                                            $r = cjj_Inflate_readBytes($this, 4, $r, var$3);
                                                                        } catch ($$e) {
                                                                            $$je = $rt_wrapException($$e);
                                                                            if ($$je instanceof cjj_Inflate$Return) {
                                                                                $e = $$je;
                                                                                return $e.$r0;
                                                                            } else {
                                                                                throw $$e;
                                                                            }
                                                                        }
                                                                        $e = $this.$gheader;
                                                                        if ($e !== null)
                                                                            $e.$time0 = $this.$need;
                                                                        if ($this.$flags1 & 512)
                                                                            cjj_Inflate_checksum($this, 4, $this.$need);
                                                                        $this.$mode2 = 17;
                                                                    }
                                                                    try {
                                                                        $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                    } catch ($$e) {
                                                                        $$je = $rt_wrapException($$e);
                                                                        if ($$je instanceof cjj_Inflate$Return) {
                                                                            $e = $$je;
                                                                            return $e.$r0;
                                                                        } else {
                                                                            throw $$e;
                                                                        }
                                                                    }
                                                                    $e = $this.$gheader;
                                                                    if ($e !== null) {
                                                                        $f = Long_lo($this.$need);
                                                                        $e.$xflags = $f & 255;
                                                                        $e.$os = $f >> 8 & 255;
                                                                    }
                                                                    if ($this.$flags1 & 512)
                                                                        cjj_Inflate_checksum($this, 2, $this.$need);
                                                                    $this.$mode2 = 18;
                                                                }
                                                                if (!($this.$flags1 & 1024)) {
                                                                    $e = $this.$gheader;
                                                                    if ($e !== null)
                                                                        $e.$extra = null;
                                                                } else {
                                                                    try {
                                                                        $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                    } catch ($$e) {
                                                                        $$je = $rt_wrapException($$e);
                                                                        if ($$je instanceof cjj_Inflate$Return) {
                                                                            $e = $$je;
                                                                            return $e.$r0;
                                                                        } else {
                                                                            throw $$e;
                                                                        }
                                                                    }
                                                                    $e = $this.$gheader;
                                                                    if ($e !== null)
                                                                        $e.$extra = $rt_createByteArray(Long_lo($this.$need) & 65535);
                                                                    if ($this.$flags1 & 512)
                                                                        cjj_Inflate_checksum($this, 2, $this.$need);
                                                                }
                                                                $this.$mode2 = 19;
                                                            }
                                                            if (!($this.$flags1 & 1024)) {
                                                                $e = $this.$gheader;
                                                                if ($e !== null)
                                                                    $e.$extra = null;
                                                            } else
                                                                x: {
                                                                    try {
                                                                        $r = cjj_Inflate_readBytes0($this, $r, var$3);
                                                                        if ($this.$gheader === null)
                                                                            break x;
                                                                        $foo = ji_ByteArrayOutputStream_toByteArray($this.$tmp_string);
                                                                        var$10 = $foo.data;
                                                                        $this.$tmp_string = null;
                                                                        $f = var$10.length;
                                                                        var$10 = $this.$gheader.$extra;
                                                                        if ($f != var$10.data.length) {
                                                                            $this.$z4.$msg = $rt_s(319);
                                                                            $this.$mode2 = 13;
                                                                            continue i;
                                                                        }
                                                                        jl_System_fastArraycopy($foo, 0, var$10, 0, $f);
                                                                        break x;
                                                                    } catch ($$e) {
                                                                        $$je = $rt_wrapException($$e);
                                                                        if ($$je instanceof cjj_Inflate$Return) {
                                                                            $e = $$je;
                                                                            return $e.$r0;
                                                                        } else {
                                                                            throw $$e;
                                                                        }
                                                                    }
                                                                }
                                                            $this.$mode2 = 20;
                                                        }
                                                        y: {
                                                            if (!($this.$flags1 & 2048)) {
                                                                $e = $this.$gheader;
                                                                if ($e !== null)
                                                                    $e.$name6 = null;
                                                            } else {
                                                                z: {
                                                                    try {
                                                                        $r = cjj_Inflate_readString($this, $r, var$3);
                                                                        $e = $this.$gheader;
                                                                        if ($e === null)
                                                                            break z;
                                                                        $e.$name6 = ji_ByteArrayOutputStream_toByteArray($this.$tmp_string);
                                                                        break z;
                                                                    } catch ($$e) {
                                                                        $$je = $rt_wrapException($$e);
                                                                        if ($$je instanceof cjj_Inflate$Return) {
                                                                            $e = $$je;
                                                                            break h;
                                                                        } else {
                                                                            throw $$e;
                                                                        }
                                                                    }
                                                                }
                                                                try {
                                                                    $this.$tmp_string = null;
                                                                    break y;
                                                                } catch ($$e) {
                                                                    $$je = $rt_wrapException($$e);
                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                        $e = $$je;
                                                                        break h;
                                                                    } else {
                                                                        throw $$e;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        $this.$mode2 = 21;
                                                    }
                                                    ba: {
                                                        if (!($this.$flags1 & 4096)) {
                                                            $e = $this.$gheader;
                                                            if ($e !== null)
                                                                $e.$comment = null;
                                                        } else {
                                                            bb: {
                                                                try {
                                                                    $r = cjj_Inflate_readString($this, $r, var$3);
                                                                    $e = $this.$gheader;
                                                                    if ($e === null)
                                                                        break bb;
                                                                    $e.$comment = ji_ByteArrayOutputStream_toByteArray($this.$tmp_string);
                                                                    break bb;
                                                                } catch ($$e) {
                                                                    $$je = $rt_wrapException($$e);
                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                        $e = $$je;
                                                                        break g;
                                                                    } else {
                                                                        throw $$e;
                                                                    }
                                                                }
                                                            }
                                                            try {
                                                                $this.$tmp_string = null;
                                                                break ba;
                                                            } catch ($$e) {
                                                                $$je = $rt_wrapException($$e);
                                                                if ($$je instanceof cjj_Inflate$Return) {
                                                                    $e = $$je;
                                                                    break g;
                                                                } else {
                                                                    throw $$e;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    $this.$mode2 = 22;
                                                }
                                                if ($this.$flags1 & 512) {
                                                    try {
                                                        $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                    } catch ($$e) {
                                                        $$je = $rt_wrapException($$e);
                                                        if ($$je instanceof cjj_Inflate$Return) {
                                                            $e = $$je;
                                                            return $e.$r0;
                                                        } else {
                                                            throw $$e;
                                                        }
                                                    }
                                                    $e = $this.$gheader;
                                                    if ($e !== null)
                                                        $e.$hcrc = Long_lo(Long_and($this.$need, Long_fromInt(65535)));
                                                    if (Long_ne($this.$need, Long_and($this.$z4.$adler.$getValue(), Long_fromInt(65535)))) {
                                                        $this.$mode2 = 13;
                                                        $this.$z4.$msg = $rt_s(320);
                                                        $this.$marker = 5;
                                                        continue;
                                                    }
                                                }
                                                $this.$z4.$adler = cjj_CRC32__init_();
                                                $this.$mode2 = 7;
                                            }
                                            return $r;
                                        }
                                        return $e.$r0;
                                    }
                                    return $e.$r0;
                                }
                                $this.$mode2 = 12;
                            }
                            return 1;
                        }
                        $e = $this.$z4;
                        var$8 = $e.$avail_in;
                        if (!var$8)
                            return $r;
                        $e.$avail_in = var$8 - 1 | 0;
                        $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                        $foo = $e.$next_in.data;
                        $r = $e.$next_in_index;
                        $e.$next_in_index = $r + 1 | 0;
                        $this.$need = Long_and(Long_fromInt(($foo[$r] & 255) << 24), Long_create(4278190080, 0));
                        $this.$mode2 = 3;
                        $r = var$3;
                    }
                    $e = $this.$z4;
                    $f = $e.$avail_in;
                    if (!$f)
                        return $r;
                    $e.$avail_in = $f - 1 | 0;
                    $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                    var$5 = $this.$need;
                    $foo = $e.$next_in.data;
                    $r = $e.$next_in_index;
                    $e.$next_in_index = $r + 1 | 0;
                    $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$r] & 255) << 16), Long_fromInt(16711680)));
                    $this.$mode2 = 4;
                    $r = var$3;
                }
                $e = $this.$z4;
                $f = $e.$avail_in;
                if (!$f)
                    return $r;
                $e.$avail_in = $f - 1 | 0;
                $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                var$5 = $this.$need;
                $foo = $e.$next_in.data;
                $f = $e.$next_in_index;
                $e.$next_in_index = $f + 1 | 0;
                $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$f] & 255) << 8), Long_fromInt(65280)));
                $this.$mode2 = 5;
            }
            $e = $this.$z4;
            $f = $e.$avail_in;
            if (!$f)
                return var$3;
            $e.$avail_in = $f - 1 | 0;
            $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
            var$5 = $this.$need;
            $foo = $e.$next_in.data;
            $f = $e.$next_in_index;
            $e.$next_in_index = $f + 1 | 0;
            var$5 = Long_add(var$5, Long_and(Long_fromInt($foo[$f]), Long_fromInt(255)));
            $this.$need = var$5;
            $e.$adler.$reset1(var$5);
            $this.$mode2 = 6;
            return 2;
        }
        if ($f == 4 && $this.$mode2 == 14)
            return 0;
        return (-2);
    }
    function cjj_Inflate_readBytes($this, $n, $r, $f) {
        var var$4, var$5, var$6, var$7, var$8;
        if ($this.$need_bytes == (-1)) {
            $this.$need_bytes = $n;
            $this.$need = Long_ZERO;
        }
        while (true) {
            var$4 = $this.$need_bytes;
            if (var$4 <= 0) {
                if ($n == 2)
                    $this.$need = Long_and($this.$need, Long_fromInt(65535));
                else if ($n == 4)
                    $this.$need = Long_and($this.$need, Long_create(4294967295, 0));
                $this.$need_bytes = (-1);
                return $r;
            }
            var$5 = $this.$z4;
            var$6 = var$5.$avail_in;
            if (!var$6)
                break;
            var$5.$avail_in = var$6 - 1 | 0;
            var$5.$total_in = Long_add(var$5.$total_in, Long_fromInt(1));
            var$7 = $this.$need;
            var$8 = var$5.$next_in.data;
            var$6 = var$5.$next_in_index;
            var$5.$next_in_index = var$6 + 1 | 0;
            $this.$need = Long_or(var$7, Long_fromInt((var$8[var$6] & 255) << (($n - var$4 | 0) * 8 | 0)));
            $this.$need_bytes = var$4 - 1 | 0;
            $r = $f;
        }
        $rt_throw(cjj_Inflate$Return__init_($this, $r));
    }
    function cjj_Inflate_readString($this, $r, $f) {
        var var$3, var$4, var$5, var$6, var$7;
        if ($this.$tmp_string === null)
            $this.$tmp_string = ji_ByteArrayOutputStream__init_();
        while (true) {
            var$3 = $this.$z4;
            var$4 = var$3.$avail_in;
            if (!var$4)
                $rt_throw(cjj_Inflate$Return__init_($this, $r));
            var$3.$avail_in = var$4 - 1 | 0;
            var$3.$total_in = Long_add(var$3.$total_in, Long_fromInt(1));
            var$5 = var$3.$next_in;
            var$6 = var$5.data;
            var$4 = var$3.$next_in_index;
            var$7 = var$6[var$4];
            if (var$7)
                ji_ByteArrayOutputStream_write($this.$tmp_string, var$5, var$4, 1);
            var$3 = $this.$z4;
            var$3.$adler.$update2(var$3.$next_in, var$3.$next_in_index, 1);
            var$3 = $this.$z4;
            var$3.$next_in_index = var$3.$next_in_index + 1 | 0;
            if (!var$7)
                break;
            $r = $f;
        }
        return $f;
    }
    function cjj_Inflate_readBytes0($this, $r, $f) {
        var var$3, var$4;
        if ($this.$tmp_string === null)
            $this.$tmp_string = ji_ByteArrayOutputStream__init_();
        while (Long_gt($this.$need, Long_ZERO)) {
            var$3 = $this.$z4;
            var$4 = var$3.$avail_in;
            if (!var$4)
                $rt_throw(cjj_Inflate$Return__init_($this, $r));
            var$3.$avail_in = var$4 - 1 | 0;
            var$3.$total_in = Long_add(var$3.$total_in, Long_fromInt(1));
            ji_ByteArrayOutputStream_write($this.$tmp_string, var$3.$next_in, var$3.$next_in_index, 1);
            var$3 = $this.$z4;
            var$3.$adler.$update2(var$3.$next_in, var$3.$next_in_index, 1);
            var$3 = $this.$z4;
            var$3.$next_in_index = var$3.$next_in_index + 1 | 0;
            $this.$need = Long_sub($this.$need, Long_fromInt(1));
            $r = $f;
        }
        return $r;
    }
    function cjj_Inflate_checksum($this, $n, $v) {
        var $i;
        $i = 0;
        while ($i < $n) {
            $this.$crcbuf.data[$i] = Long_lo(Long_and($v, Long_fromInt(255))) << 24 >> 24;
            $v = Long_shr($v, 8);
            $i = $i + 1 | 0;
        }
        $this.$z4.$adler.$update2($this.$crcbuf, 0, $n);
    }
    function cjj_Inflate__clinit_() {
        cjj_Inflate_mark = $rt_createByteArrayFromData([0, 0, (-1), (-1)]);
    }
    var oli_Keyboard$1 = $rt_classWithoutFields();
    function oli_Keyboard$1__init_() {
        var var_0 = new oli_Keyboard$1();
        oli_Keyboard$1__init_0(var_0);
        return var_0;
    }
    function oli_Keyboard$1__init_0($this) {}
    function oli_Keyboard$1_handleEvent$exported$0(var$0, var$1) {
        oli_Keyboard_$callClinit();
        oli_Keyboard_keyStates.data[oli_Keyboard_remap(var$1.which)] = 1;
        ju_AbstractList_add(oli_Keyboard_keyEvents, otji_JSWrapper_wrap(var$1));
        var$1.preventDefault();
        var$1.stopPropagation();
    }
    var oli_Keyboard$2 = $rt_classWithoutFields();
    function oli_Keyboard$2__init_() {
        var var_0 = new oli_Keyboard$2();
        oli_Keyboard$2__init_0(var_0);
        return var_0;
    }
    function oli_Keyboard$2__init_0($this) {}
    function oli_Keyboard$2_handleEvent$exported$0(var$0, var$1) {
        oli_Keyboard_$callClinit();
        oli_Keyboard_keyStates.data[oli_Keyboard_remap(var$1.which)] = 0;
        ju_AbstractList_add(oli_Keyboard_keyEvents, otji_JSWrapper_wrap(var$1));
        var$1.preventDefault();
        var$1.stopPropagation();
    }
    var oli_Keyboard$3 = $rt_classWithoutFields();
    function oli_Keyboard$3__init_() {
        var var_0 = new oli_Keyboard$3();
        oli_Keyboard$3__init_0(var_0);
        return var_0;
    }
    function oli_Keyboard$3__init_0($this) {}
    function oli_Keyboard$3_handleEvent$exported$0(var$0, var$1) {
        oli_Keyboard_$callClinit();
        if (oli_Keyboard_repeat_enabled && (var$1.repeat ? 1 : 0))
            ju_AbstractList_add(oli_Keyboard_keyEvents, otji_JSWrapper_wrap(var$1));
        var$1.preventDefault();
        var$1.stopPropagation();
    }
    var oli_Mouse$1 = $rt_classWithoutFields();
    function oli_Mouse$1__init_() {
        var var_0 = new oli_Mouse$1();
        oli_Mouse$1__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$1__init_0($this) {}
    function oli_Mouse$1_handleEvent$exported$0(var$0, var$1) {
        var$1.preventDefault();
        var$1.stopPropagation();
    }
    var oli_Mouse$2 = $rt_classWithoutFields();
    function oli_Mouse$2__init_() {
        var var_0 = new oli_Mouse$2();
        oli_Mouse$2__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$2__init_0($this) {}
    function oli_Mouse$2_handleEvent$exported$0(var$0, var$1) {
        var var$2, var$3;
        var$2 = var$1.button;
        var$3 = oli_Mouse_buttonStates;
        if (var$2 == 1)
            var$2 = 2;
        else if (var$2 == 2)
            var$2 = 1;
        var$3.data[var$2] = 1;
        ju_AbstractList_add(oli_Mouse_mouseEvents, otji_JSWrapper_wrap(var$1));
        var$1.preventDefault();
        var$1.stopPropagation();
    }
    var oli_Mouse$3 = $rt_classWithoutFields();
    function oli_Mouse$3__init_() {
        var var_0 = new oli_Mouse$3();
        oli_Mouse$3__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$3__init_0($this) {}
    function oli_Mouse$3_handleEvent$exported$0(var$0, var$1) {
        var var$2, var$3;
        var$2 = var$1.button;
        var$3 = oli_Mouse_buttonStates;
        if (var$2 == 1)
            var$2 = 2;
        else if (var$2 == 2)
            var$2 = 1;
        var$3.data[var$2] = 0;
        ju_AbstractList_add(oli_Mouse_mouseEvents, otji_JSWrapper_wrap(var$1));
        var$1.preventDefault();
        var$1.stopPropagation();
    }
    var oli_Mouse$4 = $rt_classWithoutFields();
    function oli_Mouse$4__init_() {
        var var_0 = new oli_Mouse$4();
        oli_Mouse$4__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$4__init_0($this) {}
    function oli_Mouse$4_handleEvent$exported$0(var$0, var$1) {
        var var$2;
        var$2 = m_WebGL_window.devicePixelRatio;
        oli_Mouse_x = var$1.offsetX * var$2 | 0;
        oli_Mouse_y = (m_WebGL_canvas.clientHeight - var$1.offsetY | 0) * var$2 | 0;
        oli_Mouse_dx = oli_Mouse_dx + var$1.movementX | 0;
        oli_Mouse_dy = oli_Mouse_dy +  -var$1.movementY | 0;
        var$1.preventDefault();
        var$1.stopPropagation();
    }
    var oli_Mouse$5 = $rt_classWithoutFields();
    function oli_Mouse$5__init_() {
        var var_0 = new oli_Mouse$5();
        oli_Mouse$5__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$5__init_0($this) {}
    function oli_Mouse$5_handleEvent$exported$0(var$0, var$1) {
        var var$2;
        ju_AbstractList_add(oli_Mouse_mouseEvents, otji_JSWrapper_wrap(var$1));
        var$1.preventDefault();
        var$1.stopPropagation();
        var$2 = var$1.deltaY <= 0.0 ? (-1) : 1;
        oli_Mouse_dwheel = oli_Mouse_dwheel + var$2 | 0;
    }
    var oli_Mouse$6 = $rt_classWithoutFields();
    function oli_Mouse$6__init_() {
        var var_0 = new oli_Mouse$6();
        oli_Mouse$6__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$6__init_0($this) {}
    function oli_Mouse$6_handleEvent$exported$0(var$0, var$1) {
        if (!($rt_globals.document.pointerLockElement != null ? 1 : 0))
            oli_Mouse_isGrabbed = 0;
        else
            oli_Mouse_isGrabbed = 1;
    }
    var oli_Mouse$7 = $rt_classWithoutFields();
    function oli_Mouse$7__init_() {
        var var_0 = new oli_Mouse$7();
        oli_Mouse$7__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$7__init_0($this) {}
    function oli_Mouse$7_handleEvent$exported$0(var$0, var$1) {
        var$1.preventDefault();
        var$1.stopPropagation();
        oli_Mouse_isInsideWindow = 0;
    }
    var oli_Mouse$8 = $rt_classWithoutFields();
    function oli_Mouse$8__init_() {
        var var_0 = new oli_Mouse$8();
        oli_Mouse$8__init_0(var_0);
        return var_0;
    }
    function oli_Mouse$8__init_0($this) {}
    function oli_Mouse$8_handleEvent$exported$0(var$0, var$1) {
        var$1.preventDefault();
        var$1.stopPropagation();
        oli_Mouse_isInsideWindow = 1;
    }
    var ju_Objects = $rt_classWithoutFields();
    function ju_Objects_equals($a, $b) {
        if ($a === $b)
            return 1;
        return $a !== null ? $a.$equals($b) : $b !== null ? 0 : 1;
    }
    function ju_Objects_requireNonNull($obj) {
        if ($obj !== null)
            return $obj;
        $obj = new jl_NullPointerException;
        jl_Throwable__init_($obj, $rt_s(3));
        $rt_throw($obj);
    }
    function cmm_KeyBinding() {
        var a = this; jl_Object.call(a);
        a.$name4 = null;
        a.$key = 0;
    }
    function cmm_KeyBinding__init_(var_0, var_1) {
        var var_2 = new cmm_KeyBinding();
        cmm_KeyBinding__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmm_KeyBinding__init_0($this, $name, $key) {
        $this.$name4 = $name;
        $this.$key = $key;
    }
    function nPm_BufferedImage() {
        var a = this; jl_Object.call(a);
        a.$data0 = null;
        a.$w0 = 0;
        a.$h2 = 0;
        a.$alpha1 = 0;
    }
    function nPm_BufferedImage_getRGB($this, $startX, $startY, $w, $h, $rgbArray, $offset, $scansize) {
        var var$8, var$9, var$10, var$11, $y, $x, $imageDataIndex, $argb, var$16;
        if ($startX >= 0 && $startY >= 0 && $w > 0 && $h > 0) {
            var$8 = $startX + $w | 0;
            var$9 = $this.$w0;
            if (var$8 <= var$9) {
                var$10 = $startY + $h | 0;
                if (var$10 <= $this.$h2) {
                    var$11 = $rgbArray.data;
                    if (var$11.length >= ($offset + $rt_imul($w, $h) | 0)) {
                        $y = $startY;
                        while ($y < var$10) {
                            $x = $startX;
                            while ($x < var$8) {
                                $imageDataIndex = $rt_imul($y, var$9) + $x | 0;
                                $argb = $this.$data0.data[$imageDataIndex];
                                var$11[($offset + $rt_imul($y - $startY | 0, $scansize) | 0) + ($x - $startX | 0) | 0] = ($argb >> 24 & 255) << 24 | ($argb >> 16 & 255) << 16 | ($argb >> 8 & 255) << 8 | $argb & 255;
                                $x = $x + 1 | 0;
                            }
                            $y = $y + 1 | 0;
                        }
                        return $rgbArray;
                    }
                }
            }
        }
        var$16 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$16, $rt_s(321));
        $rt_throw(var$16);
    }
    var nPm_ImageIO = $rt_classWithoutFields();
    function nPm_ImageIO_read($bais) {
        var var$2, var$3, var$4, var$5, var$6, var$7, var$8, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$bais = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$2 = $bais.$buf;
            var$3 = $bais.$pos0;
            var$4 = $bais.$count1;
            var$5 = $rt_createByteArray(var$4 - var$3 | 0);
            var$6 = var$5.data;
            var$7 = var$3;
            while (var$7 < var$4) {
                var$8 = var$2.data;
                var$6[var$7 - var$3 | 0] = var$8[var$7];
                var$7 = var$7 + 1 | 0;
            }
            $bais = new $rt_globals.ArrayBuffer(var$6.length);
            (new $rt_globals.Uint8Array($bais)).set(var$5.data);
            $ptr = 1;
        case 1:
            $tmp = nPm_LWJGLUtil_loadPNG0$_asyncCall_$($bais);
            if ($rt_suspending()) {
                break main;
            }
            $bais = $tmp;
            return $bais;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($bais, var$2, var$3, var$4, var$5, var$6, var$7, var$8, $ptr);
    }
    var jn_IntBuffer = $rt_classWithoutFields(jn_Buffer);
    function jn_IntBuffer_put($this, $src, $offset, $length) {
        var var$4, var$5, var$6, $pos, var$8, $i, var$10;
        if ($this.$readOnly2()) {
            var$4 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0(var$4);
            $rt_throw(var$4);
        }
        if (jn_Buffer_remaining($this) < $length) {
            var$4 = new jn_BufferOverflowException;
            jl_Throwable__init_0(var$4);
            $rt_throw(var$4);
        }
        if ($offset >= 0) {
            var$5 = $src.data;
            var$6 = var$5.length;
            if ($offset <= var$6) {
                $pos = $offset + $length | 0;
                if ($pos > var$6) {
                    var$4 = new jl_IndexOutOfBoundsException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(322)), $pos), $rt_s(80)), var$6);
                    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$4);
                }
                if ($length < 0) {
                    var$4 = new jl_IndexOutOfBoundsException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(81)), $length), $rt_s(82));
                    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$4);
                }
                $pos = $this.$position0;
                $i = 0;
                while ($i < $length) {
                    var$10 = $pos + 1 | 0;
                    var$6 = $offset + 1 | 0;
                    $this.$putElement($pos, var$5[$offset]);
                    $i = $i + 1 | 0;
                    $pos = var$10;
                    $offset = var$6;
                }
                $this.$position0 = $this.$position0 + $length | 0;
                return $this;
            }
        }
        $src = $src.data;
        var$4 = new jl_IndexOutOfBoundsException;
        $length = $src.length;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(83)), $offset), $rt_s(77)), $length), 41);
        jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$4);
    }
    function jn_IntBuffer_clear($this) {
        jn_Buffer_clear($this);
        return $this;
    }
    function jn_IntBuffer_flip($this) {
        jn_Buffer_flip($this);
        return $this;
    }
    function jn_IntBuffer_limit($this, $newLimit) {
        jn_Buffer_limit0($this, $newLimit);
        return $this;
    }
    function cmmi_ItemModel() {
        jl_Object.call(this);
        this.$model = null;
    }
    function cmmi_ItemModel__init_(var_0) {
        var var_1 = new cmmi_ItemModel();
        cmmi_ItemModel__init_0(var_1, var_0);
        return var_1;
    }
    function cmmi_ItemModel__init_0($this, $tex) {
        var $vertex1, $vertex2, $vertex3, $vertex4, $vertex5, $vertex6, $vertex7, $vertex8, var$10, $vertexes5, $u2, $u1, $var3, $v1, $v2, $vertexes1, $vertexes2, $vertexes3, $vertexes4, $vertexes6;
        $vertex1 = cmmm_ModelPart__init_(0, 0);
        $this.$model = $vertex1;
        $vertex1.$vertices = $rt_createArray(cmmm_Vertex, 8);
        $vertex1.$quads = $rt_createArray(cmmm_TexturedQuad, 6);
        $vertex1 = cmmm_Vertex__init_((-2.0), (-2.0), (-2.0), 0.0, 0.0);
        $vertex2 = cmmm_Vertex__init_(2.0, (-2.0), (-2.0), 0.0, 8.0);
        $vertex3 = cmmm_Vertex__init_(2.0, 2.0, (-2.0), 8.0, 8.0);
        $vertex4 = cmmm_Vertex__init_((-2.0), 2.0, (-2.0), 8.0, 0.0);
        $vertex5 = cmmm_Vertex__init_((-2.0), (-2.0), 2.0, 0.0, 0.0);
        $vertex6 = cmmm_Vertex__init_(2.0, (-2.0), 2.0, 0.0, 8.0);
        $vertex7 = cmmm_Vertex__init_(2.0, 2.0, 2.0, 8.0, 8.0);
        $vertex8 = cmmm_Vertex__init_((-2.0), 2.0, 2.0, 8.0, 0.0);
        var$10 = $this.$model;
        $vertexes5 = var$10.$vertices.data;
        $vertexes5[0] = $vertex1;
        $vertexes5[1] = $vertex2;
        $vertexes5[2] = $vertex3;
        $vertexes5[3] = $vertex4;
        $vertexes5[4] = $vertex5;
        $vertexes5[5] = $vertex6;
        $vertexes5[6] = $vertex7;
        $vertexes5[7] = $vertex8;
        $u2 = $tex % 16 | 0;
        $u1 = ($u2 + 0.75) / 16.0;
        $var3 = $tex / 16 | 0;
        $v1 = ($var3 + 0.75) / 16.0;
        $u2 = ($u2 + 0.25) / 16.0;
        $v2 = ($var3 + 0.25) / 16.0;
        $vertexes1 = $rt_createArrayFromData(cmmm_Vertex, [$vertex6, $vertex2, $vertex3, $vertex7]);
        $vertexes2 = $rt_createArrayFromData(cmmm_Vertex, [$vertex1, $vertex5, $vertex8, $vertex4]);
        $vertexes3 = $rt_createArrayFromData(cmmm_Vertex, [$vertex6, $vertex5, $vertex1, $vertex2]);
        $vertexes4 = $rt_createArrayFromData(cmmm_Vertex, [$vertex3, $vertex4, $vertex8, $vertex7]);
        $vertexes5 = $rt_createArrayFromData(cmmm_Vertex, [$vertex2, $vertex1, $vertex4, $vertex3]);
        $vertexes6 = $rt_createArrayFromData(cmmm_Vertex, [$vertex5, $vertex6, $vertex7, $vertex8]);
        var$10.$quads.data[0] = cmmm_TexturedQuad__init_3($vertexes1, $u1, $v1, $u2, $v2);
        $this.$model.$quads.data[1] = cmmm_TexturedQuad__init_3($vertexes2, $u1, $v1, $u2, $v2);
        $this.$model.$quads.data[2] = cmmm_TexturedQuad__init_3($vertexes3, $u1, $v1, $u2, $v2);
        $this.$model.$quads.data[3] = cmmm_TexturedQuad__init_3($vertexes4, $u1, $v1, $u2, $v2);
        $this.$model.$quads.data[4] = cmmm_TexturedQuad__init_3($vertexes5, $u1, $v1, $u2, $v2);
        $this.$model.$quads.data[5] = cmmm_TexturedQuad__init_3($vertexes6, $u1, $v1, $u2, $v2);
    }
    function cmmi_ItemModel_generateList($this) {
        cmmm_ModelPart_render($this.$model, 0.0625);
    }
    function cmmm_CreeperModel() {
        var a = this; cmmm_Model.call(a);
        a.$head2 = null;
        a.$unused3 = null;
        a.$body1 = null;
        a.$leg1 = null;
        a.$leg2 = null;
        a.$leg3 = null;
        a.$leg4 = null;
    }
    function cmmm_CreeperModel__init_() {
        var var_0 = new cmmm_CreeperModel();
        cmmm_CreeperModel__init_0(var_0);
        return var_0;
    }
    function cmmm_CreeperModel__init_0($this) {
        var var$1;
        var$1 = cmmm_ModelPart__init_(0, 0);
        $this.$head2 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-4.0), (-8.0), (-4.0), 8, 8, 8, 0.0);
        var$1 = cmmm_ModelPart__init_(32, 0);
        $this.$unused3 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-4.0), (-8.0), (-4.0), 8, 8, 8, 0.5);
        var$1 = cmmm_ModelPart__init_(16, 16);
        $this.$body1 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-4.0), 0.0, (-2.0), 8, 12, 4, 0.0);
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg1 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.0);
        cmmm_ModelPart_setPosition($this.$leg1, (-2.0), 12.0, 4.0);
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg2 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.0);
        cmmm_ModelPart_setPosition($this.$leg2, 2.0, 12.0, 4.0);
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg3 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.0);
        cmmm_ModelPart_setPosition($this.$leg3, (-2.0), 12.0, (-4.0));
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg4 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.0);
        cmmm_ModelPart_setPosition($this.$leg4, 2.0, 12.0, (-4.0));
    }
    function cmmm_CreeperModel_render($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7;
        var$7 = $this.$head2;
        var$7.$yaw = $var4 / 57.2957763671875;
        var$7.$pitch = $var5 / 57.2957763671875;
        var$7 = $this.$leg1;
        $var1 = $var1 * 0.6661999821662903;
        var$7.$pitch = cmu_MathHelper_cos($var1) * 1.399999976158142 * $var2;
        var$7 = $this.$leg2;
        $var3 = $var1 + 3.1415927410125732;
        var$7.$pitch = cmu_MathHelper_cos($var3) * 1.399999976158142 * $var2;
        $this.$leg3.$pitch = cmu_MathHelper_cos($var3) * 1.399999976158142 * $var2;
        $this.$leg4.$pitch = cmu_MathHelper_cos($var1) * 1.399999976158142 * $var2;
        cmmm_ModelPart_render($this.$head2, $var6);
        cmmm_ModelPart_render($this.$body1, $var6);
        cmmm_ModelPart_render($this.$leg1, $var6);
        cmmm_ModelPart_render($this.$leg2, $var6);
        cmmm_ModelPart_render($this.$leg3, $var6);
        cmmm_ModelPart_render($this.$leg4, $var6);
    }
    var cmmm_ZombieModel = $rt_classWithoutFields(cmmm_HumanoidModel);
    function cmmm_ZombieModel__init_0() {
        var var_0 = new cmmm_ZombieModel();
        cmmm_ZombieModel__init_(var_0);
        return var_0;
    }
    function cmmm_ZombieModel__init_($this) {
        cmmm_HumanoidModel__init_($this, 0.0);
    }
    function cmmm_ZombieModel_setRotationAngles($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7, var$8;
        cmmm_HumanoidModel_setRotationAngles($this, $var1, $var2, $var3, $var4, $var5, $var6);
        $var1 = cmu_MathHelper_sin($this.$attackOffset * 3.1415927410125732);
        $var4 = 1.0 - $this.$attackOffset;
        $var5 = cmu_MathHelper_sin((1.0 - $var4 * $var4) * 3.1415927410125732);
        var$7 = $this.$rightArm;
        var$7.$roll = 0.0;
        var$8 = $this.$leftArm;
        var$8.$roll = 0.0;
        $var2 = 0.10000000149011612 - $var1 * 0.6000000238418579;
        var$7.$yaw =  -$var2;
        var$8.$yaw = $var2;
        var$7.$pitch = (-1.5707963705062866);
        var$8.$pitch = (-1.5707963705062866);
        $var2 = var$7.$pitch;
        $var1 = $var1 * 1.2000000476837158 - $var5 * 0.4000000059604645;
        var$7.$pitch = $var2 - $var1;
        var$8.$pitch = var$8.$pitch - $var1;
        $var1 = var$7.$roll;
        $var2 = $var3 * 0.09000000357627869;
        var$7.$roll = $var1 + cmu_MathHelper_cos($var2) * 0.05000000074505806 + 0.05000000074505806;
        var$7 = $this.$leftArm;
        var$7.$roll = var$7.$roll - (cmu_MathHelper_cos($var2) * 0.05000000074505806 + 0.05000000074505806);
        var$7 = $this.$rightArm;
        $var1 = var$7.$pitch;
        $var2 = $var3 * 0.06700000166893005;
        var$7.$pitch = $var1 + cmu_MathHelper_sin($var2) * 0.05000000074505806;
        var$7 = $this.$leftArm;
        var$7.$pitch = var$7.$pitch - cmu_MathHelper_sin($var2) * 0.05000000074505806;
    }
    var cmmm_SkeletonModel = $rt_classWithoutFields(cmmm_ZombieModel);
    function cmmm_AnimalModel() {
        var a = this; cmmm_Model.call(a);
        a.$head1 = null;
        a.$body0 = null;
        a.$leg10 = null;
        a.$leg20 = null;
        a.$leg30 = null;
        a.$leg40 = null;
    }
    function cmmm_AnimalModel__init_0(var_0, var_1) {
        var var_2 = new cmmm_AnimalModel();
        cmmm_AnimalModel__init_(var_2, var_0, var_1);
        return var_2;
    }
    function cmmm_AnimalModel__init_($this, $var1, $var2) {
        var var$3, var$4;
        var$3 = cmmm_ModelPart__init_(0, 0);
        $this.$head1 = var$3;
        cmmm_ModelPart_setBounds(var$3, (-4.0), (-4.0), (-8.0), 8, 8, 8, 0.0);
        cmmm_ModelPart_setPosition($this.$head1, 0.0, 18 - $var1 | 0, (-6.0));
        var$3 = cmmm_ModelPart__init_(28, 8);
        $this.$body0 = var$3;
        cmmm_ModelPart_setBounds(var$3, (-5.0), (-10.0), (-7.0), 10, 16, 8, 0.0);
        cmmm_ModelPart_setPosition($this.$body0, 0.0, 17 - $var1 | 0, 2.0);
        var$3 = cmmm_ModelPart__init_(0, 16);
        $this.$leg10 = var$3;
        cmmm_ModelPart_setBounds(var$3, (-2.0), 0.0, (-2.0), 4, $var1, 4, 0.0);
        var$3 = $this.$leg10;
        var$4 = 24 - $var1 | 0;
        cmmm_ModelPart_setPosition(var$3, (-3.0), var$4, 7.0);
        var$3 = cmmm_ModelPart__init_(0, 16);
        $this.$leg20 = var$3;
        cmmm_ModelPart_setBounds(var$3, (-2.0), 0.0, (-2.0), 4, $var1, 4, 0.0);
        cmmm_ModelPart_setPosition($this.$leg20, 3.0, var$4, 7.0);
        var$3 = cmmm_ModelPart__init_(0, 16);
        $this.$leg30 = var$3;
        cmmm_ModelPart_setBounds(var$3, (-2.0), 0.0, (-2.0), 4, $var1, 4, 0.0);
        cmmm_ModelPart_setPosition($this.$leg30, (-3.0), var$4, (-5.0));
        var$3 = cmmm_ModelPart__init_(0, 16);
        $this.$leg40 = var$3;
        cmmm_ModelPart_setBounds(var$3, (-2.0), 0.0, (-2.0), 4, $var1, 4, 0.0);
        cmmm_ModelPart_setPosition($this.$leg40, 3.0, var$4, (-5.0));
    }
    function cmmm_AnimalModel_render($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7;
        var$7 = $this.$head1;
        var$7.$yaw = $var4 / 57.2957763671875;
        var$7.$pitch = $var5 / 57.2957763671875;
        $this.$body0.$pitch = 1.5707963705062866;
        var$7 = $this.$leg10;
        $var1 = $var1 * 0.6661999821662903;
        var$7.$pitch = cmu_MathHelper_cos($var1) * 1.399999976158142 * $var2;
        var$7 = $this.$leg20;
        $var3 = $var1 + 3.1415927410125732;
        var$7.$pitch = cmu_MathHelper_cos($var3) * 1.399999976158142 * $var2;
        $this.$leg30.$pitch = cmu_MathHelper_cos($var3) * 1.399999976158142 * $var2;
        $this.$leg40.$pitch = cmu_MathHelper_cos($var1) * 1.399999976158142 * $var2;
        cmmm_ModelPart_render($this.$head1, $var6);
        cmmm_ModelPart_render($this.$body0, $var6);
        cmmm_ModelPart_render($this.$leg10, $var6);
        cmmm_ModelPart_render($this.$leg20, $var6);
        cmmm_ModelPart_render($this.$leg30, $var6);
        cmmm_ModelPart_render($this.$leg40, $var6);
    }
    var cmmm_PigModel = $rt_classWithoutFields(cmmm_AnimalModel);
    var cmmm_SheepModel = $rt_classWithoutFields(cmmm_AnimalModel);
    function cmmm_SpiderModel() {
        var a = this; cmmm_Model.call(a);
        a.$head3 = null;
        a.$neck = null;
        a.$body2 = null;
        a.$leg11 = null;
        a.$leg21 = null;
        a.$leg31 = null;
        a.$leg41 = null;
        a.$leg5 = null;
        a.$leg6 = null;
        a.$leg7 = null;
        a.$leg8 = null;
    }
    function cmmm_SpiderModel__init_() {
        var var_0 = new cmmm_SpiderModel();
        cmmm_SpiderModel__init_0(var_0);
        return var_0;
    }
    function cmmm_SpiderModel__init_0($this) {
        var var$1;
        var$1 = cmmm_ModelPart__init_(32, 4);
        $this.$head3 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-4.0), (-4.0), (-8.0), 8, 8, 8, 0.0);
        cmmm_ModelPart_setPosition($this.$head3, 0.0, 0.0, (-3.0));
        var$1 = cmmm_ModelPart__init_(0, 0);
        $this.$neck = var$1;
        cmmm_ModelPart_setBounds(var$1, (-3.0), (-3.0), (-3.0), 6, 6, 6, 0.0);
        var$1 = cmmm_ModelPart__init_(0, 12);
        $this.$body2 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-5.0), (-4.0), (-6.0), 10, 8, 12, 0.0);
        cmmm_ModelPart_setPosition($this.$body2, 0.0, 0.0, 9.0);
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg11 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-15.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg11, (-4.0), 0.0, 2.0);
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg21 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-1.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg21, 4.0, 0.0, 2.0);
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg31 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-15.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg31, (-4.0), 0.0, 1.0);
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg41 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-1.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg41, 4.0, 0.0, 1.0);
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg5 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-15.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg5, (-4.0), 0.0, 0.0);
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg6 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-1.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg6, 4.0, 0.0, 0.0);
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg7 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-15.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg7, (-4.0), 0.0, (-1.0));
        var$1 = cmmm_ModelPart__init_(18, 0);
        $this.$leg8 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-1.0), (-1.0), (-1.0), 16, 2, 2, 0.0);
        cmmm_ModelPart_setPosition($this.$leg8, 4.0, 0.0, (-1.0));
    }
    function cmmm_SpiderModel_render($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        var var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, $var7, $var8, $var9, $var10, $var11;
        var$7 = $this.$head3;
        var$7.$yaw = $var4 / 57.2957763671875;
        var$7.$pitch = $var5 / 57.2957763671875;
        var$7 = $this.$leg11;
        var$7.$roll = (-0.7853981852531433);
        var$8 = $this.$leg21;
        var$8.$roll = 0.7853981852531433;
        var$9 = $this.$leg31;
        var$9.$roll = (-0.5811946392059326);
        var$10 = $this.$leg41;
        var$10.$roll = 0.5811946392059326;
        var$11 = $this.$leg5;
        var$11.$roll = (-0.5811946392059326);
        var$12 = $this.$leg6;
        var$12.$roll = 0.5811946392059326;
        var$13 = $this.$leg7;
        var$13.$roll = (-0.7853981852531433);
        var$14 = $this.$leg8;
        var$14.$roll = 0.7853981852531433;
        var$7.$yaw = 0.7853981852531433;
        var$8.$yaw = (-0.7853981852531433);
        var$9.$yaw = 0.39269909262657166;
        var$10.$yaw = (-0.39269909262657166);
        var$11.$yaw = (-0.39269909262657166);
        var$12.$yaw = 0.39269909262657166;
        var$13.$yaw = (-0.7853981852531433);
        var$14.$yaw = 0.7853981852531433;
        var$15 = $var1 * 0.6661999821662903;
        $var1 = var$15 * 2.0;
        $var3 =  -(cmu_MathHelper_cos($var1) * 0.4000000059604645) * $var2;
        $var4 =  -(cmu_MathHelper_cos($var1 + 3.1415927410125732) * 0.4000000059604645) * $var2;
        $var7 =  -(cmu_MathHelper_cos($var1 + 1.5707963705062866) * 0.4000000059604645) * $var2;
        $var8 =  -(cmu_MathHelper_cos($var1 + 4.71238899230957) * 0.4000000059604645) * $var2;
        $var9 = jl_Math_abs(cmu_MathHelper_sin(var$15) * 0.4000000059604645) * $var2;
        $var10 = jl_Math_abs(cmu_MathHelper_sin(var$15 + 3.1415927410125732) * 0.4000000059604645) * $var2;
        $var11 = jl_Math_abs(cmu_MathHelper_sin(var$15 + 1.5707963705062866) * 0.4000000059604645) * $var2;
        $var2 = jl_Math_abs(cmu_MathHelper_sin(var$15 + 4.71238899230957) * 0.4000000059604645) * $var2;
        var$12 = $this.$leg11;
        var$12.$yaw = var$12.$yaw + $var3;
        var$13 = $this.$leg21;
        var$13.$yaw = var$13.$yaw - $var3;
        var$14 = $this.$leg31;
        var$14.$yaw = var$14.$yaw + $var4;
        var$7 = $this.$leg41;
        var$7.$yaw = var$7.$yaw - $var4;
        var$8 = $this.$leg5;
        var$8.$yaw = var$8.$yaw + $var7;
        var$9 = $this.$leg6;
        var$9.$yaw = var$9.$yaw - $var7;
        var$10 = $this.$leg7;
        var$10.$yaw = var$10.$yaw + $var8;
        var$11 = $this.$leg8;
        var$11.$yaw = var$11.$yaw - $var8;
        var$12.$roll = var$12.$roll + $var9;
        var$13.$roll = var$13.$roll - $var9;
        var$14.$roll = var$14.$roll + $var10;
        var$7.$roll = var$7.$roll - $var10;
        var$8.$roll = var$8.$roll + $var11;
        var$9.$roll = var$9.$roll - $var11;
        var$10.$roll = var$10.$roll + $var2;
        var$11.$roll = var$11.$roll - $var2;
        cmmm_ModelPart_render($this.$head3, $var6);
        cmmm_ModelPart_render($this.$neck, $var6);
        cmmm_ModelPart_render($this.$body2, $var6);
        cmmm_ModelPart_render($this.$leg11, $var6);
        cmmm_ModelPart_render($this.$leg21, $var6);
        cmmm_ModelPart_render($this.$leg31, $var6);
        cmmm_ModelPart_render($this.$leg41, $var6);
        cmmm_ModelPart_render($this.$leg5, $var6);
        cmmm_ModelPart_render($this.$leg6, $var6);
        cmmm_ModelPart_render($this.$leg7, $var6);
        cmmm_ModelPart_render($this.$leg8, $var6);
    }
    var cmmm_SheepFurModel = $rt_classWithoutFields(cmmm_AnimalModel);
    function cmmm_SheepFurModel__init_() {
        var var_0 = new cmmm_SheepFurModel();
        cmmm_SheepFurModel__init_0(var_0);
        return var_0;
    }
    function cmmm_SheepFurModel__init_0($this) {
        var var$1;
        cmmm_AnimalModel__init_($this, 12, 0.0);
        var$1 = cmmm_ModelPart__init_(0, 0);
        $this.$head1 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-3.0), (-4.0), (-4.0), 6, 6, 6, 0.6000000238418579);
        cmmm_ModelPart_setPosition($this.$head1, 0.0, 6.0, (-8.0));
        var$1 = cmmm_ModelPart__init_(28, 8);
        $this.$body0 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-4.0), (-10.0), (-7.0), 8, 16, 6, 1.75);
        cmmm_ModelPart_setPosition($this.$body0, 0.0, 5.0, 2.0);
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg10 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.5);
        cmmm_ModelPart_setPosition($this.$leg10, (-3.0), 12.0, 7.0);
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg20 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.5);
        cmmm_ModelPart_setPosition($this.$leg20, 3.0, 12.0, 7.0);
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg30 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.5);
        cmmm_ModelPart_setPosition($this.$leg30, (-3.0), 12.0, (-5.0));
        var$1 = cmmm_ModelPart__init_(0, 16);
        $this.$leg40 = var$1;
        cmmm_ModelPart_setBounds(var$1, (-2.0), 0.0, (-2.0), 4, 6, 4, 0.5);
        cmmm_ModelPart_setPosition($this.$leg40, 3.0, 12.0, (-5.0));
    }
    var olo_Sync = $rt_classWithoutFields();
    var olo_Sync_nextFrame = Long_ZERO;
    var olo_Sync_initialised = 0;
    var olo_Sync_sleepDurations = null;
    var olo_Sync_yieldDurations = null;
    function olo_Sync_getTime() {
        return Long_div(Long_mul(Long_and(jl_System_currentTimeMillis(), Long_create(4294967295, 2147483647)), Long_fromInt(1000000000)), Long_fromInt(1000));
    }
    function olo_Sync__clinit_() {
        olo_Sync_nextFrame = Long_ZERO;
        olo_Sync_initialised = 0;
        olo_Sync_sleepDurations = olo_Sync$RunningAvg__init_(10);
        olo_Sync_yieldDurations = olo_Sync$RunningAvg__init_(10);
    }
    function cmm_ChatLine() {
        var a = this; jl_Object.call(a);
        a.$message0 = null;
        a.$time = 0;
    }
    function cmmg_GuiScreen() {
        var a = this; cmmg_Screen.call(a);
        a.$minecraft5 = null;
        a.$width4 = 0;
        a.$height4 = 0;
        a.$buttons = null;
        a.$grabsMouse = 0;
        a.$fontRenderer0 = null;
    }
    function cmmg_GuiScreen__init_0() {
        var var_0 = new cmmg_GuiScreen();
        cmmg_GuiScreen__init_(var_0);
        return var_0;
    }
    function cmmg_GuiScreen__init_($this) {
        cmmg_Screen__init_0($this);
        $this.$buttons = ju_ArrayList__init_();
        $this.$grabsMouse = 0;
    }
    function cmmg_GuiScreen_render($this, $var1, $var2) {
        var $var3, $var10000, $var7, $var8, var$7, var$8, var$9, $var9, var$11, $var6, var$13, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$13 = $thread.pop();$var6 = $thread.pop();var$11 = $thread.pop();$var9 = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();$var8 = $thread.pop();$var7 = $thread.pop();$var10000 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $var3 = 0;
            while (true) {
                $var10000 = $this.$buttons;
                if ($var3 >= $var10000.$size0)
                    break;
                $var10000 = ju_ArrayList_get($var10000, $var3);
                $var7 = $this.$minecraft5;
                if ($var10000.$visible0) {
                    $var8 = $var7.$fontRenderer;
                    var$7 = 3553;
                    var$8 = $var7.$textureManager;
                    $var7 = $rt_s(306);
                    $ptr = 1;
                    continue main;
                }
                $var3 = $var3 + 1 | 0;
            }
            return;
        case 1:
            a: {
                $tmp = cmmr_TextureManager_load(var$8, $var7);
                if ($rt_suspending()) {
                    break main;
                }
                var$9 = $tmp;
                olo_GL11_glBindTexture(var$7, var$9);
                olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
                $var9 = 1;
                var$11 = $var10000.$x11;
                if ($var1 >= var$11) {
                    var$9 = $var10000.$y9;
                    if ($var2 >= var$9 && $var1 < (var$11 + $var10000.$width5 | 0) && $var2 < (var$9 + $var10000.$height5 | 0)) {
                        $var6 = 1;
                        break a;
                    }
                }
                $var6 = 0;
            }
            if (!$var10000.$active)
                $var9 = 0;
            else if ($var6)
                $var9 = 2;
            var$7 = $var10000.$y9;
            var$13 = 46 + ($var9 * 20 | 0) | 0;
            cmmg_Screen_drawImage($var10000, var$11, var$7, 0, var$13, $var10000.$width5 / 2 | 0, $var10000.$height5);
            var$9 = $var10000.$x11;
            var$7 = $var10000.$width5 / 2 | 0;
            cmmg_Screen_drawImage($var10000, var$9 + var$7 | 0, $var10000.$y9, 200 - var$7 | 0, var$13, var$7, $var10000.$height5);
            if (!$var10000.$active)
                cmmg_Screen_drawCenteredString($var8, $var10000.$text0, $var10000.$x11 + ($var10000.$width5 / 2 | 0) | 0, $var10000.$y9 + (($var10000.$height5 - 8 | 0) / 2 | 0) | 0, (-6250336));
            else if (!$var6)
                cmmg_Screen_drawCenteredString($var8, $var10000.$text0, $var10000.$x11 + ($var10000.$width5 / 2 | 0) | 0, $var10000.$y9 + (($var10000.$height5 - 8 | 0) / 2 | 0) | 0, 14737632);
            else
                cmmg_Screen_drawCenteredString($var8, $var10000.$text0, $var10000.$x11 + ($var10000.$width5 / 2 | 0) | 0, $var10000.$y9 + (($var10000.$height5 - 8 | 0) / 2 | 0) | 0, 16777120);
            while (true) {
                $var3 = $var3 + 1 | 0;
                $var10000 = $this.$buttons;
                if ($var3 >= $var10000.$size0)
                    break;
                $var10000 = ju_ArrayList_get($var10000, $var3);
                $var7 = $this.$minecraft5;
                if (!$var10000.$visible0)
                    continue;
                else {
                    $var8 = $var7.$fontRenderer;
                    var$7 = 3553;
                    var$8 = $var7.$textureManager;
                    $var7 = $rt_s(306);
                    continue main;
                }
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var10000, $var7, $var8, var$7, var$8, var$9, $var9, var$11, $var6, var$13, $ptr);
    }
    function cmmg_GuiScreen_onKeyPress($this, $var1, $var2) {
        if ($var2 == 1) {
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, null);
            cmm_Minecraft_grabMouse($this.$minecraft5);
        }
    }
    function cmmg_GuiScreen_onMouseClick($this, $var1, $var2, $var3) {
        var var$4, var$5, var$6, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                if (!$var3) {
                    var$4 = 0;
                    while (true) {
                        var$5 = $this.$buttons;
                        if (var$4 >= var$5.$size0)
                            break a;
                        var$5 = ju_ArrayList_get(var$5, var$4);
                        if (var$5.$active) {
                            $var3 = var$5.$x11;
                            if ($var1 >= $var3) {
                                var$6 = var$5.$y9;
                                if ($var2 >= var$6 && $var1 < ($var3 + var$5.$width5 | 0) && $var2 < (var$6 + var$5.$height5 | 0)) {
                                    $ptr = 1;
                                    continue main;
                                }
                            }
                        }
                        var$4 = var$4 + 1 | 0;
                    }
                }
            }
            return;
        case 1:
            $this.$onButtonClick(var$5);
            if ($rt_suspending()) {
                break main;
            }
            while (true) {
                var$4 = var$4 + 1 | 0;
                var$5 = $this.$buttons;
                if (var$4 >= var$5.$size0)
                    break;
                var$5 = ju_ArrayList_get(var$5, var$4);
                if (!var$5.$active)
                    continue;
                $var3 = var$5.$x11;
                if ($var1 < $var3)
                    continue;
                var$6 = var$5.$y9;
                if ($var2 < var$6)
                    continue;
                if ($var1 >= ($var3 + var$5.$width5 | 0))
                    continue;
                if ($var2 >= (var$6 + var$5.$height5 | 0))
                    continue;
                else {
                    continue main;
                }
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, var$4, var$5, var$6, $ptr);
    }
    function cmmg_GuiScreen_onButtonClick($this, $var1) {}
    function cmmg_GuiScreen_open($this, $var1, $var2, $var3) {
        $this.$minecraft5 = $var1;
        $this.$fontRenderer0 = $var1.$fontRenderer;
        $this.$width4 = $var2;
        $this.$height4 = $var3;
        $this.$onOpen();
    }
    function cmmg_GuiScreen_doInput($this) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if (!oli_Mouse_next()) {
                while (oli_Keyboard_next()) {
                    cmmg_GuiScreen_keyboardEvent($this);
                }
                return;
            }
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_mouseEvent($this);
            if ($rt_suspending()) {
                break main;
            }
            if (!oli_Mouse_next()) {
                while (oli_Keyboard_next()) {
                    cmmg_GuiScreen_keyboardEvent($this);
                }
                return;
            }
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $ptr);
    }
    function cmmg_GuiScreen_mouseEvent($this) {
        var var$1, $var1, $var2, var$4, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$4 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();var$1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if (!oli_Mouse_getEventButtonState())
                return;
            var$1 = oli_Mouse_currentEvent;
            $var1 = var$1 === null ? (-1) : var$1.clientX * m_WebGL_window.devicePixelRatio | 0;
            $var1 = $rt_imul($var1, $this.$width4) / $this.$minecraft5.$width | 0;
            $var2 = ($this.$height4 - ($rt_imul(oli_Mouse_currentEvent === null ? (-1) : (m_WebGL_canvas.clientHeight - oli_Mouse_currentEvent.clientY | 0) * m_WebGL_window.devicePixelRatio | 0, $this.$height4) / $this.$minecraft5.$height | 0) | 0) - 1 | 0;
            var$4 = oli_Mouse_getEventButton();
            $ptr = 1;
        case 1:
            $this.$onMouseClick0($var1, $var2, var$4);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, var$1, $var1, $var2, var$4, $ptr);
    }
    function cmmg_GuiScreen_keyboardEvent($this) {
        var var$1, var$2, var$3;
        if (oli_Keyboard_getEventKeyState()) {
            var$1 = oli_Keyboard_currentEventK;
            if (var$1 === null)
                var$2 = 0;
            else {
                var$3 = $rt_str(var$1.key);
                var$2 = oli_Keyboard_currentEventK === null ? 32 : jl_String_length(var$3) > 1 ? 0 : jl_String_charAt(var$3, 0);
            }
            $this.$onKeyPress(var$2, oli_Keyboard_getEventKey());
        }
    }
    function cmmg_GuiScreen_tick($this) {}
    function cmmg_GuiScreen_onClose($this) {}
    function cmmi_Arrow() {
        var a = this; cmm_Entity.call(a);
        a.$xd2 = 0.0;
        a.$yd2 = 0.0;
        a.$zd2 = 0.0;
        a.$yRot0 = 0.0;
        a.$xRot0 = 0.0;
        a.$yRotO0 = 0.0;
        a.$xRotO0 = 0.0;
        a.$hasHit = 0;
        a.$stickTime = 0;
        a.$owner0 = null;
        a.$time1 = 0;
        a.$type0 = 0;
        a.$gravity0 = 0.0;
        a.$damage = 0;
    }
    function cmmi_Arrow__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7) {
        var var_8 = new cmmi_Arrow();
        cmmi_Arrow__init_0(var_8, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7);
        return var_8;
    }
    function cmmi_Arrow__init_0($this, $level1, $owner, $x, $y, $z, $unknown0, $unknown1, $unknown2) {
        var $unknown3, $unknown4, var$11, var$12, var$13;
        cmm_Entity__init_($this, $level1);
        $this.$hasHit = 0;
        $this.$stickTime = 0;
        $this.$time1 = 0;
        $this.$type0 = 0;
        $this.$gravity0 = 0.0;
        $this.$owner0 = $owner;
        cmm_Entity_setSize($this, 0.30000001192092896, 0.5);
        $this.$heightOffset = $this.$bbHeight / 2.0;
        $this.$damage = 3;
        if ($owner instanceof cmmp_Player)
            $this.$damage = 7;
        else
            $this.$type0 = 1;
        $this.$heightOffset = 0.25;
        $unknown0 =  -$unknown0 * 0.01745329238474369 - 3.1415927410125732;
        $unknown3 = cmu_MathHelper_cos($unknown0);
        $unknown4 = cmu_MathHelper_sin($unknown0);
        $unknown0 =  -$unknown1 * 0.01745329238474369;
        $unknown1 = cmu_MathHelper_cos($unknown0);
        $unknown0 = cmu_MathHelper_sin($unknown0);
        $this.$slide = 0;
        $this.$gravity0 = 1.0 / $unknown2;
        var$11 = $this.$xo;
        var$12 = $unknown3 * 0.20000000298023224;
        $this.$xo = var$11 - var$12;
        var$11 = $this.$zo;
        var$13 = $unknown4 * 0.20000000298023224;
        $this.$zo = var$11 + var$13;
        $x = $x - var$12;
        $z = $z + var$13;
        $this.$xd2 = $unknown4 * $unknown1 * $unknown2;
        $this.$yd2 = $unknown0 * $unknown2;
        $this.$zd2 = $unknown3 * $unknown1 * $unknown2;
        cmm_Entity_setPos($this, $x, $y, $z);
        $x = $this.$xd2;
        $x = $x * $x;
        $y = $this.$zd2;
        $x = cmu_MathHelper_sqrt($x + $y * $y);
        $y = jl_Math_atan2($this.$xd2, $this.$zd2) * 180.0 / 3.1415927410125732;
        $this.$yRot0 = $y;
        $this.$yRotO0 = $y;
        $x = jl_Math_atan2($this.$yd2, $x) * 180.0 / 3.1415927410125732;
        $this.$xRot0 = $x;
        $this.$xRotO0 = $x;
        $this.$makeStepSound = 0;
    }
    function cmmi_Arrow_tick($this) {
        var $unknown0, $unknown4, $x0, $z0, $y0, $unknown5, $blockMapEntitiesList, $currentEntity, $entity, $unknown6;
        a: {
            $this.$time1 = $this.$time1 + 1 | 0;
            $this.$xRotO0 = $this.$xRot0;
            $this.$yRotO0 = $this.$yRot0;
            $this.$xo = $this.$x;
            $this.$yo = $this.$y;
            $this.$zo = $this.$z;
            if ($this.$hasHit) {
                $unknown0 = $this.$stickTime + 1 | 0;
                $this.$stickTime = $unknown0;
                $unknown4 = $this.$type0;
                if ($unknown4) {
                    if ($unknown4 == 1 && $unknown0 >= 20)
                        cmm_Entity_remove($this);
                } else if ($unknown0 >= 300 && jl_Math_random() < 0.009999999776482582)
                    cmm_Entity_remove($this);
            } else {
                $x0 = $this.$xd2 * 0.9980000257492065;
                $this.$xd2 = $x0;
                $z0 = $this.$yd2 * 0.9980000257492065;
                $this.$yd2 = $z0;
                $y0 = $this.$zd2 * 0.9980000257492065;
                $this.$zd2 = $y0;
                $z0 = $z0 - 0.019999999552965164 * $this.$gravity0;
                $this.$yd2 = $z0;
                $unknown0 = cmu_MathHelper_sqrt($x0 * $x0 + $z0 * $z0 + $y0 * $y0) / 0.20000000298023224 + 1.0 | 0;
                $x0 = $this.$xd2;
                $z0 = $unknown0;
                $x0 = $x0 / $z0;
                $y0 = $this.$yd2 / $z0;
                $z0 = $this.$zd2 / $z0;
                $unknown4 = 0;
                b: {
                    c: while (true) {
                        if ($unknown4 >= $unknown0)
                            break b;
                        if ($this.$collision)
                            break b;
                        $unknown5 = cmmp_AABB_expand($this.$bb, $x0, $y0, $z0);
                        if ((cmml_Level_getCubes($this.$level2, $unknown5)).$size0 > 0)
                            $this.$collision = 1;
                        $blockMapEntitiesList = cmml_BlockMap_getEntities($this.$level2.$blockMap, $this, $unknown5);
                        $currentEntity = 0;
                        while ($currentEntity < $blockMapEntitiesList.$size0) {
                            $entity = ju_ArrayList_get($blockMapEntitiesList, $currentEntity);
                            if ($entity.$isShootable()) {
                                if ($entity !== $this.$owner0)
                                    break c;
                                if ($this.$time1 > 5)
                                    break c;
                            }
                            $currentEntity = $currentEntity + 1 | 0;
                        }
                        if (!$this.$collision) {
                            cmmp_AABB_move($this.$bb, $x0, $y0, $z0);
                            $this.$x = $this.$x + $x0;
                            $this.$y = $this.$y + $y0;
                            $this.$z = $this.$z + $z0;
                            cmml_BlockMap_moved($this.$blockMap0, $this);
                        }
                        $unknown4 = $unknown4 + 1 | 0;
                    }
                    $entity.$hurt($this, $this.$damage);
                    $this.$collision = 1;
                    cmm_Entity_remove($this);
                    return;
                }
                if ($this.$collision) {
                    $this.$hasHit = 1;
                    $this.$zd2 = 0.0;
                    $this.$yd2 = 0.0;
                    $this.$xd2 = 0.0;
                }
                if (!$this.$hasHit) {
                    $x0 = $this.$xd2;
                    $x0 = $x0 * $x0;
                    $z0 = $this.$zd2;
                    $unknown6 = cmu_MathHelper_sqrt($x0 + $z0 * $z0);
                    $this.$yRot0 = jl_Math_atan2($this.$xd2, $this.$zd2) * 180.0 / 3.1415927410125732;
                    $x0 = jl_Math_atan2($this.$yd2, $unknown6) * 180.0 / 3.1415927410125732;
                    $this.$xRot0 = $x0;
                    while (true) {
                        $z0 = $this.$xRotO0;
                        if ($x0 - $z0 >= (-180.0))
                            break;
                        $this.$xRotO0 = $z0 - 360.0;
                    }
                    while (true) {
                        $z0 = $this.$xRotO0;
                        if ($x0 - $z0 < 180.0)
                            break;
                        $this.$xRotO0 = $z0 + 360.0;
                    }
                    while (true) {
                        $x0 = $this.$yRot0;
                        $z0 = $this.$yRotO0;
                        if ($x0 - $z0 >= (-180.0))
                            break;
                        $this.$yRotO0 = $z0 - 360.0;
                    }
                    while (true) {
                        $z0 = $this.$yRotO0;
                        if ($x0 - $z0 < 180.0)
                            break a;
                        $this.$yRotO0 = $z0 + 360.0;
                    }
                }
            }
        }
    }
    function cmmi_Arrow_render($this, $textureManager, $unknown0) {
        var $shapeRenderer, var$4, $brightness, $unknown1, $unknown4, $unknown7, $unknown5, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$unknown5 = $thread.pop();$unknown7 = $thread.pop();$unknown4 = $thread.pop();$unknown1 = $thread.pop();$brightness = $thread.pop();var$4 = $thread.pop();$shapeRenderer = $thread.pop();$unknown0 = $thread.pop();$textureManager = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $shapeRenderer = $rt_s(323);
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load($textureManager, $shapeRenderer);
            if ($rt_suspending()) {
                break main;
            }
            var$4 = $tmp;
            $this.$textureId1 = var$4;
            olo_GL11_glBindTexture(3553, var$4);
            $brightness = cmml_Level_getBrightness($this.$level2, $this.$x | 0, $this.$y | 0, $this.$z | 0);
            olo_GL11_glPushMatrix();
            olo_GL11_glColor4f($brightness, $brightness, $brightness, 1.0);
            $brightness = $this.$xo;
            $brightness = $brightness + ($this.$x - $brightness) * $unknown0;
            $unknown1 = $this.$yo;
            $unknown1 = $unknown1 + ($this.$y - $unknown1) * $unknown0 - $this.$heightOffset / 2.0;
            $unknown4 = $this.$zo;
            olo_GL11_glTranslatef($brightness, $unknown1, $unknown4 + ($this.$z - $unknown4) * $unknown0);
            $brightness = $this.$yRotO0;
            olo_GL11_glRotatef($brightness + ($this.$yRot0 - $brightness) * $unknown0 - 90.0, 0.0, 1.0, 0.0);
            $brightness = $this.$xRotO0;
            olo_GL11_glRotatef($brightness + ($this.$xRot0 - $brightness) * $unknown0, 0.0, 0.0, 1.0);
            olo_GL11_glRotatef(45.0, 1.0, 0.0, 0.0);
            cmmr_ShapeRenderer_$callClinit();
            $shapeRenderer = cmmr_ShapeRenderer_instance;
            $unknown7 = $this.$type0 * 10 | 0;
            $unknown1 = (0 + $unknown7 | 0) / 32.0;
            $unknown4 = (5 + $unknown7 | 0) / 32.0;
            $unknown5 = (10 + $unknown7 | 0) / 32.0;
            olo_GL11_glScalef(0.05624999850988388, 0.05624999850988388, 0.05624999850988388);
            olo_GL11_glNormal3f(0.05624999850988388, 0.0, 0.0);
            cmmr_ShapeRenderer_begin($shapeRenderer);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), (-2.0), (-2.0), 0.0, $unknown4);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), (-2.0), 2.0, 0.15625, $unknown4);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), 2.0, 2.0, 0.15625, $unknown5);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), 2.0, (-2.0), 0.0, $unknown5);
            cmmr_ShapeRenderer_end($shapeRenderer);
            olo_GL11_glNormal3f((-0.05624999850988388), 0.0, 0.0);
            cmmr_ShapeRenderer_begin($shapeRenderer);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), 2.0, (-2.0), 0.0, $unknown4);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), 2.0, 2.0, 0.15625, $unknown4);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), (-2.0), 2.0, 0.15625, $unknown5);
            cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-7.0), (-2.0), (-2.0), 0.0, $unknown5);
            cmmr_ShapeRenderer_end($shapeRenderer);
            $unknown7 = 0;
            while ($unknown7 < 4) {
                olo_GL11_glRotatef(90.0, 1.0, 0.0, 0.0);
                olo_GL11_glNormal3f(0.0, (-0.05624999850988388), 0.0);
                cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-8.0), (-2.0), 0.0, 0.0, $unknown1);
                cmmr_ShapeRenderer_vertexUV($shapeRenderer, 8.0, (-2.0), 0.0, 0.5, $unknown1);
                cmmr_ShapeRenderer_vertexUV($shapeRenderer, 8.0, 2.0, 0.0, 0.5, $unknown4);
                cmmr_ShapeRenderer_vertexUV($shapeRenderer, (-8.0), 2.0, 0.0, 0.0, $unknown4);
                cmmr_ShapeRenderer_end($shapeRenderer);
                $unknown7 = $unknown7 + 1 | 0;
            }
            olo_GL11_glColor4f(1.0, 1.0, 1.0, 1.0);
            olo_GL11_glPopMatrix();
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $textureManager, $unknown0, $shapeRenderer, var$4, $brightness, $unknown1, $unknown4, $unknown7, $unknown5, $ptr);
    }
    function cmmi_Arrow_playerTouch($this, $player) {
        var $takeEntityAnim;
        if ($this.$hasHit && $this.$owner0 === $player && $player.$arrows < 99) {
            $takeEntityAnim = cmmi_TakeEntityAnim__init_($this.$level2, $this, $player);
            cmml_Level_addEntity($this.$level2, $takeEntityAnim);
            $player.$arrows = $player.$arrows + 1 | 0;
            cmm_Entity_remove($this);
        }
    }
    function cmmi_Arrow_awardKillScore($this, $entity, $score) {
        $this.$owner0.$awardKillScore($entity, $score);
    }
    function cmmg_ChatInputScreen() {
        var a = this; cmmg_GuiScreen.call(a);
        a.$message1 = null;
        a.$counter = 0;
    }
    function cmmg_ChatInputScreen__init_() {
        var var_0 = new cmmg_ChatInputScreen();
        cmmg_ChatInputScreen__init_0(var_0);
        return var_0;
    }
    function cmmg_ChatInputScreen__init_0($this) {
        cmmg_GuiScreen__init_($this);
        $this.$message1 = $rt_s(3);
        $this.$counter = 0;
    }
    function cmmg_ChatInputScreen_onOpen($this) {
        oli_Keyboard_enableRepeatEvents(1);
    }
    function cmmg_ChatInputScreen_onClose($this) {
        oli_Keyboard_enableRepeatEvents(0);
    }
    function cmmg_ChatInputScreen_tick($this) {
        $this.$counter = $this.$counter + 1 | 0;
    }
    function cmmg_ChatInputScreen_onKeyPress($this, $var1, $var2) {
        var var$3, var$4;
        if ($var2 == 1)
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, null);
        else if ($var2 == 28)
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, null);
        else {
            if ($var2 == 14 && jl_String_length($this.$message1) > 0) {
                var$3 = $this.$message1;
                $this.$message1 = jl_String_substring0(var$3, 0, jl_String_length(var$3) - 1 | 0);
            }
            if (jl_String_indexOf0($rt_s(324), $var1) >= 0 && jl_String_length($this.$message1) < (64 - (jl_String_length($this.$minecraft5.$session.$username) + 2 | 0) | 0)) {
                var$3 = $this.$message1;
                var$4 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$4);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$4, var$3), $var1);
                $this.$message1 = jl_AbstractStringBuilder_toString(var$4);
            }
        }
    }
    function cmmg_ChatInputScreen_render($this, $var1, $var2) {
        var var$3, var$4, var$5, var$6, var$7;
        var$3 = $this.$height4;
        cmmg_Screen_drawBox(2, var$3 - 14 | 0, $this.$width4 - 2 | 0, var$3 - 2 | 0, (-2147483648));
        var$4 = $this.$fontRenderer0;
        var$5 = $this.$message1;
        var$6 = ($this.$counter / 6 | 0) % 2 | 0 ? $rt_s(3) : $rt_s(325);
        var$7 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$7);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $rt_s(326)), var$5), var$6);
        cmmg_FontRenderer_render(var$4, jl_AbstractStringBuilder_toString(var$7), 4, $this.$height4 - 12 | 0, 14737632);
    }
    function cmmg_ChatInputScreen_onMouseClick($this, $var1, $var2, $var3) {
        var var$4, var$5, var$6, var$7;
        if (!$var3 && $this.$minecraft5.$hud.$hoveredPlayer !== null) {
            if (jl_String_length($this.$message1) > 0) {
                a: {
                    var$4 = $this.$message1;
                    if (var$4 === $rt_s(327))
                        $var1 = 1;
                    else if (jl_String_length($rt_s(327)) > jl_String_length(var$4))
                        $var1 = 0;
                    else {
                        $var2 = 0;
                        $var3 = jl_String_length(var$4) - jl_String_length($rt_s(327)) | 0;
                        while ($var3 < jl_String_length(var$4)) {
                            var$5 = jl_String_charAt(var$4, $var3);
                            $var1 = $var2 + 1 | 0;
                            if (var$5 != jl_String_charAt($rt_s(327), $var2)) {
                                $var1 = 0;
                                break a;
                            }
                            $var3 = $var3 + 1 | 0;
                            $var2 = $var1;
                        }
                        $var1 = 1;
                    }
                }
                if (!$var1) {
                    var$4 = $this.$message1;
                    var$6 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$6);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$6, var$4), 32);
                    $this.$message1 = jl_AbstractStringBuilder_toString(var$6);
                }
            }
            var$4 = $this.$message1;
            var$6 = $this.$minecraft5.$hud.$hoveredPlayer;
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_StringBuilder_append(jl_StringBuilder_append(var$7, var$4), var$6);
            $this.$message1 = jl_AbstractStringBuilder_toString(var$7);
            $var1 = 64 - (jl_String_length($this.$minecraft5.$session.$username) + 2 | 0) | 0;
            if (jl_String_length($this.$message1) > $var1)
                $this.$message1 = jl_String_substring0($this.$message1, 0, $var1);
        }
    }
    function cmmp_Inventory() {
        var a = this; jl_Object.call(a);
        a.$slots = null;
        a.$count0 = null;
        a.$popTime = null;
        a.$selected0 = 0;
    }
    function cmmp_Inventory_getSelected($this) {
        return $this.$slots.data[$this.$selected0];
    }
    function cmmp_Inventory_getSlot($this, $var1) {
        var $var2, var$3;
        $var2 = 0;
        while (true) {
            var$3 = $this.$slots.data;
            if ($var2 >= var$3.length)
                return (-1);
            if ($var1 == var$3[$var2])
                break;
            $var2 = $var2 + 1 | 0;
        }
        return $var2;
    }
    function cmmp_Inventory_grabTexture($this, $var1, $var2) {
        var var$3, var$4, var$5, var$6;
        var$3 = cmmp_Inventory_getSlot($this, $var1);
        if (var$3 >= 0)
            $this.$selected0 = var$3;
        else if ($var2 && $var1 > 0) {
            cmm_SessionData_$callClinit();
            var$4 = cmm_SessionData_allowedBlocks;
            cmmlt_Block_$callClinit();
            var$5 = cmmlt_Block_blocks.data[$var1];
            var$4 = ju_AbstractList_iterator(var$4);
            a: {
                while (ju_AbstractList$1_hasNext(var$4)) {
                    if (ju_Objects_equals(ju_AbstractList$1_next(var$4), var$5)) {
                        $var2 = 1;
                        break a;
                    }
                }
                $var2 = 0;
            }
            if ($var2) {
                var$4 = cmmlt_Block_blocks.data[$var1];
                if (var$4 !== null) {
                    $var1 = cmmp_Inventory_getSlot($this, var$4.$id);
                    if ($var1 >= 0) {
                        var$6 = $this.$slots.data;
                        var$6[$var1] = var$6[$this.$selected0];
                    }
                    $this.$slots.data[$this.$selected0] = var$4.$id;
                }
            }
        }
    }
    function cmmp_Inventory_swapPaint($this, $var1) {
        var var$2;
        if ($var1 > 0)
            $var1 = 1;
        if ($var1 < 0)
            $var1 = (-1);
        $this.$selected0 = $this.$selected0 - $var1 | 0;
        while (true) {
            $var1 = $this.$selected0;
            if ($var1 >= 0)
                break;
            $this.$selected0 = $var1 + $this.$slots.data.length | 0;
        }
        while (true) {
            $var1 = $this.$selected0;
            var$2 = $this.$slots.data.length;
            if ($var1 < var$2)
                break;
            $this.$selected0 = $var1 - var$2 | 0;
        }
    }
    function cmmp_Inventory_removeResource($this, $var1) {
        var var$2, var$3;
        $var1 = cmmp_Inventory_getSlot($this, $var1);
        if ($var1 < 0)
            return 0;
        var$2 = $this.$count0.data;
        var$3 = var$2[$var1] - 1 | 0;
        var$2[$var1] = var$3;
        if (var$3 <= 0)
            $this.$slots.data[$var1] = (-1);
        return 1;
    }
    var cmmp_WaterDropParticle = $rt_classWithoutFields(cmmp_Particle);
    function cmmp_WaterDropParticle__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmp_WaterDropParticle();
        cmmp_WaterDropParticle__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmp_WaterDropParticle__init_0($this, $var1, $var2, $var3, $var4) {
        cmmp_Particle__init_0($this, $var1, $var2, $var3, $var4, 0.0, 0.0, 0.0);
        $this.$xd = $this.$xd * 0.30000001192092896;
        $this.$yd = jl_Math_random() * 0.20000000298023224 + 0.10000000149011612;
        $this.$zd = $this.$zd * 0.30000001192092896;
        $this.$rCol = 1.0;
        $this.$gCol = 1.0;
        $this.$bCol = 1.0;
        $this.$tex = 16;
        cmm_Entity_setSize($this, 0.009999999776482582, 0.009999999776482582);
        $this.$lifetime = 8.0 / (jl_Math_random() * 0.8 + 0.2) | 0;
    }
    function cmmp_WaterDropParticle_render($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        cmmp_Particle_render($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7);
    }
    function cmmp_WaterDropParticle_tick($this) {
        var var$1, var$2;
        $this.$xo = $this.$x;
        $this.$yo = $this.$y;
        $this.$zo = $this.$z;
        var$1 = $this.$yd - 0.06;
        $this.$yd = var$1;
        cmm_Entity_move($this, $this.$xd, var$1, $this.$zd);
        $this.$xd = $this.$xd * 0.9800000190734863;
        $this.$yd = $this.$yd * 0.9800000190734863;
        $this.$zd = $this.$zd * 0.9800000190734863;
        var$2 = $this.$lifetime;
        $this.$lifetime = var$2 - 1 | 0;
        if (var$2 <= 0)
            cmm_Entity_remove($this);
        if ($this.$onGround) {
            if (jl_Math_random() < 0.5)
                cmm_Entity_remove($this);
            $this.$xd = $this.$xd * 0.699999988079071;
            $this.$zd = $this.$zd * 0.699999988079071;
        }
    }
    function cmmm_Vec3D() {
        var a = this; jl_Object.call(a);
        a.$x3 = 0.0;
        a.$y3 = 0.0;
        a.$z3 = 0.0;
    }
    function cmmm_Vec3D__init_(var_0, var_1, var_2) {
        var var_3 = new cmmm_Vec3D();
        cmmm_Vec3D__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function cmmm_Vec3D__init_0($this, $var1, $var2, $var3) {
        $this.$x3 = $var1;
        $this.$y3 = $var2;
        $this.$z3 = $var3;
    }
    function cmmm_Vec3D_subtract($this, $var1) {
        return cmmm_Vec3D__init_($this.$x3 - $var1.$x3, $this.$y3 - $var1.$y3, $this.$z3 - $var1.$z3);
    }
    function cmmm_Vec3D_normalize($this) {
        var $var1, var$2;
        $var1 = $this.$x3;
        $var1 = $var1 * $var1;
        var$2 = $this.$y3;
        $var1 = $var1 + var$2 * var$2;
        var$2 = $this.$z3;
        $var1 = cmu_MathHelper_sqrt($var1 + var$2 * var$2);
        return cmmm_Vec3D__init_($this.$x3 / $var1, $this.$y3 / $var1, $this.$z3 / $var1);
    }
    function cmmm_Vec3D_add($this, $var1, $var2, $var3) {
        return cmmm_Vec3D__init_($this.$x3 + $var1, $this.$y3 + $var2, $this.$z3 + $var3);
    }
    function cmmm_Vec3D_distance($this, $var1) {
        var $var2, $var3, $var4;
        $var2 = $var1.$x3 - $this.$x3;
        $var3 = $var1.$y3 - $this.$y3;
        $var4 = $var1.$z3 - $this.$z3;
        return cmu_MathHelper_sqrt($var2 * $var2 + $var3 * $var3 + $var4 * $var4);
    }
    function cmmm_Vec3D_distanceSquared($this, $var1) {
        var $var2, $var3, $var4;
        $var2 = $var1.$x3 - $this.$x3;
        $var3 = $var1.$y3 - $this.$y3;
        $var4 = $var1.$z3 - $this.$z3;
        return $var2 * $var2 + $var3 * $var3 + $var4 * $var4;
    }
    function cmmm_Vec3D_getXIntersection($this, $var1, $var2) {
        var $var3, var$4, $var4, var$6, $var5, var$8, var$9;
        $var3 = $var1.$x3;
        var$4 = $this.$x3;
        $var3 = $var3 - var$4;
        $var4 = $var1.$y3;
        var$6 = $this.$y3;
        $var4 = $var4 - var$6;
        $var5 = $var1.$z3;
        var$8 = $this.$z3;
        $var5 = $var5 - var$8;
        if ($var3 * $var3 < 1.0000000116860974E-7)
            $var1 = null;
        else {
            var$9 = ($var2 - var$4) / $var3;
            $var1 = var$9 >= 0.0 && var$9 <= 1.0 ? cmmm_Vec3D__init_(var$4 + $var3 * var$9, var$6 + $var4 * var$9, var$8 + $var5 * var$9) : null;
        }
        return $var1;
    }
    function cmmm_Vec3D_getYIntersection($this, $var1, $var2) {
        var $var3, var$4, $var4, var$6, $var5, var$8, var$9;
        $var3 = $var1.$x3;
        var$4 = $this.$x3;
        $var3 = $var3 - var$4;
        $var4 = $var1.$y3;
        var$6 = $this.$y3;
        $var4 = $var4 - var$6;
        $var5 = $var1.$z3;
        var$8 = $this.$z3;
        $var5 = $var5 - var$8;
        if ($var4 * $var4 < 1.0000000116860974E-7)
            $var1 = null;
        else {
            var$9 = ($var2 - var$6) / $var4;
            $var1 = var$9 >= 0.0 && var$9 <= 1.0 ? cmmm_Vec3D__init_(var$4 + $var3 * var$9, var$6 + $var4 * var$9, var$8 + $var5 * var$9) : null;
        }
        return $var1;
    }
    function cmmm_Vec3D_getZIntersection($this, $var1, $var2) {
        var $var3, var$4, $var4, var$6, var$7, var$8, var$9;
        $var3 = $var1.$x3;
        var$4 = $this.$x3;
        $var3 = $var3 - var$4;
        $var4 = $var1.$y3;
        var$6 = $this.$y3;
        $var4 = $var4 - var$6;
        var$7 = $var1.$z3;
        var$8 = $this.$z3;
        var$7 = var$7 - var$8;
        if (var$7 * var$7 < 1.0000000116860974E-7)
            $var1 = null;
        else {
            var$9 = ($var2 - var$8) / var$7;
            $var1 = var$9 >= 0.0 && var$9 <= 1.0 ? cmmm_Vec3D__init_(var$4 + $var3 * var$9, var$6 + $var4 * var$9, var$8 + var$7 * var$9) : null;
        }
        return $var1;
    }
    function cmml_BlockMap() {
        var a = this; jl_Object.call(a);
        a.$width2 = 0;
        a.$depth0 = 0;
        a.$height2 = 0;
        a.$slot = null;
        a.$slot2 = null;
        a.$entityGrid = null;
        a.$all = null;
        a.$tmp = null;
    }
    function cmml_BlockMap_moved($this, $var1) {
        var $var2, $var3;
        $var2 = cmml_BlockMap$Slot_init($this.$slot, $var1.$xOld, $var1.$yOld, $var1.$zOld);
        $var3 = cmml_BlockMap$Slot_init($this.$slot2, $var1.$x, $var1.$y, $var1.$z);
        if (!jl_Object_equals($var2, $var3)) {
            cmml_BlockMap$Slot_remove($var2, $var1);
            cmml_BlockMap$Slot_add($var3, $var1);
            $var1.$xOld = $var1.$x;
            $var1.$yOld = $var1.$y;
            $var1.$zOld = $var1.$z;
        }
    }
    function cmml_BlockMap_getEntities0($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7, $var8) {
        var $var9, $var10, $var11, $var12, $var13, $var15, var$15, $var14, var$17;
        $var9 = cmml_BlockMap$Slot_init($this.$slot, $var2, $var3, $var4);
        $var10 = cmml_BlockMap$Slot_init($this.$slot2, $var5, $var6, $var7);
        $var11 = $var9.$xSlot - 1 | 0;
        while ($var11 <= ($var10.$xSlot + 1 | 0)) {
            $var12 = $var9.$ySlot - 1 | 0;
            while ($var12 <= ($var10.$ySlot + 1 | 0)) {
                $var13 = $var9.$zSlot - 1 | 0;
                while ($var13 <= ($var10.$zSlot + 1 | 0)) {
                    a: {
                        if ($var11 >= 0 && $var12 >= 0 && $var13 >= 0) {
                            $var15 = $this.$width2;
                            if ($var11 < $var15) {
                                var$15 = $this.$depth0;
                                if ($var12 < var$15 && $var13 < $this.$height2) {
                                    $var14 = $this.$entityGrid.data[$rt_imul($rt_imul($var13, var$15) + $var12 | 0, $var15) + $var11 | 0];
                                    $var15 = 0;
                                    while (true) {
                                        if ($var15 >= $var14.$size0)
                                            break a;
                                        var$17 = ju_ArrayList_get($var14, $var15);
                                        if (var$17 !== $var1 && cmm_Entity_intersects(var$17, $var2, $var3, $var4, $var5, $var6, $var7))
                                            ju_ArrayList_add($var8, var$17);
                                        $var15 = $var15 + 1 | 0;
                                    }
                                }
                            }
                        }
                    }
                    $var13 = $var13 + 1 | 0;
                }
                $var12 = $var12 + 1 | 0;
            }
            $var11 = $var11 + 1 | 0;
        }
        return $var8;
    }
    function cmml_BlockMap_getEntities($this, $var1, $var2) {
        ju_ArrayList_clear($this.$tmp);
        return cmml_BlockMap_getEntities0($this, $var1, $var2.$x00, $var2.$y00, $var2.$z00, $var2.$x1, $var2.$y1, $var2.$z1, $this.$tmp);
    }
    function cmml_BlockMap_render($this, $var1, $var2, $var3, $var4) {
        var $var5, $var6, $var5_0, $var7, $var8, $var9, $var8_0, $var10, $var11, var$14, $var13, $var14, $var20, var$18, $var10000, $var23, var$21, $var24, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var24 = $thread.pop();var$21 = $thread.pop();$var23 = $thread.pop();$var10000 = $thread.pop();var$18 = $thread.pop();$var20 = $thread.pop();$var14 = $thread.pop();$var13 = $thread.pop();var$14 = $thread.pop();$var11 = $thread.pop();$var10 = $thread.pop();$var8_0 = $thread.pop();$var9 = $thread.pop();$var8 = $thread.pop();$var7 = $thread.pop();$var5_0 = $thread.pop();$var6 = $thread.pop();$var5 = $thread.pop();$var4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1
            = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $var5 = 0;
            a: {
                while ($var5 < $this.$width2) {
                    $var6 = ($var5 << 4) - 2 | 0;
                    $var5_0 = $var5 + 1 | 0;
                    $var7 = ($var5_0 << 4) + 2 | 0;
                    $var8 = 0;
                    while ($var8 < $this.$depth0) {
                        $var9 = ($var8 << 4) - 2 | 0;
                        $var8_0 = $var8 + 1 | 0;
                        $var10 = ($var8_0 << 4) + 2 | 0;
                        $var11 = 0;
                        while ($var11 < $this.$height2) {
                            b: {
                                var$14 = $this.$entityGrid.data[$rt_imul($rt_imul($var11, $this.$depth0) + $var8 | 0, $this.$width2) + $var5 | 0];
                                if (ju_ArrayList_size(var$14)) {
                                    $var13 = ($var11 << 4) - 2 | 0;
                                    $var14 = (($var11 + 1 | 0) << 4) + 2 | 0;
                                    if (cmmr_Frustrum_isBoxInFrustrum($var2, $var6, $var9, $var13, $var7, $var10, $var14)) {
                                        $var20 = 0;
                                        c: {
                                            while ($var20 < 6) {
                                                var$18 = $var2.$frustrum.data;
                                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                                    $var10000 = 0;
                                                    break c;
                                                }
                                                $var20 = $var20 + 1 | 0;
                                            }
                                            $var10000 = 1;
                                        }
                                        $var23 = 0;
                                        while (true) {
                                            if ($var23 >= ju_ArrayList_size(var$14))
                                                break b;
                                            var$21 = ju_ArrayList_get(var$14, $var23);
                                            if (cmm_Entity_shouldRender(var$21, $var1)) {
                                                if ($var10000)
                                                    break a;
                                                $var24 = var$21.$bb;
                                                if (cmmr_Frustrum_isBoxInFrustrum($var2, $var24.$x00, $var24.$y00, $var24.$z00, $var24.$x1, $var24.$y1, $var24.$z1))
                                                    break a;
                                            }
                                            $var23 = $var23 + 1 | 0;
                                        }
                                    }
                                }
                            }
                            $var11 = $var11 + 1 | 0;
                        }
                        $var8 = $var8_0;
                    }
                    $var5 = $var5_0;
                }
                return;
            }
            $ptr = 1;
        case 1:
            var$21.$render10($var3, $var4);
            if ($rt_suspending()) {
                break main;
            }
            a: {
                d: while (true) {
                    $var23 = $var23 + 1 | 0;
                    while ($var23 >= ju_ArrayList_size(var$14)) {
                        while (true) {
                            $var11 = $var11 + 1 | 0;
                            while ($var11 >= $this.$height2) {
                                $var8 = $var8_0;
                                while ($var8 >= $this.$depth0) {
                                    $var5 = $var5_0;
                                    if ($var5 >= $this.$width2)
                                        break d;
                                    $var6 = ($var5 << 4) - 2 | 0;
                                    $var5_0 = $var5 + 1 | 0;
                                    $var7 = ($var5_0 << 4) + 2 | 0;
                                    $var8 = 0;
                                }
                                $var9 = ($var8 << 4) - 2 | 0;
                                $var8_0 = $var8 + 1 | 0;
                                $var10 = ($var8_0 << 4) + 2 | 0;
                                $var11 = 0;
                            }
                            var$14 = $this.$entityGrid.data[$rt_imul($rt_imul($var11, $this.$depth0) + $var8 | 0, $this.$width2) + $var5 | 0];
                            if (!ju_ArrayList_size(var$14))
                                continue;
                            $var13 = ($var11 << 4) - 2 | 0;
                            $var14 = (($var11 + 1 | 0) << 4) + 2 | 0;
                            if (!cmmr_Frustrum_isBoxInFrustrum($var2, $var6, $var9, $var13, $var7, $var10, $var14))
                                continue;
                            else
                                break;
                        }
                        $var20 = 0;
                        e: {
                            while ($var20 < 6) {
                                var$18 = $var2.$frustrum.data;
                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var13 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var9 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                if (var$18[$var20].data[0] * $var6 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                if (var$18[$var20].data[0] * $var7 + var$18[$var20].data[1] * $var10 + var$18[$var20].data[2] * $var14 + var$18[$var20].data[3] <= 0.0) {
                                    $var10000 = 0;
                                    break e;
                                }
                                $var20 = $var20 + 1 | 0;
                            }
                            $var10000 = 1;
                        }
                        $var23 = 0;
                    }
                    var$21 = ju_ArrayList_get(var$14, $var23);
                    if (!cmm_Entity_shouldRender(var$21, $var1))
                        continue;
                    if ($var10000)
                        break a;
                    $var24 = var$21.$bb;
                    if (cmmr_Frustrum_isBoxInFrustrum($var2, $var24.$x00, $var24.$y00, $var24.$z00, $var24.$x1, $var24.$y1, $var24.$z1))
                        break a;
                }
                return;
            }
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, $var5, $var6, $var5_0, $var7, $var8, $var9, $var8_0, $var10, $var11, var$14, $var13, $var14, $var20, var$18, $var10000, $var23, var$21, $var24, $ptr);
    }
    var oluv_Matrix = $rt_classWithoutFields();
    function oluv_Matrix4f() {
        var a = this; oluv_Matrix.call(a);
        a.$m00 = 0.0;
        a.$m01 = 0.0;
        a.$m02 = 0.0;
        a.$m03 = 0.0;
        a.$m10 = 0.0;
        a.$m11 = 0.0;
        a.$m12 = 0.0;
        a.$m13 = 0.0;
        a.$m20 = 0.0;
        a.$m21 = 0.0;
        a.$m22 = 0.0;
        a.$m23 = 0.0;
        a.$m30 = 0.0;
        a.$m31 = 0.0;
        a.$m32 = 0.0;
        a.$m33 = 0.0;
    }
    function oluv_Matrix4f__init_() {
        var var_0 = new oluv_Matrix4f();
        oluv_Matrix4f__init_0(var_0);
        return var_0;
    }
    function oluv_Matrix4f__init_0($this) {
        oluv_Matrix4f_setIdentity($this);
    }
    function oluv_Matrix4f_setIdentity($this) {
        $this.$m00 = 1.0;
        $this.$m01 = 0.0;
        $this.$m02 = 0.0;
        $this.$m03 = 0.0;
        $this.$m10 = 0.0;
        $this.$m11 = 1.0;
        $this.$m12 = 0.0;
        $this.$m13 = 0.0;
        $this.$m20 = 0.0;
        $this.$m21 = 0.0;
        $this.$m22 = 1.0;
        $this.$m23 = 0.0;
        $this.$m30 = 0.0;
        $this.$m31 = 0.0;
        $this.$m32 = 0.0;
        $this.$m33 = 1.0;
        return $this;
    }
    function oluv_Matrix4f_setZero($this) {
        $this.$m00 = 0.0;
        $this.$m01 = 0.0;
        $this.$m02 = 0.0;
        $this.$m03 = 0.0;
        $this.$m10 = 0.0;
        $this.$m11 = 0.0;
        $this.$m12 = 0.0;
        $this.$m13 = 0.0;
        $this.$m20 = 0.0;
        $this.$m21 = 0.0;
        $this.$m22 = 0.0;
        $this.$m23 = 0.0;
        $this.$m30 = 0.0;
        $this.$m31 = 0.0;
        $this.$m32 = 0.0;
        $this.$m33 = 0.0;
        return $this;
    }
    function oluv_Matrix4f_load($this, $src) {
        $this.$m00 = $src.$m00;
        $this.$m01 = $src.$m01;
        $this.$m02 = $src.$m02;
        $this.$m03 = $src.$m03;
        $this.$m10 = $src.$m10;
        $this.$m11 = $src.$m11;
        $this.$m12 = $src.$m12;
        $this.$m13 = $src.$m13;
        $this.$m20 = $src.$m20;
        $this.$m21 = $src.$m21;
        $this.$m22 = $src.$m22;
        $this.$m23 = $src.$m23;
        $this.$m30 = $src.$m30;
        $this.$m31 = $src.$m31;
        $this.$m32 = $src.$m32;
        $this.$m33 = $src.$m33;
        return $this;
    }
    function oluv_Matrix4f_store($this, $buf) {
        jn_FloatBufferImpl_put($buf, $this.$m00);
        jn_FloatBufferImpl_put($buf, $this.$m01);
        jn_FloatBufferImpl_put($buf, $this.$m02);
        jn_FloatBufferImpl_put($buf, $this.$m03);
        jn_FloatBufferImpl_put($buf, $this.$m10);
        jn_FloatBufferImpl_put($buf, $this.$m11);
        jn_FloatBufferImpl_put($buf, $this.$m12);
        jn_FloatBufferImpl_put($buf, $this.$m13);
        jn_FloatBufferImpl_put($buf, $this.$m20);
        jn_FloatBufferImpl_put($buf, $this.$m21);
        jn_FloatBufferImpl_put($buf, $this.$m22);
        jn_FloatBufferImpl_put($buf, $this.$m23);
        jn_FloatBufferImpl_put($buf, $this.$m30);
        jn_FloatBufferImpl_put($buf, $this.$m31);
        jn_FloatBufferImpl_put($buf, $this.$m32);
        jn_FloatBufferImpl_put($buf, $this.$m33);
        return $this;
    }
    function oluv_Matrix4f_store0($this, $buf) {
        $buf = $buf.data;
        $buf[0] = $this.$m00;
        $buf[1] = $this.$m01;
        $buf[2] = $this.$m02;
        $buf[3] = $this.$m03;
        $buf[4] = $this.$m10;
        $buf[5] = $this.$m11;
        $buf[6] = $this.$m12;
        $buf[7] = $this.$m13;
        $buf[8] = $this.$m20;
        $buf[9] = $this.$m21;
        $buf[10] = $this.$m22;
        $buf[11] = $this.$m23;
        $buf[12] = $this.$m30;
        $buf[13] = $this.$m31;
        $buf[14] = $this.$m32;
        $buf[15] = $this.$m33;
        return $this;
    }
    function oluv_Matrix4f_rotate($angle, $axis, $src, $dest) {
        var var$5, $c, $s, $oneminusc, $t11, $xy, $f22, $yz, $xz, $xs, $ys, $zs, $f00, $f01, $f02, $f10, $f11, $f12, $f20, $f21, var$25, $t00, var$27, $t01, $t02, $t03, $t10, $t12, $t13;
        if ($dest === null)
            $dest = oluv_Matrix4f__init_();
        var$5 = $angle;
        $c = jl_Math_cos(var$5);
        $s = jl_Math_sin(var$5);
        $oneminusc = 1.0 - $c;
        $angle = $axis.$x6;
        $t11 = $axis.$y5;
        $xy = $angle * $t11;
        $f22 = $axis.$z8;
        $yz = $t11 * $f22;
        $xz = $angle * $f22;
        $xs = $angle * $s;
        $ys = $t11 * $s;
        $zs = $f22 * $s;
        $f00 = $angle * $angle * $oneminusc + $c;
        $angle = $xy * $oneminusc;
        $f01 = $angle + $zs;
        $s = $xz * $oneminusc;
        $f02 = $s - $ys;
        $f10 = $angle - $zs;
        $f11 = $t11 * $t11 * $oneminusc + $c;
        $angle = $yz * $oneminusc;
        $f12 = $angle + $xs;
        $f20 = $s + $ys;
        $f21 = $angle - $xs;
        $f22 = $f22 * $f22 * $oneminusc + $c;
        $angle = $src.$m00;
        $c = $angle * $f00;
        $s = $src.$m10;
        $c = $c + $s * $f01;
        var$25 = $src.$m20;
        $t00 = $c + var$25 * $f02;
        var$27 = $src.$m01;
        $c = var$27 * $f00;
        $xy = $src.$m11;
        $c = $c + $xy * $f01;
        $ys = $src.$m21;
        $t01 = $c + $ys * $f02;
        $zs = $src.$m02;
        $c = $zs * $f00;
        $yz = $src.$m12;
        $c = $c + $yz * $f01;
        $xs = $src.$m22;
        $t02 = $c + $xs * $f02;
        $xz = $src.$m03;
        $c = $xz * $f00;
        $f00 = $src.$m13;
        $c = $c + $f00 * $f01;
        $f01 = $src.$m23;
        $t03 = $c + $f01 * $f02;
        $t10 = $angle * $f10 + $s * $f11 + var$25 * $f12;
        $t11 = var$27 * $f10 + $xy * $f11 + $ys * $f12;
        $t12 = $zs * $f10 + $yz * $f11 + $xs * $f12;
        $t13 = $xz * $f10 + $f00 * $f11 + $f01 * $f12;
        $dest.$m20 = $angle * $f20 + $s * $f21 + var$25 * $f22;
        $dest.$m21 = var$27 * $f20 + $xy * $f21 + $ys * $f22;
        $dest.$m22 = $zs * $f20 + $yz * $f21 + $xs * $f22;
        $dest.$m23 = $xz * $f20 + $f00 * $f21 + $f01 * $f22;
        $dest.$m00 = $t00;
        $dest.$m01 = $t01;
        $dest.$m02 = $t02;
        $dest.$m03 = $t03;
        $dest.$m10 = $t10;
        $dest.$m11 = $t11;
        $dest.$m12 = $t12;
        $dest.$m13 = $t13;
        return $dest;
    }
    var ju_Comparator$NaturalOrder = $rt_classWithoutFields();
    var ju_Comparator$NaturalOrder_INSTANCE = null;
    function ju_Comparator$NaturalOrder_compare($this, $o1, $o2) {
        var var$3, var$4, var$5;
        a: {
            $o1 = $o1;
            $o2 = $o2;
            if ($o1 === $o2)
                var$3 = 0;
            else {
                var$4 = jl_Math_min(jl_String_length($o1), jl_String_length($o2));
                var$5 = 0;
                while (true) {
                    if (var$5 >= var$4) {
                        var$3 = jl_String_length($o1) - jl_String_length($o2) | 0;
                        break a;
                    }
                    var$3 = jl_String_charAt($o1, var$5) - jl_String_charAt($o2, var$5) | 0;
                    if (var$3)
                        break;
                    var$5 = var$5 + 1 | 0;
                }
            }
        }
        return var$3;
    }
    function ju_Comparator$NaturalOrder__clinit_() {
        ju_Comparator$NaturalOrder_INSTANCE = new ju_Comparator$NaturalOrder;
    }
    function m_TextureGL() {
        var a = this; jl_Object.call(a);
        a.$obj2 = null;
        a.$w = 0;
        a.$h1 = 0;
        a.$nearest = 0;
        a.$anisotropic = 0;
    }
    function olo_DisplayList() {
        var a = this; jl_Object.call(a);
        a.$id1 = 0;
        a.$array4 = null;
        a.$buffer4 = null;
        a.$mode3 = 0;
        a.$length1 = 0;
    }
    var olo_GL11$ImmediateModeData = $rt_classWithoutFields();
    var olo_GL11$ImmediateModeData_mode = 0;
    var olo_GL11$ImmediateModeData_vertexBuffer = null;
    var olo_GL11$ImmediateModeData_vertexPosition = 0;
    var olo_GL11$ImmediateModeData_textureCoordBuffer = null;
    var olo_GL11$ImmediateModeData_textureCoordPosition = 0;
    function olo_GL11$ImmediateModeData_$callClinit() {
        olo_GL11$ImmediateModeData_$callClinit = $rt_eraseClinit(olo_GL11$ImmediateModeData);
        olo_GL11$ImmediateModeData__clinit_();
    }
    function olo_GL11$ImmediateModeData__clinit_() {
        olo_GL11$ImmediateModeData_mode = (-1);
        olo_GL11$ImmediateModeData_vertexBuffer = new $rt_globals.Float32Array(32);
        olo_GL11$ImmediateModeData_vertexPosition = 0;
        olo_GL11$ImmediateModeData_textureCoordBuffer = new $rt_globals.Float32Array(32);
        olo_GL11$ImmediateModeData_textureCoordPosition = 0;
    }
    var otcic_StderrOutputStream = $rt_classWithoutFields(otcic_ConsoleOutputStream);
    var otcic_StderrOutputStream_INSTANCE = null;
    function otcic_StderrOutputStream_write($this, $b, $off, $len) {
        var var$4;
        var$4 = 0;
        while (var$4 < $len) {
            $rt_putStderr($b.data[var$4 + $off | 0] & 255);
            var$4 = var$4 + 1 | 0;
        }
    }
    function otcic_StderrOutputStream__clinit_() {
        var var$1;
        var$1 = new otcic_StderrOutputStream;
        otcic_ConsoleOutputStream__init_(var$1);
        otcic_StderrOutputStream_INSTANCE = var$1;
    }
    function jnc_CodingErrorAction() {
        jl_Object.call(this);
        this.$name7 = null;
    }
    var jnc_CodingErrorAction_IGNORE = null;
    var jnc_CodingErrorAction_REPLACE = null;
    var jnc_CodingErrorAction_REPORT = null;
    function jnc_CodingErrorAction_$callClinit() {
        jnc_CodingErrorAction_$callClinit = $rt_eraseClinit(jnc_CodingErrorAction);
        jnc_CodingErrorAction__clinit_();
    }
    function jnc_CodingErrorAction__init_(var_0) {
        var var_1 = new jnc_CodingErrorAction();
        jnc_CodingErrorAction__init_0(var_1, var_0);
        return var_1;
    }
    function jnc_CodingErrorAction__init_0($this, $name) {
        jnc_CodingErrorAction_$callClinit();
        $this.$name7 = $name;
    }
    function jnc_CodingErrorAction__clinit_() {
        jnc_CodingErrorAction_IGNORE = jnc_CodingErrorAction__init_($rt_s(328));
        jnc_CodingErrorAction_REPLACE = jnc_CodingErrorAction__init_($rt_s(329));
        jnc_CodingErrorAction_REPORT = jnc_CodingErrorAction__init_($rt_s(330));
    }
    var ju_AbstractSequentialList = $rt_classWithoutFields(ju_AbstractList);
    function ju_AbstractSequentialList_remove($this, $index) {
        var $iter, var$3, $elem, var$5, var$6, var$7, var$8, var$9, var$10;
        if ($index < 0) {
            $iter = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0($iter);
            $rt_throw($iter);
        }
        $iter = ju_LinkedList_listIterator($this, $index);
        ju_LinkedList$SequentialListIterator_checkConcurrentModification($iter);
        var$3 = $iter.$nextEntry;
        if (var$3 === null) {
            $iter = new ju_NoSuchElementException;
            jl_Throwable__init_0($iter);
            $rt_throw($iter);
        }
        $elem = var$3.$item;
        $iter.$currentEntry = var$3;
        $iter.$prevEntry = var$3;
        var$5 = var$3.$next1;
        $iter.$nextEntry = var$5;
        var$6 = $iter.$index + 1 | 0;
        $iter.$index = var$6;
        var$7 = $iter.$this$0;
        var$8 = var$3.$previous;
        if (var$8 === null)
            var$7.$firstEntry = var$5;
        else
            var$8.$next1 = var$5;
        var$9 = var$3.$next1;
        if (var$9 === null)
            var$7.$lastEntry = var$8;
        else
            var$9.$previous = var$8;
        var$7.$size1 = var$7.$size1 - 1 | 0;
        var$10 = var$7.$modCount + 1 | 0;
        var$7.$modCount = var$10;
        if (var$3 === var$3) {
            $iter.$prevEntry = !(var$5 === null ? 0 : 1) ? null : var$5.$previous;
            $iter.$index = var$6 - 1 | 0;
        } else if (var$3 === var$5) {
            if (!(var$3 === null ? 0 : 1))
                var$9 = null;
            $iter.$nextEntry = var$9;
        }
        $iter.$version = var$10;
        $iter.$currentEntry = null;
        return $elem;
    }
    var ju_Queue = $rt_classWithoutFields(0);
    var ju_Deque = $rt_classWithoutFields(0);
    function ju_LinkedList() {
        var a = this; ju_AbstractSequentialList.call(a);
        a.$firstEntry = null;
        a.$lastEntry = null;
        a.$size1 = 0;
    }
    function ju_LinkedList__init_() {
        var var_0 = new ju_LinkedList();
        ju_LinkedList__init_0(var_0);
        return var_0;
    }
    function ju_LinkedList__init_0($this) {}
    function ju_LinkedList_clear($this) {
        $this.$firstEntry = null;
        $this.$lastEntry = null;
        $this.$size1 = 0;
        $this.$modCount = $this.$modCount + 1 | 0;
    }
    function ju_LinkedList_listIterator($this, $index) {
        var $prev, var$3, $next, $i;
        if ($index < 0) {
            $prev = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0($prev);
            $rt_throw($prev);
        }
        var$3 = $this.$size1;
        if ($index <= (var$3 / 2 | 0)) {
            $next = $this.$firstEntry;
            $i = 0;
            while ($i < $index) {
                $next = $next.$next1;
                $i = $i + 1 | 0;
            }
            return ju_LinkedList$SequentialListIterator__init_($this, $next, $next === null ? null : $next.$previous, $index);
        }
        if ($index > var$3) {
            $prev = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0($prev);
            $rt_throw($prev);
        }
        $prev = $this.$lastEntry;
        $i = $index;
        while ($i < var$3) {
            $prev = $prev.$previous;
            $i = $i + 1 | 0;
        }
        return ju_LinkedList$SequentialListIterator__init_($this, $prev === null ? null : $prev.$next1, $prev, $index);
    }
    var otjt_Int32Array = $rt_classWithoutFields(otjt_ArrayBufferView);
    var otjt_Float32Array = $rt_classWithoutFields(otjt_ArrayBufferView);
    var oluv_ReadableVector = $rt_classWithoutFields(0);
    var oluv_Vector = $rt_classWithoutFields();
    var oluv_ReadableVector2f = $rt_classWithoutFields(0);
    var oluv_ReadableVector3f = $rt_classWithoutFields(0);
    var oluv_WritableVector2f = $rt_classWithoutFields(0);
    var oluv_WritableVector3f = $rt_classWithoutFields(0);
    function oluv_Vector3f() {
        var a = this; oluv_Vector.call(a);
        a.$x6 = 0.0;
        a.$y5 = 0.0;
        a.$z8 = 0.0;
    }
    function oluv_Vector3f_set($this, $x, $y, $z) {
        $this.$x6 = $x;
        $this.$y5 = $y;
        $this.$z8 = $z;
    }
    var oluv_ReadableVector4f = $rt_classWithoutFields(0);
    var oluv_WritableVector4f = $rt_classWithoutFields(0);
    function oluv_Vector4f() {
        var a = this; oluv_Vector.call(a);
        a.$x7 = 0.0;
        a.$y6 = 0.0;
        a.$z9 = 0.0;
        a.$w1 = 0.0;
    }
    function oluv_Vector4f__init_() {
        var var_0 = new oluv_Vector4f();
        oluv_Vector4f__init_0(var_0);
        return var_0;
    }
    function oluv_Vector4f__init_0($this) {}
    function oluv_Vector4f_set($this, $src) {
        $this.$x7 = $src.$x7;
        $this.$y6 = $src.$y6;
        $this.$z9 = $src.$z9;
        $this.$w1 = $src.$w1;
        return $this;
    }
    function oluv_Vector4f_equals($this, $other) {
        if ($this === $other)
            return 1;
        if ($other === null)
            return 0;
        if (jl_Object_getClass($this) !== jl_Object_getClass($other))
            return 0;
        if ($this.$x7 === $other.$x7 && $this.$y6 === $other.$y6 && $this.$z9 === $other.$z9 && $this.$w1 === $other.$w1)
            return 1;
        return 0;
    }
    function ji_Reader() {
        jl_Object.call(this);
        this.$lock = null;
    }
    function ji_Reader__init_($this) {
        $this.$lock = new jl_Object;
    }
    function ji_InputStreamReader() {
        var a = this; ji_Reader.call(a);
        a.$stream = null;
        a.$decoder = null;
        a.$inData = null;
        a.$inBuffer = null;
        a.$outData = null;
        a.$outBuffer = null;
        a.$streamEof = 0;
        a.$eof0 = 0;
    }
    function ji_InputStreamReader_fillReadBuffer($this) {
        var var$1, var$2, $bytesRead, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        if ($this.$streamEof)
            return 0;
        var$1 = $this.$inBuffer;
        if (var$1.$readOnly) {
            var$1 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        a: {
            var$2 = jn_Buffer_remaining(var$1);
            $bytesRead = var$1.$position0;
            if ($bytesRead > 0) {
                var$4 = var$1.$start5;
                var$5 = var$4 + $bytesRead | 0;
                var$6 = 0;
                while (true) {
                    if (var$6 >= var$2)
                        break a;
                    var$7 = var$1.$array1.data;
                    var$8 = var$4 + 1 | 0;
                    $bytesRead = var$5 + 1 | 0;
                    var$7[var$4] = var$7[var$5];
                    var$6 = var$6 + 1 | 0;
                    var$4 = var$8;
                    var$5 = $bytesRead;
                }
            }
        }
        var$1.$position0 = var$2;
        var$1.$limit1 = var$1.$capacity;
        var$1.$mark0 = (-1);
        b: {
            c: {
                while (true) {
                    if (!jn_Buffer_hasRemaining($this.$inBuffer))
                        break b;
                    var$1 = $this.$stream;
                    var$9 = $this.$inBuffer;
                    var$10 = var$9.$array1;
                    var$6 = var$9.$position0;
                    $bytesRead = jn_Buffer_remaining(var$9);
                    ju_Objects_requireNonNull(var$10);
                    if (var$6 < 0)
                        break c;
                    if ($bytesRead < 0)
                        break c;
                    if (var$6 > (var$10.data.length - $bytesRead | 0))
                        break c;
                    if (!$bytesRead)
                        $bytesRead = 0;
                    else {
                        var$9 = var$1.$accessor;
                        if (var$9 === null) {
                            var$9 = new ji_IOException;
                            jl_Throwable__init_(var$9, $rt_s(331));
                            $rt_throw(var$9);
                        }
                        $bytesRead = jl_Math_max(0, jl_Math_min(var$9.$this$02.$size4 - var$9.$pos1 | 0, $bytesRead));
                        if ($bytesRead > 0) {
                            jl_System_fastArraycopy(var$9.$this$02.$data1, var$9.$pos1, var$10, var$6, $bytesRead);
                            var$9.$pos1 = var$9.$pos1 + $bytesRead | 0;
                        }
                        if ($bytesRead <= 0)
                            $bytesRead = (-1);
                    }
                    if ($bytesRead == (-1)) {
                        $this.$streamEof = 1;
                        break b;
                    }
                    var$1 = $this.$inBuffer;
                    jn_Buffer_position0(var$1, var$1.$position0 + $bytesRead | 0);
                    if (!$bytesRead)
                        break;
                }
                break b;
            }
            var$1 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        jn_Buffer_flip($this.$inBuffer);
        return 1;
    }
    var ji_FileReader = $rt_classWithoutFields(ji_InputStreamReader);
    function ji_FileReader__init_(var_0) {
        var var_1 = new ji_FileReader();
        ji_FileReader__init_0(var_1, var_0);
        return var_1;
    }
    function ji_FileReader__init_0($this, $file) {
        var var$2, var$3, var$4;
        var$2 = new ji_FileInputStream;
        $file = ji_File_findVirtualFile($file);
        if ($file !== null && otrfm_VirtualFileImpl_isFile($file)) {
            $file = otrfm_VirtualFileImpl_createAccessor($file, 1, 0, 0);
            var$2.$accessor = $file;
            if ($file === null) {
                $file = new ji_FileNotFoundException;
                jl_Throwable__init_0($file);
                $rt_throw($file);
            }
            jnci_UTF8Charset_$callClinit();
            var$3 = jnci_UTF8Charset_newDecoder(jnci_UTF8Charset_INSTANCE);
            jnc_CodingErrorAction_$callClinit();
            $file = jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput(var$3, jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
            ji_Reader__init_($this);
            var$4 = $rt_createByteArray(8192);
            $this.$inData = var$4;
            $this.$inBuffer = jn_ByteBuffer_wrap0(var$4);
            var$4 = $rt_createCharArray(1024);
            $this.$outData = var$4;
            var$3 = jn_CharBuffer_wrap0(var$4);
            $this.$outBuffer = var$3;
            $this.$stream = var$2;
            $this.$decoder = $file;
            jn_Buffer_position0(var$3, var$3.$limit1);
            $file = $this.$inBuffer;
            jn_Buffer_position0($file, $file.$limit1);
            return;
        }
        $file = new ji_FileNotFoundException;
        jl_Throwable__init_0($file);
        $rt_throw($file);
    }
    function ji_BufferedReader() {
        var a = this; ji_Reader.call(a);
        a.$innerReader = null;
        a.$buffer5 = null;
        a.$index0 = 0;
        a.$count2 = 0;
        a.$eof1 = 0;
        a.$mark1 = 0;
    }
    function ji_BufferedReader__init_(var_0) {
        var var_1 = new ji_BufferedReader();
        ji_BufferedReader__init_0(var_1, var_0);
        return var_1;
    }
    function ji_BufferedReader__init_0($this, $innerReader) {
        ji_Reader__init_($this);
        $this.$mark1 = (-1);
        $this.$innerReader = $innerReader;
        $this.$buffer5 = $rt_createCharArray(jl_Math_max(64, 1024));
    }
    function ji_BufferedReader_close($this) {
        var var$1;
        ji_BufferedReader_requireOpened($this);
        var$1 = $this.$innerReader.$stream;
        var$1.$accessor = null;
        $this.$innerReader = null;
    }
    function ji_BufferedReader_readLine($this) {
        var $line, var$2, $ch, var$4;
        ji_BufferedReader_requireOpened($this);
        if ($this.$eof1 && $this.$index0 >= $this.$count2)
            return null;
        $line = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($line);
        a: {
            while (true) {
                if ($this.$index0 >= $this.$count2 && !ji_BufferedReader_fillBuffer($this, 0))
                    break a;
                var$2 = $this.$buffer5.data;
                $ch = $this.$index0;
                var$4 = $ch + 1 | 0;
                $this.$index0 = var$4;
                $ch = var$2[$ch];
                if ($ch == 10)
                    break;
                if ($ch == 13) {
                    if (var$4 >= $this.$count2 && !ji_BufferedReader_fillBuffer($this, 0))
                        break a;
                    var$2 = $this.$buffer5.data;
                    var$4 = $this.$index0;
                    if (var$2[var$4] != 10)
                        break a;
                    $this.$index0 = var$4 + 1 | 0;
                    break a;
                }
                jl_AbstractStringBuilder_append($line, $ch);
            }
        }
        return jl_AbstractStringBuilder_toString($line);
    }
    function ji_BufferedReader_fillBuffer($this, $offset) {
        var var$2, var$3, var$4, var$5, $charsRead, var$7, var$8, var$9, var$10;
        if ($this.$eof1)
            return 0;
        a: {
            b: while (true) {
                var$2 = $this.$buffer5;
                var$3 = var$2.data.length;
                if ($offset >= var$3)
                    break a;
                var$4 = $this.$innerReader;
                var$5 = var$3 - $offset | 0;
                if (var$4.$eof0 && !jn_Buffer_hasRemaining(var$4.$outBuffer))
                    $charsRead = (-1);
                else {
                    $charsRead = 0;
                    c: {
                        while (var$5 > 0) {
                            var$3 = jl_Math_min(var$5, jn_Buffer_remaining(var$4.$outBuffer));
                            jn_CharBuffer_get0(var$4.$outBuffer, var$2, $offset + $charsRead | 0, var$3);
                            var$5 = var$5 - var$3 | 0;
                            $charsRead = $charsRead + var$3 | 0;
                            if (!jn_Buffer_hasRemaining(var$4.$outBuffer)) {
                                if (var$4.$eof0)
                                    var$3 = 0;
                                else {
                                    var$7 = var$4.$outBuffer;
                                    if (var$7.$readOnly0)
                                        break b;
                                    d: {
                                        var$8 = jn_Buffer_remaining(var$7);
                                        var$9 = var$7.$position0;
                                        if (var$9 > 0) {
                                            var$10 = 0;
                                            while (true) {
                                                if (var$10 >= var$8)
                                                    break d;
                                                var$3 = var$9 + 1 | 0;
                                                jn_CharBufferOverArray_putChar(var$7, var$10, jn_CharBufferOverArray_getChar(var$7, var$9));
                                                var$10 = var$10 + 1 | 0;
                                                var$9 = var$3;
                                            }
                                        }
                                    }
                                    var$7.$position0 = var$8;
                                    var$7.$limit1 = var$7.$capacity;
                                    var$7.$mark0 = (-1);
                                    e: {
                                        while (true) {
                                            if (!jn_Buffer_hasRemaining(var$4.$inBuffer) && !ji_InputStreamReader_fillReadBuffer(var$4))
                                                break e;
                                            var$7 = jnc_CharsetDecoder_decode0(var$4.$decoder, var$4.$inBuffer, var$4.$outBuffer, var$4.$streamEof);
                                            if (jnc_CoderResult_isOverflow(var$7))
                                                break;
                                            if (jnc_CoderResult_isUnderflow(var$7))
                                                ji_InputStreamReader_fillReadBuffer(var$4);
                                        }
                                    }
                                    if (!jn_Buffer_hasRemaining(var$4.$inBuffer) && var$4.$streamEof && jnc_CoderResult_isUnderflow(jnc_CharsetDecoder_flush(var$4.$decoder, var$4.$outBuffer)))
                                        var$4.$eof0 = 1;
                                    jn_Buffer_flip(var$4.$outBuffer);
                                    var$3 = 1;
                                }
                                if (!var$3)
                                    break c;
                            }
                        }
                    }
                }
                if ($charsRead == (-1)) {
                    $this.$eof1 = 1;
                    break a;
                }
                if (!$charsRead)
                    break a;
                $offset = $offset + $charsRead | 0;
            }
            var$7 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0(var$7);
            $rt_throw(var$7);
        }
        $this.$count2 = $offset;
        $this.$index0 = 0;
        $this.$mark1 = (-1);
        return 1;
    }
    function ji_BufferedReader_requireOpened($this) {
        var var$1;
        if ($this.$innerReader !== null)
            return;
        var$1 = new ji_IOException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    var jn_FloatBuffer = $rt_classWithoutFields(jn_Buffer);
    function jn_FloatBuffer_get0($this, $dst, $offset, $length) {
        var var$4, var$5, $pos, var$7, var$8, $i, var$10, var$11;
        if ($offset >= 0) {
            var$4 = $dst.data;
            var$5 = var$4.length;
            if ($offset <= var$5) {
                $pos = $offset + $length | 0;
                if ($pos > var$5) {
                    var$7 = new jl_IndexOutOfBoundsException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(332)), $pos), $rt_s(80)), var$5);
                    jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$7);
                }
                if (jn_Buffer_remaining($this) < $length) {
                    var$8 = new jn_BufferUnderflowException;
                    jl_Throwable__init_0(var$8);
                    $rt_throw(var$8);
                }
                if ($length < 0) {
                    var$8 = new jl_IndexOutOfBoundsException;
                    var$7 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$7);
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$7, $rt_s(81)), $length), $rt_s(82));
                    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$7));
                    $rt_throw(var$8);
                }
                $pos = $this.$position0;
                $i = 0;
                while ($i < $length) {
                    var$10 = $offset + 1 | 0;
                    var$5 = $pos + 1 | 0;
                    var$4[$offset] = $this.$getElement($pos);
                    $i = $i + 1 | 0;
                    $offset = var$10;
                    $pos = var$5;
                }
                $this.$position0 = $this.$position0 + $length | 0;
                return $this;
            }
        }
        $dst = $dst.data;
        var$8 = new jl_IndexOutOfBoundsException;
        $length = $dst.length;
        var$11 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$11);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$11, $rt_s(83)), $offset), $rt_s(77)), $length), 41);
        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$11));
        $rt_throw(var$8);
    }
    function jn_FloatBuffer_get($this, $dst) {
        return jn_FloatBuffer_get0($this, $dst, 0, $dst.data.length);
    }
    function jn_FloatBuffer_clear($this) {
        jn_Buffer_clear($this);
        return $this;
    }
    function jn_FloatBuffer_flip($this) {
        jn_Buffer_flip($this);
        return $this;
    }
    function jn_FloatBuffer_limit($this, $newLimit) {
        jn_Buffer_limit0($this, $newLimit);
        return $this;
    }
    var ju_Set = $rt_classWithoutFields(0);
    var ju_AbstractSet = $rt_classWithoutFields(ju_AbstractCollection);
    var ju_TemplateCollections$AbstractImmutableSet = $rt_classWithoutFields(ju_AbstractSet);
    var ju_Collections$1 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableSet);
    var ju_TemplateCollections$AbstractImmutableMap = $rt_classWithoutFields(ju_AbstractMap);
    var ju_Collections$2 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableMap);
    var ju_TemplateCollections$AbstractImmutableList = $rt_classWithoutFields(ju_AbstractList);
    var ju_Collections$3 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableList);
    var ju_Iterator = $rt_classWithoutFields(0);
    var ju_Collections$4 = $rt_classWithoutFields();
    var ju_ListIterator = $rt_classWithoutFields(0);
    var ju_Collections$5 = $rt_classWithoutFields();
    var ju_Collections$_clinit_$lambda$_59_0 = $rt_classWithoutFields();
    function m_WebGLShader() {
        var a = this; jl_Object.call(a);
        a.$enable_color = 0;
        a.$enable_normal = 0;
        a.$enable_texture0 = 0;
        a.$enable_lighting = 0;
        a.$enable_fog = 0;
        a.$enable_alphatest = 0;
        a.$enable_unit0 = 0;
        a.$globject = null;
        a.$u_matrix_m = null;
        a.$u_matrix_p = null;
        a.$u_matrix_t = null;
        a.$u_fogColor = null;
        a.$u_fogMode = null;
        a.$u_fogStart = null;
        a.$u_fogEnd = null;
        a.$u_fogDensity = null;
        a.$u_fogPremultiply = null;
        a.$u_colorUniform = null;
        a.$u_normalUniform = null;
        a.$u_alphaTestF = null;
        a.$u_texCoordV0 = null;
        a.$u_light0Pos = null;
        a.$u_light1Pos = null;
        a.$a_position = 0;
        a.$a_texture0 = 0;
        a.$a_color = 0;
        a.$a_normal = 0;
        a.$streamBuffer = null;
        a.$bufferIsInitialized = 0;
        a.$modelBuffer = null;
        a.$projectionBuffer = null;
        a.$textureBuffer0 = null;
        a.$modelMatrix = null;
        a.$projectionMatrix = null;
        a.$textureMatrix = null;
        a.$light0Pos = null;
        a.$light1Pos = null;
        a.$fogMode = 0;
        a.$fogColorR = 0.0;
        a.$fogColorG = 0.0;
        a.$fogColorB = 0.0;
        a.$fogColorA = 0.0;
        a.$fogStart = 0.0;
        a.$fogEnd0 = 0.0;
        a.$fogDensity = 0.0;
        a.$alphaTestValue = 0.0;
        a.$tex0x = 0.0;
        a.$tex0y = 0.0;
        a.$colorUniformR = 0.0;
        a.$colorUniformG = 0.0;
        a.$colorUniformB = 0.0;
        a.$colorUniformA = 0.0;
        a.$normalUniformX = 0.0;
        a.$normalUniformY = 0.0;
        a.$normalUniformZ = 0.0;
    }
    var m_WebGLShader_vertexFragmentShader = null;
    var m_WebGLShader_instances = null;
    var m_WebGLShader_instanceList = null;
    var m_WebGLShader_shader = null;
    function m_WebGLShader_$callClinit() {
        m_WebGLShader_$callClinit = $rt_eraseClinit(m_WebGLShader);
        m_WebGLShader__clinit_();
    }
    function m_WebGLShader__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7) {
        var var_8 = new m_WebGLShader();
        m_WebGLShader__init_0(var_8, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7);
        return var_8;
    }
    function m_WebGLShader_instance($i) {
        var $s, $CC_a_color, $CC_a_normal, $CC_a_texture0, $CC_lighting, $CC_fog, $CC_alphatest, $CC_unit0;
        m_WebGLShader_$callClinit();
        $s = m_WebGLShader_instances.data[$i];
        if ($s === null) {
            $CC_a_color = 0;
            $CC_a_normal = 0;
            $CC_a_texture0 = 0;
            $CC_lighting = 0;
            $CC_fog = 0;
            $CC_alphatest = 0;
            $CC_unit0 = 0;
            if (($i & 1) == 1)
                $CC_a_color = 1;
            if (($i & 2) == 2)
                $CC_a_normal = 1;
            if (($i & 4) == 4)
                $CC_a_texture0 = 1;
            if (($i & 8) == 8)
                $CC_lighting = 1;
            if (($i & 16) == 16)
                $CC_fog = 1;
            if (($i & 32) == 32)
                $CC_alphatest = 1;
            if (($i & 64) == 64)
                $CC_unit0 = 1;
            $s = m_WebGLShader__init_($i, $CC_a_color, $CC_a_normal, $CC_a_texture0, $CC_lighting, $CC_fog, $CC_alphatest, $CC_unit0);
            m_WebGLShader_instances.data[$i] = $s;
            ju_ArrayList_add(m_WebGLShader_instanceList, $s);
        }
        return $s;
    }
    function m_WebGLShader__init_0($this, $j, $CC_a_color, $CC_a_normal, $CC_a_texture0, $CC_lighting, $CC_fog, $CC_alphatest, $CC_unit0) {
        var $source, $v, $f, var$12, var$13;
        m_WebGLShader_$callClinit();
        jl_Object__init_0($this);
        $this.$u_matrix_m = null;
        $this.$u_matrix_p = null;
        $this.$u_matrix_t = null;
        $this.$u_fogColor = null;
        $this.$u_fogMode = null;
        $this.$u_fogStart = null;
        $this.$u_fogEnd = null;
        $this.$u_fogDensity = null;
        $this.$u_fogPremultiply = null;
        $this.$u_colorUniform = null;
        $this.$u_normalUniform = null;
        $this.$u_alphaTestF = null;
        $this.$u_texCoordV0 = null;
        $this.$u_light0Pos = null;
        $this.$u_light1Pos = null;
        $this.$bufferIsInitialized = 0;
        $this.$modelBuffer = $rt_createFloatArray(16);
        $this.$projectionBuffer = $rt_createFloatArray(16);
        $this.$textureBuffer0 = $rt_createFloatArray(16);
        $this.$modelMatrix = oluv_Matrix4f_setZero(oluv_Matrix4f__init_());
        $this.$projectionMatrix = oluv_Matrix4f_setZero(oluv_Matrix4f__init_());
        $this.$textureMatrix = oluv_Matrix4f_setZero(oluv_Matrix4f__init_());
        $this.$light0Pos = oluv_Vector4f__init_();
        $this.$light1Pos = oluv_Vector4f__init_();
        $this.$fogMode = 0;
        $this.$fogColorR = 0.0;
        $this.$fogColorG = 0.0;
        $this.$fogColorB = 0.0;
        $this.$fogColorA = 0.0;
        $this.$fogStart = 0.0;
        $this.$fogEnd0 = 0.0;
        $this.$fogDensity = 0.0;
        $this.$alphaTestValue = 0.0;
        $this.$tex0x = 0.0;
        $this.$tex0y = 0.0;
        $this.$colorUniformR = 0.0;
        $this.$colorUniformG = 0.0;
        $this.$colorUniformB = 0.0;
        $this.$colorUniformA = 0.0;
        $this.$normalUniformX = 0.0;
        $this.$normalUniformY = 0.0;
        $this.$normalUniformZ = 0.0;
        $this.$enable_color = $CC_a_color;
        $this.$enable_normal = $CC_a_normal;
        $this.$enable_texture0 = $CC_a_texture0;
        $this.$enable_lighting = $CC_lighting;
        $this.$enable_fog = $CC_fog;
        $this.$enable_alphatest = $CC_alphatest;
        $this.$enable_unit0 = $CC_unit0;
        if (m_WebGLShader_shader === null)
            m_WebGLShader_shader = jl_String__init_2(m_WebGLShader_vertexFragmentShader);
        $source = $rt_s(3);
        if ($this.$enable_color) {
            $v = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($v, $source), $rt_s(333));
            $source = jl_StringBuilder_toString($v);
        }
        if ($this.$enable_normal) {
            $v = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($v, $source), $rt_s(334));
            $source = jl_StringBuilder_toString($v);
        }
        if ($this.$enable_texture0) {
            $v = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($v, $source), $rt_s(335));
            $source = jl_StringBuilder_toString($v);
        }
        if ($this.$enable_lighting) {
            $v = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($v, $source), $rt_s(336));
            $source = jl_StringBuilder_toString($v);
        }
        if ($this.$enable_fog) {
            $v = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($v, $source), $rt_s(337));
            $source = jl_StringBuilder_toString($v);
        }
        if ($this.$enable_alphatest) {
            $v = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($v, $source), $rt_s(338));
            $source = jl_StringBuilder_toString($v);
        }
        if ($this.$enable_unit0) {
            $v = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($v, $source), $rt_s(339));
            $source = jl_StringBuilder_toString($v);
        }
        $v = m_WebGLShader_shader;
        $f = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append($f, $source), $v);
        var$12 = jl_StringBuilder_toString($f);
        $v = olo_GL11_glCreateShader(35633);
        $source = olo_GL11_glGetShaderHeader();
        $f = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($f, $source), $rt_s(340)), var$12);
        olo_GL11_glShaderSource($v, jl_StringBuilder_toString($f));
        olo_GL11_glCompileShader($v);
        if (!olo_GL11_glGetShaderCompiled($v)) {
            $source = jl_System_err();
            $v = olo_GL11_glGetShaderInfoLog($v);
            $f = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($f, $rt_s(341)), $v);
            ji_PrintStream_println($source, jl_String_replace(jl_StringBuilder_toString($f), $rt_s(342), $rt_s(343)));
            $rt_throw(jl_RuntimeException__init_($rt_s(344)));
        }
        $f = olo_GL11_glCreateShader(35632);
        $source = olo_GL11_glGetShaderHeader();
        var$13 = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$13, $source), $rt_s(345)), var$12);
        olo_GL11_glShaderSource($f, jl_StringBuilder_toString(var$13));
        olo_GL11_glCompileShader($f);
        if (!olo_GL11_glGetShaderCompiled($f)) {
            $source = jl_System_err();
            $v = olo_GL11_glGetShaderInfoLog($f);
            $f = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($f, $rt_s(341)), $v);
            ji_PrintStream_println($source, jl_String_replace(jl_StringBuilder_toString($f), $rt_s(342), $rt_s(346)));
            $rt_throw(jl_RuntimeException__init_($rt_s(344)));
        }
        $source = olo_GL11_glCreateProgram();
        $this.$globject = $source;
        olo_GL11_glAttachShader($source, $v);
        olo_GL11_glAttachShader($this.$globject, $f);
        $j = 1;
        $this.$a_position = 0;
        olo_GL11_glBindAttributeLocation($this.$globject, 0, $rt_s(347));
        if (!$this.$enable_texture0)
            $this.$a_texture0 = (-1);
        else {
            $this.$a_texture0 = $j;
            olo_GL11_glBindAttributeLocation($this.$globject, $j, $rt_s(348));
            $j = 2;
        }
        if (!$this.$enable_color)
            $this.$a_color = (-1);
        else {
            $CC_a_color = $j + 1 | 0;
            $this.$a_color = $j;
            olo_GL11_glBindAttributeLocation($this.$globject, $j, $rt_s(349));
            $j = $CC_a_color;
        }
        if (!$this.$enable_normal)
            $this.$a_normal = (-1);
        else {
            $this.$a_normal = $j;
            olo_GL11_glBindAttributeLocation($this.$globject, $j, $rt_s(350));
        }
        olo_GL11_glLinkProgram($this.$globject);
        olo_GL11_glDetachShader($this.$globject, $v);
        olo_GL11_glDetachShader($this.$globject, $f);
        olo_GL11_glDeleteShader($v);
        olo_GL11_glDeleteShader($f);
        if (!olo_GL11_glGetProgramLinked($this.$globject)) {
            $source = jl_System_err();
            $v = olo_GL11_glGetProgramInfoLog($this.$globject);
            $f = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append($f, $rt_s(341)), $v);
            ji_PrintStream_println($source, jl_String_replace(jl_StringBuilder_toString($f), $rt_s(342), $rt_s(351)));
            $rt_throw(jl_RuntimeException__init_($rt_s(344)));
        }
        olo_GL11_glUseProgram($this.$globject);
        $this.$u_matrix_m = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(352));
        $this.$u_matrix_p = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(353));
        $this.$u_matrix_t = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(354));
        $this.$u_colorUniform = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(355));
        if ($this.$enable_lighting) {
            $this.$u_normalUniform = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(356));
            $this.$u_light0Pos = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(357));
            $this.$u_light1Pos = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(358));
        }
        if ($this.$enable_fog) {
            $this.$u_fogColor = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(359));
            $this.$u_fogMode = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(360));
            $this.$u_fogStart = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(361));
            $this.$u_fogEnd = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(362));
            $this.$u_fogDensity = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(363));
            $this.$u_fogPremultiply = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(364));
        }
        if ($this.$enable_alphatest)
            $this.$u_alphaTestF = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(365));
        olo_GL11_glUniform1i(olo_GL11_glGetUniformLocation($this.$globject, $rt_s(366)), 0);
        $this.$u_texCoordV0 = olo_GL11_glGetUniformLocation($this.$globject, $rt_s(367));
        $this.$streamBuffer = m_StreamBuffer__init_(32768, 3, 8, m_WebGLShader$_init_$lambda$_2_0__init_($this));
    }
    function m_WebGLShader_setupArrayForProgram($this) {
        olo_GL11_glEnableVertexAttribArray($this.$a_position);
        olo_GL11_glVertexAttribPointer($this.$a_position, 3, 5126, 0, 28, 0);
        if ($this.$enable_texture0) {
            olo_GL11_glEnableVertexAttribArray($this.$a_texture0);
            olo_GL11_glVertexAttribPointer($this.$a_texture0, 2, 5126, 0, 28, 12);
        }
        if ($this.$enable_color) {
            olo_GL11_glEnableVertexAttribArray($this.$a_color);
            olo_GL11_glVertexAttribPointer($this.$a_color, 4, 5121, 1, 28, 20);
        }
        if ($this.$enable_normal) {
            olo_GL11_glEnableVertexAttribArray($this.$a_normal);
            olo_GL11_glVertexAttribPointer($this.$a_normal, 4, 5121, 1, 28, 24);
        }
    }
    function m_WebGLShader__clinit_() {
        m_WebGLShader_vertexFragmentShader = $rt_s(368);
        m_WebGLShader_instances = $rt_createArray(m_WebGLShader, 128);
        m_WebGLShader_instanceList = ju_ArrayList__init_();
        m_WebGLShader_shader = null;
    }
    function m_BufferArrayGL() {
        var a = this; jl_Object.call(a);
        a.$obj1 = null;
        a.$isQuadBufferBound = 0;
    }
    var jn_CharBufferImpl = $rt_classWithoutFields(jn_CharBuffer);
    function jn_CharBufferOverArray() {
        var a = this; jn_CharBufferImpl.call(a);
        a.$readOnly0 = 0;
        a.$start7 = 0;
        a.$array2 = null;
    }
    function jn_CharBufferOverArray__init_(var_0, var_1, var_2, var_3, var_4, var_5) {
        var var_6 = new jn_CharBufferOverArray();
        jn_CharBufferOverArray__init_0(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
        return var_6;
    }
    function jn_CharBufferOverArray__init_0($this, $start, $capacity, $array, $position, $limit, $readOnly) {
        jn_Buffer__init_($this, $capacity);
        $this.$position0 = $position;
        $this.$limit1 = $limit;
        $this.$start7 = $start;
        $this.$readOnly0 = $readOnly;
        $this.$array2 = $array;
    }
    function jn_CharBufferOverArray_getChar($this, $index) {
        return $this.$array2.data[$index + $this.$start7 | 0];
    }
    function jn_CharBufferOverArray_putChar($this, $index, $value) {
        $this.$array2.data[$index + $this.$start7 | 0] = $value;
    }
    function jnc_CharsetEncoder() {
        var a = this; jl_Object.call(a);
        a.$charset0 = null;
        a.$replacement = null;
        a.$averageBytesPerChar = 0.0;
        a.$maxBytesPerChar = 0.0;
        a.$malformedAction = null;
        a.$unmappableAction = null;
        a.$status = 0;
    }
    function jnc_CharsetEncoder_onMalformedInput($this, $newAction) {
        var var$2;
        if ($newAction !== null) {
            $this.$malformedAction = $newAction;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(369));
        $rt_throw(var$2);
    }
    function jnc_CharsetEncoder_onUnmappableCharacter($this, $newAction) {
        var var$2;
        if ($newAction !== null) {
            $this.$unmappableAction = $newAction;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(369));
        $rt_throw(var$2);
    }
    function jnc_CharsetEncoder_encode($this, $in, $out, $endOfInput) {
        var var$4, $result, $e, $remaining, $action, var$9, $$je;
        a: {
            var$4 = $this.$status;
            if (var$4 != 3) {
                if ($endOfInput)
                    break a;
                if (var$4 != 2)
                    break a;
            }
            $in = new jl_IllegalStateException;
            jl_Throwable__init_0($in);
            $rt_throw($in);
        }
        $this.$status = !$endOfInput ? 1 : 2;
        while (true) {
            try {
                $result = jnci_BufferedEncoder_encodeLoop($this, $in, $out);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_RuntimeException) {
                    $e = $$je;
                    $in = new jnc_CoderMalfunctionError;
                    jl_Throwable__init_4($in, $e);
                    $rt_throw($in);
                } else {
                    throw $$e;
                }
            }
            if (jnc_CoderResult_isUnderflow($result)) {
                if (!$endOfInput)
                    return $result;
                $remaining = jn_Buffer_remaining($in);
                if ($remaining <= 0)
                    return $result;
                $result = jnc_CoderResult_malformedForLength($remaining);
            } else if (jnc_CoderResult_isOverflow($result))
                break;
            $action = !jnc_CoderResult_isUnmappable($result) ? $this.$malformedAction : $this.$unmappableAction;
            b: {
                jnc_CodingErrorAction_$callClinit();
                if ($action !== jnc_CodingErrorAction_REPLACE) {
                    if ($action === jnc_CodingErrorAction_IGNORE)
                        break b;
                    else
                        return $result;
                }
                $remaining = jn_Buffer_remaining($out);
                var$9 = $this.$replacement;
                if ($remaining < var$9.data.length)
                    return jnc_CoderResult_OVERFLOW;
                jn_ByteBuffer_put($out, var$9);
            }
            jn_Buffer_position0($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
        }
        return $result;
    }
    function jnc_CoderResult() {
        var a = this; jl_Object.call(a);
        a.$kind = 0;
        a.$length2 = 0;
    }
    var jnc_CoderResult_UNDERFLOW = null;
    var jnc_CoderResult_OVERFLOW = null;
    function jnc_CoderResult__init_(var_0, var_1) {
        var var_2 = new jnc_CoderResult();
        jnc_CoderResult__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jnc_CoderResult__init_0($this, $kind, $length) {
        $this.$kind = $kind;
        $this.$length2 = $length;
    }
    function jnc_CoderResult_isUnderflow($this) {
        return $this.$kind ? 0 : 1;
    }
    function jnc_CoderResult_isOverflow($this) {
        return $this.$kind != 1 ? 0 : 1;
    }
    function jnc_CoderResult_isError($this) {
        return !jnc_CoderResult_isMalformed($this) && !jnc_CoderResult_isUnmappable($this) ? 0 : 1;
    }
    function jnc_CoderResult_isMalformed($this) {
        return $this.$kind != 2 ? 0 : 1;
    }
    function jnc_CoderResult_isUnmappable($this) {
        return $this.$kind != 3 ? 0 : 1;
    }
    function jnc_CoderResult_length($this) {
        var var$1;
        if (jnc_CoderResult_isError($this))
            return $this.$length2;
        var$1 = new jl_UnsupportedOperationException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    function jnc_CoderResult_malformedForLength($length) {
        return jnc_CoderResult__init_(2, $length);
    }
    function jnc_CoderResult_throwException($this) {
        var var$1, var$2;
        switch ($this.$kind) {
            case 0:
                var$1 = new jnc_BufferUnderflowException;
                jl_Throwable__init_0(var$1);
                $rt_throw(var$1);
            case 1:
                var$1 = new jnc_BufferOverflowException;
                jl_Throwable__init_0(var$1);
                $rt_throw(var$1);
            case 2:
                var$1 = new jnc_MalformedInputException;
                var$2 = $this.$length2;
                jl_Throwable__init_0(var$1);
                var$1.$length3 = var$2;
                $rt_throw(var$1);
            case 3:
                var$1 = new jnc_UnmappableCharacterException;
                var$2 = $this.$length2;
                jl_Throwable__init_0(var$1);
                var$1.$length4 = var$2;
                $rt_throw(var$1);
            default:
        }
    }
    function jnc_CoderResult__clinit_() {
        jnc_CoderResult_UNDERFLOW = jnc_CoderResult__init_(0, 0);
        jnc_CoderResult_OVERFLOW = jnc_CoderResult__init_(1, 0);
    }
    var otrf_VirtualFileSystemProvider = $rt_classWithoutFields();
    var otrf_VirtualFileSystemProvider_instance = null;
    function ji_FileInputStream() {
        ji_InputStream.call(this);
        this.$accessor = null;
    }
    var ji_FileInputStream_ONE_BYTE_BUFFER = null;
    function ji_FileInputStream__clinit_() {
        ji_FileInputStream_ONE_BYTE_BUFFER = $rt_createByteArray(1);
    }
    function olo_Sync$RunningAvg() {
        var a = this; jl_Object.call(a);
        a.$slots0 = null;
        a.$offset0 = 0;
    }
    function olo_Sync$RunningAvg__init_(var_0) {
        var var_1 = new olo_Sync$RunningAvg();
        olo_Sync$RunningAvg__init_0(var_1, var_0);
        return var_1;
    }
    function olo_Sync$RunningAvg__init_0($this, $slotCount) {
        $this.$slots0 = $rt_createLongArray($slotCount);
        $this.$offset0 = 0;
    }
    function olo_Sync$RunningAvg_init($this, $value) {
        var var$2, var$3;
        while (true) {
            var$2 = $this.$offset0;
            var$3 = $this.$slots0.data;
            if (var$2 >= var$3.length)
                break;
            $this.$offset0 = var$2 + 1 | 0;
            var$3[var$2] = $value;
        }
    }
    function olo_Sync$RunningAvg_add($this, $value) {
        var var$2, var$3, var$4, var$5;
        var$2 = $this.$slots0.data;
        var$3 = $this.$offset0;
        var$4 = var$3 + 1 | 0;
        $this.$offset0 = var$4;
        var$5 = var$2.length;
        var$2[var$3 % var$5 | 0] = $value;
        $this.$offset0 = var$4 % var$5 | 0;
    }
    function olo_Sync$RunningAvg_avg($this) {
        var $sum, $i, var$3, var$4;
        $sum = Long_ZERO;
        $i = 0;
        while (true) {
            var$3 = $this.$slots0.data;
            var$4 = var$3.length;
            if ($i >= var$4)
                break;
            $sum = Long_add($sum, var$3[$i]);
            $i = $i + 1 | 0;
        }
        return Long_div($sum, Long_fromInt(var$4));
    }
    function olo_Sync$RunningAvg_dampenForLowResTicker($this) {
        var $i, var$2;
        a: {
            if (Long_gt(olo_Sync$RunningAvg_avg($this), Long_fromInt(10000000))) {
                $i = 0;
                while (true) {
                    var$2 = $this.$slots0.data;
                    if ($i >= var$2.length)
                        break a;
                    var$2[$i] = Long_fromNumber(Long_toNumber(var$2[$i]) * 0.8999999761581421);
                    $i = $i + 1 | 0;
                }
            }
        }
    }
    var ol_Sys = $rt_classWithoutFields();
    function jl_Thread$switchContext$lambda$_19_0() {
        var a = this; jl_Object.call(a);
        a.$_02 = null;
        a.$_10 = null;
    }
    function jl_Thread$switchContext$lambda$_19_0_run(var$0) {
        var var$1, var$2;
        var$1 = var$0.$_02;
        var$2 = var$0.$_10;
        jl_Thread_$callClinit();
        jl_Thread_setCurrentThread(var$1);
        otpp_AsyncCallbackWrapper_complete(var$2, null);
    }
    function m_BufferGL() {
        jl_Object.call(this);
        this.$obj6 = null;
    }
    var otpp_ResourceAccessor = $rt_classWithoutFields();
    var otciu_UnicodeHelper = $rt_classWithoutFields();
    function otciu_UnicodeHelper_decodeCaseMapping($text) {
        var $flow, $sz, $data, var$5, $last, $i, var$8;
        $flow = otci_CharFlow__init_(jl_String_toCharArray($text));
        $sz = otci_Base46_decodeUnsigned($flow);
        $data = $rt_createIntArray($sz * 2 | 0);
        var$5 = $data.data;
        $last = 0;
        $i = 0;
        while ($i < $sz) {
            $last = $last + otci_Base46_decodeUnsigned($flow) | 0;
            var$8 = $i * 2 | 0;
            var$5[var$8] = $last;
            var$5[var$8 + 1 | 0] = otci_Base46_decode($flow);
            $i = $i + 1 | 0;
        }
        return $data;
    }
    function otciu_UnicodeHelper_createCharMapping($data) {
        var $result, var$3, $last, $lastValue, $i, var$7, $key, $value, var$10, var$11;
        $result = $rt_createIntArray(65536);
        var$3 = $result.data;
        $last = 0;
        $lastValue = 0;
        $i = 0;
        a: {
            while (true) {
                var$7 = $data.data;
                if ($i >= var$7.length)
                    break a;
                $key = var$7[$i];
                $value = var$7[$i + 1 | 0];
                var$10 = var$3.length;
                if ($key < var$10)
                    var$10 = $key;
                else if ($key == $last)
                    break;
                ju_Arrays_fill0($result, $last, var$10, $lastValue);
                $i = $i + 2 | 0;
                $last = var$10;
                $lastValue = $value;
            }
        }
        var$11 = new otciu_CharMapping;
        var$11.$binarySearchTable = $data;
        var$11.$fastTable = $result;
        return var$11;
    }
    function otciu_UnicodeHelper_decodeByte($c) {
        if ($c > 92)
            return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
        if ($c <= 34)
            return ($c - 32 | 0) << 24 >> 24;
        return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
    }
    function otciu_CharMapping() {
        var a = this; jl_Object.call(a);
        a.$binarySearchTable = null;
        a.$fastTable = null;
    }
    var ji_FileNotFoundException = $rt_classWithoutFields(ji_IOException);
    var jl_NumberFormatException = $rt_classWithoutFields(jl_IllegalArgumentException);
    function m_StreamBuffer() {
        var a = this; jl_Object.call(a);
        a.$initialSize = 0;
        a.$initialCount = 0;
        a.$maxCount = 0;
        a.$buffers = null;
        a.$currentBufferId = 0;
        a.$overflowCounter = 0;
        a.$initializer = null;
    }
    function m_StreamBuffer__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new m_StreamBuffer();
        m_StreamBuffer__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function m_StreamBuffer__init_0($this, $initialSize, $initialCount, $maxCount, $initializer) {
        var var$5, var$6, $i, var$8, var$9;
        $this.$currentBufferId = 0;
        $this.$overflowCounter = 0;
        var$5 = $rt_createArray(m_StreamBuffer$StreamBufferInstance, $initialCount);
        var$6 = var$5.data;
        $this.$buffers = var$5;
        $i = 0;
        var$8 = var$6.length;
        while ($i < var$8) {
            var$9 = new m_StreamBuffer$StreamBufferInstance;
            var$9.$vertexArray = null;
            var$9.$vertexBuffer = null;
            var$9.$vertexBufferSize = 0;
            var$9.$bindQuad16 = 0;
            var$9.$bindQuad32 = 0;
            var$6[$i] = var$9;
            $i = $i + 1 | 0;
        }
        $this.$initialSize = $initialSize;
        $this.$initialCount = $initialCount;
        $this.$maxCount = $maxCount;
        $this.$initializer = $initializer;
    }
    var m_StreamBuffer$IStreamBufferInitializer = $rt_classWithoutFields(0);
    function m_WebGLShader$_init_$lambda$_2_0() {
        jl_Object.call(this);
        this.$_04 = null;
    }
    function m_WebGLShader$_init_$lambda$_2_0__init_(var_0) {
        var var_1 = new m_WebGLShader$_init_$lambda$_2_0();
        m_WebGLShader$_init_$lambda$_2_0__init_0(var_1, var_0);
        return var_1;
    }
    function m_WebGLShader$_init_$lambda$_2_0__init_0(var$0, var$1) {
        var$0.$_04 = var$1;
    }
    var jn_IntBufferImpl = $rt_classWithoutFields(jn_IntBuffer);
    function jn_IntBufferImpl__init_($this, $capacity, $position, $limit) {
        jn_Buffer__init_($this, $capacity);
        $this.$position0 = $position;
        $this.$limit1 = $limit;
    }
    function jn_IntBufferImpl_get($this) {
        var var$1, var$2;
        var$1 = $this.$position0;
        if (var$1 < $this.$limit1) {
            $this.$position0 = var$1 + 1 | 0;
            return $this.$getElement0(var$1);
        }
        var$2 = new jn_BufferUnderflowException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    function jn_IntBufferImpl_put($this, $b) {
        var var$2, var$3;
        if ($this.$readOnly2()) {
            var$2 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        var$3 = $this.$position0;
        if (var$3 >= $this.$limit1) {
            var$2 = new jn_BufferOverflowException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        $this.$position0 = var$3 + 1 | 0;
        $this.$array3.data[var$3 + $this.$start6 | 0] = $b;
        return $this;
    }
    function jn_IntBufferImpl_get0($this, $index) {
        var var$2, var$3, var$4;
        if ($index >= 0 && $index < $this.$limit1)
            return $this.$getElement0($index);
        var$2 = new jl_IndexOutOfBoundsException;
        var$3 = $this.$limit1;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(370)), $index), $rt_s(77)), var$3), 41);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$2);
    }
    function jn_IntBufferImpl_put0($this, $index, $b) {
        var var$3, var$4;
        if ($this.$readOnly2()) {
            var$3 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0(var$3);
            $rt_throw(var$3);
        }
        if ($index >= 0 && $index < $this.$limit1) {
            $this.$putElement($index, $b);
            return $this;
        }
        var$3 = new jl_IndexOutOfBoundsException;
        $b = $this.$limit1;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(370)), $index), $rt_s(77)), $b), 41);
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$3);
    }
    function jn_IntBufferImpl_isReadOnly($this) {
        return $this.$readOnly2();
    }
    function jn_IntBufferOverArray() {
        var a = this; jn_IntBufferImpl.call(a);
        a.$readOnly1 = 0;
        a.$start6 = 0;
        a.$array3 = null;
    }
    function jn_IntBufferOverArray_getElement($this, $index) {
        return $this.$array3.data[$index + $this.$start6 | 0];
    }
    function jn_IntBufferOverArray_readOnly($this) {
        return $this.$readOnly1;
    }
    function otci_CharFlow() {
        var a = this; jl_Object.call(a);
        a.$characters0 = null;
        a.$pointer = 0;
    }
    function otci_CharFlow__init_(var_0) {
        var var_1 = new otci_CharFlow();
        otci_CharFlow__init_0(var_1, var_0);
        return var_1;
    }
    function otci_CharFlow__init_0($this, $characters) {
        $this.$characters0 = $characters;
    }
    var otci_Base46 = $rt_classWithoutFields();
    function otci_Base46_decodeUnsigned($seq) {
        var $number, $pos, var$4, $hasMore, $digit;
        $number = 0;
        $pos = 1;
        while (true) {
            var$4 = $seq.$characters0.data;
            $hasMore = $seq.$pointer;
            $seq.$pointer = $hasMore + 1 | 0;
            $digit = var$4[$hasMore];
            $digit = $digit < 34 ? $digit - 32 | 0 : $digit >= 92 ? ($digit - 32 | 0) - 2 | 0 : ($digit - 32 | 0) - 1 | 0;
            $hasMore = ($digit % 2 | 0) != 1 ? 0 : 1;
            $number = $number + $rt_imul($pos, $digit / 2 | 0) | 0;
            $pos = $pos * 46 | 0;
            if (!$hasMore)
                break;
        }
        return $number;
    }
    function otci_Base46_decode($seq) {
        var $number, $result;
        $number = otci_Base46_decodeUnsigned($seq);
        $result = $number / 2 | 0;
        if ($number % 2 | 0)
            $result =  -$result | 0;
        return $result;
    }
    var otrf_VirtualFileSystem = $rt_classWithoutFields(0);
    function otrfm_InMemoryVirtualFileSystem() {
        var a = this; jl_Object.call(a);
        a.$root = null;
        a.$userDir = null;
    }
    function nPm_LWJGLUtil$1() {
        var a = this; jl_Object.call(a);
        a.$val$toLoad = null;
        a.$val$ret = null;
    }
    function nPm_LWJGLUtil$1_handleEvent($this, $evt) {
        var var$2, var$3, var$4, $pxlsDat, $pxls, $totalPixels, $pixels, var$9, $i, var$11, var$12;
        if (nPm_LWJGLUtil_imageLoadCanvas === null)
            nPm_LWJGLUtil_imageLoadCanvas = m_WebGL_document.createElement("canvas");
        if (nPm_LWJGLUtil_imageLoadCanvas.width < $this.$val$toLoad.width) {
            $evt = nPm_LWJGLUtil_imageLoadCanvas;
            var$2 = $this.$val$toLoad.width;
            $evt.width = var$2;
        }
        if (nPm_LWJGLUtil_imageLoadCanvas.height < $this.$val$toLoad.height) {
            $evt = nPm_LWJGLUtil_imageLoadCanvas;
            var$2 = $this.$val$toLoad.height;
            $evt.height = var$2;
        }
        if (nPm_LWJGLUtil_imageLoadContext === null) {
            $evt = nPm_LWJGLUtil_imageLoadCanvas.getContext("2d");
            nPm_LWJGLUtil_imageLoadContext = $evt;
            $evt.imageSmoothingEnabled = !!0;
        }
        $evt = nPm_LWJGLUtil_imageLoadContext;
        var$3 = $this.$val$toLoad.width;
        var$4 = $this.$val$toLoad.height;
        $evt.clearRect(0.0, 0.0, var$3, var$4);
        $evt = nPm_LWJGLUtil_imageLoadContext;
        var$2 = $this.$val$toLoad;
        var$3 = var$2.width;
        var$4 = $this.$val$toLoad.height;
        $evt.drawImage(var$2, 0.0, 0.0, var$3, var$4);
        $evt = nPm_LWJGLUtil_imageLoadContext;
        var$3 = $this.$val$toLoad.width;
        var$4 = $this.$val$toLoad.height;
        $pxlsDat = $evt.getImageData(0.0, 0.0, var$3, var$4);
        $pxls = $pxlsDat.data;
        $totalPixels = $rt_imul($pxlsDat.width, $pxlsDat.height);
        $rt_globals.URL.revokeObjectURL($rt_ustr($rt_str($this.$val$toLoad.src)));
        if ($pxls.byteLength < ($totalPixels * 4 | 0)) {
            otpp_AsyncCallbackWrapper_complete($this.$val$ret, null);
            return;
        }
        $pixels = $rt_createIntArray($totalPixels);
        var$9 = $pixels.data;
        $i = 0;
        $totalPixels = var$9.length;
        while ($i < $totalPixels) {
            var$11 = $i * 4 | 0;
            var$9[$i] = $pxls[var$11] << 16 | $pxls[var$11 + 1 | 0] << 8 | $pxls[var$11 + 2 | 0] | $pxls[var$11 + 3 | 0] << 24;
            $i = $i + 1 | 0;
        }
        $evt = $this.$val$ret;
        var$2 = new nPm_BufferedImage;
        $i = $pxlsDat.width;
        var$12 = $pxlsDat.height;
        if ($totalPixels == $rt_imul($i, var$12)) {
            var$2.$w0 = $i;
            var$2.$h2 = var$12;
            var$2.$alpha1 = 1;
            var$2.$data0 = $pixels;
            otpp_AsyncCallbackWrapper_complete($evt, var$2);
            return;
        }
        $evt = new jl_IllegalArgumentException;
        jl_Throwable__init_($evt, $rt_s(371));
        $rt_throw($evt);
    }
    function nPm_LWJGLUtil$1_handleEvent$exported$0(var$0, var$1) {
        nPm_LWJGLUtil$1_handleEvent(var$0, var$1);
    }
    function nPm_LWJGLUtil$2() {
        var a = this; jl_Object.call(a);
        a.$val$toLoad0 = null;
        a.$val$ret0 = null;
    }
    function nPm_LWJGLUtil$2_handleEvent$exported$0(var$0, var$1) {
        $rt_globals.URL.revokeObjectURL($rt_ustr($rt_str(var$0.$val$toLoad0.src)));
        otpp_AsyncCallbackWrapper_complete(var$0.$val$ret0, null);
    }
    function m_ShaderGL() {
        jl_Object.call(this);
        this.$obj4 = null;
    }
    function m_ProgramGL() {
        var a = this; jl_Object.call(a);
        a.$obj5 = null;
        a.$hashcode = 0;
    }
    var m_ProgramGL_progId = 0;
    function m_ProgramGL__clinit_() {
        m_ProgramGL_progId = 0;
    }
    function m_UniformGL() {
        jl_Object.call(this);
        this.$obj3 = null;
    }
    function m_StreamBuffer$StreamBufferInstance() {
        var a = this; jl_Object.call(a);
        a.$vertexArray = null;
        a.$vertexBuffer = null;
        a.$vertexBufferSize = 0;
        a.$bindQuad16 = 0;
        a.$bindQuad32 = 0;
    }
    function otrfm_AbstractInMemoryVirtualFile() {
        var a = this; jl_Object.call(a);
        a.$name8 = null;
        a.$parent = null;
        a.$lastModified = Long_ZERO;
        a.$readOnly3 = 0;
    }
    function otrfm_AbstractInMemoryVirtualFile__init_($this, $name) {
        $this.$lastModified = jl_System_currentTimeMillis();
        $this.$name8 = $name;
    }
    function otrfm_AbstractInMemoryVirtualFile_modify($this) {
        $this.$lastModified = jl_System_currentTimeMillis();
    }
    function otrfm_InMemoryVirtualDirectory() {
        otrfm_AbstractInMemoryVirtualFile.call(this);
        this.$children = null;
    }
    function otrfm_InMemoryVirtualDirectory_isDirectory($this) {
        return 1;
    }
    function otrfm_InMemoryVirtualDirectory_isFile($this) {
        return 0;
    }
    function otrfm_InMemoryVirtualDirectory_getChildFile($this, $fileName) {
        var var$2, var$3, var$4;
        var$2 = $this.$children;
        var$3 = null;
        if ($fileName === null)
            $fileName = ju_HashMap_findNullKeyEntry(var$2);
        else {
            var$4 = jl_String_hashCode($fileName);
            $fileName = ju_HashMap_findNonNullKeyEntry(var$2, $fileName, (var$4 & 2147483647) % var$2.$elementData.data.length | 0, var$4);
        }
        if ($fileName !== null) {
            if (var$2.$accessOrder)
                ju_LinkedHashMap_linkEntry(var$2, $fileName, 0);
            var$3 = $fileName.$value0;
        }
        return var$3;
    }
    function otrfm_InMemoryVirtualDirectory_createAccessor($this, $readable, $writable, $append) {
        return null;
    }
    function otrfm_InMemoryVirtualDirectory_createFile($this, $fileName) {
        var $file, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
        if (!($this.$readOnly3 ? 0 : 1)) {
            $fileName = new ji_IOException;
            jl_Throwable__init_($fileName, $rt_s(372));
            $rt_throw($fileName);
        }
        if (ju_HashMap_containsKey($this.$children, $fileName))
            return null;
        $file = new otrfm_InMemoryVirtualFile;
        otrfm_AbstractInMemoryVirtualFile__init_($file, $fileName);
        $file.$data1 = $rt_createByteArray(0);
        if (ju_HashMap_containsKey($this.$children, $file.$name8)) {
            $fileName = new jl_IllegalArgumentException;
            var$3 = $file.$name8;
            $file = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($file);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($file, $rt_s(373)), var$3), $rt_s(374));
            jl_Throwable__init_($fileName, jl_AbstractStringBuilder_toString($file));
            $rt_throw($fileName);
        }
        $file.$parent = $this;
        $fileName = $this.$children;
        var$3 = $file.$name8;
        var$4 = $fileName.$elementCount;
        var$5 = $fileName.$accessOrder;
        if (!var$4) {
            $fileName.$head0 = null;
            $fileName.$tail = null;
        }
        var$6 = var$3 !== null ? jl_String_hashCode(var$3) : 0;
        var$7 = var$6 & 2147483647;
        var$8 = var$7 % $fileName.$elementData.data.length | 0;
        var$9 = var$3 === null ? ju_HashMap_findNullKeyEntry($fileName) : ju_HashMap_findNonNullKeyEntry($fileName, var$3, var$8, var$6);
        if (var$9 === null) {
            $fileName.$modCount1 = $fileName.$modCount1 + 1 | 0;
            var$10 = $fileName.$elementCount + 1 | 0;
            $fileName.$elementCount = var$10;
            if (var$10 > $fileName.$threshold) {
                ju_HashMap_rehash($fileName);
                var$8 = var$7 % $fileName.$elementData.data.length | 0;
            }
            var$9 = new ju_LinkedHashMap$LinkedHashMapEntry;
            ju_HashMap$HashEntry__init_0(var$9, var$3, var$6);
            var$9.$chainForward = null;
            var$9.$chainBackward = null;
            var$11 = $fileName.$elementData.data;
            var$9.$next2 = var$11[var$8];
            var$11[var$8] = var$9;
            var$3 = $fileName.$tail;
            if (var$3 === null)
                $fileName.$head0 = var$9;
            else
                var$3.$chainForward = var$9;
            var$9.$chainBackward = var$3;
            $fileName.$tail = var$9;
        } else if (var$5)
            ju_LinkedHashMap_linkEntry($fileName, var$9, 0);
        var$9.$value0 = $file;
        otrfm_AbstractInMemoryVirtualFile_modify($this);
        return $file;
    }
    function jnc_CharsetDecoder() {
        var a = this; jl_Object.call(a);
        a.$charset1 = null;
        a.$averageCharsPerByte = 0.0;
        a.$maxCharsPerByte = 0.0;
        a.$replacement0 = null;
        a.$malformedAction0 = null;
        a.$unmappableAction0 = null;
        a.$state = 0;
    }
    function jnc_CharsetDecoder_onMalformedInput($this, $newAction) {
        var var$2;
        if ($newAction !== null) {
            $this.$malformedAction0 = $newAction;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(375));
        $rt_throw(var$2);
    }
    function jnc_CharsetDecoder_implOnMalformedInput($this, $newAction) {}
    function jnc_CharsetDecoder_onUnmappableCharacter($this, $newAction) {
        var var$2;
        if ($newAction !== null) {
            $this.$unmappableAction0 = $newAction;
            return $this;
        }
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(375));
        $rt_throw(var$2);
    }
    function jnc_CharsetDecoder_implOnUnmappableCharacter($this, $newAction) {}
    function jnc_CharsetDecoder_decode0($this, $in, $out, $endOfInput) {
        var var$4, $result, $e, $$je;
        var$4 = $this.$state;
        if (!(var$4 == 2 && !$endOfInput) && var$4 != 3) {
            $this.$state = $endOfInput ? 2 : 1;
            while (true) {
                try {
                    $result = jnci_BufferedDecoder_decodeLoop($this, $in, $out);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_RuntimeException) {
                        $e = $$je;
                        $in = new jnc_CoderMalfunctionError;
                        jl_Throwable__init_4($in, $e);
                        $rt_throw($in);
                    } else {
                        throw $$e;
                    }
                }
                if (jnc_CoderResult_isOverflow($result))
                    return $result;
                if (jnc_CoderResult_isUnderflow($result)) {
                    if ($endOfInput && jn_Buffer_hasRemaining($in)) {
                        $e = $this.$malformedAction0;
                        jnc_CodingErrorAction_$callClinit();
                        if ($e === jnc_CodingErrorAction_REPORT)
                            return jnc_CoderResult_malformedForLength(jn_Buffer_remaining($in));
                        if (jn_Buffer_remaining($out) <= jl_String_length($this.$replacement0))
                            return jnc_CoderResult_OVERFLOW;
                        jn_Buffer_position0($in, $in.$position0 + jn_Buffer_remaining($in) | 0);
                        if ($this.$malformedAction0 === jnc_CodingErrorAction_REPLACE)
                            jn_CharBuffer_put($out, $this.$replacement0);
                    }
                    return $result;
                }
                if (jnc_CoderResult_isMalformed($result)) {
                    $e = $this.$malformedAction0;
                    jnc_CodingErrorAction_$callClinit();
                    if ($e === jnc_CodingErrorAction_REPORT)
                        return $result;
                    if ($e === jnc_CodingErrorAction_REPLACE) {
                        if (jn_Buffer_remaining($out) < jl_String_length($this.$replacement0))
                            return jnc_CoderResult_OVERFLOW;
                        jn_CharBuffer_put($out, $this.$replacement0);
                    }
                    jn_Buffer_position0($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
                } else if (jnc_CoderResult_isUnmappable($result)) {
                    $e = $this.$unmappableAction0;
                    jnc_CodingErrorAction_$callClinit();
                    if ($e === jnc_CodingErrorAction_REPORT)
                        break;
                    if ($e === jnc_CodingErrorAction_REPLACE) {
                        if (jn_Buffer_remaining($out) < jl_String_length($this.$replacement0))
                            return jnc_CoderResult_OVERFLOW;
                        jn_CharBuffer_put($out, $this.$replacement0);
                    }
                    jn_Buffer_position0($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
                }
            }
            return $result;
        }
        $in = new jl_IllegalStateException;
        jl_Throwable__init_0($in);
        $rt_throw($in);
    }
    function jnc_CharsetDecoder_flush($this, $out) {
        var var$2;
        var$2 = $this.$state;
        if (var$2 != 3 && var$2 != 2) {
            $out = new jl_IllegalStateException;
            jl_Throwable__init_0($out);
            $rt_throw($out);
        }
        $this.$state = 3;
        return jnc_CoderResult_UNDERFLOW;
    }
    function jnc_CharsetDecoder_reset($this) {
        $this.$state = 0;
        return $this;
    }
    function jnc_CharsetDecoder_decode($this, $in) {
        var var$2, $out, $result;
        var$2 = $this.$state;
        if (var$2 && var$2 != 3) {
            $in = new jl_IllegalStateException;
            jl_Throwable__init_0($in);
            $rt_throw($in);
        }
        if (!jn_Buffer_remaining($in))
            return jn_CharBuffer_allocate(0);
        if ($this.$state)
            jnc_CharsetDecoder_reset($this);
        $out = jn_CharBuffer_allocate(jl_Math_max(8, jn_Buffer_remaining($in) * $this.$averageCharsPerByte | 0));
        while (true) {
            $result = jnc_CharsetDecoder_decode0($this, $in, $out, 0);
            if (jnc_CoderResult_isUnderflow($result))
                break;
            if (jnc_CoderResult_isOverflow($result))
                $out = jnc_CharsetDecoder_expand($this, $out);
            if (!jnc_CoderResult_isError($result))
                continue;
            jnc_CoderResult_throwException($result);
        }
        $in = jnc_CharsetDecoder_decode0($this, $in, $out, 1);
        if (jnc_CoderResult_isError($in))
            jnc_CoderResult_throwException($in);
        while (!jnc_CoderResult_isUnderflow(jnc_CharsetDecoder_flush($this, $out))) {
            $out = jnc_CharsetDecoder_expand($this, $out);
        }
        jn_Buffer_flip($out);
        return $out;
    }
    function jnc_CharsetDecoder_expand($this, $buffer) {
        var var$2, $result;
        var$2 = $buffer.$array2;
        $result = jn_CharBuffer_wrap0(ju_Arrays_copyOf(var$2, jl_Math_max(8, var$2.data.length * 2 | 0)));
        jn_Buffer_position0($result, $buffer.$position0);
        return $result;
    }
    function jnc_CharsetDecoder_implFlush($this, $out) {
        return jnc_CoderResult_UNDERFLOW;
    }
    function jnc_CharsetDecoder_implReset($this) {}
    var ju_SequencedMap = $rt_classWithoutFields(0);
    function ju_LinkedHashMap() {
        var a = this; ju_HashMap.call(a);
        a.$accessOrder = 0;
        a.$head0 = null;
        a.$tail = null;
    }
    function ju_LinkedHashMap_newElementArray($this, $s) {
        return $rt_createArray(ju_LinkedHashMap$LinkedHashMapEntry, $s);
    }
    function ju_LinkedHashMap_linkEntry($this, $entry, $first) {
        var $n, $p;
        if (!$first) {
            $n = $entry.$chainForward;
            if ($n === null)
                return;
            $p = $entry.$chainBackward;
            if ($p === null)
                $this.$head0 = $n;
            else
                $p.$chainForward = $n;
            $n.$chainBackward = $p;
            $n = $this.$tail;
            if ($n !== null)
                $n.$chainForward = $entry;
            $entry.$chainBackward = $n;
            $entry.$chainForward = null;
            $this.$tail = $entry;
        } else {
            $p = $entry.$chainBackward;
            if ($p === null)
                return;
            $n = $entry.$chainForward;
            if ($n === null)
                $this.$tail = $p;
            else
                $n.$chainBackward = $p;
            $p.$chainForward = $n;
            $n = $this.$head0;
            if ($n !== null)
                $n.$chainBackward = $entry;
            $entry.$chainForward = $n;
            $entry.$chainBackward = null;
            $this.$head0 = $entry;
        }
    }
    var jn_FloatBufferImpl = $rt_classWithoutFields(jn_FloatBuffer);
    function jn_FloatBufferImpl_get($this) {
        var var$1, var$2;
        var$1 = $this.$position0;
        if (var$1 < $this.$limit1) {
            $this.$position0 = var$1 + 1 | 0;
            return $this.$getElement(var$1);
        }
        var$2 = new jn_BufferUnderflowException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    function jn_FloatBufferImpl_put($this, $b) {
        var var$2, var$3;
        if ($this.$readOnly4) {
            var$2 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        var$3 = $this.$position0;
        if (var$3 < $this.$limit1) {
            $this.$position0 = var$3 + 1 | 0;
            $this.$putElement0(var$3, $b);
            return $this;
        }
        var$2 = new jn_BufferOverflowException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    function jn_FloatBufferImpl_isReadOnly($this) {
        return $this.$readOnly4;
    }
    function jn_FloatBufferOverByteBuffer() {
        var a = this; jn_FloatBufferImpl.call(a);
        a.$byteByffer = null;
        a.$readOnly4 = 0;
        a.$start8 = 0;
    }
    function jn_FloatBufferOverByteBuffer__init_($this, $start, $capacity, $byteBuffer, $position, $limit, $readOnly) {
        jn_Buffer__init_($this, $capacity);
        $this.$position0 = $position;
        $this.$limit1 = $limit;
        $this.$start8 = $start;
        $this.$byteByffer = $byteBuffer;
        $this.$readOnly4 = $readOnly;
    }
    function jn_FloatBufferOverByteBuffer_readOnly($this) {
        return $this.$readOnly4;
    }
    var jn_FloatBufferOverByteBufferLittleEndian = $rt_classWithoutFields(jn_FloatBufferOverByteBuffer);
    function jn_FloatBufferOverByteBufferLittleEndian_getElement($this, $index) {
        var var$2;
        var$2 = $this.$byteByffer.$array1.data;
        $index = $this.$start8 + ($index * 4 | 0) | 0;
        return $rt_intBitsToFloat((var$2[$index] & 255) << 24 | (var$2[$index + 1 | 0] & 255) << 16 | (var$2[$index + 2 | 0] & 255) << 8 | var$2[$index + 3 | 0] & 255);
    }
    function jn_FloatBufferOverByteBufferLittleEndian_putElement($this, $index, $f) {
        var $value, var$4;
        $value = jl_Float_floatToIntBits($f);
        var$4 = $this.$byteByffer.$array1.data;
        $index = $this.$start8 + ($index * 4 | 0) | 0;
        var$4[$index] = $value >> 24 << 24 >> 24;
        var$4[$index + 1 | 0] = $value >> 16 << 24 >> 24;
        var$4[$index + 2 | 0] = $value >> 8 << 24 >> 24;
        var$4[$index + 3 | 0] = $value << 24 >> 24;
    }
    var jn_FloatBufferOverByteBufferBigEndian = $rt_classWithoutFields(jn_FloatBufferOverByteBuffer);
    function jn_FloatBufferOverByteBufferBigEndian_getElement($this, $index) {
        var var$2;
        var$2 = $this.$byteByffer.$array1.data;
        $index = $this.$start8 + ($index * 4 | 0) | 0;
        return $rt_intBitsToFloat(var$2[$index] & 255 | (var$2[$index + 1 | 0] & 255) << 8 | (var$2[$index + 2 | 0] & 255) << 16 | (var$2[$index + 3 | 0] & 255) << 24);
    }
    function jn_FloatBufferOverByteBufferBigEndian_putElement($this, $index, $f) {
        var $value, var$4;
        $value = jl_Float_floatToIntBits($f);
        var$4 = $this.$byteByffer.$array1.data;
        $index = $this.$start8 + ($index * 4 | 0) | 0;
        var$4[$index] = $value << 24 >> 24;
        var$4[$index + 1 | 0] = $value >> 8 << 24 >> 24;
        var$4[$index + 2 | 0] = $value >> 16 << 24 >> 24;
        var$4[$index + 3 | 0] = $value >> 24 << 24 >> 24;
    }
    var jn_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException);
    function jn_IntBufferOverByteBuffer() {
        var a = this; jn_IntBufferImpl.call(a);
        a.$byteByffer0 = null;
        a.$readOnly5 = 0;
        a.$start9 = 0;
    }
    function jn_IntBufferOverByteBuffer__init_($this, $start, $capacity, $byteBuffer, $position, $limit, $readOnly) {
        jn_IntBufferImpl__init_($this, $capacity, $position, $limit);
        $this.$start9 = $start;
        $this.$byteByffer0 = $byteBuffer;
        $this.$readOnly5 = $readOnly;
    }
    function jn_IntBufferOverByteBuffer_readOnly($this) {
        return $this.$readOnly5;
    }
    var jn_IntBufferOverByteBufferLittleEndian = $rt_classWithoutFields(jn_IntBufferOverByteBuffer);
    function jn_IntBufferOverByteBufferLittleEndian_getElement($this, $index) {
        var var$2;
        var$2 = $this.$byteByffer0.$array1.data;
        $index = $this.$start9 + ($index * 4 | 0) | 0;
        return var$2[$index] & 255 | (var$2[$index + 1 | 0] & 255) << 8 | (var$2[$index + 2 | 0] & 255) << 16 | (var$2[$index + 3 | 0] & 255) << 24;
    }
    function jn_IntBufferOverByteBufferLittleEndian_putElement($this, $index, $value) {
        var var$3;
        var$3 = $this.$byteByffer0.$array1.data;
        $index = $this.$start9 + ($index * 4 | 0) | 0;
        var$3[$index] = $value << 24 >> 24;
        var$3[$index + 1 | 0] = $value >> 8 << 24 >> 24;
        var$3[$index + 2 | 0] = $value >> 16 << 24 >> 24;
        var$3[$index + 3 | 0] = $value >> 24 << 24 >> 24;
    }
    var jn_IntBufferOverByteBufferBigEndian = $rt_classWithoutFields(jn_IntBufferOverByteBuffer);
    function jn_IntBufferOverByteBufferBigEndian_getElement($this, $index) {
        var var$2;
        var$2 = $this.$byteByffer0.$array1.data;
        $index = $this.$start9 + ($index * 4 | 0) | 0;
        return (var$2[$index] & 255) << 24 | (var$2[$index + 1 | 0] & 255) << 16 | (var$2[$index + 2 | 0] & 255) << 8 | var$2[$index + 3 | 0] & 255;
    }
    function jn_IntBufferOverByteBufferBigEndian_putElement($this, $index, $value) {
        var var$3;
        var$3 = $this.$byteByffer0.$array1.data;
        $index = $this.$start9 + ($index * 4 | 0) | 0;
        var$3[$index] = $value >> 24 << 24 >> 24;
        var$3[$index + 1 | 0] = $value >> 16 << 24 >> 24;
        var$3[$index + 2 | 0] = $value >> 8 << 24 >> 24;
        var$3[$index + 3 | 0] = $value << 24 >> 24;
    }
    var jnc_CharacterCodingException = $rt_classWithoutFields(ji_IOException);
    var jl_AssertionError = $rt_classWithoutFields(jl_Error);
    var jl_UnsupportedOperationException = $rt_classWithoutFields(jl_RuntimeException);
    var jn_ReadOnlyBufferException = $rt_classWithoutFields(jl_UnsupportedOperationException);
    var jn_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
    function ju_LinkedHashMap$LinkedHashMapEntry() {
        var a = this; ju_HashMap$HashEntry.call(a);
        a.$chainForward = null;
        a.$chainBackward = null;
    }
    function cmmlg_LevelGenerator() {
        var a = this; jl_Object.call(a);
        a.$progressBar0 = null;
        a.$width6 = 0;
        a.$depth2 = 0;
        a.$height6 = 0;
        a.$random0 = null;
        a.$blocks1 = null;
        a.$waterLevel0 = 0;
        a.$h = null;
    }
    function cmmlg_LevelGenerator_generate($this, $var1, $var2, $var3, $var4) {
        var $var6, $var7, $var8, var$8, $var10, $var11, $var49, $var51, $var12, $var15, var$15, $var13, $var46, $var48, $var54, $var53, $var24, $var63, $var21, $var60, $var57, var$26, var$27, var$28, $var25, $var26, $var27, $var28, $var23, $var55, $var59, $var56, $var61, $var64, $var29, $var30, $var31, $var32, $var43, $var50, $var33, $var38, $var40, $var35, var$49, $var36, $var37, $var39, $var66, $var9, $var58, $var27_0, $var63_0, $var62, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var62 = $thread.pop();$var63_0 = $thread.pop();$var27_0 = $thread.pop();$var58 = $thread.pop();$var9 = $thread.pop();$var66 = $thread.pop();$var39 = $thread.pop();$var37 = $thread.pop();$var36 = $thread.pop();var$49 = $thread.pop();$var35 = $thread.pop();$var40 = $thread.pop();$var38 = $thread.pop();$var33 = $thread.pop();$var50 = $thread.pop();$var43 = $thread.pop();$var32 = $thread.pop();$var31 = $thread.pop();$var30 = $thread.pop();$var29 = $thread.pop();$var64 = $thread.pop();$var61
            = $thread.pop();$var56 = $thread.pop();$var59 = $thread.pop();$var55 = $thread.pop();$var23 = $thread.pop();$var28 = $thread.pop();$var27 = $thread.pop();$var26 = $thread.pop();$var25 = $thread.pop();var$28 = $thread.pop();var$27 = $thread.pop();var$26 = $thread.pop();$var57 = $thread.pop();$var60 = $thread.pop();$var21 = $thread.pop();$var63 = $thread.pop();$var24 = $thread.pop();$var53 = $thread.pop();$var54 = $thread.pop();$var48 = $thread.pop();$var46 = $thread.pop();$var13 = $thread.pop();var$15
            = $thread.pop();$var15 = $thread.pop();$var12 = $thread.pop();$var51 = $thread.pop();$var49 = $thread.pop();$var11 = $thread.pop();$var10 = $thread.pop();var$8 = $thread.pop();$var8 = $thread.pop();$var7 = $thread.pop();$var6 = $thread.pop();$var4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmm_ProgressBarDisplay_setTitle($this.$progressBar0, $rt_s(376));
            $this.$width6 = $var2;
            $this.$depth2 = $var3;
            $this.$height6 = 64;
            $this.$waterLevel0 = 32;
            $this.$blocks1 = $rt_createByteArray($rt_imul($var2, $var3) << 6);
            $var6 = $this.$progressBar0;
            $var7 = $rt_s(377);
            $ptr = 1;
        case 1:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var6 = cmmlgn_CombinedNoise__init_(cmmlgn_OctaveNoise__init_($this.$random0, 8), cmmlgn_OctaveNoise__init_($this.$random0, 8));
            $var7 = cmmlgn_CombinedNoise__init_(cmmlgn_OctaveNoise__init_($this.$random0, 8), cmmlgn_OctaveNoise__init_($this.$random0, 8));
            $var8 = cmmlgn_OctaveNoise__init_($this.$random0, 6);
            var$8 = $rt_createIntArray($rt_imul($this.$width6, $this.$depth2)).data;
            $var10 = 1.2999999523162842;
            $var11 = 0;
            $var4 = $this.$width6;
            if ($var11 >= $var4) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(378);
                $ptr = 2;
                continue main;
            }
            $var4 = ($var11 * 100 | 0) / ($var4 - 1 | 0) | 0;
            $ptr = 3;
            continue main;
        case 2:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var6 = cmmlgn_CombinedNoise__init_(cmmlgn_OctaveNoise__init_($this.$random0, 8), cmmlgn_OctaveNoise__init_($this.$random0, 8));
            $var49 = cmmlgn_CombinedNoise__init_(cmmlgn_OctaveNoise__init_($this.$random0, 8), cmmlgn_OctaveNoise__init_($this.$random0, 8));
            $var51 = 0;
            $var4 = $this.$width6;
            if ($var51 >= $var4) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(379);
                $ptr = 4;
                continue main;
            }
            $var4 = ($var51 * 100 | 0) / ($var4 - 1 | 0) | 0;
            $ptr = 5;
            continue main;
        case 3:
            cmmlg_LevelGenerator_setProgress($this, $var4);
            if ($rt_suspending()) {
                break main;
            }
            $var12 = 0;
            while ($var12 < $this.$depth2) {
                $var15 = $var11 * $var10;
                var$15 = $var12 * $var10;
                $var13 = cmmlgn_CombinedNoise_compute($var6, $var15, var$15) / 6.0 + (-4.0);
                $var15 = cmmlgn_CombinedNoise_compute($var7, $var15, var$15) / 5.0 + 10.0 + (-4.0);
                if (cmmlgn_OctaveNoise_compute($var8, $var11, $var12) / 8.0 > 0.0)
                    $var15 = $var13;
                $var15 = jl_Math_max0($var13, $var15) / 2.0;
                if ($var15 < 0.0)
                    $var15 = $var15 * 0.8;
                var$8[$var11 + $rt_imul($var12, $this.$width6) | 0] = $var15 | 0;
                $var12 = $var12 + 1 | 0;
            }
            $var11 = $var11 + 1 | 0;
            $var4 = $this.$width6;
            if ($var11 >= $var4) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(378);
                $ptr = 2;
                continue main;
            }
            $var4 = ($var11 * 100 | 0) / ($var4 - 1 | 0) | 0;
            continue main;
        case 4:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var46 = $this.$width6;
            $var48 = $this.$depth2;
            $var54 = $this.$height6;
            $var53 = cmmlgn_OctaveNoise__init_($this.$random0, 8);
            $var24 = 0;
            $var63 = $var54 - 2 | 0;
            if ($var24 >= $var46) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(380);
                $ptr = 6;
                continue main;
            }
            $var4 = ($var24 * 100 | 0) / ($this.$width6 - 1 | 0) | 0;
            $ptr = 7;
            continue main;
        case 5:
            cmmlg_LevelGenerator_setProgress($this, $var4);
            if ($rt_suspending()) {
                break main;
            }
            $var54 = 0;
            while ($var54 < $this.$depth2) {
                $var15 = $var51 << 1;
                var$15 = $var54 << 1;
                $var21 = cmmlgn_CombinedNoise_compute($var6, $var15, var$15) / 8.0;
                $var12 = cmmlgn_CombinedNoise_compute($var49, $var15, var$15) <= 0.0 ? 0 : 1;
                if ($var21 > 2.0) {
                    $var4 = $var51 + $rt_imul($var54, $this.$width6) | 0;
                    var$8[$var4] = (((var$8[$var4] - $var12 | 0) / 2 | 0) << 1) + $var12 | 0;
                }
                $var54 = $var54 + 1 | 0;
            }
            $var51 = $var51 + 1 | 0;
            $var4 = $this.$width6;
            if ($var51 >= $var4) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(379);
                $ptr = 4;
                continue main;
            }
            $var4 = ($var51 * 100 | 0) / ($var4 - 1 | 0) | 0;
            continue main;
        case 6:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = $this.$width6;
            $var24 = $this.$depth2;
            $var54 = $this.$height6;
            $var60 = (($rt_imul($rt_imul($var4, $var24), $var54) / 256 | 0) / 64 | 0) << 1;
            $var57 = 0;
            $var51 = $var60 - 1 | 0;
            var$26 = $var4;
            var$27 = $var54;
            var$28 = $var24;
            if ($var57 < $var60) {
                $var4 = (($var57 * 100 | 0) / $var51 | 0) / 4 | 0;
                $ptr = 13;
                continue main;
            }
            cmmlt_Block_$callClinit();
            $var4 = cmmlt_Block_COAL_ORE.$id;
            $var24 = 90;
            $var54 = 1;
            $var60 = 4;
            $ptr = 8;
            continue main;
        case 7:
            cmmlg_LevelGenerator_setProgress($this, $var4);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = 0;
            while ($var4 < $var48) {
                $var12 = (cmmlgn_OctaveNoise_compute($var53, $var24, $var4) / 24.0 | 0) - 4 | 0;
                $var60 = $var24 + $rt_imul($var4, $var46) | 0;
                $var57 = var$8[$var60] + $this.$waterLevel0 | 0;
                $var25 = $var57 + $var12 | 0;
                var$8[$var60] = jl_Math_max($var57, $var25);
                if (var$8[$var60] > $var63)
                    var$8[$var60] = $var63;
                if (var$8[$var60] < 1)
                    var$8[$var60] = 1;
                $var26 = 0;
                while ($var26 < $var54) {
                    $var27 = $rt_imul($rt_imul($var26, $this.$depth2) + $var4 | 0, $this.$width6) + $var24 | 0;
                    $var28 = 0;
                    if ($var26 <= $var57) {
                        cmmlt_Block_$callClinit();
                        $var28 = cmmlt_Block_DIRT.$id;
                    }
                    if ($var26 <= $var25) {
                        cmmlt_Block_$callClinit();
                        $var28 = cmmlt_Block_STONE.$id;
                    }
                    if (!$var26) {
                        cmmlt_Block_$callClinit();
                        $var28 = cmmlt_Block_LAVA.$id;
                    }
                    $this.$blocks1.data[$var27] = $var28 << 24 >> 24;
                    $var26 = $var26 + 1 | 0;
                }
                $var4 = $var4 + 1 | 0;
            }
            $var24 = $var24 + 1 | 0;
            if ($var24 >= $var46) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(380);
                $ptr = 6;
                continue main;
            }
            $var4 = ($var24 * 100 | 0) / ($this.$width6 - 1 | 0) | 0;
            continue main;
        case 8:
            cmmlg_LevelGenerator_populateOre($this, $var4, $var24, $var54, $var60);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = cmmlt_Block_IRON_ORE.$id;
            $var24 = 70;
            $var54 = 2;
            $var60 = 4;
            $ptr = 9;
        case 9:
            cmmlg_LevelGenerator_populateOre($this, $var4, $var24, $var54, $var60);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = cmmlt_Block_GOLD_ORE.$id;
            $var24 = 50;
            $var54 = 3;
            $var60 = 4;
            $ptr = 10;
        case 10:
            cmmlg_LevelGenerator_populateOre($this, $var4, $var24, $var54, $var60);
            if ($rt_suspending()) {
                break main;
            }
            $var6 = $this.$progressBar0;
            $var7 = $rt_s(381);
            $ptr = 11;
        case 11:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = cmmlt_Block_STATIONARY_WATER.$id;
            $var24 = 0;
            $ptr = 12;
        case 12:
            cmmlg_LevelGenerator_setProgress($this, $var24);
            if ($rt_suspending()) {
                break main;
            }
            $var24 = 0;
            while ($var24 < $this.$width6) {
                cmmlg_LevelGenerator_flood($this, $var24, ($this.$height6 / 2 | 0) - 1 | 0, 0, 0, $var4);
                cmmlg_LevelGenerator_flood($this, $var24, ($this.$height6 / 2 | 0) - 1 | 0, $this.$depth2 - 1 | 0, 0, $var4);
                $var24 = $var24 + 1 | 0;
            }
            $var24 = 0;
            while (true) {
                $var54 = $this.$depth2;
                if ($var24 >= $var54)
                    break;
                cmmlg_LevelGenerator_flood($this, 0, ($this.$height6 / 2 | 0) - 1 | 0, $var24, 0, $var4);
                cmmlg_LevelGenerator_flood($this, $this.$width6 - 1 | 0, ($this.$height6 / 2 | 0) - 1 | 0, $var24, 0, $var4);
                $var24 = $var24 + 1 | 0;
            }
            $var24 = $rt_imul($this.$width6, $var54) / 8000 | 0;
            $var54 = 0;
            $var57 = $var24 - 1 | 0;
            while ($var54 < $var24) {
                if (!($var54 % 100 | 0)) {
                    $var60 = ($var54 * 100 | 0) / $var57 | 0;
                    $ptr = 16;
                    continue main;
                }
                $var60 = ju_Random_nextInt($this.$random0, $this.$width6);
                $var12 = ($this.$waterLevel0 - 1 | 0) - ju_Random_nextInt($this.$random0, 2) | 0;
                $var23 = ju_Random_nextInt($this.$random0, $this.$depth2);
                if (!$this.$blocks1.data[$rt_imul($rt_imul($var12, $this.$depth2) + $var23 | 0, $this.$width6) + $var60 | 0])
                    cmmlg_LevelGenerator_flood($this, $var60, $var12, $var23, 0, $var4);
                $var54 = $var54 + 1 | 0;
            }
            $var4 = 100;
            $ptr = 14;
            continue main;
        case 13:
            cmmlg_LevelGenerator_setProgress($this, $var4);
            if ($rt_suspending()) {
                break main;
            }
            $var55 = ju_Random_nextFloat($this.$random0) * var$26;
            $var59 = ju_Random_nextFloat($this.$random0) * var$27;
            $var56 = ju_Random_nextFloat($this.$random0) * var$28;
            $var26 = (ju_Random_nextFloat($this.$random0) + ju_Random_nextFloat($this.$random0)) * 200.0 | 0;
            $var61 = ju_Random_nextFloat($this.$random0) * 3.1415927410125732 * 2.0;
            $var64 = 0.0;
            $var29 = ju_Random_nextFloat($this.$random0) * 3.1415927410125732 * 2.0;
            $var30 = 0.0;
            $var31 = ju_Random_nextFloat($this.$random0) * ju_Random_nextFloat($this.$random0);
            $var32 = 0;
            $var10 = $var26;
            while ($var32 < $var26) {
                a: {
                    $var55 = $var55 + cmu_MathHelper_sin($var61) * cmu_MathHelper_cos($var29);
                    $var56 = $var56 + cmu_MathHelper_cos($var61) * cmu_MathHelper_cos($var29);
                    $var59 = $var59 + cmu_MathHelper_sin($var29);
                    $var61 = $var61 + $var64 * 0.20000000298023224;
                    $var64 = $var64 * 0.8999999761581421 + ju_Random_nextFloat($this.$random0) - ju_Random_nextFloat($this.$random0);
                    $var29 = ($var29 + $var30 * 0.5) * 0.5;
                    $var30 = $var30 * 0.75 + ju_Random_nextFloat($this.$random0) - ju_Random_nextFloat($this.$random0);
                    if (ju_Random_nextFloat($this.$random0) >= 0.25) {
                        $var43 = $var55 + (ju_Random_nextFloat($this.$random0) * 4.0 - 2.0) * 0.20000000298023224;
                        $var50 = $var59 + (ju_Random_nextFloat($this.$random0) * 4.0 - 2.0) * 0.20000000298023224;
                        $var33 = $var56 + (ju_Random_nextFloat($this.$random0) * 4.0 - 2.0) * 0.20000000298023224;
                        $var38 = $this.$height6;
                        $var40 = 1.2000000476837158 + (($var38 - $var50) / $var38 * 3.5 + 1.0) * $var31;
                        $var38 = cmu_MathHelper_sin($var32 * 3.1415927410125732 / $var10) * $var40;
                        $var35 = $var43 - $var38 | 0;
                        $var4 = $var43 + $var38 | 0;
                        $var54 = $var50 - $var38 | 0;
                        $var63 = $var50 + $var38 | 0;
                        $var27 = $var33 - $var38 | 0;
                        $var11 = $var33 + $var38 | 0;
                        var$49 = $var38 * $var38;
                        while (true) {
                            if ($var35 > $var4)
                                break a;
                            $var36 = $var54;
                            while ($var36 <= $var63) {
                                $var37 = $var27;
                                while ($var37 <= $var11) {
                                    b: {
                                        $var38 = $var35 - $var43;
                                        $var39 = $var36 - $var50;
                                        $var40 = $var37 - $var33;
                                        if ($var38 * $var38 + $var39 * $var39 * 2.0 + $var40 * $var40 >= var$49)
                                            break b;
                                        if ($var35 < 1)
                                            break b;
                                        if ($var36 < 1)
                                            break b;
                                        if ($var37 < 1)
                                            break b;
                                        $var24 = $this.$width6;
                                        if ($var35 >= ($var24 - 1 | 0))
                                            break b;
                                        if ($var36 >= ($this.$height6 - 1 | 0))
                                            break b;
                                        $var66 = $this.$depth2;
                                        if ($var37 >= ($var66 - 1 | 0))
                                            break b;
                                        $var66 = $rt_imul($rt_imul($var36, $var66) + $var37 | 0, $var24) + $var35 | 0;
                                        $var9 = $this.$blocks1.data;
                                        $var24 = $var9[$var66];
                                        cmmlt_Block_$callClinit();
                                        if ($var24 != cmmlt_Block_STONE.$id)
                                            break b;
                                        $var9[$var66] = 0;
                                    }
                                    $var37 = $var37 + 1 | 0;
                                }
                                $var36 = $var36 + 1 | 0;
                            }
                            $var35 = $var35 + 1 | 0;
                        }
                    }
                }
                $var32 = $var32 + 1 | 0;
            }
            $var57 = $var57 + 1 | 0;
            if ($var57 < $var60) {
                $var4 = (($var57 * 100 | 0) / $var51 | 0) / 4 | 0;
                continue main;
            }
            cmmlt_Block_$callClinit();
            $var4 = cmmlt_Block_COAL_ORE.$id;
            $var24 = 90;
            $var54 = 1;
            $var60 = 4;
            $ptr = 8;
            continue main;
        case 14:
            cmmlg_LevelGenerator_setProgress($this, $var4);
            if ($rt_suspending()) {
                break main;
            }
            $var6 = $this.$progressBar0;
            $var7 = $rt_s(382);
            $ptr = 15;
        case 15:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = $rt_imul($rt_imul($this.$width6, $this.$depth2), $this.$height6) / 20000 | 0;
            $var24 = 0;
            $var60 = $var4 - 1 | 0;
            while ($var24 < $var4) {
                if (!($var24 % 100 | 0)) {
                    $var54 = ($var24 * 100 | 0) / $var60 | 0;
                    $ptr = 19;
                    continue main;
                }
                $var54 = ju_Random_nextInt($this.$random0, $this.$width6);
                $var57 = ju_Random_nextFloat($this.$random0) * ju_Random_nextFloat($this.$random0) * ($this.$waterLevel0 - 3 | 0) | 0;
                $var35 = ju_Random_nextInt($this.$random0, $this.$depth2);
                if (!$this.$blocks1.data[$rt_imul($rt_imul($var57, $this.$depth2) + $var35 | 0, $this.$width6) + $var54 | 0])
                    cmmlg_LevelGenerator_flood($this, $var54, $var57, $var35, 0, cmmlt_Block_STATIONARY_LAVA.$id);
                $var24 = $var24 + 1 | 0;
            }
            $var4 = 100;
            $ptr = 17;
            continue main;
        case 16:
            cmmlg_LevelGenerator_setProgress($this, $var60);
            if ($rt_suspending()) {
                break main;
            }
            while (true) {
                $var60 = ju_Random_nextInt($this.$random0, $this.$width6);
                $var12 = ($this.$waterLevel0 - 1 | 0) - ju_Random_nextInt($this.$random0, 2) | 0;
                $var23 = ju_Random_nextInt($this.$random0, $this.$depth2);
                if (!$this.$blocks1.data[$rt_imul($rt_imul($var12, $this.$depth2) + $var23 | 0, $this.$width6) + $var60 | 0])
                    cmmlg_LevelGenerator_flood($this, $var60, $var12, $var23, 0, $var4);
                $var54 = $var54 + 1 | 0;
                if ($var54 >= $var24)
                    break;
                if ($var54 % 100 | 0)
                    continue;
                else {
                    $var60 = ($var54 * 100 | 0) / $var57 | 0;
                    continue main;
                }
            }
            $var4 = 100;
            $ptr = 14;
            continue main;
        case 17:
            cmmlg_LevelGenerator_setProgress($this, $var4);
            if ($rt_suspending()) {
                break main;
            }
            $var6 = $this.$progressBar0;
            $var7 = $rt_s(383);
            $ptr = 18;
        case 18:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = $this.$width6;
            $var24 = $this.$depth2;
            $var54 = $this.$height6;
            $var7 = cmmlgn_OctaveNoise__init_($this.$random0, 8);
            $var58 = cmmlgn_OctaveNoise__init_($this.$random0, 8);
            $var11 = 0;
            if ($var11 >= $var4) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(384);
                $ptr = 20;
                continue main;
            }
            $var60 = ($var11 * 100 | 0) / ($this.$width6 - 1 | 0) | 0;
            $ptr = 21;
            continue main;
        case 19:
            cmmlg_LevelGenerator_setProgress($this, $var54);
            if ($rt_suspending()) {
                break main;
            }
            while (true) {
                $var54 = ju_Random_nextInt($this.$random0, $this.$width6);
                $var57 = ju_Random_nextFloat($this.$random0) * ju_Random_nextFloat($this.$random0) * ($this.$waterLevel0 - 3 | 0) | 0;
                $var35 = ju_Random_nextInt($this.$random0, $this.$depth2);
                if (!$this.$blocks1.data[$rt_imul($rt_imul($var57, $this.$depth2) + $var35 | 0, $this.$width6) + $var54 | 0])
                    cmmlg_LevelGenerator_flood($this, $var54, $var57, $var35, 0, cmmlt_Block_STATIONARY_LAVA.$id);
                $var24 = $var24 + 1 | 0;
                if ($var24 >= $var4)
                    break;
                if ($var24 % 100 | 0)
                    continue;
                else {
                    $var54 = ($var24 * 100 | 0) / $var60 | 0;
                    continue main;
                }
            }
            $var4 = 100;
            $ptr = 17;
            continue main;
        case 20:
            cmm_ProgressBarDisplay_setText($var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var4 = $this.$width6;
            $var24 = $rt_imul($var4, $this.$depth2) / 3000 | 0;
            $var54 = 0;
            $var35 = $var24 - 1 | 0;
            if ($var54 < $var24) {
                $var60 = ju_Random_nextInt($this.$random0, 2);
                $var57 = ($var54 * 50 | 0) / $var35 | 0;
                $ptr = 22;
                continue main;
            }
            $var4 = $this.$width6;
            $var24 = $rt_imul($rt_imul($var4, $this.$depth2), $this.$height6) / 2000 | 0;
            $var54 = 0;
            $var35 = $var24 - 1 | 0;
            if ($var54 < $var24) {
                $var60 = ju_Random_nextInt($this.$random0, 2);
                $var57 = (($var54 * 50 | 0) / $var35 | 0) + 50 | 0;
                $ptr = 23;
                continue main;
            }
            $var6 = cmml_Level__init_();
            $var6.$waterLevel = $this.$waterLevel0;
            cmml_Level_setData($var6, $var2, 64, $var3, $this.$blocks1);
            $var6.$createTime = jl_System_currentTimeMillis();
            $var6.$creator = $var1;
            $var6.$name5 = $rt_s(385);
            $var2 = $this.$width6;
            $var3 = $rt_imul($var2, $this.$depth2) / 4000 | 0;
            $var4 = 0;
            $var54 = $var3 - 1 | 0;
            if ($var4 >= $var3)
                return $var6;
            $var24 = (($var4 * 50 | 0) / $var54 | 0) + 50 | 0;
            $ptr = 24;
            continue main;
        case 21:
            cmmlg_LevelGenerator_setProgress($this, $var60);
            if ($rt_suspending()) {
                break main;
            }
            $var12 = 0;
            while ($var12 < $var24) {
                $var13 = $var11;
                $var21 = $var12;
                $var60 = cmmlgn_OctaveNoise_compute($var7, $var13, $var21) <= 8.0 ? 0 : 1;
                $var57 = cmmlgn_OctaveNoise_compute($var58, $var13, $var21) <= 12.0 ? 0 : 1;
                $var35 = var$8[$var11 + $rt_imul($var12, $var4) | 0];
                $var63 = $this.$depth2;
                $var27 = $rt_imul($var35, $var63) + $var12 | 0;
                $var36 = $this.$width6;
                $var27 = $rt_imul($var27, $var36) + $var11 | 0;
                $var9 = $this.$blocks1.data;
                $var63 = $var9[$rt_imul($rt_imul($var35 + 1 | 0, $var63) + $var12 | 0, $var36) + $var11 | 0] & 255;
                if (!($var63 != cmmlt_Block_WATER.$id && $var63 != cmmlt_Block_STATIONARY_WATER.$id) && $var35 <= (($var54 / 2 | 0) - 1 | 0) && $var57)
                    $var9[$var27] = cmmlt_Block_GRAVEL.$id << 24 >> 24;
                if (!$var63) {
                    $var63 = cmmlt_Block_GRASS.$id;
                    if ($var35 <= (($var54 / 2 | 0) - 1 | 0) && $var60)
                        $var63 = cmmlt_Block_SAND.$id;
                    $var9[$var27] = $var63 << 24 >> 24;
                }
                $var12 = $var12 + 1 | 0;
            }
            $var11 = $var11 + 1 | 0;
            if ($var11 >= $var4) {
                $var6 = $this.$progressBar0;
                $var7 = $rt_s(384);
                $ptr = 20;
                continue main;
            }
            $var60 = ($var11 * 100 | 0) / ($this.$width6 - 1 | 0) | 0;
            continue main;
        case 22:
            cmmlg_LevelGenerator_setProgress($this, $var57);
            if ($rt_suspending()) {
                break main;
            }
            $var57 = ju_Random_nextInt($this.$random0, $this.$width6);
            $var63 = ju_Random_nextInt($this.$random0, $this.$depth2);
            $var12 = 0;
            $var66 = $rt_compare($var60, 2);
            $var23 = $rt_compare($var60, 1);
            while ($var12 < 10) {
                $var26 = 0;
                $var27 = $var57;
                $var36 = $var63;
                while ($var26 < 5) {
                    c: {
                        $var27 = $var27 + (ju_Random_nextInt($this.$random0, 6) - ju_Random_nextInt($this.$random0, 6) | 0) | 0;
                        $var36 = $var36 + (ju_Random_nextInt($this.$random0, 6) - ju_Random_nextInt($this.$random0, 6) | 0) | 0;
                        if ($var66 >= 0 && ju_Random_nextInt($this.$random0, 4))
                            break c;
                        if ($var27 < 0)
                            break c;
                        if ($var36 < 0)
                            break c;
                        $var37 = $this.$width6;
                        if ($var27 >= $var37)
                            break c;
                        $var11 = $this.$depth2;
                        if ($var36 >= $var11)
                            break c;
                        $var27_0 = var$8[$var27 + $rt_imul($var36, $var4) | 0] + 1 | 0;
                        $var9 = $this.$blocks1.data;
                        $var63_0 = $rt_imul($rt_imul($var27_0, $var11) + $var36 | 0, $var37) + $var27 | 0;
                        if ($var9[$var63_0] & 255)
                            break c;
                        if (($var9[$rt_imul($rt_imul($var27_0 - 1 | 0, $var11) + $var36 | 0, $var37) + $var27 | 0] & 255) != cmmlt_Block_GRASS.$id)
                            break c;
                        if (!$var60) {
                            $var9[$var63_0] = cmmlt_Block_DANDELION.$id << 24 >> 24;
                            break c;
                        }
                        if ($var23)
                            break c;
                        $var9[$var63_0] = cmmlt_Block_ROSE.$id << 24 >> 24;
                    }
                    $var26 = $var26 + 1 | 0;
                }
                $var12 = $var12 + 1 | 0;
            }
            $var54 = $var54 + 1 | 0;
            if ($var54 < $var24) {
                $var60 = ju_Random_nextInt($this.$random0, 2);
                $var57 = ($var54 * 50 | 0) / $var35 | 0;
                continue main;
            }
            $var4 = $this.$width6;
            $var24 = $rt_imul($rt_imul($var4, $this.$depth2), $this.$height6) / 2000 | 0;
            $var54 = 0;
            $var35 = $var24 - 1 | 0;
            if ($var54 < $var24) {
                $var60 = ju_Random_nextInt($this.$random0, 2);
                $var57 = (($var54 * 50 | 0) / $var35 | 0) + 50 | 0;
                $ptr = 23;
                continue main;
            }
            $var6 = cmml_Level__init_();
            $var6.$waterLevel = $this.$waterLevel0;
            cmml_Level_setData($var6, $var2, 64, $var3, $this.$blocks1);
            $var6.$createTime = jl_System_currentTimeMillis();
            $var6.$creator = $var1;
            $var6.$name5 = $rt_s(385);
            $var2 = $this.$width6;
            $var3 = $rt_imul($var2, $this.$depth2) / 4000 | 0;
            $var4 = 0;
            $var54 = $var3 - 1 | 0;
            if ($var4 >= $var3)
                return $var6;
            $var24 = (($var4 * 50 | 0) / $var54 | 0) + 50 | 0;
            $ptr = 24;
            continue main;
        case 23:
            cmmlg_LevelGenerator_setProgress($this, $var57);
            if ($rt_suspending()) {
                break main;
            }
            $var57 = ju_Random_nextInt($this.$random0, $this.$width6);
            $var12 = ju_Random_nextInt($this.$random0, $this.$height6);
            $var23 = ju_Random_nextInt($this.$random0, $this.$depth2);
            $var25 = 0;
            $var26 = $rt_compare($var60, 2);
            $var46 = $rt_compare($var60, 1);
            while ($var25 < 20) {
                $var63 = 0;
                $var27 = $var57;
                $var36 = $var12;
                $var37 = $var23;
                while ($var63 < 5) {
                    c: {
                        $var27 = $var27 + (ju_Random_nextInt($this.$random0, 6) - ju_Random_nextInt($this.$random0, 6) | 0) | 0;
                        $var36 = $var36 + (ju_Random_nextInt($this.$random0, 2) - ju_Random_nextInt($this.$random0, 2) | 0) | 0;
                        $var37 = $var37 + (ju_Random_nextInt($this.$random0, 6) - ju_Random_nextInt($this.$random0, 6) | 0) | 0;
                        if ($var26 >= 0 && ju_Random_nextInt($this.$random0, 4))
                            break c;
                        if ($var27 < 0)
                            break c;
                        if ($var37 < 0)
                            break c;
                        if ($var36 < 1)
                            break c;
                        $var11 = $this.$width6;
                        if ($var27 >= $var11)
                            break c;
                        $var66 = $this.$depth2;
                        if ($var37 >= $var66)
                            break c;
                        if ($var36 >= (var$8[$var27 + $rt_imul($var37, $var4) | 0] - 1 | 0))
                            break c;
                        $var9 = $this.$blocks1.data;
                        $var62 = $rt_imul($rt_imul($var36, $var66) + $var37 | 0, $var11) + $var27 | 0;
                        if ($var9[$var62] & 255)
                            break c;
                        if (($var9[$rt_imul($rt_imul($var36 - 1 | 0, $var66) + $var37 | 0, $var11) + $var27 | 0] & 255) != cmmlt_Block_STONE.$id)
                            break c;
                        if (!$var60) {
                            $var9[$var62] = cmmlt_Block_BROWN_MUSHROOM.$id << 24 >> 24;
                            break c;
                        }
                        if ($var46)
                            break c;
                        $var9[$var62] = cmmlt_Block_RED_MUSHROOM.$id << 24 >> 24;
                    }
                    $var63 = $var63 + 1 | 0;
                }
                $var25 = $var25 + 1 | 0;
            }
            $var54 = $var54 + 1 | 0;
            if ($var54 < $var24) {
                $var60 = ju_Random_nextInt($this.$random0, 2);
                $var57 = (($var54 * 50 | 0) / $var35 | 0) + 50 | 0;
                continue main;
            }
            $var6 = cmml_Level__init_();
            $var6.$waterLevel = $this.$waterLevel0;
            cmml_Level_setData($var6, $var2, 64, $var3, $this.$blocks1);
            $var6.$createTime = jl_System_currentTimeMillis();
            $var6.$creator = $var1;
            $var6.$name5 = $rt_s(385);
            $var2 = $this.$width6;
            $var3 = $rt_imul($var2, $this.$depth2) / 4000 | 0;
            $var4 = 0;
            $var54 = $var3 - 1 | 0;
            if ($var4 >= $var3)
                return $var6;
            $var24 = (($var4 * 50 | 0) / $var54 | 0) + 50 | 0;
            $ptr = 24;
        case 24:
            cmmlg_LevelGenerator_setProgress($this, $var24);
            if ($rt_suspending()) {
                break main;
            }
            $var24 = ju_Random_nextInt($this.$random0, $this.$width6);
            $var60 = ju_Random_nextInt($this.$random0, $this.$depth2);
            $var12 = 0;
            while ($var12 < 20) {
                $var26 = 0;
                $var57 = $var24;
                $var35 = $var60;
                while ($var26 < 20) {
                    $var57 = $var57 + (ju_Random_nextInt($this.$random0, 6) - ju_Random_nextInt($this.$random0, 6) | 0) | 0;
                    $var35 = $var35 + (ju_Random_nextInt($this.$random0, 6) - ju_Random_nextInt($this.$random0, 6) | 0) | 0;
                    if ($var57 >= 0 && $var35 >= 0 && $var57 < $this.$width6 && $var35 < $this.$depth2) {
                        $var27 = var$8[$var57 + $rt_imul($var35, $var2) | 0] + 1 | 0;
                        if (!ju_Random_nextInt($this.$random0, 4))
                            cmml_Level_maybeGrowTree($var6, $var57, $var27, $var35);
                    }
                    $var26 = $var26 + 1 | 0;
                }
                $var12 = $var12 + 1 | 0;
            }
            $var4 = $var4 + 1 | 0;
            if ($var4 >= $var3)
                return $var6;
            $var24 = (($var4 * 50 | 0) / $var54 | 0) + 50 | 0;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, $var6, $var7, $var8, var$8, $var10, $var11, $var49, $var51, $var12, $var15, var$15, $var13, $var46, $var48, $var54, $var53, $var24, $var63, $var21, $var60, $var57, var$26, var$27, var$28, $var25, $var26, $var27, $var28, $var23, $var55, $var59, $var56, $var61, $var64, $var29, $var30, $var31, $var32, $var43, $var50, $var33, $var38, $var40, $var35, var$49, $var36, $var37, $var39, $var66, $var9, $var58, $var27_0, $var63_0, $var62, $ptr);
    }
    function cmmlg_LevelGenerator_populateOre($this, $var1, $var2, $var3, $var4) {
        var $var25, $var5, $var6, $var7, $var8, var$10, var$11, var$12, var$13, var$14, var$15, $var9, $var10, $var11, $var12, $var13, $var14, $var15, $var16, $var17, var$25, $var18, $var19, var$28, var$29, var$30, $var20, $var21, $var22, $var23, $var24, $var26, var$37, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$37 = $thread.pop();$var26 = $thread.pop();$var24 = $thread.pop();$var23 = $thread.pop();$var22 = $thread.pop();$var21 = $thread.pop();$var20 = $thread.pop();var$30 = $thread.pop();var$29 = $thread.pop();var$28 = $thread.pop();$var19 = $thread.pop();$var18 = $thread.pop();var$25 = $thread.pop();$var17 = $thread.pop();$var16 = $thread.pop();$var15 = $thread.pop();$var14 = $thread.pop();$var13 = $thread.pop();$var12 = $thread.pop();$var11 = $thread.pop();$var10 = $thread.pop();$var9
            = $thread.pop();var$15 = $thread.pop();var$14 = $thread.pop();var$13 = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();$var8 = $thread.pop();$var7 = $thread.pop();$var6 = $thread.pop();$var5 = $thread.pop();$var25 = $thread.pop();$var4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $var25 = $var1 << 24 >> 24;
            $var4 = $this.$width6;
            $var5 = $this.$depth2;
            $var6 = $this.$height6;
            $var7 = $rt_imul(($rt_imul($rt_imul($var4, $var5), $var6) / 256 | 0) / 64 | 0, $var2) / 100 | 0;
            $var8 = 0;
            var$10 = $var7 - 1 | 0;
            var$11 = $var3 * 100 | 0;
            var$12 = $var4;
            var$13 = $var6;
            var$14 = $var5;
            var$15 = $var2;
            if ($var8 >= $var7)
                return;
            $var1 = ((($var8 * 100 | 0) / var$10 | 0) / 4 | 0) + (var$11 / 4 | 0) | 0;
            $ptr = 1;
        case 1:
            cmmlg_LevelGenerator_setProgress($this, $var1);
            if ($rt_suspending()) {
                break main;
            }
            $var9 = ju_Random_nextFloat($this.$random0) * var$12;
            $var10 = ju_Random_nextFloat($this.$random0) * var$13;
            $var11 = ju_Random_nextFloat($this.$random0) * var$14;
            $var12 = (ju_Random_nextFloat($this.$random0) + ju_Random_nextFloat($this.$random0)) * 75.0 * var$15 / 100.0 | 0;
            $var13 = ju_Random_nextFloat($this.$random0) * 3.1415927410125732 * 2.0;
            $var14 = 0.0;
            $var15 = ju_Random_nextFloat($this.$random0) * 3.1415927410125732 * 2.0;
            $var16 = 0.0;
            $var17 = 0;
            var$25 = $var12;
            while ($var17 < $var12) {
                $var9 = $var9 + cmu_MathHelper_sin($var13) * cmu_MathHelper_cos($var15);
                $var11 = $var11 + cmu_MathHelper_cos($var13) * cmu_MathHelper_cos($var15);
                $var10 = $var10 + cmu_MathHelper_sin($var15);
                $var13 = $var13 + $var14 * 0.20000000298023224;
                $var14 = $var14 * 0.8999999761581421 + ju_Random_nextFloat($this.$random0) - ju_Random_nextFloat($this.$random0);
                $var15 = ($var15 + $var16 * 0.5) * 0.5;
                $var16 = $var16 * 0.8999999761581421 + ju_Random_nextFloat($this.$random0) - ju_Random_nextFloat($this.$random0);
                $var18 = cmu_MathHelper_sin($var17 * 3.1415927410125732 / var$25) * var$15 / 100.0 + 1.0;
                $var19 = $var9 - $var18 | 0;
                var$28 = $var9 + $var18 | 0;
                $var4 = $var10 - $var18 | 0;
                $var5 = $var10 + $var18 | 0;
                $var6 = $var11 - $var18 | 0;
                var$29 = $var11 + $var18 | 0;
                var$30 = $var18 * $var18;
                while ($var19 <= var$28) {
                    $var20 = $var4;
                    while ($var20 <= $var5) {
                        $var21 = $var6;
                        while ($var21 <= var$29) {
                            a: {
                                $var22 = $var19 - $var9;
                                $var23 = $var20 - $var10;
                                $var24 = $var21 - $var11;
                                if ($var22 * $var22 + $var23 * $var23 * 2.0 + $var24 * $var24 >= var$30)
                                    break a;
                                if ($var19 < 1)
                                    break a;
                                if ($var20 < 1)
                                    break a;
                                if ($var21 < 1)
                                    break a;
                                $var1 = $this.$width6;
                                if ($var19 >= ($var1 - 1 | 0))
                                    break a;
                                if ($var20 >= ($this.$height6 - 1 | 0))
                                    break a;
                                $var2 = $this.$depth2;
                                if ($var21 >= ($var2 - 1 | 0))
                                    break a;
                                $var26 = $rt_imul($rt_imul($var20, $var2) + $var21 | 0, $var1) + $var19 | 0;
                                var$37 = $this.$blocks1.data;
                                $var1 = var$37[$var26];
                                cmmlt_Block_$callClinit();
                                if ($var1 != cmmlt_Block_STONE.$id)
                                    break a;
                                var$37[$var26] = $var25;
                            }
                            $var21 = $var21 + 1 | 0;
                        }
                        $var20 = $var20 + 1 | 0;
                    }
                    $var19 = $var19 + 1 | 0;
                }
                $var17 = $var17 + 1 | 0;
            }
            $var8 = $var8 + 1 | 0;
            if ($var8 >= $var7)
                return;
            $var1 = ((($var8 * 100 | 0) / var$10 | 0) / 4 | 0) + (var$11 / 4 | 0) | 0;
            continue main;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, $var25, $var5, $var6, $var7, $var8, var$10, var$11, var$12, var$13, var$14, var$15, $var9, $var10, $var11, $var12, $var13, $var14, $var15, $var16, $var17, var$25, $var18, $var19, var$28, var$29, var$30, $var20, $var21, $var22, $var23, $var24, $var26, var$37, $ptr);
    }
    function cmmlg_LevelGenerator_setProgress($this, $var1) {
        var var$2, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$2 = $this.$progressBar0;
            $ptr = 1;
        case 1:
            cmm_ProgressBarDisplay_setProgress(var$2, $var1);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, var$2, $ptr);
    }
    function cmmlg_LevelGenerator_flood($this, $var1, $var2, $var3, $var4, $var5) {
        var $var20, $var21, $var7, $var8, $var13, $var9, $var10, $var22, $var11, var$15, var$16, $var15, var$18, $var16, $var17, $var23, $var24, $var18, $var25;
        $var20 = $var5 << 24 >> 24;
        $var21 = ju_ArrayList__init_();
        $var7 = 1;
        $var8 = 1;
        while (true) {
            $var4 = 1 << $var7;
            $var5 = $this.$width6;
            if ($var4 >= $var5)
                break;
            $var7 = $var7 + 1 | 0;
        }
        while (true) {
            $var4 = 1 << $var8;
            $var13 = $this.$depth2;
            if ($var4 >= $var13)
                break;
            $var8 = $var8 + 1 | 0;
        }
        $var9 = $var13 - 1 | 0;
        $var10 = $var5 - 1 | 0;
        $var22 = 1;
        $this.$h.data[0] = ((($var2 << $var8) + $var3 | 0) << $var7) + $var1 | 0;
        $var11 = Long_ZERO;
        $var3 = $rt_imul($var5, $var13);
        while ($var22 > 0) {
            $var22 = $var22 + (-1) | 0;
            $var4 = $this.$h.data[$var22];
            if (!$var22) {
                $var1 = $var21.$size0;
                if ($var1 > 0) {
                    var$15 = ju_ArrayList_remove($var21, $var1 - 1 | 0);
                    var$16 = var$15.data;
                    $this.$h = var$15;
                    $var22 = var$16.length;
                }
            }
            $var5 = $var4 >> $var7 & $var9;
            $var2 = $var7 + $var8 | 0;
            $var13 = $var4 >> $var2;
            $var15 = $var4 & $var10;
            var$18 = $var15;
            a: {
                while (var$18 > 0) {
                    if ($this.$blocks1.data[$var4 - 1 | 0])
                        break a;
                    var$18 = var$18 + (-1) | 0;
                    $var4 = $var4 + (-1) | 0;
                }
            }
            while ($var15 < $this.$width6 && !$this.$blocks1.data[($var4 + $var15 | 0) - var$18 | 0]) {
                $var15 = $var15 + 1 | 0;
            }
            $var16 = $var4 >> $var7 & $var9;
            $var17 = $var4 >> $var2;
            if (!($var16 == $var5 && $var17 == $var13))
                ji_PrintStream_println(jl_System_out(), $rt_s(386));
            $var23 = 0;
            $var24 = 0;
            $var18 = 0;
            $var11 = Long_add($var11, Long_fromInt($var15 - var$18 | 0));
            while (var$18 < $var15) {
                var$15 = $this.$blocks1.data;
                var$15[$var4] = $var20;
                if ($var5 <= 0)
                    $var16 = $var23;
                else {
                    $var16 = var$15[$var4 - $this.$width6 | 0] ? 0 : 1;
                    if ($var16 && !$var23) {
                        var$16 = $this.$h;
                        if ($var22 != var$16.data.length)
                            $var1 = $var22;
                        else {
                            ju_ArrayList_add($var21, var$16);
                            $this.$h = $rt_createIntArray(1048576);
                            $var1 = 0;
                        }
                        var$15 = $this.$h.data;
                        $var22 = $var1 + 1 | 0;
                        var$15[$var1] = $var4 - $this.$width6 | 0;
                    }
                }
                if ($var5 >= ($this.$depth2 - 1 | 0))
                    $var17 = $var24;
                else {
                    $var17 = $this.$blocks1.data[$var4 + $this.$width6 | 0] ? 0 : 1;
                    if ($var17 && !$var24) {
                        var$15 = $this.$h;
                        if ($var22 != var$15.data.length)
                            $var1 = $var22;
                        else {
                            ju_ArrayList_add($var21, var$15);
                            $this.$h = $rt_createIntArray(1048576);
                            $var1 = 0;
                        }
                        var$15 = $this.$h.data;
                        $var22 = $var1 + 1 | 0;
                        var$15[$var1] = $var4 + $this.$width6 | 0;
                    }
                }
                if ($var13 > 0) {
                    var$15 = $this.$blocks1.data;
                    $var23 = $var4 - $var3 | 0;
                    $var25 = var$15[$var23];
                    cmmlt_Block_$callClinit();
                    if (!($var20 != cmmlt_Block_LAVA.$id && $var20 != cmmlt_Block_STATIONARY_LAVA.$id) && !($var25 != cmmlt_Block_WATER.$id && $var25 != cmmlt_Block_STATIONARY_WATER.$id))
                        var$15[$var23] = cmmlt_Block_STONE.$id << 24 >> 24;
                    $var25 = $var25 ? 0 : 1;
                    if ($var25 && !$var18) {
                        var$16 = $this.$h;
                        if ($var22 != var$16.data.length)
                            $var1 = $var22;
                        else {
                            ju_ArrayList_add($var21, var$16);
                            $this.$h = $rt_createIntArray(1048576);
                            $var1 = 0;
                        }
                        var$15 = $this.$h.data;
                        $var22 = $var1 + 1 | 0;
                        var$15[$var1] = $var23;
                    }
                    $var18 = $var25;
                }
                $var4 = $var4 + 1 | 0;
                var$18 = var$18 + 1 | 0;
                $var23 = $var16;
                $var24 = $var17;
            }
        }
        return $var11;
    }
    var cmmg_PauseScreen = $rt_classWithoutFields(cmmg_GuiScreen);
    function cmmg_PauseScreen_onOpen($this) {
        ju_ArrayList_clear($this.$buttons);
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(0, ($this.$width4 / 2 | 0) - 100 | 0, $this.$height4 / 4 | 0, $rt_s(387)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(1, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 24 | 0, $rt_s(388)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(2, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 48 | 0, $rt_s(389)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(3, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 72 | 0, $rt_s(390)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(4, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 120 | 0, $rt_s(391)));
        if ($this.$minecraft5.$session === null) {
            (ju_ArrayList_get($this.$buttons, 2)).$active = 0;
            (ju_ArrayList_get($this.$buttons, 3)).$active = 0;
        }
    }
    function cmmg_PauseScreen_onButtonClick($this, $var1) {
        var var$2, var$3;
        if (!$var1.$id2) {
            var$2 = $this.$minecraft5;
            cmm_Minecraft_setCurrentScreen(var$2, cmmg_OptionsScreen__init_($this, var$2.$settings));
        }
        if ($var1.$id2 == 1)
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, cmmg_GenerateLevelScreen__init_($this));
        var$2 = $this.$minecraft5;
        if (var$2.$session !== null) {
            if ($var1.$id2 == 2) {
                var$3 = new cmmg_SaveLevelScreen;
                cmmg_LoadLevelScreen__init_(var$3, $this);
                var$3.$title0 = $rt_s(392);
                var$3.$saving = 1;
                cmm_Minecraft_setCurrentScreen(var$2, var$3);
            }
            if ($var1.$id2 == 3)
                cmm_Minecraft_setCurrentScreen($this.$minecraft5, cmmg_LoadLevelScreen__init_0($this));
        }
        if ($var1.$id2 == 4) {
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, null);
            cmm_Minecraft_grabMouse($this.$minecraft5);
        }
    }
    function cmmg_PauseScreen_render($this, $var1, $var2) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmmg_Screen_drawFadingBox(0, 0, $this.$width4, $this.$height4, 1610941696, (-1607454624));
            cmmg_Screen_drawCenteredString($this.$fontRenderer0, $rt_s(393), $this.$width4 / 2 | 0, 40, 16777215);
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $ptr);
    }
    function cmmr_ChunkDistanceComparator() {
        jl_Object.call(this);
        this.$player2 = null;
    }
    function cmmr_ChunkDistanceComparator_compare($this, $o1, $o2) {
        var $chunk, $other, var$5;
        $chunk = $o1;
        $other = $o2;
        var$5 = $rt_compare(cmmr_Chunk_distanceSquared($chunk, $this.$player2), cmmr_Chunk_distanceSquared($other, $this.$player2));
        if (!var$5)
            return 0;
        if (var$5 <= 0)
            return 1;
        return (-1);
    }
    function cjj_InfBlocks() {
        var a = this; jl_Object.call(a);
        a.$mode1 = 0;
        a.$left = 0;
        a.$table = 0;
        a.$index1 = 0;
        a.$blens = null;
        a.$bb0 = null;
        a.$tb = null;
        a.$bl = null;
        a.$bd = null;
        a.$tl = null;
        a.$td = null;
        a.$tli = null;
        a.$tdi = null;
        a.$codes = null;
        a.$last = 0;
        a.$bitk = 0;
        a.$bitb = 0;
        a.$hufts = null;
        a.$window = null;
        a.$end2 = 0;
        a.$read2 = 0;
        a.$write0 = 0;
        a.$check = 0;
        a.$inftree = null;
        a.$z5 = null;
    }
    var cjj_InfBlocks_inflate_mask = null;
    var cjj_InfBlocks_border = null;
    function cjj_InfBlocks_reset($this) {
        var var$1;
        var$1 = $this.$mode1;
        var$1 != 4 && var$1 != 5;
        $this.$mode1 = 0;
        $this.$bitk = 0;
        $this.$bitb = 0;
        $this.$write0 = 0;
        $this.$read2 = 0;
        if ($this.$check)
            $this.$z5.$adler.$reset0();
    }
    function cjj_InfBlocks_proc($this, $r) {
        var var$2, $p, $n, $b, $k, $q, var$8, $m, var$10, $i, $t, $c, var$14, var$15, var$16, $i_0, $j;
        var$2 = $this.$z5;
        $p = var$2.$next_in_index;
        $n = var$2.$avail_in;
        $b = $this.$bitb;
        $k = $this.$bitk;
        $q = $this.$write0;
        var$8 = $this.$read2;
        $m = $q >= var$8 ? $this.$end2 - $q | 0 : (var$8 - $q | 0) - 1 | 0;
        a: {
            b: {
                c: {
                    d: {
                        e: while (true) {
                            f: {
                                g: {
                                    h: {
                                        i: {
                                            j: {
                                                switch ($this.$mode1) {
                                                    case 2:
                                                        break f;
                                                    case 9:
                                                        $this.$bitb = $b;
                                                        $this.$bitk = $k;
                                                        var$2 = $this.$z5;
                                                        var$2.$avail_in = $n;
                                                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                        var$2.$next_in_index = $p;
                                                        $this.$write0 = $q;
                                                        return cjj_InfBlocks_inflate_flush($this, (-3));
                                                    case 0:
                                                        break j;
                                                    case 1:
                                                        break;
                                                    case 3:
                                                        while ($k < 14) {
                                                            if (!$n) {
                                                                $this.$bitb = $b;
                                                                $this.$bitk = $k;
                                                                var$2 = $this.$z5;
                                                                var$2.$avail_in = $n;
                                                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                                var$2.$next_in_index = $p;
                                                                $this.$write0 = $q;
                                                                return cjj_InfBlocks_inflate_flush($this, $r);
                                                            }
                                                            $r = 0;
                                                            $n = $n + (-1) | 0;
                                                            var$10 = $this.$z5.$next_in.data;
                                                            var$8 = $p + 1 | 0;
                                                            $b = $b | (var$10[$p] & 255) << $k;
                                                            $k = $k + 8 | 0;
                                                            $p = var$8;
                                                        }
                                                        var$8 = $b & 16383;
                                                        $this.$table = var$8;
                                                        $i = var$8 & 31;
                                                        if ($i > 29)
                                                            break d;
                                                        var$8 = var$8 >> 5 & 31;
                                                        if (var$8 > 29)
                                                            break d;
                                                        k: {
                                                            l: {
                                                                var$8 = (258 + $i | 0) + var$8 | 0;
                                                                var$10 = $this.$blens;
                                                                if (var$10 !== null) {
                                                                    var$10 = var$10.data;
                                                                    if (var$10.length >= var$8)
                                                                        break l;
                                                                }
                                                                $this.$blens = $rt_createIntArray(var$8);
                                                                break k;
                                                            }
                                                            $i = 0;
                                                            while (true) {
                                                                if ($i >= var$8)
                                                                    break k;
                                                                var$10[$i] = 0;
                                                                $i = $i + 1 | 0;
                                                            }
                                                        }
                                                        $b = $b >>> 14 | 0;
                                                        $k = $k + (-14) | 0;
                                                        $this.$index1 = 0;
                                                        $this.$mode1 = 4;
                                                        break i;
                                                    case 4:
                                                        break i;
                                                    case 5:
                                                        break h;
                                                    case 6:
                                                        break g;
                                                    case 7:
                                                        break b;
                                                    case 8:
                                                        break a;
                                                    default:
                                                        $this.$bitb = $b;
                                                        $this.$bitk = $k;
                                                        var$2 = $this.$z5;
                                                        var$2.$avail_in = $n;
                                                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                        var$2.$next_in_index = $p;
                                                        $this.$write0 = $q;
                                                        return cjj_InfBlocks_inflate_flush($this, (-2));
                                                }
                                                while ($k < 32) {
                                                    if (!$n) {
                                                        $this.$bitb = $b;
                                                        $this.$bitk = $k;
                                                        var$2 = $this.$z5;
                                                        var$2.$avail_in = $n;
                                                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                        var$2.$next_in_index = $p;
                                                        $this.$write0 = $q;
                                                        return cjj_InfBlocks_inflate_flush($this, $r);
                                                    }
                                                    $r = 0;
                                                    $n = $n + (-1) | 0;
                                                    var$10 = $this.$z5.$next_in.data;
                                                    var$8 = $p + 1 | 0;
                                                    $b = $b | (var$10[$p] & 255) << $k;
                                                    $k = $k + 8 | 0;
                                                    $p = var$8;
                                                }
                                                var$8 = (($b ^ (-1)) >>> 16 | 0) & 65535;
                                                $i = $b & 65535;
                                                if (var$8 != $i) {
                                                    $this.$mode1 = 9;
                                                    var$2 = $this.$z5;
                                                    var$2.$msg = $rt_s(394);
                                                    $this.$bitb = $b;
                                                    $this.$bitk = $k;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, (-3));
                                                }
                                                $this.$left = $i;
                                                $k = 0;
                                                $this.$mode1 = $i ? 2 : !$this.$last ? 0 : 7;
                                                $b = $k;
                                                continue e;
                                            }
                                            while ($k < 3) {
                                                if (!$n) {
                                                    $this.$bitb = $b;
                                                    $this.$bitk = $k;
                                                    var$2 = $this.$z5;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, $r);
                                                }
                                                $r = 0;
                                                $n = $n + (-1) | 0;
                                                var$10 = $this.$z5.$next_in.data;
                                                var$8 = $p + 1 | 0;
                                                $b = $b | (var$10[$p] & 255) << $k;
                                                $k = $k + 8 | 0;
                                                $p = var$8;
                                            }
                                            m: {
                                                $t = $b & 7;
                                                $this.$last = $t & 1;
                                                switch ($t >>> 1 | 0) {
                                                    case 0:
                                                        var$8 = $b >>> 3 | 0;
                                                        $i = $k + (-3) | 0;
                                                        $c = $i & 7;
                                                        $b = var$8 >>> $c | 0;
                                                        $k = $i - $c | 0;
                                                        $this.$mode1 = 1;
                                                        break m;
                                                    case 1:
                                                        cjj_InfTree_inflate_trees_fixed($this.$bl, $this.$bd, $this.$tl, $this.$td, $this.$z5);
                                                        cjj_InfCodes_init($this.$codes, $this.$bl.data[0], $this.$bd.data[0], $this.$tl.data[0], 0, $this.$td.data[0], 0);
                                                        $b = $b >>> 3 | 0;
                                                        $k = $k + (-3) | 0;
                                                        $this.$mode1 = 6;
                                                        break m;
                                                    case 2:
                                                        $b = $b >>> 3 | 0;
                                                        $k = $k + (-3) | 0;
                                                        $this.$mode1 = 3;
                                                        break m;
                                                    case 3:
                                                        $r = $b >>> 3 | 0;
                                                        var$8 = $k + (-3) | 0;
                                                        $this.$mode1 = 9;
                                                        var$2 = $this.$z5;
                                                        var$2.$msg = $rt_s(395);
                                                        $this.$bitb = $r;
                                                        $this.$bitk = var$8;
                                                        var$2.$avail_in = $n;
                                                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                        var$2.$next_in_index = $p;
                                                        $this.$write0 = $q;
                                                        return cjj_InfBlocks_inflate_flush($this, (-3));
                                                    default:
                                                }
                                            }
                                            continue e;
                                        }
                                        while (true) {
                                            var$8 = $this.$index1;
                                            if (var$8 >= (4 + ($this.$table >>> 10 | 0) | 0))
                                                break;
                                            while ($k < 3) {
                                                if (!$n) {
                                                    $this.$bitb = $b;
                                                    $this.$bitk = $k;
                                                    var$2 = $this.$z5;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, $r);
                                                }
                                                $r = 0;
                                                $n = $n + (-1) | 0;
                                                var$10 = $this.$z5.$next_in.data;
                                                $i = $p + 1 | 0;
                                                $b = $b | (var$10[$p] & 255) << $k;
                                                $k = $k + 8 | 0;
                                                $p = $i;
                                            }
                                            var$14 = $this.$blens.data;
                                            var$10 = cjj_InfBlocks_border.data;
                                            $this.$index1 = var$8 + 1 | 0;
                                            var$14[var$10[var$8]] = $b & 7;
                                            $b = $b >>> 3 | 0;
                                            $k = $k + (-3) | 0;
                                        }
                                        while (true) {
                                            var$8 = $this.$index1;
                                            if (var$8 >= 19)
                                                break;
                                            var$14 = $this.$blens.data;
                                            var$10 = cjj_InfBlocks_border.data;
                                            $this.$index1 = var$8 + 1 | 0;
                                            var$14[var$10[var$8]] = 0;
                                        }
                                        var$10 = $this.$bb0;
                                        var$10.data[0] = 7;
                                        var$8 = cjj_InfTree_inflate_trees_bits($this.$inftree, $this.$blens, var$10, $this.$tb, $this.$hufts, $this.$z5);
                                        if (var$8) {
                                            if (var$8 == (-3)) {
                                                $this.$blens = null;
                                                $this.$mode1 = 9;
                                            }
                                            $this.$bitb = $b;
                                            $this.$bitk = $k;
                                            var$2 = $this.$z5;
                                            var$2.$avail_in = $n;
                                            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                            var$2.$next_in_index = $p;
                                            $this.$write0 = $q;
                                            return cjj_InfBlocks_inflate_flush($this, var$8);
                                        }
                                        $this.$index1 = 0;
                                        $this.$mode1 = 5;
                                    }
                                    while (true) {
                                        var$8 = $this.$table;
                                        $i = $this.$index1;
                                        $c = var$8 & 31;
                                        $m = 258 + $c | 0;
                                        var$8 = var$8 >> 5 & 31;
                                        $m = $m + var$8 | 0;
                                        if ($i >= $m)
                                            break;
                                        $t = $this.$bb0.data[0];
                                        while ($k < $t) {
                                            if (!$n) {
                                                $this.$bitb = $b;
                                                $this.$bitk = $k;
                                                var$2 = $this.$z5;
                                                var$2.$avail_in = $n;
                                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                var$2.$next_in_index = $p;
                                                $this.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush($this, $r);
                                            }
                                            $r = 0;
                                            $n = $n + (-1) | 0;
                                            var$10 = $this.$z5.$next_in.data;
                                            var$8 = $p + 1 | 0;
                                            $b = $b | (var$10[$p] & 255) << $k;
                                            $k = $k + 8 | 0;
                                            $p = var$8;
                                        }
                                        var$10 = $this.$tb.data;
                                        var$15 = $this.$hufts.data;
                                        var$8 = var$10[0];
                                        var$14 = cjj_InfBlocks_inflate_mask.data;
                                        var$16 = var$15[((var$8 + ($b & var$14[$t]) | 0) * 3 | 0) + 1 | 0];
                                        $c = var$15[((var$10[0] + ($b & var$14[var$16]) | 0) * 3 | 0) + 2 | 0];
                                        $t = $rt_compare($c, 16);
                                        if ($t < 0) {
                                            $b = $b >>> var$16 | 0;
                                            $k = $k - var$16 | 0;
                                            var$10 = $this.$blens.data;
                                            $this.$index1 = $i + 1 | 0;
                                            var$10[$i] = $c;
                                        } else {
                                            var$8 = $rt_compare($c, 18);
                                            $i_0 = !var$8 ? 7 : $c - 14 | 0;
                                            $j = var$8 ? 3 : 11;
                                            while ($k < (var$16 + $i_0 | 0)) {
                                                if (!$n) {
                                                    $this.$bitb = $b;
                                                    $this.$bitk = $k;
                                                    var$2 = $this.$z5;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, $r);
                                                }
                                                $r = 0;
                                                $n = $n + (-1) | 0;
                                                var$10 = $this.$z5.$next_in.data;
                                                var$8 = $p + 1 | 0;
                                                $b = $b | (var$10[$p] & 255) << $k;
                                                $k = $k + 8 | 0;
                                                $p = var$8;
                                            }
                                            $c = $b >>> var$16 | 0;
                                            $k = $k - var$16 | 0;
                                            var$8 = $j + ($c & var$14[$i_0]) | 0;
                                            $b = $c >>> $i_0 | 0;
                                            $k = $k - $i_0 | 0;
                                            if (($i + var$8 | 0) > $m)
                                                break c;
                                            if (!$t && $i < 1)
                                                break c;
                                            $m = $t ? 0 : $this.$blens.data[$i - 1 | 0];
                                            while (true) {
                                                var$10 = $this.$blens.data;
                                                $c = $i + 1 | 0;
                                                var$10[$i] = $m;
                                                var$8 = var$8 + (-1) | 0;
                                                if (!var$8)
                                                    break;
                                                $i = $c;
                                            }
                                            $this.$index1 = $c;
                                        }
                                    }
                                    $this.$tb.data[0] = (-1);
                                    var$10 = $this.$bl;
                                    var$10.data[0] = 9;
                                    var$14 = $this.$bd;
                                    var$14.data[0] = 6;
                                    var$8 = cjj_InfTree_inflate_trees_dynamic($this.$inftree, 257 + $c | 0, 1 + var$8 | 0, $this.$blens, var$10, var$14, $this.$tli, $this.$tdi, $this.$hufts, $this.$z5);
                                    if (var$8) {
                                        if (var$8 == (-3)) {
                                            $this.$blens = null;
                                            $this.$mode1 = 9;
                                        }
                                        $this.$bitb = $b;
                                        $this.$bitk = $k;
                                        var$2 = $this.$z5;
                                        var$2.$avail_in = $n;
                                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                        var$2.$next_in_index = $p;
                                        $this.$write0 = $q;
                                        return cjj_InfBlocks_inflate_flush($this, var$8);
                                    }
                                    var$2 = $this.$codes;
                                    var$8 = $this.$bl.data[0];
                                    $i = $this.$bd.data[0];
                                    var$10 = $this.$hufts;
                                    cjj_InfCodes_init(var$2, var$8, $i, var$10, $this.$tli.data[0], var$10, $this.$tdi.data[0]);
                                    $this.$mode1 = 6;
                                }
                                $this.$bitb = $b;
                                $this.$bitk = $k;
                                var$2 = $this.$z5;
                                var$2.$avail_in = $n;
                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                var$2.$next_in_index = $p;
                                $this.$write0 = $q;
                                $r = cjj_InfCodes_proc($this.$codes, $r);
                                if ($r != 1)
                                    break e;
                                $r = 0;
                                cjj_InfCodes_free($this.$codes, $this.$z5);
                                var$2 = $this.$z5;
                                $p = var$2.$next_in_index;
                                $n = var$2.$avail_in;
                                $b = $this.$bitb;
                                $k = $this.$bitk;
                                $q = $this.$write0;
                                var$8 = $this.$read2;
                                $m = $q >= var$8 ? $this.$end2 - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                                if ($this.$last) {
                                    $this.$mode1 = 7;
                                    break b;
                                }
                                $this.$mode1 = 0;
                                continue e;
                            }
                            if (!$n) {
                                $this.$bitb = $b;
                                $this.$bitk = $k;
                                var$2 = $this.$z5;
                                var$2.$avail_in = $n;
                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                var$2.$next_in_index = $p;
                                $this.$write0 = $q;
                                return cjj_InfBlocks_inflate_flush($this, $r);
                            }
                            if (!$m) {
                                $c = $this.$end2;
                                if ($q == $c) {
                                    var$8 = $this.$read2;
                                    if (var$8) {
                                        $q = 0;
                                        $m = $q >= var$8 ? $c - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                                    }
                                }
                                if (!$m) {
                                    $this.$write0 = $q;
                                    $i = cjj_InfBlocks_inflate_flush($this, $r);
                                    $q = $this.$write0;
                                    var$8 = $this.$read2;
                                    $m = $q >= var$8 ? $this.$end2 - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                                    $c = $this.$end2;
                                    if ($q == $c && var$8) {
                                        $q = 0;
                                        $m = $q >= var$8 ? $c - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                                    }
                                    if (!$m) {
                                        $this.$bitb = $b;
                                        $this.$bitk = $k;
                                        var$2 = $this.$z5;
                                        var$2.$avail_in = $n;
                                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                        var$2.$next_in_index = $p;
                                        $this.$write0 = $q;
                                        return cjj_InfBlocks_inflate_flush($this, $i);
                                    }
                                }
                            }
                            $r = 0;
                            var$8 = $this.$left;
                            if (var$8 > $n)
                                var$8 = $n;
                            if (var$8 > $m)
                                var$8 = $m;
                            jl_System_fastArraycopy($this.$z5.$next_in, $p, $this.$window, $q, var$8);
                            $p = $p + var$8 | 0;
                            $n = $n - var$8 | 0;
                            $q = $q + var$8 | 0;
                            $m = $m - var$8 | 0;
                            var$8 = $this.$left - var$8 | 0;
                            $this.$left = var$8;
                            if (var$8)
                                continue;
                            $this.$mode1 = !$this.$last ? 0 : 7;
                        }
                        return cjj_InfBlocks_inflate_flush($this, $r);
                    }
                    $this.$mode1 = 9;
                    var$2 = $this.$z5;
                    var$2.$msg = $rt_s(396);
                    $this.$bitb = $b;
                    $this.$bitk = $k;
                    var$2.$avail_in = $n;
                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                    var$2.$next_in_index = $p;
                    $this.$write0 = $q;
                    return cjj_InfBlocks_inflate_flush($this, (-3));
                }
                $this.$blens = null;
                $this.$mode1 = 9;
                var$2 = $this.$z5;
                var$2.$msg = $rt_s(397);
                $this.$bitb = $b;
                $this.$bitk = $k;
                var$2.$avail_in = $n;
                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                var$2.$next_in_index = $p;
                $this.$write0 = $q;
                return cjj_InfBlocks_inflate_flush($this, (-3));
            }
            $this.$write0 = $q;
            $r = cjj_InfBlocks_inflate_flush($this, $r);
            $q = $this.$write0;
            var$8 = $this.$read2;
            if (var$8 != $q) {
                $this.$bitb = $b;
                $this.$bitk = $k;
                var$2 = $this.$z5;
                var$2.$avail_in = $n;
                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                var$2.$next_in_index = $p;
                $this.$write0 = $q;
                return cjj_InfBlocks_inflate_flush($this, $r);
            }
            $this.$mode1 = 8;
        }
        $this.$bitb = $b;
        $this.$bitk = $k;
        var$2 = $this.$z5;
        var$2.$avail_in = $n;
        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
        var$2.$next_in_index = $p;
        $this.$write0 = $q;
        return cjj_InfBlocks_inflate_flush($this, 1);
    }
    function cjj_InfBlocks_free($this) {
        cjj_InfBlocks_reset($this);
        $this.$window = null;
        $this.$hufts = null;
    }
    function cjj_InfBlocks_inflate_flush($this, $r) {
        var var$2, $p, $q, var$5, $n, var$7;
        var$2 = $this.$z5;
        $p = var$2.$next_out_index;
        $q = $this.$read2;
        var$5 = $this.$write0;
        if ($q > var$5)
            var$5 = $this.$end2;
        $n = var$5 - $q | 0;
        var$5 = var$2.$avail_out;
        if ($n > var$5)
            $n = var$5;
        if ($n && $r == (-5))
            $r = 0;
        var$2.$avail_out = var$5 - $n | 0;
        var$2.$total_out = Long_add(var$2.$total_out, Long_fromInt($n));
        if ($this.$check && $n > 0)
            var$2.$adler.$update2($this.$window, $q, $n);
        jl_System_fastArraycopy($this.$window, $q, $this.$z5.$next_out, $p, $n);
        var$5 = $p + $n | 0;
        var$7 = $q + $n | 0;
        $p = $this.$end2;
        if (var$7 == $p) {
            if ($this.$write0 == $p)
                $this.$write0 = 0;
            $p = $this.$write0 - 0 | 0;
            var$2 = $this.$z5;
            $q = var$2.$avail_out;
            if ($p > $q)
                $p = $q;
            if ($p && $r == (-5))
                $r = 0;
            var$2.$avail_out = $q - $p | 0;
            var$2.$total_out = Long_add(var$2.$total_out, Long_fromInt($p));
            if ($this.$check && $p > 0)
                var$2.$adler.$update2($this.$window, 0, $p);
            jl_System_fastArraycopy($this.$window, 0, $this.$z5.$next_out, var$5, $p);
            var$5 = var$5 + $p | 0;
            var$7 = 0 + $p | 0;
        }
        $this.$z5.$next_out_index = var$5;
        $this.$read2 = var$7;
        return $r;
    }
    function cjj_InfBlocks__clinit_() {
        cjj_InfBlocks_inflate_mask = $rt_createIntArrayFromData([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535]);
        cjj_InfBlocks_border = $rt_createIntArrayFromData([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    }
    function cmml_MobSpawner() {
        jl_Object.call(this);
        this.$level1 = null;
    }
    function cmml_MobSpawner__init_(var_0) {
        var var_1 = new cmml_MobSpawner();
        cmml_MobSpawner__init_0(var_1, var_0);
        return var_1;
    }
    function cmml_MobSpawner__init_0($this, $var1) {
        $this.$level1 = $var1;
    }
    function cmml_MobSpawner_spawn($this, $var1, $var2, $var3) {
        var $var4, $var5, var$6, $var6, $var21, $var7, $var19, $var8, $var9, $var14, $var10, var$15, var$16, var$17, var$18, var$19, var$20, var$21, var$22, $var15, $var16, $var17, $var18, $var20, var$28, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$28 = $thread.pop();$var20 = $thread.pop();$var18 = $thread.pop();$var17 = $thread.pop();$var16 = $thread.pop();$var15 = $thread.pop();var$22 = $thread.pop();var$21 = $thread.pop();var$20 = $thread.pop();var$19 = $thread.pop();var$18 = $thread.pop();var$17 = $thread.pop();var$16 = $thread.pop();var$15 = $thread.pop();$var10 = $thread.pop();$var14 = $thread.pop();$var9 = $thread.pop();$var8 = $thread.pop();$var19 = $thread.pop();$var7 = $thread.pop();$var21 = $thread.pop();$var6
            = $thread.pop();var$6 = $thread.pop();$var5 = $thread.pop();$var4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $var4 = 0;
            $var5 = 0;
            var$6 = $var1 - 1 | 0;
            while ($var5 < $var1) {
                if ($var3 !== null) {
                    $var6 = ($var5 * 100 | 0) / var$6 | 0;
                    $ptr = 1;
                    continue main;
                }
                $var6 = ju_Random_nextInt($this.$level1.$random1, 6);
                $var21 = $this.$level1;
                $var7 = ju_Random_nextInt($var21.$random1, $var21.$width0);
                $var19 = jl_Math_minImpl(ju_Random_nextFloat($this.$level1.$random1), ju_Random_nextFloat($this.$level1.$random1));
                $var21 = $this.$level1;
                $var8 = $var19 * $var21.$depth | 0;
                $var9 = ju_Random_nextInt($var21.$random1, $var21.$height0);
                if (!cmml_Level_isSolidTile($this.$level1, $var7, $var8, $var9)) {
                    $var14 = cmml_Level_getTile($this.$level1, $var7, $var8, $var9);
                    if (!$var14)
                        $var21 = cmmll_LiquidType_NOT_LIQUID;
                    else {
                        cmmlt_Block_$callClinit();
                        $var21 = cmmlt_Block_blocks.data[$var14].$getLiquidType();
                    }
                    if ($var21 === cmmll_LiquidType_NOT_LIQUID && !(cmml_Level_isLit($this.$level1, $var7, $var8, $var9) && ju_Random_nextInt($this.$level1.$random1, 5))) {
                        $var10 = 0;
                        var$15 = $rt_compare($var6, 1);
                        var$16 = $rt_compare($var6, 2);
                        var$17 = $rt_compare($var6, 3);
                        var$18 = $rt_compare($var6, 4);
                        var$19 = $rt_compare($var6, 5);
                        while ($var10 < 3) {
                            $var14 = 0;
                            var$20 = $var7;
                            var$21 = $var8;
                            var$22 = $var9;
                            while ($var14 < 3) {
                                a: {
                                    var$20 = var$20 + (ju_Random_nextInt($this.$level1.$random1, 6) - ju_Random_nextInt($this.$level1.$random1, 6) | 0) | 0;
                                    var$21 = var$21 + (ju_Random_nextInt($this.$level1.$random1, 1) - ju_Random_nextInt($this.$level1.$random1, 1) | 0) | 0;
                                    var$22 = var$22 + (ju_Random_nextInt($this.$level1.$random1, 6) - ju_Random_nextInt($this.$level1.$random1, 6) | 0) | 0;
                                    if (var$20 < 0)
                                        break a;
                                    if (var$22 < 1)
                                        break a;
                                    if (var$21 < 0)
                                        break a;
                                    $var21 = $this.$level1;
                                    if (var$21 >= ($var21.$depth - 2 | 0))
                                        break a;
                                    if (var$20 >= $var21.$width0)
                                        break a;
                                    if (var$22 >= $var21.$height0)
                                        break a;
                                    if (!cmml_Level_isSolidTile($var21, var$20, var$21 - 1 | 0, var$22))
                                        break a;
                                    if (cmml_Level_isSolidTile($this.$level1, var$20, var$21, var$22))
                                        break a;
                                    if (cmml_Level_isSolidTile($this.$level1, var$20, var$21 + 1 | 0, var$22))
                                        break a;
                                    b: {
                                        $var15 = var$20 + 0.5;
                                        $var16 = var$21 + 1.0;
                                        $var17 = var$22 + 0.5;
                                        if ($var2 !== null) {
                                            $var18 = $var15 - $var2.$x;
                                            $var19 = $var16 - $var2.$y;
                                            $var20 = $var17 - $var2.$z;
                                            if ($var18 * $var18 + $var19 * $var19 + $var20 * $var20 >= 256.0)
                                                break b;
                                            break a;
                                        }
                                        $var21 = $this.$level1;
                                        $var18 = $var15 - $var21.$xSpawn;
                                        $var19 = $var16 - $var21.$ySpawn;
                                        $var20 = $var17 - $var21.$zSpawn;
                                        if ($var18 * $var18 + $var19 * $var19 + $var20 * $var20 < 256.0)
                                            break a;
                                    }
                                    $var21 = null;
                                    if (!$var6)
                                        $var21 = cmmm_Zombie__init_($this.$level1, $var15, $var16, $var17);
                                    if (!var$15) {
                                        $var21 = new cmmm_Skeleton;
                                        cmmm_Zombie__init_0($var21, $this.$level1, $var15, $var16, $var17);
                                        $var21.$modelName = $rt_s(299);
                                        $var21.$textureName = $rt_s(398);
                                        var$28 = new cmmm_Skeleton$1;
                                        cmmma_BasicAttackAI__init_(var$28);
                                        var$28.$parent0 = $var21;
                                        $var21.$deathScore = 120;
                                        var$28.$runSpeed = 0.30000001192092896;
                                        var$28.$damage0 = 8;
                                        $var21.$ai = var$28;
                                    }
                                    if (!var$16) {
                                        $var21 = new cmmm_Pig;
                                        cmmm_QuadrupedMob__init_($var21, $this.$level1, $var15, $var16, $var17);
                                        $var21.$heightOffset = 1.7200000286102295;
                                        $var21.$modelName = $rt_s(301);
                                        $var21.$textureName = $rt_s(399);
                                    }
                                    if (!var$17) {
                                        $var21 = new cmmm_Creeper;
                                        cmmm_Mob__init_($var21, $this.$level1);
                                        $var21.$heightOffset = 1.6200000047683716;
                                        $var21.$modelName = $rt_s(298);
                                        $var21.$textureName = $rt_s(400);
                                        var$28 = new cmmm_Creeper$1;
                                        cmmma_BasicAttackAI__init_(var$28);
                                        var$28.$creeper0 = $var21;
                                        $var21.$ai = var$28;
                                        var$28.$defaultLookAngle = 45;
                                        $var21.$deathScore = 200;
                                        cmm_Entity_setPos($var21, $var15, $var16, $var17);
                                    }
                                    if (!var$18)
                                        $var21 = cmmm_Spider__init_($this.$level1, $var15, $var16, $var17);
                                    if (!var$19)
                                        $var21 = cmmm_Sheep__init_($this.$level1, $var15, $var16, $var17);
                                    if (!cmml_Level_isFree($this.$level1, $var21.$bb))
                                        break a;
                                    $var4 = $var4 + 1 | 0;
                                    cmml_Level_addEntity($this.$level1, $var21);
                                }
                                $var14 = $var14 + 1 | 0;
                            }
                            $var10 = $var10 + 1 | 0;
                        }
                    }
                }
                $var5 = $var5 + 1 | 0;
            }
            return $var4;
        case 1:
            cmm_ProgressBarDisplay_setProgress($var3, $var6);
            if ($rt_suspending()) {
                break main;
            }
            while (true) {
                $var6 = ju_Random_nextInt($this.$level1.$random1, 6);
                $var21 = $this.$level1;
                $var7 = ju_Random_nextInt($var21.$random1, $var21.$width0);
                $var19 = jl_Math_minImpl(ju_Random_nextFloat($this.$level1.$random1), ju_Random_nextFloat($this.$level1.$random1));
                $var21 = $this.$level1;
                $var8 = $var19 * $var21.$depth | 0;
                $var9 = ju_Random_nextInt($var21.$random1, $var21.$height0);
                if (!cmml_Level_isSolidTile($this.$level1, $var7, $var8, $var9)) {
                    $var14 = cmml_Level_getTile($this.$level1, $var7, $var8, $var9);
                    if (!$var14)
                        $var21 = cmmll_LiquidType_NOT_LIQUID;
                    else {
                        cmmlt_Block_$callClinit();
                        $var21 = cmmlt_Block_blocks.data[$var14].$getLiquidType();
                    }
                    if ($var21 === cmmll_LiquidType_NOT_LIQUID && !(cmml_Level_isLit($this.$level1, $var7, $var8, $var9) && ju_Random_nextInt($this.$level1.$random1, 5))) {
                        $var10 = 0;
                        var$15 = $rt_compare($var6, 1);
                        var$16 = $rt_compare($var6, 2);
                        var$17 = $rt_compare($var6, 3);
                        var$18 = $rt_compare($var6, 4);
                        var$19 = $rt_compare($var6, 5);
                        while ($var10 < 3) {
                            $var14 = 0;
                            var$20 = $var7;
                            var$21 = $var8;
                            var$22 = $var9;
                            while ($var14 < 3) {
                                a: {
                                    var$20 = var$20 + (ju_Random_nextInt($this.$level1.$random1, 6) - ju_Random_nextInt($this.$level1.$random1, 6) | 0) | 0;
                                    var$21 = var$21 + (ju_Random_nextInt($this.$level1.$random1, 1) - ju_Random_nextInt($this.$level1.$random1, 1) | 0) | 0;
                                    var$22 = var$22 + (ju_Random_nextInt($this.$level1.$random1, 6) - ju_Random_nextInt($this.$level1.$random1, 6) | 0) | 0;
                                    if (var$20 < 0)
                                        break a;
                                    if (var$22 < 1)
                                        break a;
                                    if (var$21 < 0)
                                        break a;
                                    $var21 = $this.$level1;
                                    if (var$21 >= ($var21.$depth - 2 | 0))
                                        break a;
                                    if (var$20 >= $var21.$width0)
                                        break a;
                                    if (var$22 >= $var21.$height0)
                                        break a;
                                    if (!cmml_Level_isSolidTile($var21, var$20, var$21 - 1 | 0, var$22))
                                        break a;
                                    if (cmml_Level_isSolidTile($this.$level1, var$20, var$21, var$22))
                                        break a;
                                    if (cmml_Level_isSolidTile($this.$level1, var$20, var$21 + 1 | 0, var$22))
                                        break a;
                                    b: {
                                        $var15 = var$20 + 0.5;
                                        $var16 = var$21 + 1.0;
                                        $var17 = var$22 + 0.5;
                                        if ($var2 !== null) {
                                            $var18 = $var15 - $var2.$x;
                                            $var19 = $var16 - $var2.$y;
                                            $var20 = $var17 - $var2.$z;
                                            if ($var18 * $var18 + $var19 * $var19 + $var20 * $var20 >= 256.0)
                                                break b;
                                            break a;
                                        }
                                        $var21 = $this.$level1;
                                        $var18 = $var15 - $var21.$xSpawn;
                                        $var19 = $var16 - $var21.$ySpawn;
                                        $var20 = $var17 - $var21.$zSpawn;
                                        if ($var18 * $var18 + $var19 * $var19 + $var20 * $var20 < 256.0)
                                            break a;
                                    }
                                    $var21 = null;
                                    if (!$var6)
                                        $var21 = cmmm_Zombie__init_($this.$level1, $var15, $var16, $var17);
                                    if (!var$15) {
                                        $var21 = new cmmm_Skeleton;
                                        cmmm_Zombie__init_0($var21, $this.$level1, $var15, $var16, $var17);
                                        $var21.$modelName = $rt_s(299);
                                        $var21.$textureName = $rt_s(398);
                                        var$28 = new cmmm_Skeleton$1;
                                        cmmma_BasicAttackAI__init_(var$28);
                                        var$28.$parent0 = $var21;
                                        $var21.$deathScore = 120;
                                        var$28.$runSpeed = 0.30000001192092896;
                                        var$28.$damage0 = 8;
                                        $var21.$ai = var$28;
                                    }
                                    if (!var$16) {
                                        $var21 = new cmmm_Pig;
                                        cmmm_QuadrupedMob__init_($var21, $this.$level1, $var15, $var16, $var17);
                                        $var21.$heightOffset = 1.7200000286102295;
                                        $var21.$modelName = $rt_s(301);
                                        $var21.$textureName = $rt_s(399);
                                    }
                                    if (!var$17) {
                                        $var21 = new cmmm_Creeper;
                                        cmmm_Mob__init_($var21, $this.$level1);
                                        $var21.$heightOffset = 1.6200000047683716;
                                        $var21.$modelName = $rt_s(298);
                                        $var21.$textureName = $rt_s(400);
                                        var$28 = new cmmm_Creeper$1;
                                        cmmma_BasicAttackAI__init_(var$28);
                                        var$28.$creeper0 = $var21;
                                        $var21.$ai = var$28;
                                        var$28.$defaultLookAngle = 45;
                                        $var21.$deathScore = 200;
                                        cmm_Entity_setPos($var21, $var15, $var16, $var17);
                                    }
                                    if (!var$18)
                                        $var21 = cmmm_Spider__init_($this.$level1, $var15, $var16, $var17);
                                    if (!var$19)
                                        $var21 = cmmm_Sheep__init_($this.$level1, $var15, $var16, $var17);
                                    if (!cmml_Level_isFree($this.$level1, $var21.$bb))
                                        break a;
                                    $var4 = $var4 + 1 | 0;
                                    cmml_Level_addEntity($this.$level1, $var21);
                                }
                                $var14 = $var14 + 1 | 0;
                            }
                            $var10 = $var10 + 1 | 0;
                        }
                    }
                }
                $var5 = $var5 + 1 | 0;
                if ($var5 >= $var1)
                    break;
                if ($var3 === null)
                    continue;
                else {
                    $var6 = ($var5 * 100 | 0) / var$6 | 0;
                    continue main;
                }
            }
            return $var4;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, $var5, var$6, $var6, $var21, $var7, $var19, $var8, $var9, $var14, $var10, var$15, var$16, var$17, var$18, var$19, var$20, var$21, var$22, $var15, $var16, $var17, $var18, $var20, var$28, $ptr);
    }
    var cmmg_ErrorScreen = $rt_classWithoutFields(cmmg_GuiScreen);
    var cmmg_GameOverScreen = $rt_classWithoutFields(cmmg_GuiScreen);
    function cmmg_GameOverScreen_onOpen($this) {
        ju_ArrayList_clear($this.$buttons);
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(1, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 72 | 0, $rt_s(388)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(2, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 96 | 0, $rt_s(390)));
        if ($this.$minecraft5.$session === null)
            (ju_ArrayList_get($this.$buttons, 2)).$active = 0;
    }
    function cmmg_GameOverScreen_onButtonClick($this, $var1) {
        var var$2;
        if (!$var1.$id2) {
            var$2 = $this.$minecraft5;
            cmm_Minecraft_setCurrentScreen(var$2, cmmg_OptionsScreen__init_($this, var$2.$settings));
        }
        if ($var1.$id2 == 1)
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, cmmg_GenerateLevelScreen__init_($this));
        var$2 = $this.$minecraft5;
        if (var$2.$session !== null && $var1.$id2 == 2)
            cmm_Minecraft_setCurrentScreen(var$2, cmmg_LoadLevelScreen__init_0($this));
    }
    function cmmg_GameOverScreen_render($this, $var1, $var2) {
        var var$3, var$4, var$5, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmmg_Screen_drawFadingBox(0, 0, $this.$width4, $this.$height4, 1615855616, (-1602211792));
            olo_GL11_glPushMatrix();
            olo_GL11_glScalef(2.0, 2.0, 2.0);
            cmmg_Screen_drawCenteredString($this.$fontRenderer0, $rt_s(401), ($this.$width4 / 2 | 0) / 2 | 0, 30, 16777215);
            olo_GL11_glPopMatrix();
            var$3 = $this.$fontRenderer0;
            var$4 = $this.$minecraft5.$player.$score;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(309)), var$4);
            cmmg_Screen_drawCenteredString(var$3, jl_AbstractStringBuilder_toString(var$5), $this.$width4 / 2 | 0, 100, 16777215);
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, var$3, var$4, var$5, $ptr);
    }
    function jnci_BufferedEncoder() {
        var a = this; jnc_CharsetEncoder.call(a);
        a.$inArray = null;
        a.$outArray = null;
    }
    function jnci_BufferedEncoder_encodeLoop($this, $in, $out) {
        var $inArray, $inPos, $inSize, $outArray, $i, var$8, $outSize, $result, $controller;
        $inArray = $this.$inArray;
        $inPos = 0;
        $inSize = 0;
        $outArray = $this.$outArray;
        a: {
            while (true) {
                if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                    $i = $inPos;
                    while ($i < $inSize) {
                        var$8 = $inArray.data;
                        var$8[$i - $inPos | 0] = var$8[$i];
                        $i = $i + 1 | 0;
                    }
                    var$8 = $inArray.data;
                    $outSize = $inSize - $inPos | 0;
                    $inSize = jl_Math_min(jn_Buffer_remaining($in) + $outSize | 0, var$8.length);
                    jn_CharBuffer_get0($in, $inArray, $outSize, $inSize - $outSize | 0);
                    $inPos = 0;
                }
                if (!jn_Buffer_hasRemaining($out)) {
                    $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$8 = $outArray.data;
                $outSize = jl_Math_min(jn_Buffer_remaining($out), var$8.length);
                $controller = new jnci_BufferedEncoder$Controller;
                $controller.$in0 = $in;
                $controller.$out1 = $out;
                $result = jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
                $inPos = $controller.$inPosition;
                $outSize = $controller.$outPosition;
                if ($result === null) {
                    if (!jn_Buffer_hasRemaining($in) && $inPos >= $inSize)
                        $result = jnc_CoderResult_UNDERFLOW;
                    else if (!jn_Buffer_hasRemaining($out) && $inPos >= $inSize)
                        $result = jnc_CoderResult_OVERFLOW;
                }
                jn_ByteBuffer_put0($out, $outArray, 0, $outSize);
                if ($result !== null)
                    break;
            }
        }
        jn_Buffer_position0($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
        return $result;
    }
    var jnci_UTF8Encoder = $rt_classWithoutFields(jnci_BufferedEncoder);
    function jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $ch, $low, var$13, $codePoint;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize) {
                    var$9 = $inPos;
                    break a;
                }
                var$10 = $inArray.data;
                var$9 = $inPos + 1 | 0;
                $ch = var$10[$inPos];
                if ($ch < 128) {
                    var$10 = $outArray.data;
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = $ch << 24 >> 24;
                } else if ($ch < 2048) {
                    if (($outPos + 2 | 0) > $outSize) {
                        var$9 = var$9 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    $inPos = $outPos + 1 | 0;
                    var$10[$outPos] = (192 | $ch >> 6) << 24 >> 24;
                    $low = $inPos + 1 | 0;
                    var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
                } else if (!jl_Character_isSurrogate($ch)) {
                    if (($outPos + 3 | 0) > $outSize) {
                        var$9 = var$9 + (-1) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 3))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    var$13 = $outPos + 1 | 0;
                    var$10[$outPos] = (224 | $ch >> 12) << 24 >> 24;
                    $inPos = var$13 + 1 | 0;
                    var$10[var$13] = (128 | $ch >> 6 & 63) << 24 >> 24;
                    $low = $inPos + 1 | 0;
                    var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
                } else {
                    if (!jl_Character_isHighSurrogate($ch)) {
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (var$9 >= $inSize) {
                        if (jn_Buffer_hasRemaining($controller.$in0))
                            break a;
                        $result = jnc_CoderResult_UNDERFLOW;
                        break a;
                    }
                    $inPos = var$9 + 1 | 0;
                    $low = var$10[var$9];
                    if (!jl_Character_isLowSurrogate($low)) {
                        var$9 = $inPos + (-2) | 0;
                        $result = jnc_CoderResult_malformedForLength(1);
                        break a;
                    }
                    if (($outPos + 4 | 0) > $outSize) {
                        var$9 = $inPos + (-2) | 0;
                        if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$10 = $outArray.data;
                    $codePoint = jl_Character_toCodePoint($ch, $low);
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = (240 | $codePoint >> 18) << 24 >> 24;
                    var$13 = $low + 1 | 0;
                    var$10[$low] = (128 | $codePoint >> 12 & 63) << 24 >> 24;
                    $outPos = var$13 + 1 | 0;
                    var$10[var$13] = (128 | $codePoint >> 6 & 63) << 24 >> 24;
                    $low = $outPos + 1 | 0;
                    var$10[$outPos] = (128 | $codePoint & 63) << 24 >> 24;
                    var$9 = $inPos;
                }
                $inPos = var$9;
                $outPos = $low;
            }
            var$9 = $inPos;
        }
        $controller.$inPosition = var$9;
        $controller.$outPosition = $outPos;
        return $result;
    }
    function jnci_BufferedDecoder() {
        var a = this; jnc_CharsetDecoder.call(a);
        a.$inArray0 = null;
        a.$outArray0 = null;
    }
    function jnci_BufferedDecoder__init_($this, $cs, $averageCharsPerByte, $maxCharsPerByte) {
        var var$4;
        $this.$replacement0 = $rt_s(402);
        jnc_CodingErrorAction_$callClinit();
        var$4 = jnc_CodingErrorAction_REPORT;
        $this.$malformedAction0 = var$4;
        $this.$unmappableAction0 = var$4;
        if ($averageCharsPerByte <= 0.0) {
            $cs = new jl_IllegalArgumentException;
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append2(jl_StringBuilder_append(var$4, $rt_s(403)), $averageCharsPerByte);
            jl_Throwable__init_($cs, jl_AbstractStringBuilder_toString(var$4));
            $rt_throw($cs);
        }
        if ($maxCharsPerByte > 0.0) {
            $this.$charset1 = $cs;
            $this.$averageCharsPerByte = $averageCharsPerByte;
            $this.$maxCharsPerByte = $maxCharsPerByte;
            $this.$inArray0 = $rt_createByteArray(512);
            $this.$outArray0 = $rt_createCharArray(512);
            return;
        }
        $cs = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append2(jl_StringBuilder_append(var$4, $rt_s(404)), $maxCharsPerByte);
        jl_Throwable__init_($cs, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw($cs);
    }
    function jnci_BufferedDecoder_decodeLoop($this, $in, $out) {
        var $inArray, $inPos, $inSize, $outArray, $i, var$8, var$9, var$10, $outPos, var$12, $outSize, var$14, $result, $controller;
        $inArray = $this.$inArray0;
        $inPos = 0;
        $inSize = 0;
        $outArray = $this.$outArray0;
        a: {
            b: {
                while (true) {
                    if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                        $i = $inPos;
                        while ($i < $inSize) {
                            var$8 = $inArray.data;
                            var$8[$i - $inPos | 0] = var$8[$i];
                            $i = $i + 1 | 0;
                        }
                        var$9 = $inArray.data;
                        var$10 = $inSize - $inPos | 0;
                        $outPos = jn_Buffer_remaining($in) + var$10 | 0;
                        $i = var$9.length;
                        $inSize = jl_Math_min($outPos, $i);
                        var$12 = $inSize - var$10 | 0;
                        if (var$10 < 0)
                            break b;
                        if (var$10 > $i)
                            break b;
                        $outPos = var$10 + var$12 | 0;
                        if ($outPos > $i) {
                            $in = new jl_IndexOutOfBoundsException;
                            $out = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($out);
                            jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(405)), $outPos), $rt_s(80)), $i);
                            jl_Throwable__init_($in, jl_AbstractStringBuilder_toString($out));
                            $rt_throw($in);
                        }
                        if (jn_Buffer_remaining($in) < var$12) {
                            $in = new jn_BufferUnderflowException;
                            jl_Throwable__init_0($in);
                            $rt_throw($in);
                        }
                        if (var$12 < 0) {
                            $in = new jl_IndexOutOfBoundsException;
                            $out = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($out);
                            jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(81)), var$12), $rt_s(82));
                            jl_Throwable__init_($in, jl_AbstractStringBuilder_toString($out));
                            $rt_throw($in);
                        }
                        $outSize = $in.$position0;
                        $i = $outSize + $in.$start5 | 0;
                        $inPos = 0;
                        while ($inPos < var$12) {
                            var$14 = var$10 + 1 | 0;
                            var$8 = $in.$array1.data;
                            $outPos = $i + 1 | 0;
                            var$9[var$10] = var$8[$i];
                            $inPos = $inPos + 1 | 0;
                            var$10 = var$14;
                            $i = $outPos;
                        }
                        $in.$position0 = $outSize + var$12 | 0;
                        $inPos = 0;
                    }
                    if (!jn_Buffer_hasRemaining($out)) {
                        $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$8 = $outArray.data;
                    $outSize = jn_Buffer_remaining($out);
                    var$14 = var$8.length;
                    $outSize = jl_Math_min($outSize, var$14);
                    $controller = new jnci_BufferedDecoder$Controller;
                    $controller.$in1 = $in;
                    $controller.$out2 = $out;
                    $result = $this.$arrayDecode($inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
                    $inPos = $controller.$inPosition0;
                    if ($result === null && 0 == $controller.$outPosition0)
                        $result = jnc_CoderResult_UNDERFLOW;
                    var$10 = $controller.$outPosition0;
                    $i = 0;
                    if ($out.$readOnly0) {
                        $in = new jn_ReadOnlyBufferException;
                        jl_Throwable__init_0($in);
                        $rt_throw($in);
                    }
                    if (jn_Buffer_remaining($out) < var$10)
                        break;
                    if ($i > var$14) {
                        $in = new jl_IndexOutOfBoundsException;
                        $out = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($out);
                        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(83)), $i), $rt_s(77)), var$14), 41);
                        jl_Throwable__init_($in, jl_AbstractStringBuilder_toString($out));
                        $rt_throw($in);
                    }
                    $outPos = $i + var$10 | 0;
                    if ($outPos > var$14) {
                        $in = new jl_IndexOutOfBoundsException;
                        $out = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($out);
                        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(102)), $outPos), $rt_s(80)), var$14);
                        jl_Throwable__init_($in, jl_AbstractStringBuilder_toString($out));
                        $rt_throw($in);
                    }
                    if (var$10 < 0) {
                        $in = new jl_IndexOutOfBoundsException;
                        $out = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($out);
                        jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(81)), var$10), $rt_s(82));
                        jl_Throwable__init_($in, jl_AbstractStringBuilder_toString($out));
                        $rt_throw($in);
                    }
                    var$14 = $out.$position0;
                    var$12 = 0;
                    while (var$12 < var$10) {
                        $outPos = var$14 + 1 | 0;
                        $outSize = $i + 1 | 0;
                        jn_CharBufferOverArray_putChar($out, var$14, var$8[$i]);
                        var$12 = var$12 + 1 | 0;
                        var$14 = $outPos;
                        $i = $outSize;
                    }
                    $out.$position0 = $out.$position0 + var$10 | 0;
                    if ($result !== null)
                        break a;
                }
                $in = new jn_BufferOverflowException;
                jl_Throwable__init_0($in);
                $rt_throw($in);
            }
            $in = new jl_IndexOutOfBoundsException;
            $out = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($out);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(83)), var$10), $rt_s(77)), $i), 41);
            jl_Throwable__init_($in, jl_AbstractStringBuilder_toString($out));
            $rt_throw($in);
        }
        jn_Buffer_position0($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
        return $result;
    }
    var jnci_UTF8Decoder = $rt_classWithoutFields(jnci_BufferedDecoder);
    function jnci_UTF8Decoder_arrayDecode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, $b2, $b, $b2_0, $b3, $c, $b4, $code;
        $result = null;
        a: {
            b: {
                c: {
                    while ($inPos < $inSize) {
                        if ($outPos >= $outSize)
                            break a;
                        var$9 = $inArray.data;
                        $b2 = $inPos + 1 | 0;
                        $b = var$9[$inPos] & 255;
                        if (!($b & 128)) {
                            var$9 = $outArray.data;
                            $b2_0 = $outPos + 1 | 0;
                            var$9[$outPos] = $b & 65535;
                        } else if (($b & 224) == 192) {
                            if ($b2 >= $inSize) {
                                $inPos = $b2 + (-1) | 0;
                                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                                    break a;
                                $result = jnc_CoderResult_UNDERFLOW;
                                break a;
                            }
                            $inPos = $b2 + 1 | 0;
                            $b2 = var$9[$b2];
                            if (!jnci_UTF8Decoder_checkMidByte($this, $b2)) {
                                $inPos = $inPos + (-2) | 0;
                                $result = jnc_CoderResult_malformedForLength(1);
                                break a;
                            }
                            var$9 = $outArray.data;
                            $b2_0 = $outPos + 1 | 0;
                            var$9[$outPos] = (($b & 31) << 6 | $b2 & 63) & 65535;
                            $b2 = $inPos;
                        } else if (($b & 240) == 224) {
                            if (($b2 + 2 | 0) > $inSize) {
                                $inPos = $b2 + (-1) | 0;
                                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 3))
                                    break a;
                                $result = jnc_CoderResult_UNDERFLOW;
                                break a;
                            }
                            $inPos = $b2 + 1 | 0;
                            $b2_0 = var$9[$b2];
                            $b2 = $inPos + 1 | 0;
                            $b3 = var$9[$inPos];
                            if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                                break b;
                            if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                                break b;
                            $c = (($b & 15) << 12 | ($b2_0 & 63) << 6 | $b3 & 63) & 65535;
                            if (jl_Character_isSurrogate($c)) {
                                $inPos = $b2 + (-3) | 0;
                                $result = jnc_CoderResult_malformedForLength(3);
                                break a;
                            }
                            var$9 = $outArray.data;
                            $b2_0 = $outPos + 1 | 0;
                            var$9[$outPos] = $c;
                        } else {
                            if (($b & 248) != 240) {
                                $inPos = $b2 + (-1) | 0;
                                $result = jnc_CoderResult_malformedForLength(1);
                                break a;
                            }
                            if (($b2 + 3 | 0) > $inSize) {
                                $inPos = $b2 + (-1) | 0;
                                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                                    break a;
                                $result = jnc_CoderResult_UNDERFLOW;
                                break a;
                            }
                            if (($outPos + 2 | 0) > $outSize) {
                                $inPos = $b2 + (-1) | 0;
                                if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                                    break a;
                                $result = jnc_CoderResult_OVERFLOW;
                                break a;
                            }
                            $inPos = $b2 + 1 | 0;
                            $b2_0 = var$9[$b2];
                            $b4 = $inPos + 1 | 0;
                            $b3 = var$9[$inPos];
                            $b2 = $b4 + 1 | 0;
                            $b4 = var$9[$b4];
                            if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                                break c;
                            if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                                break c;
                            if (!jnci_UTF8Decoder_checkMidByte($this, $b4))
                                break c;
                            var$9 = $outArray.data;
                            $code = ($b & 7) << 18 | ($b2_0 & 63) << 12 | ($b3 & 63) << 6 | $b4 & 63;
                            $inPos = $outPos + 1 | 0;
                            var$9[$outPos] = jl_Character_highSurrogate($code);
                            $b2_0 = $inPos + 1 | 0;
                            var$9[$inPos] = jl_Character_lowSurrogate($code);
                        }
                        $inPos = $b2;
                        $outPos = $b2_0;
                    }
                    break a;
                }
                $inPos = $b2 + (-3) | 0;
                $result = jnc_CoderResult_malformedForLength(1);
                break a;
            }
            $inPos = $b2 + (-3) | 0;
            $result = jnc_CoderResult_malformedForLength(1);
        }
        $controller.$inPosition0 = $inPos;
        $controller.$outPosition0 = $outPos;
        return $result;
    }
    function jnci_UTF8Decoder_checkMidByte($this, $b) {
        return ($b & 192) != 128 ? 0 : 1;
    }
    var jl_NegativeArraySizeException = $rt_classWithoutFields(jl_RuntimeException);
    function cjj_InfTree() {
        var a = this; jl_Object.call(a);
        a.$hn = null;
        a.$v = null;
        a.$c = null;
        a.$r = null;
        a.$u = null;
        a.$x4 = null;
    }
    var cjj_InfTree_fixed_tl = null;
    var cjj_InfTree_fixed_td = null;
    var cjj_InfTree_cplens = null;
    var cjj_InfTree_cplext = null;
    var cjj_InfTree_cpdist = null;
    var cjj_InfTree_cpdext = null;
    function cjj_InfTree_huft_build($this, $b, $bindex, $n, $s, $d, $e, $t, $m, $hp, $hn, $v) {
        var $p, $i, var$14, var$15, $a, $l, $j, $y, $xp, $mask, $w, $f, var$24, var$25, $h, $q, $z, $a_0;
        $p = 0;
        $i = $n;
        while (true) {
            var$14 = $b.data;
            var$15 = $this.$c.data;
            $a = var$14[$bindex + $p | 0];
            var$15[$a] = var$15[$a] + 1 | 0;
            $p = $p + 1 | 0;
            $i = $i + (-1) | 0;
            if (!$i)
                break;
        }
        if (var$15[0] == $n) {
            $b = $t.data;
            $d = $m.data;
            $b[0] = (-1);
            $d[0] = 0;
            return 0;
        }
        $b = $m.data;
        $l = $b[0];
        $j = 1;
        a: {
            while (true) {
                if ($j > 15)
                    break a;
                if (var$15[$j])
                    break;
                $j = $j + 1 | 0;
            }
        }
        if ($l < $j)
            $l = $j;
        $p = 15;
        b: {
            while (true) {
                if (!$p)
                    break b;
                if (var$15[$p])
                    break;
                $p = $p + (-1) | 0;
            }
        }
        if ($l > $p)
            $l = $p;
        $b[0] = $l;
        $y = 1 << $j;
        $xp = $j;
        while (true) {
            if ($xp >= $p) {
                $i = $y - var$15[$p] | 0;
                if ($i < 0)
                    return (-3);
                var$15[$p] = var$15[$p] + $i | 0;
                $b = $this.$x4.data;
                $mask = 0;
                $b[1] = $mask;
                $w = 1;
                $xp = 2;
                $f = $p;
                while (true) {
                    $f = $f + (-1) | 0;
                    if (!$f)
                        break;
                    $mask = $mask + var$15[$w] | 0;
                    $b[$xp] = $mask;
                    $xp = $xp + 1 | 0;
                    $w = $w + 1 | 0;
                }
                $a = 0;
                $xp = 0;
                while (true) {
                    $f = var$14[$bindex + $xp | 0];
                    if ($f) {
                        $m = $v.data;
                        $w = $b[$f];
                        $b[$f] = $w + 1 | 0;
                        $m[$w] = $a;
                    }
                    $xp = $xp + 1 | 0;
                    $a = $a + 1 | 0;
                    if ($a >= $n)
                        break;
                }
                $xp = $b[$p];
                var$24 = 0;
                $b[0] = var$24;
                var$25 = 0;
                $h = (-1);
                $w =  -$l | 0;
                $this.$u.data[0] = 0;
                $q = 0;
                $z = 0;
                c: while (true) {
                    if ($j > $p)
                        return $i && $p != 1 ? (-5) : 0;
                    $a = $this.$c.data[$j];
                    while (true) {
                        $a_0 = $a + (-1) | 0;
                        if (!$a)
                            break;
                        $y = $a_0 + 1 | 0;
                        while (true) {
                            $f = $w + $l | 0;
                            if ($j <= $f)
                                break;
                            $h = $h + 1 | 0;
                            $mask = $p - $f | 0;
                            if ($mask > $l)
                                $mask = $l;
                            d: {
                                $w = $j - $f | 0;
                                $bindex = 1 << $w;
                                if ($bindex > $y) {
                                    $bindex = $bindex - $y | 0;
                                    if ($w < $mask) {
                                        $n = $j;
                                        while (true) {
                                            $w = $w + 1 | 0;
                                            if ($w >= $mask)
                                                break;
                                            $bindex = $bindex << 1;
                                            $b = $this.$c.data;
                                            $n = $n + 1 | 0;
                                            if ($bindex <= $b[$n])
                                                break d;
                                            $bindex = $bindex - $b[$n] | 0;
                                        }
                                    }
                                }
                            }
                            $m = $hn.data;
                            $z = 1 << $w;
                            if (($m[0] + $z | 0) > 1440)
                                break c;
                            $b = $this.$u.data;
                            $q = $m[0];
                            $b[$h] = $q;
                            $m[0] = $m[0] + $z | 0;
                            if (!$h) {
                                $t.data[0] = $q;
                                $w = $f;
                                continue;
                            }
                            $this.$x4.data[$h] = var$24;
                            $m = $this.$r;
                            var$15 = $m.data;
                            var$15[0] = $w << 24 >> 24;
                            var$15[1] = $l << 24 >> 24;
                            $mask = var$24 >>> ($f - $l | 0) | 0;
                            $n = $h - 1 | 0;
                            var$15[2] = ($q - $b[$n] | 0) - $mask | 0;
                            jl_System_fastArraycopy($m, 0, $hp, ($b[$n] + $mask | 0) * 3 | 0, 3);
                            $w = $f;
                        }
                        var$15 = $this.$r.data;
                        $f = $j - $w | 0;
                        var$15[1] = $f << 24 >> 24;
                        if (var$25 >= $xp)
                            var$15[0] = 192;
                        else {
                            var$14 = $v.data;
                            if (var$14[var$25] >= $s) {
                                $b = $e.data;
                                $m = $d.data;
                                var$15[0] = (($b[var$14[var$25] - $s | 0] + 16 | 0) + 64 | 0) << 24 >> 24;
                                $n = var$25 + 1 | 0;
                                var$15[2] = $m[var$14[var$25] - $s | 0];
                                var$25 = $n;
                            } else {
                                var$15[0] = (var$14[var$25] >= 256 ? 96 : 0) << 24 >> 24;
                                $n = var$25 + 1 | 0;
                                var$15[2] = var$14[var$25];
                                var$25 = $n;
                            }
                        }
                        $f = 1 << $f;
                        $bindex = var$24 >>> $w | 0;
                        while ($bindex < $z) {
                            jl_System_fastArraycopy($this.$r, 0, $hp, ($q + $bindex | 0) * 3 | 0, 3);
                            $bindex = $bindex + $f | 0;
                        }
                        $bindex = 1 << ($j - 1 | 0);
                        while (var$24 & $bindex) {
                            var$24 = var$24 ^ $bindex;
                            $bindex = $bindex >>> 1 | 0;
                        }
                        var$24 = var$24 ^ $bindex;
                        $mask = (1 << $w) - 1 | 0;
                        while ((var$24 & $mask) != $this.$x4.data[$h]) {
                            $h = $h + (-1) | 0;
                            $w = $w - $l | 0;
                            $mask = (1 << $w) - 1 | 0;
                        }
                        $a = $a_0;
                    }
                    $j = $j + 1 | 0;
                }
                return (-3);
            }
            $a = $y - var$15[$xp] | 0;
            if ($a < 0)
                break;
            $xp = $xp + 1 | 0;
            $y = $a << 1;
        }
        return (-3);
    }
    function cjj_InfTree_inflate_trees_bits($this, $c, $bb, $tb, $hp, $z) {
        var var$6, $result;
        cjj_InfTree_initWorkArea($this, 19);
        var$6 = $this.$hn;
        var$6.data[0] = 0;
        $result = cjj_InfTree_huft_build($this, $c, 0, 19, 19, null, null, $tb, $bb, $hp, var$6, $this.$v);
        if ($result == (-3))
            $z.$msg = $rt_s(406);
        else if (!($result != (-5) && $bb.data[0])) {
            $z.$msg = $rt_s(407);
            $result = (-3);
        }
        return $result;
    }
    function cjj_InfTree_inflate_trees_dynamic($this, $nl, $nd, $c, $bl, $bd, $tl, $td, $hp, $z) {
        var var$10, $result;
        cjj_InfTree_initWorkArea($this, 288);
        var$10 = $this.$hn;
        var$10.data[0] = 0;
        $result = cjj_InfTree_huft_build($this, $c, 0, $nl, 257, cjj_InfTree_cplens, cjj_InfTree_cplext, $tl, $bl, $hp, var$10, $this.$v);
        if (!$result && $bl.data[0]) {
            cjj_InfTree_initWorkArea($this, 288);
            $nd = cjj_InfTree_huft_build($this, $c, $nl, $nd, 0, cjj_InfTree_cpdist, cjj_InfTree_cpdext, $td, $bd, $hp, $this.$hn, $this.$v);
            if (!$nd && !(!$bd.data[0] && $nl > 257))
                return 0;
            if ($nd == (-3))
                $z.$msg = $rt_s(408);
            else if ($nd == (-5)) {
                $z.$msg = $rt_s(409);
                $nd = (-3);
            } else if ($nd != (-4)) {
                $z.$msg = $rt_s(410);
                $nd = (-3);
            }
            return $nd;
        }
        if ($result == (-3))
            $z.$msg = $rt_s(411);
        else if ($result != (-4)) {
            $z.$msg = $rt_s(412);
            $result = (-3);
        }
        return $result;
    }
    function cjj_InfTree_inflate_trees_fixed($bl, $bd, $tl, $td, $z) {
        $td = $td.data;
        $tl = $tl.data;
        $bd = $bd.data;
        $bl.data[0] = 9;
        $bd[0] = 5;
        $tl[0] = cjj_InfTree_fixed_tl;
        $td[0] = cjj_InfTree_fixed_td;
        return 0;
    }
    function cjj_InfTree_initWorkArea($this, $vsize) {
        var $i;
        if ($this.$hn === null) {
            $this.$hn = $rt_createIntArray(1);
            $this.$v = $rt_createIntArray($vsize);
            $this.$c = $rt_createIntArray(16);
            $this.$r = $rt_createIntArray(3);
            $this.$u = $rt_createIntArray(15);
            $this.$x4 = $rt_createIntArray(16);
        }
        if ($this.$v.data.length < $vsize)
            $this.$v = $rt_createIntArray($vsize);
        $i = 0;
        while ($i < $vsize) {
            $this.$v.data[$i] = 0;
            $i = $i + 1 | 0;
        }
        $i = 0;
        while ($i < 16) {
            $this.$c.data[$i] = 0;
            $i = $i + 1 | 0;
        }
        $i = 0;
        while ($i < 3) {
            $this.$r.data[$i] = 0;
            $i = $i + 1 | 0;
        }
        jl_System_fastArraycopy($this.$c, 0, $this.$u, 0, 15);
        jl_System_fastArraycopy($this.$c, 0, $this.$x4, 0, 16);
    }
    function cjj_InfTree__clinit_() {
        cjj_InfTree_fixed_tl = $rt_createIntArrayFromData([96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36,
        0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42,
        0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33,
        0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45,
        0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39,
        0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40,
        0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34,
        0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46,
        0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37,
        0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43,
        0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255]);
        cjj_InfTree_fixed_td = $rt_createIntArrayFromData([80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577]);
        cjj_InfTree_cplens = $rt_createIntArrayFromData([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]);
        cjj_InfTree_cplext = $rt_createIntArrayFromData([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112]);
        cjj_InfTree_cpdist = $rt_createIntArrayFromData([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);
        cjj_InfTree_cpdext = $rt_createIntArrayFromData([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
    }
    function cjj_InfCodes() {
        var a = this; jl_Object.call(a);
        a.$mode4 = 0;
        a.$len = 0;
        a.$tree = null;
        a.$tree_index = 0;
        a.$need0 = 0;
        a.$lit = 0;
        a.$get9 = 0;
        a.$dist = 0;
        a.$lbits = 0;
        a.$dbits = 0;
        a.$ltree = null;
        a.$ltree_index = 0;
        a.$dtree = null;
        a.$dtree_index = 0;
        a.$z6 = null;
        a.$s = null;
    }
    var cjj_InfCodes_inflate_mask = null;
    function cjj_InfCodes_init($this, $bl, $bd, $tl, $tl_index, $td, $td_index) {
        $this.$mode4 = 0;
        $this.$lbits = $bl << 24 >> 24;
        $this.$dbits = $bd << 24 >> 24;
        $this.$ltree = $tl;
        $this.$ltree_index = $tl_index;
        $this.$dtree = $td;
        $this.$dtree_index = $td_index;
        $this.$tree = null;
    }
    function cjj_InfCodes_proc($this, $r) {
        var var$2, var$3, $n, var$5, var$6, $q, $f, $m, var$10, var$11, $j, $tindex, $e;
        var$2 = $this.$z6;
        var$3 = var$2.$next_in_index;
        $n = var$2.$avail_in;
        var$2 = $this.$s;
        var$5 = var$2.$bitb;
        var$6 = var$2.$bitk;
        $q = var$2.$write0;
        $f = var$2.$read2;
        $m = $q >= $f ? var$2.$end2 - $q | 0 : ($f - $q | 0) - 1 | 0;
        a: {
            b: while (true) {
                c: {
                    d: {
                        e: {
                            f: {
                                g: {
                                    switch ($this.$mode4) {
                                        case 0:
                                            break f;
                                        case 2:
                                            $f = $this.$get9;
                                            while (var$6 < $f) {
                                                if (!$n) {
                                                    var$2 = $this.$s;
                                                    var$2.$bitb = var$5;
                                                    var$2.$bitk = var$6;
                                                    var$10 = $this.$z6;
                                                    var$10.$avail_in = $n;
                                                    var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                                    var$10.$next_in_index = var$3;
                                                    var$2.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush(var$2, $r);
                                                }
                                                $r = 0;
                                                $n = $n + (-1) | 0;
                                                var$11 = $this.$z6.$next_in.data;
                                                $j = var$3 + 1 | 0;
                                                var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                                                var$6 = var$6 + 8 | 0;
                                                var$3 = $j;
                                            }
                                            $this.$len = $this.$len + (var$5 & cjj_InfCodes_inflate_mask.data[$f]) | 0;
                                            var$5 = var$5 >> $f;
                                            var$6 = var$6 - $f | 0;
                                            $this.$need0 = $this.$dbits;
                                            $this.$tree = $this.$dtree;
                                            $this.$tree_index = $this.$dtree_index;
                                            $this.$mode4 = 3;
                                            break g;
                                        case 4:
                                            $j = $this.$get9;
                                            while (var$6 < $j) {
                                                if (!$n) {
                                                    var$2 = $this.$s;
                                                    var$2.$bitb = var$5;
                                                    var$2.$bitk = var$6;
                                                    var$10 = $this.$z6;
                                                    var$10.$avail_in = $n;
                                                    var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                                    var$10.$next_in_index = var$3;
                                                    var$2.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush(var$2, $r);
                                                }
                                                $r = 0;
                                                $n = $n + (-1) | 0;
                                                var$11 = $this.$z6.$next_in.data;
                                                $f = var$3 + 1 | 0;
                                                var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                                                var$6 = var$6 + 8 | 0;
                                                var$3 = $f;
                                            }
                                            $this.$dist = $this.$dist + (var$5 & cjj_InfCodes_inflate_mask.data[$j]) | 0;
                                            var$5 = var$5 >> $j;
                                            var$6 = var$6 - $j | 0;
                                            $this.$mode4 = 5;
                                            break c;
                                        case 6:
                                            break d;
                                        case 7:
                                            if (var$6 > 7) {
                                                var$6 = var$6 + (-8) | 0;
                                                $n = $n + 1 | 0;
                                                var$3 = var$3 + (-1) | 0;
                                            }
                                            var$2 = $this.$s;
                                            var$2.$write0 = $q;
                                            $r = cjj_InfBlocks_inflate_flush(var$2, $r);
                                            var$2 = $this.$s;
                                            $q = var$2.$write0;
                                            $f = var$2.$read2;
                                            if ($f != $q) {
                                                var$2.$bitb = var$5;
                                                var$2.$bitk = var$6;
                                                var$10 = $this.$z6;
                                                var$10.$avail_in = $n;
                                                var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                                var$10.$next_in_index = var$3;
                                                var$2.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush(var$2, $r);
                                            }
                                            $this.$mode4 = 8;
                                            break a;
                                        case 9:
                                            var$2 = $this.$s;
                                            var$2.$bitb = var$5;
                                            var$2.$bitk = var$6;
                                            var$10 = $this.$z6;
                                            var$10.$avail_in = $n;
                                            var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                            var$10.$next_in_index = var$3;
                                            var$2.$write0 = $q;
                                            return cjj_InfBlocks_inflate_flush(var$2, (-3));
                                        case 1:
                                            break e;
                                        case 3:
                                            break;
                                        case 5:
                                            break c;
                                        case 8:
                                            break a;
                                        default:
                                            var$2 = $this.$s;
                                            var$2.$bitb = var$5;
                                            var$2.$bitk = var$6;
                                            var$10 = $this.$z6;
                                            var$10.$avail_in = $n;
                                            var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                            var$10.$next_in_index = var$3;
                                            var$2.$write0 = $q;
                                            return cjj_InfBlocks_inflate_flush(var$2, (-2));
                                    }
                                }
                                $f = $this.$need0;
                                while (var$6 < $f) {
                                    if (!$n) {
                                        var$2 = $this.$s;
                                        var$2.$bitb = var$5;
                                        var$2.$bitk = var$6;
                                        var$10 = $this.$z6;
                                        var$10.$avail_in = $n;
                                        var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                        var$10.$next_in_index = var$3;
                                        var$2.$write0 = $q;
                                        return cjj_InfBlocks_inflate_flush(var$2, $r);
                                    }
                                    $r = 0;
                                    $n = $n + (-1) | 0;
                                    var$11 = $this.$z6.$next_in.data;
                                    $j = var$3 + 1 | 0;
                                    var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                                    var$6 = var$6 + 8 | 0;
                                    var$3 = $j;
                                }
                                $f = ($this.$tree_index + (var$5 & cjj_InfCodes_inflate_mask.data[$f]) | 0) * 3 | 0;
                                var$11 = $this.$tree.data;
                                $j = $f + 1 | 0;
                                var$5 = var$5 >> var$11[$j];
                                var$6 = var$6 - var$11[$j] | 0;
                                $j = var$11[$f];
                                if ($j & 16) {
                                    $this.$get9 = $j & 15;
                                    $this.$dist = var$11[$f + 2 | 0];
                                    $this.$mode4 = 4;
                                    continue b;
                                }
                                if ($j & 64) {
                                    $this.$mode4 = 9;
                                    var$2 = $this.$z6;
                                    var$2.$msg = $rt_s(413);
                                    var$10 = $this.$s;
                                    var$10.$bitb = var$5;
                                    var$10.$bitk = var$6;
                                    var$2.$avail_in = $n;
                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt(var$3 - var$2.$next_in_index | 0));
                                    var$2.$next_in_index = var$3;
                                    var$10.$write0 = $q;
                                    return cjj_InfBlocks_inflate_flush(var$10, (-3));
                                }
                                $this.$need0 = $j;
                                $this.$tree_index = ($f / 3 | 0) + var$11[$f + 2 | 0] | 0;
                                continue b;
                            }
                            if ($m >= 258 && $n >= 10) {
                                var$2 = $this.$s;
                                var$2.$bitb = var$5;
                                var$2.$bitk = var$6;
                                var$10 = $this.$z6;
                                var$10.$avail_in = $n;
                                var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                var$10.$next_in_index = var$3;
                                var$2.$write0 = $q;
                                $r = cjj_InfCodes_inflate_fast($this, $this.$lbits, $this.$dbits, $this.$ltree, $this.$ltree_index, $this.$dtree, $this.$dtree_index, var$2, var$10);
                                var$2 = $this.$z6;
                                var$3 = var$2.$next_in_index;
                                $n = var$2.$avail_in;
                                var$2 = $this.$s;
                                var$5 = var$2.$bitb;
                                var$6 = var$2.$bitk;
                                $q = var$2.$write0;
                                $f = var$2.$read2;
                                $m = $q >= $f ? var$2.$end2 - $q | 0 : ($f - $q | 0) - 1 | 0;
                                if ($r) {
                                    $this.$mode4 = $r != 1 ? 9 : 7;
                                    continue b;
                                }
                            }
                            $this.$need0 = $this.$lbits;
                            $this.$tree = $this.$ltree;
                            $this.$tree_index = $this.$ltree_index;
                            $this.$mode4 = 1;
                        }
                        $j = $this.$need0;
                        while (var$6 < $j) {
                            if (!$n) {
                                var$2 = $this.$s;
                                var$2.$bitb = var$5;
                                var$2.$bitk = var$6;
                                var$10 = $this.$z6;
                                var$10.$avail_in = $n;
                                var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                var$10.$next_in_index = var$3;
                                var$2.$write0 = $q;
                                return cjj_InfBlocks_inflate_flush(var$2, $r);
                            }
                            $r = 0;
                            $n = $n + (-1) | 0;
                            var$11 = $this.$z6.$next_in.data;
                            $f = var$3 + 1 | 0;
                            var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                            var$6 = var$6 + 8 | 0;
                            var$3 = $f;
                        }
                        $tindex = ($this.$tree_index + (var$5 & cjj_InfCodes_inflate_mask.data[$j]) | 0) * 3 | 0;
                        var$11 = $this.$tree.data;
                        $f = $tindex + 1 | 0;
                        var$5 = var$5 >>> var$11[$f] | 0;
                        var$6 = var$6 - var$11[$f] | 0;
                        $e = var$11[$tindex];
                        if (!$e) {
                            $this.$lit = var$11[$tindex + 2 | 0];
                            $this.$mode4 = 6;
                            continue b;
                        }
                        if ($e & 16) {
                            $this.$get9 = $e & 15;
                            $this.$len = var$11[$tindex + 2 | 0];
                            $this.$mode4 = 2;
                            continue b;
                        }
                        if (!($e & 64)) {
                            $this.$need0 = $e;
                            $this.$tree_index = ($tindex / 3 | 0) + var$11[$tindex + 2 | 0] | 0;
                            continue b;
                        }
                        if (!($e & 32)) {
                            $this.$mode4 = 9;
                            var$2 = $this.$z6;
                            var$2.$msg = $rt_s(414);
                            var$10 = $this.$s;
                            var$10.$bitb = var$5;
                            var$10.$bitk = var$6;
                            var$2.$avail_in = $n;
                            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt(var$3 - var$2.$next_in_index | 0));
                            var$2.$next_in_index = var$3;
                            var$10.$write0 = $q;
                            return cjj_InfBlocks_inflate_flush(var$10, (-3));
                        }
                        $this.$mode4 = 7;
                        continue b;
                    }
                    if ($m)
                        $f = $q;
                    else {
                        var$2 = $this.$s;
                        $j = var$2.$end2;
                        if ($q != $j)
                            $f = $q;
                        else {
                            $tindex = var$2.$read2;
                            if (!$tindex)
                                $f = $q;
                            else {
                                $f = 0;
                                $m = $f >= $tindex ? $j - $f | 0 : ($tindex - $f | 0) - 1 | 0;
                            }
                        }
                        if (!$m) {
                            var$2.$write0 = $f;
                            $r = cjj_InfBlocks_inflate_flush(var$2, $r);
                            var$2 = $this.$s;
                            $f = var$2.$write0;
                            $j = var$2.$read2;
                            $m = $f >= $j ? var$2.$end2 - $f | 0 : ($j - $f | 0) - 1 | 0;
                            $tindex = var$2.$end2;
                            if ($f == $tindex && $j) {
                                $f = 0;
                                $m = $f >= $j ? $tindex - $f | 0 : ($j - $f | 0) - 1 | 0;
                            }
                            if (!$m) {
                                var$2.$bitb = var$5;
                                var$2.$bitk = var$6;
                                var$10 = $this.$z6;
                                var$10.$avail_in = $n;
                                var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                var$10.$next_in_index = var$3;
                                var$2.$write0 = $f;
                                return cjj_InfBlocks_inflate_flush(var$2, $r);
                            }
                        }
                    }
                    $r = 0;
                    var$11 = $this.$s.$window.data;
                    $q = $f + 1 | 0;
                    var$11[$f] = $this.$lit << 24 >> 24;
                    $m = $m + (-1) | 0;
                    $this.$mode4 = 0;
                    continue b;
                }
                $f = $q - $this.$dist | 0;
                while ($f < 0) {
                    $f = $f + $this.$s.$end2 | 0;
                }
                while ($this.$len) {
                    if ($m)
                        $j = $q;
                    else {
                        var$2 = $this.$s;
                        $tindex = var$2.$end2;
                        if ($q != $tindex)
                            $j = $q;
                        else {
                            $e = var$2.$read2;
                            if (!$e)
                                $j = $q;
                            else {
                                $j = 0;
                                $m = $j >= $e ? $tindex - $j | 0 : ($e - $j | 0) - 1 | 0;
                            }
                        }
                        if (!$m) {
                            var$2.$write0 = $j;
                            $r = cjj_InfBlocks_inflate_flush(var$2, $r);
                            var$2 = $this.$s;
                            $j = var$2.$write0;
                            $tindex = var$2.$read2;
                            $m = $j >= $tindex ? var$2.$end2 - $j | 0 : ($tindex - $j | 0) - 1 | 0;
                            $e = var$2.$end2;
                            if ($j == $e && $tindex) {
                                $j = 0;
                                $m = $j >= $tindex ? $e - $j | 0 : ($tindex - $j | 0) - 1 | 0;
                            }
                            if (!$m)
                                break b;
                        }
                    }
                    var$2 = $this.$s;
                    var$11 = var$2.$window.data;
                    $q = $j + 1 | 0;
                    $tindex = $f + 1 | 0;
                    var$11[$j] = var$11[$f];
                    $m = $m + (-1) | 0;
                    $f = $tindex == var$2.$end2 ? 0 : $tindex;
                    $this.$len = $this.$len - 1 | 0;
                }
                $this.$mode4 = 0;
            }
            var$2.$bitb = var$5;
            var$2.$bitk = var$6;
            var$10 = $this.$z6;
            var$10.$avail_in = $n;
            var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
            var$10.$next_in_index = var$3;
            var$2.$write0 = $j;
            return cjj_InfBlocks_inflate_flush(var$2, $r);
        }
        var$2 = $this.$s;
        var$2.$bitb = var$5;
        var$2.$bitk = var$6;
        var$10 = $this.$z6;
        var$10.$avail_in = $n;
        var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
        var$10.$next_in_index = var$3;
        var$2.$write0 = $q;
        return cjj_InfBlocks_inflate_flush(var$2, 1);
    }
    function cjj_InfCodes_free($this, $z) {}
    function cjj_InfCodes_inflate_fast($this, $bl, $bd, $tl, $tl_index, $td, $td_index, $s, $z) {
        var $p, $n, $b, $k, $q, $r, $m, var$16, $ml, $md, var$19, $t, $tp_index_t_3, $d, var$23, $c;
        $p = $z.$next_in_index;
        $n = $z.$avail_in;
        $b = $s.$bitb;
        $k = $s.$bitk;
        $q = $s.$write0;
        $r = $s.$read2;
        $m = $q >= $r ? $s.$end2 - $q | 0 : ($r - $q | 0) - 1 | 0;
        var$16 = cjj_InfCodes_inflate_mask.data;
        $ml = var$16[$bl];
        $md = var$16[$bd];
        while (true) {
            if ($k < 20) {
                $n = $n + (-1) | 0;
                var$16 = $z.$next_in.data;
                $bl = $p + 1 | 0;
                $b = $b | (var$16[$p] & 255) << $k;
                $k = $k + 8 | 0;
                $p = $bl;
                continue;
            }
            a: {
                var$19 = $tl.data;
                $t = $b & $ml;
                $tp_index_t_3 = ($tl_index + $t | 0) * 3 | 0;
                $bd = var$19[$tp_index_t_3];
                if (!$bd) {
                    $bl = $tp_index_t_3 + 1 | 0;
                    $b = $b >> var$19[$bl];
                    $k = $k - var$19[$bl] | 0;
                    var$16 = $s.$window.data;
                    $d = $q + 1 | 0;
                    var$16[$q] = var$19[$tp_index_t_3 + 2 | 0] << 24 >> 24;
                    $m = $m + (-1) | 0;
                } else {
                    while (true) {
                        $bl = $tp_index_t_3 + 1 | 0;
                        $b = $b >> var$19[$bl];
                        $k = $k - var$19[$bl] | 0;
                        if ($bd & 16) {
                            $bd = $bd & 15;
                            $bl = var$19[$tp_index_t_3 + 2 | 0];
                            var$23 = cjj_InfCodes_inflate_mask.data;
                            $c = $bl + ($b & var$23[$bd]) | 0;
                            $bl = $b >> $bd;
                            $bd = $k - $bd | 0;
                            while ($bd < 15) {
                                $n = $n + (-1) | 0;
                                var$16 = $z.$next_in.data;
                                $r = $p + 1 | 0;
                                $bl = $bl | (var$16[$p] & 255) << $bd;
                                $bd = $bd + 8 | 0;
                                $p = $r;
                            }
                            var$16 = $td.data;
                            $r = $bl & $md;
                            $d = ($td_index + $r | 0) * 3 | 0;
                            $b = var$16[$d];
                            while (true) {
                                $k = $d + 1 | 0;
                                $bl = $bl >> var$16[$k];
                                $bd = $bd - var$16[$k] | 0;
                                if ($b & 16)
                                    break;
                                if ($b & 64) {
                                    $z.$msg = $rt_s(413);
                                    $tl_index = $z.$avail_in - $n | 0;
                                    $td_index = $bd >> 3;
                                    if ($td_index < $tl_index)
                                        $tl_index = $td_index;
                                    $td_index = $n + $tl_index | 0;
                                    $r = $p - $tl_index | 0;
                                    $bd = $bd - ($tl_index << 3) | 0;
                                    $s.$bitb = $bl;
                                    $s.$bitk = $bd;
                                    $z.$avail_in = $td_index;
                                    $z.$total_in = Long_add($z.$total_in, Long_fromInt($r - $z.$next_in_index | 0));
                                    $z.$next_in_index = $r;
                                    $s.$write0 = $q;
                                    return (-3);
                                }
                                $r = ($r + var$16[$d + 2 | 0] | 0) + ($bl & var$23[$b]) | 0;
                                $d = ($td_index + $r | 0) * 3 | 0;
                                $b = var$16[$d];
                            }
                            $r = $b & 15;
                            while ($bd < $r) {
                                $n = $n + (-1) | 0;
                                var$19 = $z.$next_in.data;
                                $b = $p + 1 | 0;
                                $bl = $bl | (var$19[$p] & 255) << $bd;
                                $bd = $bd + 8 | 0;
                                $p = $b;
                            }
                            $d = var$16[$d + 2 | 0] + ($bl & var$23[$r]) | 0;
                            $b = $bl >> $r;
                            $k = $bd - $r | 0;
                            $m = $m - $c | 0;
                            if ($q >= $d) {
                                $r = $q - $d | 0;
                                $bl = $q - $r | 0;
                                if ($bl > 0 && 2 > $bl) {
                                    var$16 = $s.$window.data;
                                    $bl = $q + 1 | 0;
                                    $bd = $r + 1 | 0;
                                    var$16[$q] = var$16[$r];
                                    $q = $bl + 1 | 0;
                                    $r = $bd + 1 | 0;
                                    var$16[$bl] = var$16[$bd];
                                    $c = $c + (-2) | 0;
                                } else {
                                    var$16 = $s.$window;
                                    jl_System_fastArraycopy(var$16, $r, var$16, $q, 2);
                                    $q = $q + 2 | 0;
                                    $r = $r + 2 | 0;
                                    $c = $c + (-2) | 0;
                                }
                            } else {
                                $r = $q - $d | 0;
                                while (true) {
                                    $bl = $s.$end2;
                                    $r = $r + $bl | 0;
                                    if ($r >= 0)
                                        break;
                                }
                                $bl = $bl - $r | 0;
                                if ($c > $bl) {
                                    $c = $c - $bl | 0;
                                    $bd = $q - $r | 0;
                                    if ($bd > 0 && $bl > $bd) {
                                        $bd = $q;
                                        while (true) {
                                            var$16 = $s.$window.data;
                                            $q = $bd + 1 | 0;
                                            $d = $r + 1 | 0;
                                            var$16[$bd] = var$16[$r];
                                            $bl = $bl + (-1) | 0;
                                            if (!$bl)
                                                break;
                                            $bd = $q;
                                            $r = $d;
                                        }
                                    } else {
                                        var$16 = $s.$window;
                                        jl_System_fastArraycopy(var$16, $r, var$16, $q, $bl);
                                        $q = $q + $bl | 0;
                                    }
                                    $r = 0;
                                }
                            }
                            $bl = $q - $r | 0;
                            if ($bl > 0 && $c > $bl) {
                                while (true) {
                                    var$16 = $s.$window.data;
                                    $d = $q + 1 | 0;
                                    $bl = $r + 1 | 0;
                                    var$16[$q] = var$16[$r];
                                    $c = $c + (-1) | 0;
                                    if (!$c)
                                        break;
                                    $q = $d;
                                    $r = $bl;
                                }
                                break a;
                            }
                            var$16 = $s.$window;
                            jl_System_fastArraycopy(var$16, $r, var$16, $q, $c);
                            $d = $q + $c | 0;
                            break a;
                        }
                        if ($bd & 64) {
                            if ($bd & 32) {
                                $c = $z.$avail_in - $n | 0;
                                $bl = $k >> 3;
                                if ($bl < $c)
                                    $c = $bl;
                                $bl = $n + $c | 0;
                                $bd = $p - $c | 0;
                                $tl_index = $k - ($c << 3) | 0;
                                $s.$bitb = $b;
                                $s.$bitk = $tl_index;
                                $z.$avail_in = $bl;
                                $z.$total_in = Long_add($z.$total_in, Long_fromInt($bd - $z.$next_in_index | 0));
                                $z.$next_in_index = $bd;
                                $s.$write0 = $q;
                                return 1;
                            }
                            $z.$msg = $rt_s(414);
                            $c = $z.$avail_in - $n | 0;
                            $bl = $k >> 3;
                            if ($bl < $c)
                                $c = $bl;
                            $bl = $n + $c | 0;
                            $bd = $p - $c | 0;
                            $tl_index = $k - ($c << 3) | 0;
                            $s.$bitb = $b;
                            $s.$bitk = $tl_index;
                            $z.$avail_in = $bl;
                            $z.$total_in = Long_add($z.$total_in, Long_fromInt($bd - $z.$next_in_index | 0));
                            $z.$next_in_index = $bd;
                            $s.$write0 = $q;
                            return (-3);
                        }
                        $t = ($t + var$19[$tp_index_t_3 + 2 | 0] | 0) + ($b & cjj_InfCodes_inflate_mask.data[$bd]) | 0;
                        $tp_index_t_3 = ($tl_index + $t | 0) * 3 | 0;
                        $bd = var$19[$tp_index_t_3];
                        if (!$bd)
                            break;
                    }
                    $bl = $tp_index_t_3 + 1 | 0;
                    $b = $b >> var$19[$bl];
                    $k = $k - var$19[$bl] | 0;
                    var$16 = $s.$window.data;
                    $d = $q + 1 | 0;
                    var$16[$q] = var$19[$tp_index_t_3 + 2 | 0] << 24 >> 24;
                    $m = $m + (-1) | 0;
                }
            }
            if ($m < 258)
                break;
            if ($n < 10)
                break;
            $q = $d;
        }
        $c = $z.$avail_in - $n | 0;
        $bl = $k >> 3;
        if ($bl < $c)
            $c = $bl;
        $bl = $n + $c | 0;
        $bd = $p - $c | 0;
        $tl_index = $k - ($c << 3) | 0;
        $s.$bitb = $b;
        $s.$bitk = $tl_index;
        $z.$avail_in = $bl;
        $z.$total_in = Long_add($z.$total_in, Long_fromInt($bd - $z.$next_in_index | 0));
        $z.$next_in_index = $bd;
        $s.$write0 = $d;
        return 0;
    }
    function cjj_InfCodes__clinit_() {
        cjj_InfCodes_inflate_mask = $rt_createIntArrayFromData([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535]);
    }
    function ji_Writer() {
        jl_Object.call(this);
        this.$lock0 = null;
    }
    function ji_OutputStreamWriter() {
        var a = this; ji_Writer.call(a);
        a.$out3 = null;
        a.$encoder = null;
        a.$bufferData = null;
        a.$buffer6 = null;
        a.$closed0 = 0;
    }
    function ji_OutputStreamWriter_nullCheck($stream) {
        if ($stream !== null)
            return $stream;
        $stream = new jl_NullPointerException;
        jl_Throwable__init_0($stream);
        $rt_throw($stream);
    }
    function ji_OutputStreamWriter_close($this) {
        var var$1;
        if (!$this.$closed0) {
            ji_OutputStreamWriter_flush($this);
            $this.$closed0 = 1;
            ji_FileOutputStream_flush($this.$out3);
            var$1 = $this.$out3;
            var$1.$accessor0 = null;
        }
    }
    function ji_OutputStreamWriter_flush($this) {
        var var$1;
        ji_OutputStreamWriter_checkStatus($this);
        var$1 = $this.$buffer6.$position0;
        if (var$1 > 0) {
            ji_FileOutputStream_write($this.$out3, $this.$bufferData, 0, var$1);
            jn_Buffer_clear($this.$buffer6);
        }
        ji_FileOutputStream_flush($this.$out3);
    }
    function ji_OutputStreamWriter_checkStatus($this) {
        var var$1;
        if (!$this.$closed0)
            return;
        var$1 = new ji_IOException;
        jl_Throwable__init_(var$1, $rt_s(415));
        $rt_throw(var$1);
    }
    function ji_OutputStreamWriter_write($this, $buf, $offset, $count) {
        var var$4, $input, var$6, $$je;
        var$4 = $this.$lock0;
        jl_Object_monitorEnterSync(var$4);
        a: {
            try {
                ji_OutputStreamWriter_checkStatus($this);
                if ($buf === null)
                    $rt_throw(jl_NullPointerException__init_());
                if (!($offset >= 0 && $offset <= ($buf.data.length - $count | 0) && $count >= 0))
                    $rt_throw(jl_IndexOutOfBoundsException__init_());
                $input = jn_CharBuffer_wrap($buf, $offset, $count);
                while (jn_Buffer_hasRemaining($input)) {
                    if (!jnc_CoderResult_isOverflow(jnc_CharsetEncoder_encode($this.$encoder, $input, $this.$buffer6, 0)))
                        continue;
                    ji_FileOutputStream_write($this.$out3, $this.$bufferData, 0, jn_Buffer_position($this.$buffer6));
                    jn_ByteBuffer_clear($this.$buffer6);
                }
                jl_Object_monitorExitSync(var$4);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                var$6 = $$je;
                break a;

            }
            return;
        }
        jl_Object_monitorExitSync(var$4);
        $rt_throw(var$6);
    }
    var ji_FileWriter = $rt_classWithoutFields(ji_OutputStreamWriter);
    function ji_FileWriter__init_(var_0) {
        var var_1 = new ji_FileWriter();
        ji_FileWriter__init_0(var_1, var_0);
        return var_1;
    }
    function ji_FileWriter__init_0($this, $file) {
        var var$2, var$3, var$4, var$5, $$je;
        var$2 = new ji_FileOutputStream;
        if (jl_String_isEmpty(ji_File_getName($file))) {
            $file = new ji_FileNotFoundException;
            jl_Throwable__init_($file, $rt_s(416));
            $rt_throw($file);
        }
        var$3 = ji_File_getCanonicalPathImpl($file);
        if (!jl_String_isEmpty(var$3) && !jl_String_equals(var$3, $rt_s(6))) {
            var$4 = ji_File__init_(var$3);
            var$4 = ji_File_findVirtualFile(ji_File_getParent(var$4) === null ? null : ji_File__init_(ji_File_getParent(var$4)));
        } else
            var$4 = null;
        if (var$4 !== null && otrfm_VirtualFileImpl_isDirectory(var$4))
            a: {
                try {
                    otrfm_VirtualFileImpl_createFile(var$4, ji_File_getName($file));
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ji_IOException) {
                    } else {
                        throw $$e;
                    }
                }
                $file = new ji_FileNotFoundException;
                jl_Throwable__init_0($file);
                $rt_throw($file);
            }
        $file = ji_File_findVirtualFile($file);
        if ($file !== null && otrfm_VirtualFileImpl_isFile($file)) {
            $file = otrfm_VirtualFileImpl_createAccessor($file, 0, 1, 0);
            var$2.$accessor0 = $file;
            if ($file === null) {
                $file = new ji_FileNotFoundException;
                jl_Throwable__init_0($file);
                $rt_throw($file);
            }
            var$2 = ji_OutputStreamWriter_nullCheck(var$2);
            jnci_UTF8Charset_$callClinit();
            $file = jnci_UTF8Charset_INSTANCE;
            var$2 = ji_OutputStreamWriter_nullCheck(var$2);
            var$4 = jnci_UTF8Charset_newEncoder($file);
            jnc_CodingErrorAction_$callClinit();
            $file = jnc_CharsetEncoder_onUnmappableCharacter(jnc_CharsetEncoder_onMalformedInput(var$4, jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
            $this.$lock0 = $this;
            var$5 = $rt_createByteArray(512);
            $this.$bufferData = var$5;
            $this.$buffer6 = jn_ByteBuffer_wrap0(var$5);
            $this.$out3 = ji_OutputStreamWriter_nullCheck(var$2);
            $this.$encoder = $file;
            return;
        }
        var$2 = new ji_FileNotFoundException;
        jl_Throwable__init_(var$2, $rt_s(417));
        $rt_throw(var$2);
    }
    function ji_PrintWriter() {
        var a = this; ji_Writer.call(a);
        a.$out4 = null;
        a.$ioError = 0;
        a.$autoflush = 0;
    }
    function ji_PrintWriter__init_(var_0) {
        var var_1 = new ji_PrintWriter();
        ji_PrintWriter__init_0(var_1, var_0);
        return var_1;
    }
    function ji_PrintWriter__init_0($this, $wr) {
        if ($wr !== null) {
            $this.$lock0 = $wr;
            $this.$autoflush = 0;
            $this.$out4 = $wr;
            return;
        }
        $wr = new jl_NullPointerException;
        jl_Throwable__init_0($wr);
        $rt_throw($wr);
    }
    function ji_PrintWriter_close($this) {
        var var$1, $$je;
        var$1 = $this.$out4;
        if (var$1 !== null) {
            a: {
                try {
                    ji_OutputStreamWriter_close(var$1);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ji_IOException) {
                    } else {
                        throw $$e;
                    }
                }
                ji_PrintWriter_setError($this);
            }
            $this.$out4 = null;
        }
    }
    function ji_PrintWriter_print($this, $str) {
        var var$2, var$3, $$je;
        if ($str === null) {
            jl_String_$callClinit();
            $str = $rt_s(17);
        }
        a: {
            var$2 = jl_String_toCharArray($str);
            var$3 = var$2.data.length;
            $str = $this.$out4;
            if ($str === null)
                ji_PrintWriter_setError($this);
            else {
                try {
                    ji_OutputStreamWriter_write($str, var$2, 0, var$3);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ji_IOException) {
                    } else {
                        throw $$e;
                    }
                }
                ji_PrintWriter_setError($this);
            }
        }
    }
    function ji_PrintWriter_println($this, $str) {
        var $$je;
        ji_PrintWriter_print($this, $str);
        ji_PrintWriter_print($this, $rt_s(342));
        if ($this.$autoflush)
            a: {
                $str = $this.$out4;
                if ($str === null)
                    ji_PrintWriter_setError($this);
                else {
                    try {
                        ji_OutputStreamWriter_flush($str);
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ji_IOException) {
                        } else {
                            throw $$e;
                        }
                    }
                    ji_PrintWriter_setError($this);
                }
            }
    }
    function ji_PrintWriter_setError($this) {
        $this.$ioError = 1;
    }
    var jl_IllegalMonitorStateException = $rt_classWithoutFields(jl_RuntimeException);
    function jl_Object$Monitor() {
        var a = this; jl_Object.call(a);
        a.$enteringThreads = null;
        a.$notifyListeners = null;
        a.$owner = null;
        a.$count = 0;
    }
    var jl_IllegalStateException = $rt_classWithoutFields(jl_RuntimeException);
    var ji_UTFDataFormatException = $rt_classWithoutFields(ji_IOException);
    function ji_FileOutputStream() {
        ji_OutputStream.call(this);
        this.$accessor0 = null;
    }
    var ji_FileOutputStream_ONE_BYTE_BUFER = null;
    function ji_FileOutputStream_write($this, $b, $off, $len) {
        var var$4, var$5, var$6, var$7;
        ju_Objects_requireNonNull($b);
        if ($off >= 0 && $len >= 0 && $off <= ($b.data.length - $len | 0)) {
            ji_FileOutputStream_ensureOpened($this);
            var$4 = $this.$accessor0;
            var$5 = var$4.$this$02;
            var$6 = var$4.$pos1 + $len | 0;
            var$7 = var$5.$data1.data.length;
            if (var$6 > var$7) {
                var$7 = (jl_Math_max(var$6, var$7) * 3 | 0) / 2 | 0;
                var$5.$data1 = ju_Arrays_copyOf0(var$5.$data1, var$7);
            }
            jl_System_fastArraycopy($b, $off, var$4.$this$02.$data1, var$4.$pos1, $len);
            $off = var$4.$pos1 + $len | 0;
            var$4.$pos1 = $off;
            var$4 = var$4.$this$02;
            if ($off > var$4.$size4)
                var$4.$size4 = $off;
            otrfm_AbstractInMemoryVirtualFile_modify(var$4);
            return;
        }
        var$4 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$4);
        $rt_throw(var$4);
    }
    function ji_FileOutputStream_flush($this) {
        ji_FileOutputStream_ensureOpened($this);
    }
    function ji_FileOutputStream_ensureOpened($this) {
        var var$1;
        if ($this.$accessor0 !== null)
            return;
        var$1 = new ji_IOException;
        jl_Throwable__init_(var$1, $rt_s(331));
        $rt_throw(var$1);
    }
    function ji_FileOutputStream__clinit_() {
        ji_FileOutputStream_ONE_BYTE_BUFER = $rt_createByteArray(1);
    }
    var otp_PlatformQueue = $rt_classWithoutFields();
    function otp_PlatformQueue_isEmpty$static($this) {
        return $this.length ? 0 : 1;
    }
    function otp_PlatformQueue_remove$static($this) {
        $this = $this.shift();
        otji_JSWrapper_$callClinit();
        if ($this !== null && !($this instanceof $rt_objcls()))
            $this = otji_JSWrapper_wrap($this);
        return $this;
    }
    function jl_Object$monitorExit$lambda$_8_0() {
        jl_Object.call(this);
        this.$_00 = null;
    }
    function jl_Object$monitorExit$lambda$_8_0_run(var$0) {
        var var$1, var$2, var$3, var$4;
        var$1 = var$0.$_00;
        if (!jl_Object_isEmptyMonitor(var$1)) {
            var$2 = var$1.$monitor;
            if (var$2.$owner === null) {
                var$1 = var$2.$enteringThreads;
                if (var$1 !== null && !otp_PlatformQueue_isEmpty$static(var$1)) {
                    var$3 = otp_PlatformQueue_remove$static(var$2.$enteringThreads);
                    var$2.$enteringThreads = null;
                    var$1 = var$3.$_0;
                    var$2 = var$3.$_1;
                    var$4 = var$3.$_2;
                    var$3 = var$3.$_3;
                    jl_Thread_setCurrentThread(var$1);
                    var$2 = var$2.$monitor;
                    var$2.$owner = var$1;
                    var$2.$count = var$2.$count + var$4 | 0;
                    otpp_AsyncCallbackWrapper_complete(var$3, null);
                }
            }
        }
    }
    function jl_Object$monitorEnterWait$lambda$_6_0() {
        var a = this; jl_Object.call(a);
        a.$_0 = null;
        a.$_1 = null;
        a.$_2 = 0;
        a.$_3 = null;
    }
    var jnci_AsciiDecoder = $rt_classWithoutFields(jnci_BufferedDecoder);
    function jnci_AsciiDecoder_arrayDecode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, $b, var$12;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize)
                    break a;
                var$9 = $inArray.data;
                var$10 = $inPos + 1 | 0;
                $b = var$9[$inPos] & 255;
                if ($b & 128) {
                    $result = jnc_CoderResult_malformedForLength(1);
                    $inPos = var$10 + (-1) | 0;
                    break a;
                }
                var$9 = $outArray.data;
                var$12 = $outPos + 1 | 0;
                var$9[$outPos] = $b & 65535;
                $inPos = var$10;
                $outPos = var$12;
            }
        }
        $controller.$inPosition0 = $inPos;
        $controller.$outPosition0 = $outPos;
        return $result;
    }
    var jnci_Iso8859Decoder = $rt_classWithoutFields(jnci_BufferedDecoder);
    function jnci_Iso8859Decoder_arrayDecode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, var$10, var$11, $b, var$13;
        $result = null;
        while ($inPos < $inSize && $outPos < $outSize) {
            var$9 = $inArray.data;
            var$10 = $outArray.data;
            var$11 = $inPos + 1 | 0;
            $b = var$9[$inPos] & 255;
            var$13 = $outPos + 1 | 0;
            var$10[$outPos] = $b & 65535;
            $inPos = var$11;
            $outPos = var$13;
        }
        $controller.$inPosition0 = $inPos;
        $controller.$outPosition0 = $outPos;
        return $result;
    }
    function jnci_UTF16Decoder() {
        var a = this; jnci_BufferedDecoder.call(a);
        a.$bom0 = 0;
        a.$littleEndian0 = 0;
    }
    function jnci_UTF16Decoder_arrayDecode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var var$8, var$9, $b;
        if ($this.$bom0) {
            if (($inPos + 2 | 0) > $inSize)
                return !jn_Buffer_hasRemaining($controller.$in1) ? jnc_CoderResult_UNDERFLOW : null;
            var$8 = $inArray.data;
            $this.$bom0 = 0;
            var$9 = $inPos + 1 | 0;
            $b = var$8[$inPos];
            if ($b == (-1)) {
                if (var$8[var$9] != (-2))
                    $inPos = var$9 + (-1) | 0;
                else {
                    $inPos = var$9 + 1 | 0;
                    $this.$littleEndian0 = 1;
                }
            } else if ($b != (-2))
                $inPos = var$9 + (-1) | 0;
            else if (var$8[var$9] != (-1))
                $inPos = var$9 + (-1) | 0;
            else {
                $inPos = var$9 + 1 | 0;
                $this.$littleEndian0 = 0;
            }
        }
        return !$this.$littleEndian0 ? jnci_UTF16Decoder_decodeBE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) : jnci_UTF16Decoder_decodeLE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller);
    }
    function jnci_UTF16Decoder_decodeLE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, $b2, $b1, $c, $next;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize)
                    break a;
                if (($inPos + 2 | 0) > $inSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_UNDERFLOW;
                    break a;
                }
                var$9 = $inArray.data;
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $c = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
                if (!jl_Character_isHighSurrogate($c)) {
                    if (jl_Character_isLowSurrogate($c)) {
                        $inPos = $inPos + (-2) | 0;
                        $result = jnc_CoderResult_malformedForLength(2);
                        break a;
                    }
                    var$9 = $outArray.data;
                    $b2 = $outPos + 1 | 0;
                    var$9[$outPos] = $c;
                    $outPos = $b2;
                } else {
                    if (($inPos + 2 | 0) >= $inSize) {
                        if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                            $result = jnc_CoderResult_UNDERFLOW;
                        $inPos = $inPos + (-2) | 0;
                        break a;
                    }
                    $b2 = $inPos + 1 | 0;
                    $b1 = var$9[$inPos] & 255;
                    $inPos = $b2 + 1 | 0;
                    $next = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
                    if (!jl_Character_isLowSurrogate($next)) {
                        $inPos = $inPos + (-4) | 0;
                        $result = jnc_CoderResult_malformedForLength(4);
                        break a;
                    }
                    if (($outPos + 2 | 0) > $outSize) {
                        if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$9 = $outArray.data;
                    $b2 = $outPos + 1 | 0;
                    var$9[$outPos] = $c;
                    $outPos = $b2 + 1 | 0;
                    var$9[$b2] = $next;
                }
            }
        }
        $controller.$inPosition0 = $inPos;
        $controller.$outPosition0 = $outPos;
        return $result;
    }
    function jnci_UTF16Decoder_decodeBE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
        var $result, var$9, $b2, $b1, $c, $next;
        $result = null;
        a: {
            while ($inPos < $inSize) {
                if ($outPos >= $outSize)
                    break a;
                if (($inPos + 2 | 0) > $inSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_UNDERFLOW;
                    break a;
                }
                var$9 = $inArray.data;
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $c = (var$9[$b2] & 255 | $b1 << 8) & 65535;
                if (!jl_Character_isHighSurrogate($c)) {
                    if (jl_Character_isLowSurrogate($c)) {
                        $inPos = $inPos + (-2) | 0;
                        $result = jnc_CoderResult_malformedForLength(2);
                        break a;
                    }
                    var$9 = $outArray.data;
                    $b2 = $outPos + 1 | 0;
                    var$9[$outPos] = $c;
                    $outPos = $b2;
                } else {
                    if (($inPos + 2 | 0) >= $inSize) {
                        if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                            $result = jnc_CoderResult_UNDERFLOW;
                        $inPos = $inPos + (-2) | 0;
                        break a;
                    }
                    $b2 = $inPos + 1 | 0;
                    $b1 = var$9[$inPos] & 255;
                    $inPos = $b2 + 1 | 0;
                    $next = (var$9[$b2] & 255 | $b1 << 8) & 65535;
                    if (!jl_Character_isLowSurrogate($next)) {
                        $inPos = $inPos + (-4) | 0;
                        $result = jnc_CoderResult_malformedForLength(4);
                        break a;
                    }
                    if (($outPos + 2 | 0) > $outSize) {
                        if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                            break a;
                        $result = jnc_CoderResult_OVERFLOW;
                        break a;
                    }
                    var$9 = $outArray.data;
                    $b2 = $outPos + 1 | 0;
                    var$9[$outPos] = $c;
                    $outPos = $b2 + 1 | 0;
                    var$9[$b2] = $next;
                }
            }
        }
        $controller.$inPosition0 = $inPos;
        $controller.$outPosition0 = $outPos;
        return $result;
    }
    function ju_AbstractList$1() {
        var a = this; jl_Object.call(a);
        a.$index2 = 0;
        a.$modCount0 = 0;
        a.$size2 = 0;
        a.$removeIndex = 0;
        a.$this$00 = null;
    }
    function ju_AbstractList$1_hasNext($this) {
        return $this.$index2 >= $this.$size2 ? 0 : 1;
    }
    function ju_AbstractList$1_next($this) {
        var var$1, var$2, var$3;
        var$1 = $this.$modCount0;
        var$2 = $this.$this$00;
        if (var$1 < var$2.$modCount) {
            var$2 = new ju_ConcurrentModificationException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        var$3 = $this.$index2;
        $this.$removeIndex = var$3;
        $this.$index2 = var$3 + 1 | 0;
        return ju_ArrayList_get(var$2, var$3);
    }
    var cmmlgn_Noise = $rt_classWithoutFields();
    function cmmlgn_CombinedNoise() {
        var a = this; cmmlgn_Noise.call(a);
        a.$noise1 = null;
        a.$noise2 = null;
    }
    function cmmlgn_CombinedNoise__init_(var_0, var_1) {
        var var_2 = new cmmlgn_CombinedNoise();
        cmmlgn_CombinedNoise__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlgn_CombinedNoise__init_0($this, $noise1, $noise2) {
        $this.$noise1 = $noise1;
        $this.$noise2 = $noise2;
    }
    function cmmlgn_CombinedNoise_compute($this, $x, $z) {
        return cmmlgn_OctaveNoise_compute($this.$noise1, $x + cmmlgn_OctaveNoise_compute($this.$noise2, $x, $z), $z);
    }
    function cmmlgn_OctaveNoise() {
        var a = this; cmmlgn_Noise.call(a);
        a.$perlin = null;
        a.$octaves = 0;
    }
    function cmmlgn_OctaveNoise__init_(var_0, var_1) {
        var var_2 = new cmmlgn_OctaveNoise();
        cmmlgn_OctaveNoise__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmlgn_OctaveNoise__init_0($this, $random, $octaves) {
        var $count, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        $this.$octaves = $octaves;
        $this.$perlin = $rt_createArray(cmmlgn_PerlinNoise, $octaves);
        $count = 0;
        while ($count < $octaves) {
            var$4 = $this.$perlin;
            var$5 = new cmmlgn_PerlinNoise;
            var$6 = $rt_createIntArray(512);
            var$7 = var$6.data;
            var$5.$noise = var$6;
            var$8 = 0;
            while (var$8 < 256) {
                var$9 = var$8 + 1 | 0;
                var$7[var$8] = var$8;
                var$8 = var$9;
            }
            var$8 = 0;
            while (var$8 < 256) {
                var$9 = ju_Random_nextInt($random, 256 - var$8 | 0) + var$8 | 0;
                var$6 = var$5.$noise.data;
                var$10 = var$6[var$8];
                var$6[var$8] = var$6[var$9];
                var$6[var$9] = var$10;
                var$6[var$8 + 256 | 0] = var$6[var$8];
                var$8 = var$8 + 1 | 0;
            }
            var$4.data[$count] = var$5;
            $count = $count + 1 | 0;
        }
    }
    function cmmlgn_OctaveNoise_compute($this, $x, $z) {
        var $result, $unknown0, $count;
        $result = 0.0;
        $unknown0 = 1.0;
        $count = 0;
        while ($count < $this.$octaves) {
            $result = $result + cmmlgn_PerlinNoise_compute($this.$perlin.data[$count], $x / $unknown0, $z / $unknown0) * $unknown0;
            $unknown0 = $unknown0 * 2.0;
            $count = $count + 1 | 0;
        }
        return $result;
    }
    function cmmp_InputHandler() {
        var a = this; jl_Object.call(a);
        a.$xxa = 0.0;
        a.$jumping = 0.0;
        a.$yya = 0;
    }
    function cmmp_InputHandlerImpl() {
        var a = this; cmmp_InputHandler.call(a);
        a.$keyStates = null;
        a.$settings1 = null;
    }
    function ju_HashMap$1() {
        ju_AbstractSet.call(this);
        this.$this$01 = null;
    }
    function ju_HashMap$1_iterator($this) {
        var var$1, var$2;
        var$1 = new ju_HashMap$KeyIterator;
        var$2 = $this.$this$01;
        var$1.$associatedMap = var$2;
        var$1.$expectedModCount = var$2.$modCount1;
        var$1.$futureEntry = null;
        return var$1;
    }
    var cmmp_TerrainParticle = $rt_classWithoutFields(cmmp_Particle);
    function cmmp_TerrainParticle__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7) {
        var var_8 = new cmmp_TerrainParticle();
        cmmp_TerrainParticle__init_0(var_8, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7);
        return var_8;
    }
    function cmmp_TerrainParticle__init_0($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7, $var8) {
        cmmp_Particle__init_0($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7);
        $this.$tex = $var8.$textureId0;
        $this.$gravity = $var8.$particleGravity;
        $this.$bCol = 0.6000000238418579;
        $this.$gCol = 0.6000000238418579;
        $this.$rCol = 0.6000000238418579;
    }
    function cmmp_TerrainParticle_getParticleTexture($this) {
        return 1;
    }
    function cmmp_TerrainParticle_render($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        var var$8, var$9, $var9, var$11, $var11, $var12, $var13, $var14, $var15, var$17, var$18, var$19, var$20;
        var$8 = $this.$tex;
        var$9 = ((var$8 % 16 | 0) + $this.$uo / 4.0) / 16.0;
        $var9 = var$9 + 0.015609375201165676;
        var$11 = ((var$8 / 16 | 0) + $this.$vo / 4.0) / 16.0;
        $var11 = var$11 + 0.015609375201165676;
        $var12 = 0.10000000149011612 * $this.$size3;
        $var13 = $this.$xo;
        $var13 = $var13 + ($this.$x - $var13) * $var2;
        $var14 = $this.$yo;
        $var14 = $var14 + ($this.$y - $var14) * $var2;
        $var15 = $this.$zo;
        $var15 = $var15 + ($this.$z - $var15) * $var2;
        $var2 = cmm_Entity_getBrightness($this, $var2);
        cmmr_ShapeRenderer_color($var1, $var2 * $this.$rCol, $var2 * $this.$gCol, $var2 * $this.$bCol);
        var$17 = $var3 * $var12;
        $var2 = $var13 - var$17;
        $var3 = $var6 * $var12;
        $var6 = $var2 - $var3;
        var$18 = $var4 * $var12;
        $var4 = $var14 - var$18;
        var$19 = $var5 * $var12;
        var$20 = $var15 - var$19;
        $var5 = $var7 * $var12;
        cmmr_ShapeRenderer_vertexUV($var1, $var6, $var4, var$20 - $var5, var$9, $var11);
        $var2 = $var2 + $var3;
        $var6 = $var14 + var$18;
        cmmr_ShapeRenderer_vertexUV($var1, $var2, $var6, var$20 + $var5, var$9, var$11);
        $var7 = $var13 + var$17;
        $var12 = $var7 + $var3;
        $var13 = $var15 + var$19;
        cmmr_ShapeRenderer_vertexUV($var1, $var12, $var6, $var13 + $var5, $var9, var$11);
        cmmr_ShapeRenderer_vertexUV($var1, $var7 - $var3, $var4, $var13 - $var5, $var9, $var11);
    }
    var otcic_Console = $rt_classWithoutFields();
    function jur_Pattern() {
        var a = this; jl_Object.call(a);
        a.$lexemes = null;
        a.$flags0 = 0;
        a.$backRefs = null;
        a.$needsBackRefReplacement = 0;
        a.$globalGroupIndex = 0;
        a.$compCount = 0;
        a.$consCount = 0;
        a.$start1 = null;
    }
    function jur_Pattern_pattern($this) {
        return $this.$lexemes.$orig;
    }
    function jur_Pattern_processExpression($this, $ch, $newFlags, $last) {
        var $children, $saveFlags, $saveChangedFlags, $fSet, $child, var$9;
        $children = ju_ArrayList__init_();
        $saveFlags = $this.$flags0;
        $saveChangedFlags = 0;
        if ($newFlags != $saveFlags)
            $this.$flags0 = $newFlags;
        a: {
            switch ($ch) {
                case -1073741784:
                    $fSet = new jur_NonCapFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                case -536870872:
                case -268435416:
                    break;
                case -134217688:
                case -67108824:
                    $fSet = new jur_BehindFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                case -33554392:
                    $fSet = new jur_AtomicFSet;
                    $newFlags = $this.$consCount + 1 | 0;
                    $this.$consCount = $newFlags;
                    jur_FSet__init_($fSet, $newFlags);
                    break a;
                default:
                    $newFlags = $this.$globalGroupIndex + 1 | 0;
                    $this.$globalGroupIndex = $newFlags;
                    if ($last !== null)
                        $fSet = jur_FSet__init_0($newFlags);
                    else {
                        $fSet = new jur_FinalSet;
                        jur_FSet__init_($fSet, 0);
                        $saveChangedFlags = 1;
                    }
                    $newFlags = $this.$globalGroupIndex;
                    if ($newFlags <= (-1))
                        break a;
                    if ($newFlags >= 10)
                        break a;
                    $this.$backRefs.data[$newFlags] = $fSet;
                    break a;
            }
            $fSet = new jur_AheadFSet;
            jur_FSet__init_($fSet, (-1));
        }
        while (true) {
            if (jur_Lexer_isLetter($this.$lexemes) && $this.$lexemes.$lookAhead == (-536870788)) {
                $last = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
                while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
                    $child = $this.$lexemes;
                    var$9 = $child.$lookAhead;
                    if (var$9 && var$9 != (-536870788) && var$9 != (-536870871))
                        break;
                    jur_CharClass_add($last, jur_Lexer_next($child));
                    $child = $this.$lexemes;
                    if ($child.$ch != (-536870788))
                        continue;
                    jur_Lexer_next($child);
                }
                $child = jur_Pattern_processRangeSet($this, $last);
                $child.$setNext($fSet);
            } else if ($this.$lexemes.$ch == (-536870788)) {
                $child = jur_EmptySet__init_($fSet);
                jur_Lexer_next($this.$lexemes);
            } else {
                $child = jur_Pattern_processSubExpression($this, $fSet);
                $last = $this.$lexemes;
                if ($last.$ch == (-536870788))
                    jur_Lexer_next($last);
            }
            if ($child !== null)
                ju_ArrayList_add($children, $child);
            if (jur_Lexer_isEmpty($this.$lexemes))
                break;
            if ($this.$lexemes.$ch == (-536870871))
                break;
        }
        if ($this.$lexemes.$lookBack == (-536870788))
            ju_ArrayList_add($children, jur_EmptySet__init_($fSet));
        if ($this.$flags0 != $saveFlags && !$saveChangedFlags) {
            $this.$flags0 = $saveFlags;
            $last = $this.$lexemes;
            $last.$flags = $saveFlags;
            $last.$lookAhead = $last.$ch;
            $last.$lookAheadST = $last.$curST;
            var$9 = $last.$curToc;
            $last.$index3 = var$9 + 1 | 0;
            $last.$lookAheadToc = var$9;
            jur_Lexer_movePointer($last);
        }
        switch ($ch) {
            case -1073741784:
                break;
            case -536870872:
                $last = new jur_PositiveLookAhead;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -268435416:
                $last = new jur_NegativeLookAhead;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -134217688:
                $last = new jur_PositiveLookBehind;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -67108824:
                $last = new jur_NegativeLookBehind;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            case -33554392:
                $last = new jur_AtomicJointSet;
                jur_JointSet__init_($last, $children, $fSet);
                return $last;
            default:
                switch ($children.$size0) {
                    case 0:
                        break;
                    case 1:
                        return jur_SingleSet__init_(ju_ArrayList_get($children, 0), $fSet);
                    default:
                        return jur_JointSet__init_0($children, $fSet);
                }
                return jur_EmptySet__init_($fSet);
        }
        $last = new jur_NonCapJointSet;
        jur_JointSet__init_($last, $children, $fSet);
        return $last;
    }
    function jur_Pattern_processDecomposedChar($this) {
        var $codePoints, $curSymb, $curSymbIndex, $codePointsHangul, var$5, var$6, $readCodePoints;
        $codePoints = $rt_createIntArray(4);
        $curSymb = (-1);
        $curSymbIndex = (-1);
        if (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
            $codePointsHangul = $codePoints.data;
            $curSymb = jur_Lexer_next($this.$lexemes);
            $codePointsHangul[0] = $curSymb;
            $curSymbIndex = $curSymb - 4352 | 0;
        }
        if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
            $codePointsHangul = $rt_createCharArray(3);
            $codePoints = $codePointsHangul.data;
            $codePoints[0] = $curSymb & 65535;
            var$5 = $this.$lexemes;
            var$6 = var$5.$ch;
            $readCodePoints = var$6 - 4449 | 0;
            if ($readCodePoints >= 0 && $readCodePoints < 21) {
                $codePoints[1] = var$6 & 65535;
                jur_Lexer_next(var$5);
                var$5 = $this.$lexemes;
                var$6 = var$5.$ch;
                $curSymb = var$6 - 4519 | 0;
                if ($curSymb >= 0 && $curSymb < 28) {
                    $codePoints[2] = var$6 & 65535;
                    jur_Lexer_next(var$5);
                    return jur_HangulDecomposedCharSet__init_($codePointsHangul, 3);
                }
                return jur_HangulDecomposedCharSet__init_($codePointsHangul, 2);
            }
            if (!jur_Pattern_hasFlag($this, 2))
                return jur_CharSet__init_($codePoints[0]);
            if (jur_Pattern_hasFlag($this, 64))
                return jur_UCICharSet__init_($codePoints[0]);
            return jur_CICharSet__init_($codePoints[0]);
        }
        $codePointsHangul = $codePoints.data;
        $curSymb = 1;
        while ($curSymb < 4 && !jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
            $readCodePoints = $curSymb + 1 | 0;
            $codePointsHangul[$curSymb] = jur_Lexer_next($this.$lexemes);
            $curSymb = $readCodePoints;
        }
        if ($curSymb == 1) {
            $readCodePoints = $codePointsHangul[0];
            if (!(jur_Lexer_singleDecompTable.$get6($readCodePoints) == jur_Lexer_singleDecompTableSize ? 0 : 1))
                return jur_Pattern_processCharSet($this, $codePointsHangul[0]);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_DecomposedCharSet__init_($codePoints, $curSymb);
        if (jur_Pattern_hasFlag($this, 64)) {
            var$5 = new jur_UCIDecomposedCharSet;
            jur_DecomposedCharSet__init_0(var$5, $codePoints, $curSymb);
            return var$5;
        }
        var$5 = new jur_CIDecomposedCharSet;
        jur_DecomposedCharSet__init_0(var$5, $codePoints, $curSymb);
        return var$5;
    }
    function jur_Pattern_processSubExpression($this, $last) {
        var $cur, $term, var$4, $next, var$6, var$7, var$8;
        if (jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) {
            if (jur_Pattern_hasFlag($this, 128)) {
                $cur = jur_Pattern_processDecomposedChar($this);
                if (!jur_Lexer_isEmpty($this.$lexemes)) {
                    $term = $this.$lexemes;
                    var$4 = $term.$ch;
                    if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788) && !jur_Lexer_isLetter($term))
                        $cur = jur_Pattern_processQuantifier($this, $last, $cur);
                }
            } else if (!jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes)) {
                $next = new jl_StringBuffer;
                jl_AbstractStringBuilder__init_($next);
                while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes)) {
                    if (!(!jur_Lexer_isNextSpecial($this.$lexemes) && !$this.$lexemes.$lookAhead) && !(!jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead))) {
                        var$6 = $this.$lexemes.$lookAhead;
                        if (var$6 != (-536870871) && (var$6 & (-2147418113)) != (-2147483608) && var$6 != (-536870788) && var$6 != (-536870876))
                            break;
                    }
                    var$4 = jur_Lexer_next($this.$lexemes);
                    if (!jl_Character_isSupplementaryCodePoint(var$4))
                        jl_AbstractStringBuilder_append($next, var$4 & 65535);
                    else
                        jl_AbstractStringBuilder_append2($next, jl_Character_toChars(var$4));
                }
                if (!jur_Pattern_hasFlag($this, 2)) {
                    $cur = new jur_SequenceSet;
                    jur_LeafSet__init_($cur);
                    $cur.$string0 = jl_AbstractStringBuilder_toString($next);
                    var$4 = $next.$length0;
                    $cur.$charCount = var$4;
                    $cur.$leftToRight = jur_SequenceSet$IntHash__init_(var$4);
                    $cur.$rightToLeft = jur_SequenceSet$IntHash__init_($cur.$charCount);
                    var$7 = 0;
                    while (var$7 < ($cur.$charCount - 1 | 0)) {
                        jur_SequenceSet$IntHash_put($cur.$leftToRight, jl_String_charAt($cur.$string0, var$7), ($cur.$charCount - var$7 | 0) - 1 | 0);
                        jur_SequenceSet$IntHash_put($cur.$rightToLeft, jl_String_charAt($cur.$string0, ($cur.$charCount - var$7 | 0) - 1 | 0), ($cur.$charCount - var$7 | 0) - 1 | 0);
                        var$7 = var$7 + 1 | 0;
                    }
                } else if (jur_Pattern_hasFlag($this, 64))
                    $cur = jur_UCISequenceSet__init_($next);
                else {
                    $cur = new jur_CISequenceSet;
                    jur_LeafSet__init_($cur);
                    $cur.$string1 = jl_AbstractStringBuilder_toString($next);
                    $cur.$charCount = $next.$length0;
                }
            } else
                $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
        } else {
            $term = $this.$lexemes;
            if ($term.$ch != (-536870871))
                $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
            else {
                if ($last instanceof jur_FinalSet)
                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $term.$orig, jur_Lexer_getIndex($term)));
                $cur = jur_EmptySet__init_($last);
            }
        }
        a: {
            if (!jur_Lexer_isEmpty($this.$lexemes)) {
                var$4 = $this.$lexemes.$ch;
                if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788)) {
                    $next = jur_Pattern_processSubExpression($this, $last);
                    if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
                        var$8 = $cur;
                        if (!$next.$first(var$8.$innerSet)) {
                            $cur = new jur_UnifiedQuantifierSet;
                            jur_LeafQuantifierSet__init_($cur, var$8.$innerSet, var$8.$next4, var$8.$type1);
                            $cur.$innerSet.$setNext($cur);
                        }
                    }
                    if (($next.$getType0() & 65535) != 43)
                        $cur.$setNext($next);
                    else
                        $cur.$setNext($next.$innerSet);
                    break a;
                }
            }
            if ($cur === null)
                return null;
            $cur.$setNext($last);
        }
        if (($cur.$getType0() & 65535) != 43)
            return $cur;
        return $cur.$innerSet;
    }
    function jur_Pattern_processQuantifier($this, $last, $term) {
        var $q, $quant, $leaf, var$6, $q_0;
        $q = $this.$lexemes;
        $quant = $q.$ch;
        if ($term !== null && !($term instanceof jur_LeafSet)) {
            switch ($quant) {
                case -2147483606:
                    jur_Lexer_next($q);
                    $q = new jur_PossessiveGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483605:
                    jur_Lexer_next($q);
                    $q = new jur_PosPlusGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-2147483606));
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483585:
                    jur_Lexer_next($q);
                    $q = new jur_PosAltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $q;
                case -2147483525:
                    $leaf = new jur_PosCompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    var$6 = $this.$compCount + 1 | 0;
                    $this.$compCount = var$6;
                    jur_CompositeGroupQuantifierSet__init_($leaf, $q, $term, $last, (-536870849), var$6);
                    jur_FSet_$callClinit();
                    $term.$setNext(jur_FSet_posFSet);
                    return $leaf;
                case -1073741782:
                case -1073741781:
                    jur_Lexer_next($q);
                    $q = new jur_ReluctantGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    $term.$setNext($q);
                    return $q;
                case -1073741761:
                    jur_Lexer_next($q);
                    $q = new jur_RelAltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    $term.$setNext($last);
                    return $q;
                case -1073741701:
                    $q_0 = new jur_RelCompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    $quant = $this.$compCount + 1 | 0;
                    $this.$compCount = $quant;
                    jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                    $term.$setNext($q_0);
                    return $q_0;
                case -536870870:
                case -536870869:
                    jur_Lexer_next($q);
                    if ($term.$getType0() != (-2147483602)) {
                        $q = new jur_GroupQuantifierSet;
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                    } else if (jur_Pattern_hasFlag($this, 32)) {
                        $q = new jur_DotAllQuantifierSet;
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                    } else {
                        $q = new jur_DotQuantifierSet;
                        $leaf = jur_AbstractLineTerminator_getInstance($this.$flags0);
                        jur_QuantifierSet__init_($q, $term, $last, $quant);
                        $q.$lt = $leaf;
                    }
                    $term.$setNext($q);
                    return $q;
                case -536870849:
                    jur_Lexer_next($q);
                    $q = new jur_AltGroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                    $term.$setNext($last);
                    return $q;
                case -536870789:
                    $q_0 = new jur_CompositeGroupQuantifierSet;
                    $q = jur_Lexer_nextSpecial($q);
                    $quant = $this.$compCount + 1 | 0;
                    $this.$compCount = $quant;
                    jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                    $term.$setNext($q_0);
                    return $q_0;
                default:
            }
            return $term;
        }
        $leaf = null;
        if ($term !== null)
            $leaf = $term;
        switch ($quant) {
            case -2147483606:
            case -2147483605:
                jur_Lexer_next($q);
                $q = new jur_PossessiveQuantifierSet;
                jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
                $leaf.$next4 = $q;
                return $q;
            case -2147483585:
                jur_Lexer_next($q);
                $term = new jur_PossessiveAltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-2147483585));
                return $term;
            case -2147483525:
                $term = new jur_PossessiveCompositeQuantifierSet;
                jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-2147483525));
                return $term;
            case -1073741782:
            case -1073741781:
                jur_Lexer_next($q);
                $q = new jur_ReluctantQuantifierSet;
                jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
                $leaf.$next4 = $q;
                return $q;
            case -1073741761:
                jur_Lexer_next($q);
                $term = new jur_ReluctantAltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-1073741761));
                return $term;
            case -1073741701:
                $term = new jur_ReluctantCompositeQuantifierSet;
                jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-1073741701));
                return $term;
            case -536870870:
            case -536870869:
                jur_Lexer_next($q);
                $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
                $leaf.$next4 = $q;
                return $q;
            case -536870849:
                jur_Lexer_next($q);
                $term = new jur_AltQuantifierSet;
                jur_LeafQuantifierSet__init_($term, $leaf, $last, (-536870849));
                return $term;
            case -536870789:
                return jur_CompositeQuantifierSet__init_0(jur_Lexer_nextSpecial($q), $leaf, $last, (-536870789));
            default:
        }
        return $term;
    }
    function jur_Pattern_processTerminal($this, $last) {
        var $term, var$3, var$4, $ch, $newFlags, $number, $negative, $cc;
        $term = null;
        var$3 = $last instanceof jur_FinalSet;
        while (true) {
            a: {
                var$4 = $this.$lexemes;
                $ch = var$4.$ch;
                if (($ch & (-2147418113)) == (-2147483608)) {
                    jur_Lexer_next(var$4);
                    $newFlags = ($ch & 16711680) >> 16;
                    $ch = $ch & (-16711681);
                    if ($ch == (-16777176))
                        $this.$flags0 = $newFlags;
                    else {
                        if ($ch != (-1073741784))
                            $newFlags = $this.$flags0;
                        $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                        var$4 = $this.$lexemes;
                        if (var$4.$ch != (-536870871))
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), var$4.$orig, var$4.$curToc));
                        jur_Lexer_next(var$4);
                    }
                } else {
                    b: {
                        c: {
                            switch ($ch) {
                                case -2147483599:
                                case -2147483598:
                                case -2147483597:
                                case -2147483596:
                                case -2147483595:
                                case -2147483594:
                                case -2147483593:
                                case -2147483592:
                                case -2147483591:
                                    break c;
                                case -2147483583:
                                    break;
                                case -2147483582:
                                    jur_Lexer_next(var$4);
                                    $term = jur_WordBoundary__init_(0);
                                    break a;
                                case -2147483577:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_PreviousMatch;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                case -2147483558:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_EOLSet;
                                    $number = $this.$consCount + 1 | 0;
                                    $this.$consCount = $number;
                                    jur_EOLSet__init_($term, $number);
                                    break a;
                                case -2147483550:
                                    jur_Lexer_next(var$4);
                                    $term = jur_WordBoundary__init_(1);
                                    break a;
                                case -2147483526:
                                    jur_Lexer_next(var$4);
                                    $term = new jur_EOISet;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                case -536870876:
                                    jur_Lexer_next(var$4);
                                    $this.$consCount = $this.$consCount + 1 | 0;
                                    if (jur_Pattern_hasFlag($this, 8)) {
                                        if (jur_Pattern_hasFlag($this, 1)) {
                                            $term = jur_UMultiLineEOLSet__init_($this.$consCount);
                                            break a;
                                        }
                                        $term = jur_MultiLineEOLSet__init_($this.$consCount);
                                        break a;
                                    }
                                    if (jur_Pattern_hasFlag($this, 1)) {
                                        $term = jur_UEOLSet__init_($this.$consCount);
                                        break a;
                                    }
                                    $term = jur_EOLSet__init_0($this.$consCount);
                                    break a;
                                case -536870866:
                                    jur_Lexer_next(var$4);
                                    if (jur_Pattern_hasFlag($this, 32)) {
                                        $term = jur_DotAllSet__init_();
                                        break a;
                                    }
                                    $term = jur_DotSet__init_(jur_AbstractLineTerminator_getInstance($this.$flags0));
                                    break a;
                                case -536870821:
                                    jur_Lexer_next(var$4);
                                    $negative = 0;
                                    $term = $this.$lexemes;
                                    if ($term.$ch == (-536870818)) {
                                        $negative = 1;
                                        jur_Lexer_next($term);
                                    }
                                    $term = jur_Pattern_processRangeSet($this, jur_Pattern_processRangeExpression($this, $negative));
                                    $term.$setNext($last);
                                    var$4 = $this.$lexemes;
                                    if (var$4.$ch != (-536870819))
                                        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), var$4.$orig, var$4.$curToc));
                                    jur_Lexer_setMode(var$4, 1);
                                    jur_Lexer_next($this.$lexemes);
                                    break a;
                                case -536870818:
                                    jur_Lexer_next(var$4);
                                    $this.$consCount = $this.$consCount + 1 | 0;
                                    if (!jur_Pattern_hasFlag($this, 8)) {
                                        $term = new jur_SOLSet;
                                        jur_AbstractSet__init_($term);
                                        break a;
                                    }
                                    $term = new jur_MultiLineSOLSet;
                                    var$4 = jur_AbstractLineTerminator_getInstance($this.$flags0);
                                    jur_AbstractSet__init_($term);
                                    $term.$lt0 = var$4;
                                    break a;
                                case 0:
                                    $cc = var$4.$curST;
                                    if ($cc !== null)
                                        $term = jur_Pattern_processRangeSet($this, $cc);
                                    else {
                                        if (jur_Lexer_isEmpty(var$4)) {
                                            $term = jur_EmptySet__init_($last);
                                            break a;
                                        }
                                        $term = jur_CharSet__init_($ch & 65535);
                                    }
                                    jur_Lexer_next($this.$lexemes);
                                    break a;
                                default:
                                    break b;
                            }
                            jur_Lexer_next(var$4);
                            $term = new jur_SOLSet;
                            jur_AbstractSet__init_($term);
                            break a;
                        }
                        $number = ($ch & 2147483647) - 48 | 0;
                        if ($this.$globalGroupIndex < $number)
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Lexer_toString(var$4), jur_Lexer_getIndex($this.$lexemes)));
                        jur_Lexer_next(var$4);
                        $this.$consCount = $this.$consCount + 1 | 0;
                        $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_($number, $this.$consCount) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_($number, $this.$consCount) : jur_CIBackReferenceSet__init_($number, $this.$consCount);
                        $this.$backRefs.data[$number].$isBackReferenced = 1;
                        $this.$needsBackRefReplacement = 1;
                        break a;
                    }
                    if ($ch >= 0 && !jur_Lexer_isSpecial(var$4)) {
                        $term = jur_Pattern_processCharSet($this, $ch);
                        jur_Lexer_next($this.$lexemes);
                    } else if ($ch == (-536870788))
                        $term = jur_EmptySet__init_($last);
                    else {
                        if ($ch != (-536870871)) {
                            $last = new jur_PatternSyntaxException;
                            $term = !jur_Lexer_isSpecial($this.$lexemes) ? jl_Character_toString($ch & 65535) : $this.$lexemes.$curST.$toString();
                            var$4 = $this.$lexemes;
                            jur_PatternSyntaxException__init_($last, $term, var$4.$orig, var$4.$curToc);
                            $rt_throw($last);
                        }
                        if (var$3) {
                            $last = new jur_PatternSyntaxException;
                            var$4 = $this.$lexemes;
                            jur_PatternSyntaxException__init_($last, $rt_s(3), var$4.$orig, var$4.$curToc);
                            $rt_throw($last);
                        }
                        $term = jur_EmptySet__init_($last);
                    }
                }
            }
            if ($ch != (-16777176))
                break;
        }
        return $term;
    }
    function jur_Pattern_processRangeExpression($this, $alt) {
        var $res, $buffer, $intersection, $notClosed, $firstInClass, $cs, $cur, $negative, $$je;
        $res = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
        jur_AbstractCharClass_setNegative($res, $alt);
        $buffer = (-1);
        $intersection = 0;
        $notClosed = 0;
        $firstInClass = 1;
        a: {
            b: {
                c: while (true) {
                    if (jur_Lexer_isEmpty($this.$lexemes))
                        break a;
                    $cs = $this.$lexemes;
                    $alt = $cs.$ch;
                    $notClosed = $alt == (-536870819) && !$firstInClass ? 0 : 1;
                    if (!$notClosed)
                        break a;
                    d: {
                        switch ($alt) {
                            case -536870874:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = jur_Lexer_next($this.$lexemes);
                                $cs = $this.$lexemes;
                                if ($cs.$ch != (-536870874)) {
                                    $buffer = 38;
                                    break d;
                                }
                                if ($cs.$lookAhead == (-536870821)) {
                                    jur_Lexer_next($cs);
                                    $intersection = 1;
                                    $buffer = (-1);
                                    break d;
                                }
                                jur_Lexer_next($cs);
                                if ($firstInClass) {
                                    $res = jur_Pattern_processRangeExpression($this, 0);
                                    break d;
                                }
                                if ($this.$lexemes.$ch == (-536870819))
                                    break d;
                                jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, 0));
                                break d;
                            case -536870867:
                                if (!$firstInClass) {
                                    $alt = $cs.$lookAhead;
                                    if ($alt != (-536870819) && $alt != (-536870821) && $buffer >= 0) {
                                        jur_Lexer_next($cs);
                                        $cs = $this.$lexemes;
                                        $cur = $cs.$ch;
                                        if (jur_Lexer_isSpecial($cs))
                                            break c;
                                        if ($cur < 0) {
                                            $negative = $this.$lexemes.$lookAhead;
                                            if ($negative != (-536870819) && $negative != (-536870821) && $buffer >= 0)
                                                break c;
                                        }
                                        e: {
                                            try {
                                                if (jur_Lexer_isLetter0($cur))
                                                    break e;
                                                $cur = $cur & 65535;
                                                break e;
                                            } catch ($$e) {
                                                $$je = $rt_wrapException($$e);
                                                if ($$je instanceof jl_Exception) {
                                                    break b;
                                                } else {
                                                    throw $$e;
                                                }
                                            }
                                        }
                                        try {
                                            jur_CharClass_add0($res, $buffer, $cur);
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                                break b;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                        jur_Lexer_next($this.$lexemes);
                                        $buffer = (-1);
                                        break d;
                                    }
                                }
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 45;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870821:
                                if ($buffer >= 0) {
                                    jur_CharClass_add($res, $buffer);
                                    $buffer = (-1);
                                }
                                jur_Lexer_next($this.$lexemes);
                                $negative = 0;
                                $cs = $this.$lexemes;
                                if ($cs.$ch == (-536870818)) {
                                    jur_Lexer_next($cs);
                                    $negative = 1;
                                }
                                if (!$intersection)
                                    jur_CharClass_union($res, jur_Pattern_processRangeExpression($this, $negative));
                                else
                                    jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, $negative));
                                $intersection = 0;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870819:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 93;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case -536870818:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $buffer = 94;
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            case 0:
                                if ($buffer >= 0)
                                    jur_CharClass_add($res, $buffer);
                                $cs = $this.$lexemes.$curST;
                                if ($cs === null)
                                    $buffer = 0;
                                else {
                                    jur_CharClass_add1($res, $cs);
                                    $buffer = (-1);
                                }
                                jur_Lexer_next($this.$lexemes);
                                break d;
                            default:
                        }
                        if ($buffer >= 0)
                            jur_CharClass_add($res, $buffer);
                        $buffer = jur_Lexer_next($this.$lexemes);
                    }
                    $firstInClass = 0;
                }
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
            }
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
        }
        if (!$notClosed) {
            if ($buffer >= 0)
                jur_CharClass_add($res, $buffer);
            return $res;
        }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Pattern_pattern($this), $this.$lexemes.$curToc - 1 | 0));
    }
    function jur_Pattern_processCharSet($this, $ch) {
        var $isSupplCodePoint, var$3, var$4;
        $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
        if (jur_Pattern_hasFlag($this, 2)) {
            a: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break a;
                    if ($ch > 90)
                        break a;
                }
                return jur_CICharSet__init_($ch & 65535);
            }
            if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
                if ($isSupplCodePoint) {
                    var$3 = new jur_UCISupplCharSet;
                    jur_LeafSet__init_(var$3);
                    var$3.$charCount = 2;
                    var$3.$ch0 = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
                    return var$3;
                }
                if (jur_Lexer_isLowSurrogate0($ch))
                    return jur_LowSurrogateCharSet__init_($ch & 65535);
                if (!jur_Lexer_isHighSurrogate0($ch))
                    return jur_UCICharSet__init_($ch & 65535);
                return jur_HighSurrogateCharSet__init_($ch & 65535);
            }
        }
        if (!$isSupplCodePoint) {
            if (jur_Lexer_isLowSurrogate0($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate0($ch))
                return jur_CharSet__init_($ch & 65535);
            return jur_HighSurrogateCharSet__init_($ch & 65535);
        }
        var$3 = new jur_SupplCharSet;
        jur_LeafSet__init_(var$3);
        var$3.$charCount = 2;
        var$3.$ch1 = $ch;
        var$4 = (jl_Character_toChars($ch)).data;
        var$3.$high = var$4[0];
        var$3.$low = var$4[1];
        return var$3;
    }
    function jur_Pattern_processRangeSet($this, $charClass) {
        var $surrogates, $lowHighSurrRangeSet, var$4;
        if (!jur_AbstractCharClass_hasLowHighSurrogates($charClass)) {
            if (!$charClass.$mayContainSupplCodepoints) {
                if ($charClass.$hasUCI())
                    return jur_UCIRangeSet__init_($charClass);
                return jur_RangeSet__init_($charClass);
            }
            if (!$charClass.$hasUCI())
                return jur_SupplRangeSet__init_($charClass);
            $surrogates = new jur_UCISupplRangeSet;
            jur_SupplRangeSet__init_0($surrogates, $charClass);
            return $surrogates;
        }
        $surrogates = jur_AbstractCharClass_getSurrogates($charClass);
        $lowHighSurrRangeSet = new jur_LowHighSurrogateRangeSet;
        jur_AbstractSet__init_($lowHighSurrRangeSet);
        $lowHighSurrRangeSet.$surrChars = $surrogates;
        $lowHighSurrRangeSet.$alt = $surrogates.$alt0;
        if (!$charClass.$mayContainSupplCodepoints) {
            if ($charClass.$hasUCI())
                return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
            return jur_CompositeRangeSet__init_(jur_RangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        }
        if (!$charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        $surrogates = new jur_CompositeRangeSet;
        var$4 = new jur_UCISupplRangeSet;
        jur_SupplRangeSet__init_0(var$4, jur_AbstractCharClass_getWithoutSurrogates($charClass));
        jur_CompositeRangeSet__init_0($surrogates, var$4, $lowHighSurrRangeSet);
        return $surrogates;
    }
    function jur_Pattern_getSupplement($ch) {
        if ($ch >= 97 && $ch <= 122)
            $ch = ($ch - 32 | 0) & 65535;
        else if ($ch >= 65 && $ch <= 90)
            $ch = ($ch + 32 | 0) & 65535;
        return $ch;
    }
    function jur_Pattern_hasFlag($this, $flag) {
        return ($this.$flags0 & $flag) != $flag ? 0 : 1;
    }
    function ju_LinkedList$SequentialListIterator() {
        var a = this; jl_Object.call(a);
        a.$nextEntry = null;
        a.$prevEntry = null;
        a.$currentEntry = null;
        a.$index = 0;
        a.$version = 0;
        a.$this$0 = null;
    }
    function ju_LinkedList$SequentialListIterator__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new ju_LinkedList$SequentialListIterator();
        ju_LinkedList$SequentialListIterator__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function ju_LinkedList$SequentialListIterator__init_0($this, var$1, $nextEntry, $prevEntry, $index) {
        $this.$this$0 = var$1;
        $this.$version = var$1.$modCount;
        $this.$nextEntry = $nextEntry;
        $this.$prevEntry = $prevEntry;
        $this.$index = $index;
    }
    function ju_LinkedList$SequentialListIterator_checkConcurrentModification($this) {
        var var$1;
        if ($this.$version >= $this.$this$0.$modCount)
            return;
        var$1 = new ju_ConcurrentModificationException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    function ju_LinkedList$Entry() {
        var a = this; jl_Object.call(a);
        a.$item = null;
        a.$next1 = null;
        a.$previous = null;
    }
    var otrf_VirtualFile = $rt_classWithoutFields(0);
    function otrfm_VirtualFileImpl() {
        var a = this; jl_Object.call(a);
        a.$fs0 = null;
        a.$path0 = null;
    }
    function otrfm_VirtualFileImpl_isDirectory($this) {
        var $inMemory;
        $inMemory = otrfm_VirtualFileImpl_findInMemory($this);
        return $inMemory !== null && $inMemory.$isDirectory() ? 1 : 0;
    }
    function otrfm_VirtualFileImpl_isFile($this) {
        var $inMemory;
        $inMemory = otrfm_VirtualFileImpl_findInMemory($this);
        return $inMemory !== null && $inMemory.$isFile() ? 1 : 0;
    }
    function otrfm_VirtualFileImpl_createAccessor($this, $readable, $writable, $append) {
        var $inMemory;
        $inMemory = otrfm_VirtualFileImpl_findInMemory($this);
        return $inMemory === null ? null : $inMemory.$createAccessor($readable, $writable, $append);
    }
    function otrfm_VirtualFileImpl_createFile($this, $fileName) {
        var $inMemory;
        $inMemory = otrfm_VirtualFileImpl_findInMemory($this);
        if ($inMemory === null) {
            $inMemory = new ji_IOException;
            jl_Throwable__init_($inMemory, $rt_s(418));
            $rt_throw($inMemory);
        }
        return $inMemory.$createFile0($fileName) === null ? 0 : 1;
    }
    function otrfm_VirtualFileImpl_findInMemory($this) {
        var $file, $i, $next;
        $file = $this.$fs0.$root;
        $i = 0;
        if (jl_String_startsWith($this.$path0, $rt_s(6)))
            $i = 1;
        a: {
            while ($i < jl_String_length($this.$path0)) {
                $next = jl_String_indexOf($this.$path0, 47, $i);
                if ($next < 0)
                    $next = jl_String_length($this.$path0);
                $file = $file.$getChildFile(jl_String_substring0($this.$path0, $i, $next));
                if ($file === null)
                    break a;
                $i = $next + 1 | 0;
            }
        }
        return $file;
    }
    var jl_Object$NotifyListener = $rt_classWithoutFields(0);
    function cmmg_Button() {
        var a = this; cmmg_Screen.call(a);
        a.$width5 = 0;
        a.$height5 = 0;
        a.$x11 = 0;
        a.$y9 = 0;
        a.$text0 = null;
        a.$id2 = 0;
        a.$active = 0;
        a.$visible0 = 0;
    }
    function cmmg_Button__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmg_Button();
        cmmg_Button__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmg_Button__init_1(var_0, var_1, var_2, var_3, var_4, var_5) {
        var var_6 = new cmmg_Button();
        cmmg_Button__init_2(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
        return var_6;
    }
    function cmmg_Button__init_0($this, $var1, $var2, $var3, $var4) {
        cmmg_Button__init_2($this, $var1, $var2, $var3, 200, 20, $var4);
    }
    function cmmg_Button__init_2($this, $var1, $var2, $var3, $var4, $var5, $var6) {
        cmmg_Screen__init_0($this);
        $this.$width5 = 200;
        $this.$height5 = 20;
        $this.$active = 1;
        $this.$visible0 = 1;
        $this.$id2 = $var1;
        $this.$x11 = $var2;
        $this.$y9 = $var3;
        $this.$width5 = $var4;
        $this.$height5 = 20;
        $this.$text0 = $var6;
    }
    function cmmlgn_PerlinNoise() {
        cmmlgn_Noise.call(this);
        this.$noise = null;
    }
    function cmmlgn_PerlinNoise_compute($this, $x, $z) {
        var $unknown3, $unknown4, $unknown5, var$6, var$7, var$8, $unknown6, $unknown7, $unknown8, var$12, $unknown9, $unknown10, var$15, var$16, var$17, var$18;
        $unknown3 = (jl_Math_floor($x) | 0) & 255;
        $unknown4 = (jl_Math_floor($z) | 0) & 255;
        $unknown5 = (jl_Math_floor(0.0) | 0) & 255;
        var$6 = $x - jl_Math_floor($x);
        var$7 = $z - jl_Math_floor($z);
        var$8 = 0.0 - jl_Math_floor(0.0);
        $unknown6 = cmmlgn_PerlinNoise_a(var$6);
        $unknown7 = cmmlgn_PerlinNoise_a(var$7);
        $unknown8 = cmmlgn_PerlinNoise_a(var$8);
        var$12 = $this.$noise.data;
        $unknown9 = var$12[$unknown3] + $unknown4 | 0;
        $unknown10 = var$12[$unknown9] + $unknown5 | 0;
        var$15 = var$12[$unknown9 + 1 | 0] + $unknown5 | 0;
        $unknown3 = var$12[$unknown3 + 1 | 0] + $unknown4 | 0;
        $unknown4 = var$12[$unknown3] + $unknown5 | 0;
        $unknown5 = var$12[$unknown3 + 1 | 0] + $unknown5 | 0;
        $x = cmmlgn_PerlinNoise_grad(var$12[$unknown10], var$6, var$7, var$8);
        $unknown3 = $this.$noise.data[$unknown4];
        var$16 = var$6 - 1.0;
        var$17 = cmmlgn_PerlinNoise_lerp($unknown6, $x, cmmlgn_PerlinNoise_grad($unknown3, var$16, var$7, var$8));
        $unknown3 = $this.$noise.data[var$15];
        var$18 = var$7 - 1.0;
        var$17 = cmmlgn_PerlinNoise_lerp($unknown7, var$17, cmmlgn_PerlinNoise_lerp($unknown6, cmmlgn_PerlinNoise_grad($unknown3, var$6, var$18, var$8), cmmlgn_PerlinNoise_grad($this.$noise.data[$unknown5], var$16, var$18, var$8)));
        $unknown3 = $this.$noise.data[$unknown10 + 1 | 0];
        $x = var$8 - 1.0;
        return cmmlgn_PerlinNoise_lerp($unknown8, var$17, cmmlgn_PerlinNoise_lerp($unknown7, cmmlgn_PerlinNoise_lerp($unknown6, cmmlgn_PerlinNoise_grad($unknown3, var$6, var$7, $x), cmmlgn_PerlinNoise_grad($this.$noise.data[$unknown4 + 1 | 0], var$16, var$7, $x)), cmmlgn_PerlinNoise_lerp($unknown6, cmmlgn_PerlinNoise_grad($this.$noise.data[var$15 + 1 | 0], var$6, var$18, $x), cmmlgn_PerlinNoise_grad($this.$noise.data[$unknown5 + 1 | 0], var$16, var$18, $x))));
    }
    function cmmlgn_PerlinNoise_a($unknown0) {
        return $unknown0 * $unknown0 * $unknown0 * ($unknown0 * ($unknown0 * 6.0 - 15.0) + 10.0);
    }
    function cmmlgn_PerlinNoise_lerp($unknown0, $unknown1, $unknown2) {
        return $unknown1 + $unknown0 * ($unknown2 - $unknown1);
    }
    function cmmlgn_PerlinNoise_grad($unknown0, $unknown5, $unknown5_0, $unknown5_1) {
        var $unknown4;
        $unknown0 = $unknown0 & 15;
        $unknown4 = $unknown0 >= 8 ? $unknown5_0 : $unknown5;
        if ($unknown0 >= 4)
            $unknown5_0 = $unknown0 != 12 && $unknown0 != 14 ? $unknown5_1 : $unknown5;
        if ($unknown0 & 1)
            $unknown4 =  -$unknown4;
        if ($unknown0 & 2)
            $unknown5_0 =  -$unknown5_0;
        return $unknown4 + $unknown5_0;
    }
    function cmmma_AI() {
        jl_Object.call(this);
        this.$defaultLookAngle = 0;
    }
    function cmmma_BasicAI() {
        var a = this; cmmma_AI.call(a);
        a.$random4 = null;
        a.$xxa0 = 0.0;
        a.$yya0 = 0.0;
        a.$yRotA = 0.0;
        a.$level4 = null;
        a.$mob = null;
        a.$jumping0 = 0;
        a.$attackDelay = 0;
        a.$runSpeed = 0.0;
        a.$noActionTime = 0;
        a.$attackTarget = null;
    }
    function cmmma_BasicAI__init_0() {
        var var_0 = new cmmma_BasicAI();
        cmmma_BasicAI__init_(var_0);
        return var_0;
    }
    function cmmma_BasicAI__init_($this) {
        $this.$defaultLookAngle = 0;
        $this.$random4 = new ju_Random;
        $this.$jumping0 = 0;
        $this.$attackDelay = 0;
        $this.$runSpeed = 0.699999988079071;
        $this.$noActionTime = 0;
        $this.$attackTarget = null;
    }
    function cmmma_BasicAI_tick($this, $var1, $var2) {
        var $var8, var$4, $var4, $var5, $var6, $var7, $var9;
        $var8 = $this.$noActionTime + 1 | 0;
        $this.$noActionTime = $var8;
        if ($var8 > 600 && !ju_Random_nextInt($this.$random4, 800)) {
            var$4 = $var1.$player0;
            if (var$4 !== null) {
                $var4 = var$4.$x - $var2.$x;
                $var5 = var$4.$y - $var2.$y;
                $var6 = var$4.$z - $var2.$z;
                if ($var4 * $var4 + $var5 * $var5 + $var6 * $var6 >= 1024.0)
                    $var2.$remove2();
                else
                    $this.$noActionTime = 0;
            }
        }
        $this.$level4 = $var1;
        $this.$mob = $var2;
        $var7 = $this.$attackDelay;
        if ($var7 > 0)
            $this.$attackDelay = $var7 - 1 | 0;
        if ($var2.$health > 0)
            $this.$update0();
        else {
            $this.$jumping0 = 0;
            $this.$xxa0 = 0.0;
            $this.$yya0 = 0.0;
            $this.$yRotA = 0.0;
        }
        $var7 = cmm_Entity_isInWater($var2);
        $var9 = cmm_Entity_isInLava($var2);
        if ($this.$jumping0) {
            if ($var7)
                $var2.$yd0 = $var2.$yd0 + 0.03999999910593033;
            else if ($var9)
                $var2.$yd0 = $var2.$yd0 + 0.03999999910593033;
            else if ($var2.$onGround)
                $this.$jumpFromGround();
        }
        a: {
            $var5 = $this.$xxa0 * 0.9800000190734863;
            $this.$xxa0 = $var5;
            $var6 = $this.$yya0 * 0.9800000190734863;
            $this.$yya0 = $var6;
            $this.$yRotA = $this.$yRotA * 0.8999999761581421;
            cmmm_Mob_travel($var2, $var5, $var6);
            $var1 = cmml_Level_findEntities($var1, $var2, cmmp_AABB_grow($var2.$bb, 0.20000000298023224, 0.0, 0.20000000298023224));
            if ($var1 !== null && $var1.$size0 > 0) {
                $var8 = 0;
                while (true) {
                    if ($var8 >= $var1.$size0)
                        break a;
                    var$4 = ju_ArrayList_get($var1, $var8);
                    if (var$4.$isPushable())
                        cmm_Entity_push(var$4, $var2);
                    $var8 = $var8 + 1 | 0;
                }
            }
        }
    }
    function cmmma_BasicAI_jumpFromGround($this) {
        $this.$mob.$yd0 = 0.41999998688697815;
    }
    function cmmma_BasicAI_update($this) {
        var var$1, $var1, $var2;
        if (ju_Random_nextFloat($this.$random4) < 0.07000000029802322) {
            $this.$xxa0 = (ju_Random_nextFloat($this.$random4) - 0.5) * $this.$runSpeed;
            $this.$yya0 = ju_Random_nextFloat($this.$random4) * $this.$runSpeed;
        }
        $this.$jumping0 = ju_Random_nextFloat($this.$random4) >= 0.009999999776482582 ? 0 : 1;
        if (ju_Random_nextFloat($this.$random4) < 0.03999999910593033)
            $this.$yRotA = (ju_Random_nextFloat($this.$random4) - 0.5) * 60.0;
        var$1 = $this.$mob;
        var$1.$yRot = var$1.$yRot + $this.$yRotA;
        var$1.$xRot = $this.$defaultLookAngle;
        if ($this.$attackTarget !== null) {
            $this.$yya0 = $this.$runSpeed;
            $this.$jumping0 = ju_Random_nextFloat($this.$random4) >= 0.03999999910593033 ? 0 : 1;
        }
        $var1 = cmm_Entity_isInWater($this.$mob);
        $var2 = cmm_Entity_isInLava($this.$mob);
        if (!(!$var1 && !$var2))
            $this.$jumping0 = ju_Random_nextFloat($this.$random4) >= 0.800000011920929 ? 0 : 1;
    }
    function cmmma_BasicAI_beforeRemove($this) {}
    function cmmma_BasicAI_hurt($this, $var1, $var2) {
        $this.$noActionTime = 0;
    }
    function cmmp_Player$1() {
        cmmma_BasicAI.call(this);
        this.$player1 = null;
    }
    function cmmp_Player$1_update($this) {
        var var$1;
        var$1 = $this.$player1.$input;
        $this.$jumping0 = var$1.$yya;
        $this.$xxa0 = var$1.$xxa;
        $this.$yya0 = var$1.$jumping;
    }
    function jl_ClassLoader() {
        jl_Object.call(this);
        this.$parent1 = null;
    }
    var jl_ClassLoader_systemClassLoader = null;
    var jl_ClassLoader_resources = null;
    function jl_ClassLoader_$callClinit() {
        jl_ClassLoader_$callClinit = $rt_eraseClinit(jl_ClassLoader);
        jl_ClassLoader__clinit_();
    }
    function jl_ClassLoader_getResourceAsStream($this, $name) {
        var $dataString, $bytes, var$4, $i, var$6, var$7, var$8, var$9;
        jl_ClassLoader_$callClinit();
        if (jl_ClassLoader_resources === null)
            jl_ClassLoader_resources = {};
        $dataString = $rt_str(jl_ClassLoader_resourceToString$js_body$_6(jl_ClassLoader_resources[$rt_ustr($name)]));
        if ($dataString === null)
            return null;
        $bytes = $rt_createByteArray(jl_String_length($dataString));
        var$4 = $bytes.data;
        $i = 0;
        var$6 = var$4.length;
        while ($i < var$6) {
            var$4[$i] = jl_String_charAt($dataString, $i) << 24 >> 24;
            $i = $i + 1 | 0;
        }
        $name = new ji_ByteArrayInputStream;
        var$7 = otci_Base64Impl_reverse;
        var$8 = (var$6 / 4 | 0) * 3 | 0;
        var$9 = var$6 % 4 | 0;
        if (!(var$9 != 2 && var$9 != 3))
            var$8 = var$8 + (var$9 - 1 | 0) | 0;
        $i = var$6 - 1 | 0;
        while ($i >= 0 && var$4[$i] == 61) {
            var$8 = var$8 + (-1) | 0;
            $i = $i + (-1) | 0;
        }
        var$4 = $rt_createByteArray(var$8);
        otci_Base64Impl_decode($bytes, var$4, var$7);
        ji_ByteArrayInputStream__init_0($name, var$4);
        return $name;
    }
    function jl_ClassLoader__clinit_() {
        var var$1;
        var$1 = new jl_SystemClassLoader;
        jl_ClassLoader_$callClinit();
        var$1.$parent1 = null;
        jl_ClassLoader_systemClassLoader = var$1;
    }
    function jl_ClassLoader_resourceToString$js_body$_6(var$1) {
        return var$1 !== null && var$1 !== void 0 ? var$1 : null;
    }
    function jur_AbstractSet() {
        var a = this; jl_Object.call(a);
        a.$next4 = null;
        a.$isSecondPassVisited = 0;
        a.$index4 = null;
        a.$type1 = 0;
    }
    var jur_AbstractSet_counter = 0;
    function jur_AbstractSet__init_($this) {
        var var$1;
        var$1 = jur_AbstractSet_counter;
        jur_AbstractSet_counter = var$1 + 1 | 0;
        $this.$index4 = jl_Integer_toString(var$1);
    }
    function jur_AbstractSet__init_0($this, $n) {
        var var$2;
        var$2 = jur_AbstractSet_counter;
        jur_AbstractSet_counter = var$2 + 1 | 0;
        $this.$index4 = jl_Integer_toString(var$2);
        $this.$next4 = $n;
    }
    function jur_AbstractSet_find($this, $stringIndex, $testString, $matchResult) {
        var $length;
        $length = $matchResult.$rightBound0;
        while (true) {
            if ($stringIndex > $length)
                return (-1);
            if ($this.$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $stringIndex = $stringIndex + 1 | 0;
        }
        return $stringIndex;
    }
    function jur_AbstractSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        while (true) {
            if ($startSearch < $stringIndex)
                return (-1);
            if ($this.$matches($startSearch, $testString, $matchResult) >= 0)
                break;
            $startSearch = $startSearch + (-1) | 0;
        }
        return $startSearch;
    }
    function jur_AbstractSet_setType($this, $type) {
        $this.$type1 = $type;
    }
    function jur_AbstractSet_getType($this) {
        return $this.$type1;
    }
    function jur_AbstractSet_getNext($this) {
        return $this.$next4;
    }
    function jur_AbstractSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_AbstractSet_first($this, $set) {
        return 1;
    }
    function jur_AbstractSet_processBackRefReplacement($this) {
        return null;
    }
    function jur_AbstractSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$next4;
        if ($set !== null) {
            if (!$set.$isSecondPassVisited) {
                $set = $set.$processBackRefReplacement();
                if ($set !== null) {
                    $this.$next4.$isSecondPassVisited = 1;
                    $this.$next4 = $set;
                }
                $this.$next4.$processSecondPass();
            } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
                $this.$next4 = $set.$next4;
        }
    }
    function jur_AbstractSet__clinit_() {
        jur_AbstractSet_counter = 1;
    }
    var jl_SystemClassLoader = $rt_classWithoutFields(jl_ClassLoader);
    function jur_FSet() {
        var a = this; jur_AbstractSet.call(a);
        a.$isBackReferenced = 0;
        a.$groupIndex = 0;
    }
    var jur_FSet_posFSet = null;
    function jur_FSet_$callClinit() {
        jur_FSet_$callClinit = $rt_eraseClinit(jur_FSet);
        jur_FSet__clinit_();
    }
    function jur_FSet__init_0(var_0) {
        var var_1 = new jur_FSet();
        jur_FSet__init_(var_1, var_0);
        return var_1;
    }
    function jur_FSet__init_($this, $groupIndex) {
        jur_FSet_$callClinit();
        jur_AbstractSet__init_($this);
        $this.$groupIndex = $groupIndex;
    }
    function jur_FSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $end, $shift;
        $end = jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex);
        jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $stringIndex);
        $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $end);
        return $shift;
    }
    function jur_FSet_getGroupIndex($this) {
        return $this.$groupIndex;
    }
    function jur_FSet_hasConsumed($this, $mr) {
        return 0;
    }
    function jur_FSet__clinit_() {
        var var$1;
        var$1 = new jur_FSet$PossessiveFSet;
        jur_AbstractSet__init_(var$1);
        jur_FSet_posFSet = var$1;
    }
    function jur_Lexer() {
        var a = this; jl_Object.call(a);
        a.$pattern = null;
        a.$flags = 0;
        a.$mode = 0;
        a.$savedMode = 0;
        a.$lookBack = 0;
        a.$ch = 0;
        a.$lookAhead = 0;
        a.$patternFullLength = 0;
        a.$curST = null;
        a.$lookAheadST = null;
        a.$index3 = 0;
        a.$prevNW = 0;
        a.$curToc = 0;
        a.$lookAheadToc = 0;
        a.$orig = null;
    }
    var jur_Lexer_decompTable = null;
    var jur_Lexer_singleDecompTable = null;
    var jur_Lexer_singleDecompTableSize = 0;
    function jur_Lexer_setMode($this, $mode) {
        if ($mode > 0 && $mode < 3)
            $this.$mode = $mode;
        if ($mode == 1) {
            $this.$lookAhead = $this.$ch;
            $this.$lookAheadST = $this.$curST;
            $this.$index3 = $this.$lookAheadToc;
            $this.$lookAheadToc = $this.$curToc;
            jur_Lexer_movePointer($this);
        }
    }
    function jur_Lexer_isSpecial($this) {
        return $this.$curST === null ? 0 : 1;
    }
    function jur_Lexer_isNextSpecial($this) {
        return $this.$lookAheadST === null ? 0 : 1;
    }
    function jur_Lexer_next($this) {
        jur_Lexer_movePointer($this);
        return $this.$lookBack;
    }
    function jur_Lexer_nextSpecial($this) {
        var $res;
        $res = $this.$curST;
        jur_Lexer_movePointer($this);
        return $res;
    }
    function jur_Lexer_movePointer($this) {
        var $reread, $nonCap, var$3, $behind, $mod, $cs, $negative, $$je;
        $this.$lookBack = $this.$ch;
        $this.$ch = $this.$lookAhead;
        $this.$curST = $this.$lookAheadST;
        $this.$curToc = $this.$lookAheadToc;
        $this.$lookAheadToc = $this.$index3;
        while (true) {
            $reread = 0;
            $nonCap = $this.$index3 >= $this.$pattern.data.length ? 0 : jur_Lexer_nextCodePoint($this);
            $this.$lookAhead = $nonCap;
            $this.$lookAheadST = null;
            if ($this.$mode == 4) {
                if ($nonCap != 92)
                    return;
                $nonCap = $this.$index3;
                var$3 = $this.$pattern.data;
                $nonCap = $nonCap >= var$3.length ? 0 : var$3[jur_Lexer_nextIndex($this)];
                $this.$lookAhead = $nonCap;
                switch ($nonCap) {
                    case 69:
                        break;
                    default:
                        $this.$lookAhead = 92;
                        $this.$index3 = $this.$prevNW;
                        return;
                }
                $this.$mode = $this.$savedMode;
                $this.$lookAhead = $this.$index3 > ($this.$pattern.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
            }
            a: {
                $nonCap = $this.$lookAhead;
                if ($nonCap != 92) {
                    $behind = $this.$mode;
                    if ($behind == 1)
                        switch ($nonCap) {
                            case 36:
                                $this.$lookAhead = (-536870876);
                                break a;
                            case 40:
                                if ($this.$pattern.data[$this.$index3] != 63) {
                                    $this.$lookAhead = (-2147483608);
                                    break a;
                                }
                                jur_Lexer_nextIndex($this);
                                $nonCap = $this.$pattern.data[$this.$index3];
                                $behind = 0;
                                while (true) {
                                    b: {
                                        if ($behind) {
                                            $behind = 0;
                                            switch ($nonCap) {
                                                case 33:
                                                    break;
                                                case 61:
                                                    $this.$lookAhead = (-134217688);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                default:
                                                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Lexer_toString($this), $this.$index3));
                                            }
                                            $this.$lookAhead = (-67108824);
                                            jur_Lexer_nextIndex($this);
                                        } else {
                                            switch ($nonCap) {
                                                case 33:
                                                    break;
                                                case 60:
                                                    jur_Lexer_nextIndex($this);
                                                    $nonCap = $this.$pattern.data[$this.$index3];
                                                    $behind = 1;
                                                    break b;
                                                case 61:
                                                    $this.$lookAhead = (-536870872);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                case 62:
                                                    $this.$lookAhead = (-33554392);
                                                    jur_Lexer_nextIndex($this);
                                                    break b;
                                                default:
                                                    $mod = jur_Lexer_readFlags($this);
                                                    $this.$lookAhead = $mod;
                                                    if ($mod < 256) {
                                                        $this.$flags = $mod;
                                                        $mod = $mod << 16;
                                                        $this.$lookAhead = $mod;
                                                        $this.$lookAhead = (-1073741784) | $mod;
                                                        break b;
                                                    }
                                                    $mod = $mod & 255;
                                                    $this.$lookAhead = $mod;
                                                    $this.$flags = $mod;
                                                    $mod = $mod << 16;
                                                    $this.$lookAhead = $mod;
                                                    $this.$lookAhead = (-16777176) | $mod;
                                                    break b;
                                            }
                                            $this.$lookAhead = (-268435416);
                                            jur_Lexer_nextIndex($this);
                                        }
                                    }
                                    if (!$behind)
                                        break;
                                }
                                break a;
                            case 41:
                                $this.$lookAhead = (-536870871);
                                break a;
                            case 42:
                            case 43:
                            case 63:
                                $behind = $this.$index3;
                                var$3 = $this.$pattern.data;
                                switch ($behind >= var$3.length ? 42 : var$3[$behind]) {
                                    case 43:
                                        $this.$lookAhead = $nonCap | (-2147483648);
                                        jur_Lexer_nextIndex($this);
                                        break a;
                                    case 63:
                                        $this.$lookAhead = $nonCap | (-1073741824);
                                        jur_Lexer_nextIndex($this);
                                        break a;
                                    default:
                                }
                                $this.$lookAhead = $nonCap | (-536870912);
                                break a;
                            case 46:
                                $this.$lookAhead = (-536870866);
                                break a;
                            case 91:
                                $this.$lookAhead = (-536870821);
                                jur_Lexer_setMode($this, 2);
                                break a;
                            case 93:
                                if ($behind != 2)
                                    break a;
                                $this.$lookAhead = (-536870819);
                                break a;
                            case 94:
                                $this.$lookAhead = (-536870818);
                                break a;
                            case 123:
                                $this.$lookAheadST = jur_Lexer_processQuantifier($this, $nonCap);
                                break a;
                            case 124:
                                $this.$lookAhead = (-536870788);
                                break a;
                            default:
                        }
                    else if ($behind == 2)
                        switch ($nonCap) {
                            case 38:
                                $this.$lookAhead = (-536870874);
                                break a;
                            case 45:
                                $this.$lookAhead = (-536870867);
                                break a;
                            case 91:
                                $this.$lookAhead = (-536870821);
                                break a;
                            case 93:
                                $this.$lookAhead = (-536870819);
                                break a;
                            case 94:
                                $this.$lookAhead = (-536870818);
                                break a;
                            default:
                        }
                } else {
                    $nonCap = $this.$index3 >= ($this.$pattern.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                    c: {
                        $this.$lookAhead = $nonCap;
                        switch ($nonCap) {
                            case -1:
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Lexer_toString($this), $this.$index3));
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 22:
                            case 23:
                            case 24:
                            case 25:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                            case 30:
                            case 31:
                            case 32:
                            case 33:
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 118:
                                break;
                            case 48:
                                $this.$lookAhead = jur_Lexer_readOctals($this);
                                break a;
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                                if ($this.$mode != 1)
                                    break a;
                                $this.$lookAhead = (-2147483648) | $nonCap;
                                break a;
                            case 65:
                                $this.$lookAhead = (-2147483583);
                                break a;
                            case 66:
                                $this.$lookAhead = (-2147483582);
                                break a;
                            case 67:
                            case 69:
                            case 70:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 82:
                            case 84:
                            case 85:
                            case 86:
                            case 88:
                            case 89:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 111:
                            case 113:
                            case 121:
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Lexer_toString($this), $this.$index3));
                            case 68:
                            case 83:
                            case 87:
                            case 100:
                            case 115:
                            case 119:
                                $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_5($this.$pattern, $this.$prevNW, 1), 0);
                                $this.$lookAhead = 0;
                                break a;
                            case 71:
                                $this.$lookAhead = (-2147483577);
                                break a;
                            case 80:
                            case 112:
                                break c;
                            case 81:
                                $this.$savedMode = $this.$mode;
                                $this.$mode = 4;
                                $reread = 1;
                                break a;
                            case 90:
                                $this.$lookAhead = (-2147483558);
                                break a;
                            case 97:
                                $this.$lookAhead = 7;
                                break a;
                            case 98:
                                $this.$lookAhead = (-2147483550);
                                break a;
                            case 99:
                                $nonCap = $this.$index3;
                                var$3 = $this.$pattern.data;
                                if ($nonCap >= (var$3.length - 2 | 0))
                                    $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Lexer_toString($this), $this.$index3));
                                $this.$lookAhead = var$3[jur_Lexer_nextIndex($this)] & 31;
                                break a;
                            case 101:
                                $this.$lookAhead = 27;
                                break a;
                            case 102:
                                $this.$lookAhead = 12;
                                break a;
                            case 110:
                                $this.$lookAhead = 10;
                                break a;
                            case 114:
                                $this.$lookAhead = 13;
                                break a;
                            case 116:
                                $this.$lookAhead = 9;
                                break a;
                            case 117:
                                $this.$lookAhead = jur_Lexer_readHex($this, 4);
                                break a;
                            case 120:
                                $this.$lookAhead = jur_Lexer_readHex($this, 2);
                                break a;
                            case 122:
                                $this.$lookAhead = (-2147483526);
                                break a;
                            default:
                        }
                        break a;
                    }
                    $cs = jur_Lexer_parseCharClassName($this);
                    $negative = 0;
                    if ($this.$lookAhead == 80)
                        $negative = 1;
                    try {
                        $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ju_MissingResourceException) {
                            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), jur_Lexer_toString($this), $this.$index3));
                        } else {
                            throw $$e;
                        }
                    }
                    $this.$lookAhead = 0;
                }
            }
            if ($reread)
                continue;
            else
                break;
        }
    }
    function jur_Lexer_parseCharClassName($this) {
        var $sb, $ch, var$3, var$4, $res, var$6;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($sb, 10);
        $ch = $this.$index3;
        var$3 = $this.$pattern;
        var$4 = var$3.data;
        if ($ch < (var$4.length - 2 | 0)) {
            if (var$4[$ch] != 123) {
                $sb = jl_String__init_5(var$3, jur_Lexer_nextIndex($this), 1);
                $res = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($res);
                jl_StringBuilder_append(jl_StringBuilder_append($res, $rt_s(419)), $sb);
                return jl_AbstractStringBuilder_toString($res);
            }
            jur_Lexer_nextIndex($this);
            $ch = 0;
            a: {
                while (true) {
                    var$6 = $this.$index3;
                    var$3 = $this.$pattern.data;
                    if (var$6 >= (var$3.length - 2 | 0))
                        break;
                    $ch = var$3[jur_Lexer_nextIndex($this)];
                    if ($ch == 125)
                        break a;
                    jl_AbstractStringBuilder_append($sb, $ch);
                }
            }
            if ($ch != 125)
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
        }
        if (!$sb.$length0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
        $res = jl_AbstractStringBuilder_toString($sb);
        if (jl_String_length($res) == 1) {
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_StringBuilder_append(jl_StringBuilder_append($sb, $rt_s(419)), $res);
            return jl_AbstractStringBuilder_toString($sb);
        }
        b: {
            c: {
                if (jl_String_length($res) > 3) {
                    if (jl_String_startsWith($res, $rt_s(419)))
                        break c;
                    if (jl_String_startsWith($res, $rt_s(420)))
                        break c;
                }
                break b;
            }
            $res = jl_String_substring($res, 2);
        }
        return $res;
    }
    function jur_Lexer_processQuantifier($this, $ch) {
        var $sb, $min, $max, $mod, var$6, $$je;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($sb, 4);
        $min = (-1);
        $max = 2147483647;
        a: {
            while (true) {
                $mod = $this.$index3;
                var$6 = $this.$pattern.data;
                if ($mod >= var$6.length)
                    break a;
                $ch = var$6[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                if ($ch == 44 && $min < 0)
                    try {
                        $min = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                        jl_StringBuilder_delete($sb, 0, jl_StringBuilder_length($sb));
                        continue;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_NumberFormatException) {
                            break;
                        } else {
                            throw $$e;
                        }
                    }
                jl_AbstractStringBuilder_append($sb, $ch & 65535);
            }
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
        if ($sb.$length0 > 0)
            b: {
                try {
                    $max = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                    if ($min >= 0)
                        break b;
                    $min = $max;
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                    } else {
                        throw $$e;
                    }
                }
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
            }
        else if ($min < 0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
        if (($min | $max | ($max - $min | 0)) < 0)
            $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
        $ch = $this.$index3;
        var$6 = $this.$pattern.data;
        $mod = $ch >= var$6.length ? 42 : var$6[$ch];
        c: {
            switch ($mod) {
                case 43:
                    $this.$lookAhead = (-2147483525);
                    jur_Lexer_nextIndex($this);
                    break c;
                case 63:
                    $this.$lookAhead = (-1073741701);
                    jur_Lexer_nextIndex($this);
                    break c;
                default:
            }
            $this.$lookAhead = (-536870789);
        }
        $sb = new jur_Quantifier;
        $sb.$min0 = $min;
        $sb.$max1 = $max;
        return $sb;
    }
    function jur_Lexer_toString($this) {
        return $this.$orig;
    }
    function jur_Lexer_isEmpty($this) {
        return !$this.$ch && !$this.$lookAhead && $this.$index3 == $this.$patternFullLength && !jur_Lexer_isSpecial($this) ? 1 : 0;
    }
    function jur_Lexer_isLetter0($ch) {
        return $ch < 0 ? 0 : 1;
    }
    function jur_Lexer_isLetter($this) {
        return !jur_Lexer_isEmpty($this) && !jur_Lexer_isSpecial($this) && jur_Lexer_isLetter0($this.$ch) ? 1 : 0;
    }
    function jur_Lexer_isHighSurrogate($this) {
        var var$1;
        var$1 = $this.$ch;
        return var$1 <= 56319 && var$1 >= 55296 ? 1 : 0;
    }
    function jur_Lexer_isLowSurrogate($this) {
        var var$1;
        var$1 = $this.$ch;
        return var$1 <= 57343 && var$1 >= 56320 ? 1 : 0;
    }
    function jur_Lexer_isHighSurrogate0($ch) {
        return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
    }
    function jur_Lexer_isLowSurrogate0($ch) {
        return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
    }
    function jur_Lexer_readHex($this, $max) {
        var $st, $length, $i, var$5, $$je;
        $st = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($st, $max);
        $length = $this.$pattern.data.length - 2 | 0;
        $i = 0;
        while (true) {
            var$5 = $rt_compare($i, $max);
            if (var$5 >= 0)
                break;
            if ($this.$index3 >= $length)
                break;
            jl_AbstractStringBuilder_append($st, $this.$pattern.data[jur_Lexer_nextIndex($this)]);
            $i = $i + 1 | 0;
        }
        if (!var$5)
            a: {
                try {
                    $max = jl_Integer_parseInt(jl_StringBuilder_toString($st), 16);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return $max;
            }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
    }
    function jur_Lexer_readOctals($this) {
        var $max, $i, var$3, $length, $res, var$6;
        $max = 3;
        $i = 1;
        var$3 = $this.$pattern.data;
        $length = var$3.length - 2 | 0;
        $res = jl_Character_digit(var$3[$this.$index3], 8);
        switch ($res) {
            case -1:
                break;
            default:
                if ($res > 3)
                    $max = 2;
                jur_Lexer_nextIndex($this);
                a: {
                    while (true) {
                        if ($i >= $max)
                            break a;
                        var$6 = $this.$index3;
                        if (var$6 >= $length)
                            break a;
                        var$6 = jl_Character_digit($this.$pattern.data[var$6], 8);
                        if (var$6 < 0)
                            break;
                        $res = ($res * 8 | 0) + var$6 | 0;
                        jur_Lexer_nextIndex($this);
                        $i = $i + 1 | 0;
                    }
                }
                return $res;
        }
        $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, $this.$index3));
    }
    function jur_Lexer_readFlags($this) {
        var $pos, $res, var$3, var$4;
        $pos = 1;
        $res = $this.$flags;
        a: while (true) {
            var$3 = $this.$index3;
            var$4 = $this.$pattern.data;
            if (var$3 >= var$4.length)
                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, var$3));
            b: {
                c: {
                    switch (var$4[var$3]) {
                        case 41:
                            jur_Lexer_nextIndex($this);
                            return $res | 256;
                        case 45:
                            if (!$pos)
                                $rt_throw(jur_PatternSyntaxException__init_0($rt_s(3), $this.$orig, var$3));
                            $pos = 0;
                            break b;
                        case 58:
                            break a;
                        case 100:
                            break c;
                        case 105:
                            $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                            break b;
                        case 109:
                            $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                            break b;
                        case 115:
                            $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                            break b;
                        case 117:
                            $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                            break b;
                        case 120:
                            $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                            break b;
                        default:
                    }
                    break b;
                }
                $res = $pos ? $res | 1 : ($res ^ 1) & $res;
            }
            jur_Lexer_nextIndex($this);
        }
        jur_Lexer_nextIndex($this);
        return $res;
    }
    function jur_Lexer_nextIndex($this) {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = $this.$index3;
        $this.$prevNW = var$1;
        if (!($this.$flags & 4))
            $this.$index3 = var$1 + 1 | 0;
        else {
            var$2 = $this.$pattern.data.length - 2 | 0;
            $this.$index3 = var$1 + 1 | 0;
            a: while (true) {
                var$3 = $this.$index3;
                if (var$3 < var$2 && jl_Character_isWhitespace($this.$pattern.data[var$3])) {
                    $this.$index3 = $this.$index3 + 1 | 0;
                    continue;
                }
                var$3 = $this.$index3;
                if (var$3 >= var$2)
                    break;
                var$4 = $this.$pattern.data;
                if (var$4[var$3] != 35)
                    break;
                $this.$index3 = var$3 + 1 | 0;
                while (true) {
                    var$5 = $this.$index3;
                    if (var$5 >= var$2)
                        continue a;
                    var$1 = var$4[var$5];
                    if (var$1 != 10 && var$1 != 13 && var$1 != 133 && (var$1 | 1) != 8233 ? 0 : 1)
                        continue a;
                    $this.$index3 = var$5 + 1 | 0;
                }
            }
        }
        return $this.$prevNW;
    }
    function jur_Lexer_getDecomposition($ch) {
        return jur_Lexer_decompTable.$get10($ch);
    }
    function jur_Lexer_nextCodePoint($this) {
        var $high, $lowExpectedIndex, var$3, $low;
        $high = $this.$pattern.data[jur_Lexer_nextIndex($this)];
        if (jl_Character_isHighSurrogate($high)) {
            $lowExpectedIndex = $this.$prevNW + 1 | 0;
            var$3 = $this.$pattern.data;
            if ($lowExpectedIndex < var$3.length) {
                $low = var$3[$lowExpectedIndex];
                if (jl_Character_isLowSurrogate($low)) {
                    jur_Lexer_nextIndex($this);
                    return jl_Character_toCodePoint($high, $low);
                }
            }
        }
        return $high;
    }
    function jur_Lexer_getIndex($this) {
        return $this.$curToc;
    }
    function jur_PatternSyntaxException() {
        var a = this; jl_IllegalArgumentException.call(a);
        a.$desc = null;
        a.$pattern1 = null;
        a.$index5 = 0;
    }
    function jur_PatternSyntaxException__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_PatternSyntaxException();
        jur_PatternSyntaxException__init_(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_PatternSyntaxException__init_($this, $description, $pattern, $index) {
        jl_Throwable__init_0($this);
        $this.$index5 = (-1);
        $this.$desc = $description;
        $this.$pattern1 = $pattern;
        $this.$index5 = $index;
    }
    function jur_PatternSyntaxException_getMessage($this) {
        var $filler, var$2, $temp, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
        $filler = $rt_s(3);
        var$2 = $this.$index5;
        if (var$2 >= 1) {
            $temp = $rt_createCharArray(var$2);
            var$4 = $temp.data;
            var$2 = 0;
            var$5 = var$4.length;
            if (var$2 > var$5) {
                $filler = new jl_IllegalArgumentException;
                jl_Throwable__init_0($filler);
                $rt_throw($filler);
            }
            while (var$2 < var$5) {
                var$6 = var$2 + 1 | 0;
                var$4[var$2] = 32;
                var$2 = var$6;
            }
            $filler = jl_String__init_($temp);
        }
        var$7 = $this.$desc;
        var$8 = $this.$pattern1;
        if (var$8 !== null && jl_String_length(var$8)) {
            var$9 = $this.$index5;
            var$8 = $this.$pattern1;
            var$10 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$10);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(var$10, var$9), $rt_s(421)), var$8), $rt_s(421)), $filler);
            $filler = jl_AbstractStringBuilder_toString(var$10);
        } else
            $filler = $rt_s(3);
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_StringBuilder_append(jl_StringBuilder_append(var$8, var$7), $filler);
        return jl_AbstractStringBuilder_toString(var$8);
    }
    var jur_NonCapFSet = $rt_classWithoutFields(jur_FSet);
    function jur_NonCapFSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $gr;
        $gr = $this.$groupIndex;
        jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_NonCapFSet_hasConsumed($this, $mr) {
        return 0;
    }
    var jur_AheadFSet = $rt_classWithoutFields(jur_FSet);
    function jur_AheadFSet_matches($this, $stringIndex, $testString, $matchResult) {
        return $stringIndex;
    }
    var jur_BehindFSet = $rt_classWithoutFields(jur_FSet);
    function jur_BehindFSet_matches($this, $stringIndex, $testString, $matchResult) {
        if (jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex) != $stringIndex)
            $stringIndex = (-1);
        return $stringIndex;
    }
    function jur_AtomicFSet() {
        jur_FSet.call(this);
        this.$index6 = 0;
    }
    function jur_AtomicFSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $gr;
        $gr = $this.$groupIndex;
        jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
        $this.$index6 = $stringIndex;
        return $stringIndex;
    }
    function jur_AtomicFSet_hasConsumed($this, $mr) {
        return 0;
    }
    var jur_FinalSet = $rt_classWithoutFields(jur_FSet);
    function jur_FinalSet_matches($this, $stringIndex, $testString, $matchResult) {
        if ($matchResult.$mode5 != 1 && $stringIndex != $matchResult.$rightBound0)
            return (-1);
        $matchResult.$valid = 1;
        jur_MatchResultImpl_setEnd($matchResult, 0, $stringIndex);
        return $stringIndex;
    }
    function jur_LeafSet() {
        jur_AbstractSet.call(this);
        this.$charCount = 0;
    }
    function jur_LeafSet__init_($this) {
        jur_AbstractSet__init_($this);
        $this.$charCount = 1;
    }
    function jur_LeafSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        if (($stringIndex + $this.$charCount0() | 0) > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$accepts($stringIndex, $testString);
        if ($shift < 0)
            return (-1);
        return $this.$next4.$matches($stringIndex + $shift | 0, $testString, $matchResult);
    }
    function jur_LeafSet_charCount($this) {
        return $this.$charCount;
    }
    function jur_LeafSet_hasConsumed($this, $mr) {
        return 1;
    }
    var jur_EmptySet = $rt_classWithoutFields(jur_LeafSet);
    function jur_EmptySet__init_(var_0) {
        var var_1 = new jur_EmptySet();
        jur_EmptySet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_EmptySet__init_0($this, $next) {
        jur_AbstractSet__init_0($this, $next);
        $this.$charCount = 1;
        $this.$type1 = 1;
        $this.$charCount = 0;
    }
    function jur_EmptySet_accepts($this, $stringIndex, $testString) {
        return 0;
    }
    function jur_EmptySet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $startStr, $high;
        $strLength = $matchResult.$rightBound0;
        $startStr = $matchResult.$leftBound0;
        while (true) {
            $high = $rt_compare($stringIndex, $strLength);
            if ($high > 0)
                return (-1);
            if ($high < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, $stringIndex)) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
                $stringIndex = $stringIndex + 1 | 0;
                continue;
            }
            if ($this.$next4.$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $stringIndex = $stringIndex + 1 | 0;
        }
        return $stringIndex;
    }
    function jur_EmptySet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        var $strLength, $startStr;
        $strLength = $matchResult.$rightBound0;
        $startStr = $matchResult.$leftBound0;
        while (true) {
            if ($startSearch < $stringIndex)
                return (-1);
            if ($startSearch < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testString, $startSearch)) && $startSearch > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $startSearch - 1 | 0))) {
                $startSearch = $startSearch + (-1) | 0;
                continue;
            }
            if ($this.$next4.$matches($startSearch, $testString, $matchResult) >= 0)
                break;
            $startSearch = $startSearch + (-1) | 0;
        }
        return $startSearch;
    }
    function jur_EmptySet_hasConsumed($this, $mr) {
        return 0;
    }
    function jur_JointSet() {
        var a = this; jur_AbstractSet.call(a);
        a.$children0 = null;
        a.$fSet = null;
        a.$groupIndex0 = 0;
    }
    function jur_JointSet__init_0(var_0, var_1) {
        var var_2 = new jur_JointSet();
        jur_JointSet__init_(var_2, var_0, var_1);
        return var_2;
    }
    function jur_JointSet__init_($this, $children, $fSet) {
        jur_AbstractSet__init_($this);
        $this.$children0 = $children;
        $this.$fSet = $fSet;
        $this.$groupIndex0 = $fSet.$groupIndex;
    }
    function jur_JointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i, $shift;
        if ($this.$children0 === null)
            return (-1);
        $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children0.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size) {
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
                return (-1);
            }
            $shift = (ju_ArrayList_get($this.$children0, $i)).$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return $shift;
    }
    function jur_JointSet_setNext($this, $next) {
        $this.$fSet.$next4 = $next;
    }
    function jur_JointSet_first($this, $set) {
        var $i;
        a: {
            $i = $this.$children0;
            if ($i !== null) {
                $i = ju_AbstractList_iterator($i);
                while (true) {
                    if (!ju_AbstractList$1_hasNext($i))
                        break a;
                    if (!(ju_AbstractList$1_next($i)).$first($set))
                        continue;
                    else
                        return 1;
                }
            }
        }
        return 0;
    }
    function jur_JointSet_hasConsumed($this, $matchResult) {
        return jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) >= 0 && jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0) == jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) ? 0 : 1;
    }
    function jur_JointSet_processSecondPass($this) {
        var $child, $childrenSize, $i, $set, var$5, var$6, var$7, var$8, var$9;
        $this.$isSecondPassVisited = 1;
        $child = $this.$fSet;
        if ($child !== null && !$child.$isSecondPassVisited)
            jur_AbstractSet_processSecondPass($child);
        a: {
            b: {
                $child = $this.$children0;
                if ($child !== null) {
                    $childrenSize = $child.$size0;
                    $i = 0;
                    while (true) {
                        if ($i >= $childrenSize)
                            break b;
                        $child = ju_ArrayList_get($this.$children0, $i);
                        $set = $child.$processBackRefReplacement();
                        if ($set === null)
                            $set = $child;
                        else {
                            $child.$isSecondPassVisited = 1;
                            ju_ArrayList_remove($this.$children0, $i);
                            var$5 = $this.$children0;
                            if ($i < 0)
                                break a;
                            var$6 = var$5.$size0;
                            if ($i > var$6)
                                break a;
                            ju_ArrayList_ensureCapacity(var$5, var$6 + 1 | 0);
                            var$7 = var$5.$size0;
                            var$8 = var$7;
                            while (var$8 > $i) {
                                var$9 = var$5.$array0.data;
                                var$9[var$8] = var$9[var$8 - 1 | 0];
                                var$8 = var$8 + (-1) | 0;
                            }
                            var$5.$array0.data[$i] = $set;
                            var$5.$size0 = var$7 + 1 | 0;
                            var$5.$modCount = var$5.$modCount + 1 | 0;
                        }
                        if (!$set.$isSecondPassVisited)
                            $set.$processSecondPass();
                        $i = $i + 1 | 0;
                    }
                }
            }
            if ($this.$next4 !== null)
                jur_AbstractSet_processSecondPass($this);
            return;
        }
        $child = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0($child);
        $rt_throw($child);
    }
    var jur_NonCapJointSet = $rt_classWithoutFields(jur_JointSet);
    function jur_NonCapJointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i, $shift;
        $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children0.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
                return (-1);
            }
            $shift = (ju_ArrayList_get($this.$children0, $i)).$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return $shift;
    }
    function jur_NonCapJointSet_hasConsumed($this, $matchResult) {
        return !jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0) ? 0 : 1;
    }
    var jur_AtomicJointSet = $rt_classWithoutFields(jur_NonCapJointSet);
    function jur_AtomicJointSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $size, $i;
        $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $size = $this.$children0.$size0;
        $i = 0;
        while ($i < $size) {
            if ((ju_ArrayList_get($this.$children0, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                return $this.$next4.$matches($this.$fSet.$index6, $testString, $matchResult);
            $i = $i + 1 | 0;
        }
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
        return (-1);
    }
    function jur_AtomicJointSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    var jur_PositiveLookAhead = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_PositiveLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children0.$size0;
        $i = 0;
        while ($i < $size) {
            if ((ju_ArrayList_get($this.$children0, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_PositiveLookAhead_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_NegativeLookAhead = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_NegativeLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children0.$size0;
        $i = 0;
        while (true) {
            if ($i >= $size)
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ((ju_ArrayList_get($this.$children0, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_NegativeLookAhead_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_PositiveLookBehind = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_PositiveLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $leftBound, $shift, $i;
        $size = $this.$children0.$size0;
        $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
        a: {
            $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ($shift >= 0) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
                $i = 0;
                while (true) {
                    if ($i >= $size)
                        break a;
                    if ((ju_ArrayList_get($this.$children0, $i)).$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, (-1));
                        return $shift;
                    }
                    $i = $i + 1 | 0;
                }
            }
        }
        return (-1);
    }
    function jur_PositiveLookBehind_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_NegativeLookBehind = $rt_classWithoutFields(jur_AtomicJointSet);
    function jur_NegativeLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
        var $size, $i;
        $size = $this.$children0.$size0;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
        $i = 0;
        while (true) {
            if ($i >= $size)
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ((ju_ArrayList_get($this.$children0, $i)).$findBack(0, $stringIndex, $testString, $matchResult) >= 0)
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_NegativeLookBehind_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_SingleSet() {
        jur_JointSet.call(this);
        this.$kid = null;
    }
    function jur_SingleSet__init_(var_0, var_1) {
        var var_2 = new jur_SingleSet();
        jur_SingleSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_SingleSet__init_0($this, $child, $fSet) {
        jur_AbstractSet__init_($this);
        $this.$kid = $child;
        $this.$fSet = $fSet;
        $this.$groupIndex0 = $fSet.$groupIndex;
    }
    function jur_SingleSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $start, $shift;
        $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
        $shift = $this.$kid.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $shift;
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
        return (-1);
    }
    function jur_SingleSet_find($this, $stringIndex, $testString, $matchResult) {
        var $res;
        $res = $this.$kid.$find0($stringIndex, $testString, $matchResult);
        if ($res >= 0)
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
        return $res;
    }
    function jur_SingleSet_findBack($this, $stringIndex, $lastIndex, $testString, $matchResult) {
        var $res;
        $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
        if ($res >= 0)
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
        return $res;
    }
    function jur_SingleSet_first($this, $set) {
        return $this.$kid.$first($set);
    }
    function jur_SingleSet_processBackRefReplacement($this) {
        var $set;
        $set = new jur_BackReferencedSingleSet;
        jur_SingleSet__init_0($set, $this.$kid, $this.$fSet);
        $this.$next4 = $set;
        return $set;
    }
    function jur_SingleSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$fSet;
        if ($set !== null && !$set.$isSecondPassVisited)
            jur_AbstractSet_processSecondPass($set);
        $set = $this.$kid;
        if ($set !== null && !$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$kid.$isSecondPassVisited = 1;
                $this.$kid = $set;
            }
            $this.$kid.$processSecondPass();
        }
    }
    var jur_SpecialToken = $rt_classWithoutFields();
    function jur_AbstractCharClass() {
        var a = this; jur_SpecialToken.call(a);
        a.$alt0 = 0;
        a.$altSurrogates = 0;
        a.$lowHighSurrogates = null;
        a.$charClassWithoutSurrogates = null;
        a.$charClassWithSurrogates = null;
        a.$mayContainSupplCodepoints = 0;
    }
    var jur_AbstractCharClass_charClasses = null;
    function jur_AbstractCharClass_$callClinit() {
        jur_AbstractCharClass_$callClinit = $rt_eraseClinit(jur_AbstractCharClass);
        jur_AbstractCharClass__clinit_();
    }
    function jur_AbstractCharClass__init_($this) {
        var var$1;
        jur_AbstractCharClass_$callClinit();
        var$1 = new ju_BitSet;
        var$1.$data2 = $rt_createIntArray(64);
        $this.$lowHighSurrogates = var$1;
    }
    function jur_AbstractCharClass_getBits($this) {
        return null;
    }
    function jur_AbstractCharClass_getLowHighSurrogates($this) {
        return $this.$lowHighSurrogates;
    }
    function jur_AbstractCharClass_hasLowHighSurrogates($this) {
        var var$1, var$2, var$3, var$4, var$5;
        if (!$this.$altSurrogates)
            var$1 = ju_BitSet_nextSetBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1;
        else {
            a: {
                var$2 = $this.$lowHighSurrogates;
                var$1 = 0;
                var$3 = var$2.$length5;
                if (var$1 < var$3) {
                    var$4 = var$2.$data2.data;
                    var$5 = (var$4[0] ^ (-1)) >>> 0 | 0;
                    if (var$5)
                        var$1 = jl_Integer_numberOfTrailingZeros(var$5) + var$1 | 0;
                    else {
                        var$1 = (var$3 + 31 | 0) / 32 | 0;
                        var$5 = 1;
                        while (var$5 < var$1) {
                            if (var$4[var$5] != (-1)) {
                                var$1 = (var$5 * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[var$5] ^ (-1)) | 0;
                                break a;
                            }
                            var$5 = var$5 + 1 | 0;
                        }
                        var$1 = var$3;
                    }
                }
            }
            var$1 = var$1 >= 2048 ? 0 : 1;
        }
        return var$1;
    }
    function jur_AbstractCharClass_mayContainSupplCodepoints($this) {
        return $this.$mayContainSupplCodepoints;
    }
    function jur_AbstractCharClass_getInstance($this) {
        return $this;
    }
    function jur_AbstractCharClass_getSurrogates($this) {
        var $lHS, var$2;
        if ($this.$charClassWithSurrogates === null) {
            $lHS = $this.$getLowHighSurrogates();
            var$2 = new jur_AbstractCharClass$1;
            var$2.$this$03 = $this;
            var$2.$val$lHS = $lHS;
            jur_AbstractCharClass__init_(var$2);
            $this.$charClassWithSurrogates = var$2;
            jur_AbstractCharClass_setNegative(var$2, $this.$altSurrogates);
        }
        return $this.$charClassWithSurrogates;
    }
    function jur_AbstractCharClass_getWithoutSurrogates($this) {
        var $lHS, var$2;
        if ($this.$charClassWithoutSurrogates === null) {
            $lHS = $this.$getLowHighSurrogates();
            var$2 = new jur_AbstractCharClass$2;
            var$2.$this$04 = $this;
            var$2.$val$lHS0 = $lHS;
            var$2.$val$thisClass = $this;
            jur_AbstractCharClass__init_(var$2);
            $this.$charClassWithoutSurrogates = var$2;
            jur_AbstractCharClass_setNegative(var$2, $this.$alt0);
            $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints;
        }
        return $this.$charClassWithoutSurrogates;
    }
    function jur_AbstractCharClass_hasUCI($this) {
        return 0;
    }
    function jur_AbstractCharClass_setNegative($this, $value) {
        var var$2;
        var$2 = $this.$alt0;
        if (var$2 ^ $value) {
            $this.$alt0 = var$2 ? 0 : 1;
            $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        }
        if (!$this.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        return $this;
    }
    function jur_AbstractCharClass_isNegative($this) {
        return $this.$alt0;
    }
    function jur_AbstractCharClass_intersects($cc, $ch) {
        jur_AbstractCharClass_$callClinit();
        return $cc.$contains($ch);
    }
    function jur_AbstractCharClass_intersects0($cc1, $cc2) {
        var var$3, var$4;
        jur_AbstractCharClass_$callClinit();
        if ($cc1.$getBits() !== null && $cc2.$getBits() !== null) {
            $cc1 = $cc1.$getBits();
            $cc2 = $cc2.$getBits();
            var$3 = jl_Math_min($cc1.$data2.data.length, $cc2.$data2.data.length);
            var$4 = 0;
            a: {
                while (var$4 < var$3) {
                    if ($cc1.$data2.data[var$4] & $cc2.$data2.data[var$4]) {
                        var$3 = 1;
                        break a;
                    }
                    var$4 = var$4 + 1 | 0;
                }
                var$3 = 0;
            }
            return var$3;
        }
        return 1;
    }
    function jur_AbstractCharClass_getPredefinedClass($name, $negative) {
        var var$3, var$4, var$5;
        jur_AbstractCharClass_$callClinit();
        var$3 = 0;
        while (true) {
            jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
            var$4 = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data;
            if (var$3 >= var$4.length) {
                var$5 = new ju_MissingResourceException;
                jl_Throwable__init_(var$5, $rt_s(3));
                var$5.$className = $rt_s(3);
                var$5.$key1 = $name;
                $rt_throw(var$5);
            }
            var$4 = var$4[var$3].data;
            if (jl_String_equals($name, var$4[0]))
                break;
            var$3 = var$3 + 1 | 0;
        }
        return jur_AbstractCharClass$LazyCharClass_getValue(var$4[1], $negative);
    }
    function jur_AbstractCharClass__clinit_() {
        var var$1;
        var$1 = new jur_AbstractCharClass$PredefinedCharacterClasses;
        jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
        jur_AbstractCharClass_charClasses = var$1;
    }
    function jur_CharClass() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$ci = 0;
        a.$uci = 0;
        a.$hasUCI0 = 0;
        a.$invertedSurrogates = 0;
        a.$inverted = 0;
        a.$hideBits = 0;
        a.$bits = null;
        a.$nonBitSet = null;
    }
    function jur_CharClass__init_0() {
        var var_0 = new jur_CharClass();
        jur_CharClass__init_1(var_0);
        return var_0;
    }
    function jur_CharClass__init_(var_0, var_1) {
        var var_2 = new jur_CharClass();
        jur_CharClass__init_2(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CharClass__init_1($this) {
        jur_AbstractCharClass__init_($this);
        $this.$bits = ju_BitSet__init_();
    }
    function jur_CharClass__init_2($this, $ci, $uci) {
        jur_AbstractCharClass__init_($this);
        $this.$bits = ju_BitSet__init_();
        $this.$ci = $ci;
        $this.$uci = $uci;
    }
    function jur_CharClass_add($this, $ch) {
        a: {
            if ($this.$ci) {
                b: {
                    if (!($ch >= 97 && $ch <= 122)) {
                        if ($ch < 65)
                            break b;
                        if ($ch > 90)
                            break b;
                    }
                    if ($this.$inverted) {
                        ju_BitSet_clear($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                        break a;
                    }
                    ju_BitSet_set($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                if ($this.$uci && $ch > 128) {
                    $this.$hasUCI0 = 1;
                    $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
                }
            }
        }
        if (!(!jur_Lexer_isHighSurrogate0($ch) && !jur_Lexer_isLowSurrogate0($ch))) {
            if ($this.$invertedSurrogates)
                ju_BitSet_clear($this.$lowHighSurrogates, $ch - 55296 | 0);
            else
                ju_BitSet_set($this.$lowHighSurrogates, $ch - 55296 | 0);
        }
        if ($this.$inverted)
            ju_BitSet_clear($this.$bits, $ch);
        else
            ju_BitSet_set($this.$bits, $ch);
        if (!$this.$mayContainSupplCodepoints && jl_Character_isSupplementaryCodePoint($ch))
            $this.$mayContainSupplCodepoints = 1;
        return $this;
    }
    function jur_CharClass_add1($this, $cc) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $cc.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($this.$invertedSurrogates) {
            if (!$cc.$altSurrogates)
                ju_BitSet_andNot($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            else
                ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        } else if (!$cc.$altSurrogates)
            ju_BitSet_or($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
            $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
            $this.$invertedSurrogates = 1;
        }
        if (!$this.$hideBits && $cc.$getBits() !== null) {
            if ($this.$inverted) {
                if (!$cc.$alt0)
                    ju_BitSet_andNot($this.$bits, $cc.$getBits());
                else
                    ju_BitSet_and($this.$bits, $cc.$getBits());
            } else if (!$cc.$alt0)
                ju_BitSet_or($this.$bits, $cc.$getBits());
            else {
                ju_BitSet_xor($this.$bits, $cc.$getBits());
                ju_BitSet_and($this.$bits, $cc.$getBits());
                $this.$alt0 = $this.$alt0 ? 0 : 1;
                $this.$inverted = 1;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$5;
                    var$4.$this$05 = $this;
                    var$4.$val$curAlt = $curAlt;
                    var$4.$val$nb = $nb;
                    var$4.$val$cc = $cc;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$4;
                    var$4.$this$06 = $this;
                    var$4.$val$curAlt0 = $curAlt;
                    var$4.$val$nb0 = $nb;
                    var$4.$val$cc0 = $cc;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if ($curAlt && !$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    $nb = new jur_CharClass$1;
                    $nb.$this$07 = $this;
                    $nb.$val$cc1 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$3;
                    $nb.$this$08 = $this;
                    $nb.$val$curAlt1 = $curAlt;
                    $nb.$val$cc2 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$2;
                    $nb.$this$09 = $this;
                    $nb.$val$curAlt2 = $curAlt;
                    $nb.$val$cc3 = $cc;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
        return $this;
    }
    function jur_CharClass_add0($this, $i, $end) {
        var var$3, var$4, var$5, var$6, var$7;
        if ($i > $end) {
            var$3 = new jl_IllegalArgumentException;
            jl_Throwable__init_0(var$3);
            $rt_throw(var$3);
        }
        a: {
            b: {
                if (!$this.$ci) {
                    if ($end < 55296)
                        break b;
                    if ($i > 57343)
                        break b;
                }
                $end = $end + 1 | 0;
                while (true) {
                    if ($i >= $end)
                        break a;
                    jur_CharClass_add($this, $i);
                    $i = $i + 1 | 0;
                }
            }
            if (!$this.$inverted)
                ju_BitSet_set0($this.$bits, $i, $end + 1 | 0);
            else {
                var$3 = $this.$bits;
                $end = $end + 1 | 0;
                if ($i >= 0 && $i <= $end) {
                    var$4 = var$3.$length5;
                    if ($i < var$4) {
                        var$5 = jl_Math_min(var$4, $end);
                        if ($i != var$5) {
                            var$6 = $i / 32 | 0;
                            $end = var$5 / 32 | 0;
                            if (var$6 == $end) {
                                var$7 = var$3.$data2.data;
                                var$7[var$6] = var$7[var$6] & (ju_BitSet_trailingOneBits(var$3, $i) | ju_BitSet_trailingZeroBits(var$3, var$5));
                            } else {
                                var$7 = var$3.$data2.data;
                                var$7[var$6] = var$7[var$6] & ju_BitSet_trailingOneBits(var$3, $i);
                                var$4 = var$6 + 1 | 0;
                                while (var$4 < $end) {
                                    var$3.$data2.data[var$4] = 0;
                                    var$4 = var$4 + 1 | 0;
                                }
                                if (var$5 & 31) {
                                    var$7 = var$3.$data2.data;
                                    var$7[$end] = var$7[$end] & ju_BitSet_trailingZeroBits(var$3, var$5);
                                }
                            }
                            ju_BitSet_recalculateLength(var$3);
                        }
                    }
                } else {
                    var$3 = new jl_IndexOutOfBoundsException;
                    jl_Throwable__init_0(var$3);
                    $rt_throw(var$3);
                }
            }
        }
        return $this;
    }
    function jur_CharClass_union($this, $clazz) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($clazz.$hasUCI0)
            $this.$hasUCI0 = 1;
        $curAlt = $this.$altSurrogates;
        if (!($curAlt ^ $clazz.$altSurrogates)) {
            if (!$curAlt)
                ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            else
                ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        } else if ($curAlt)
            ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            $this.$altSurrogates = 1;
        }
        if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
            $curAlt = $this.$alt0;
            if (!($curAlt ^ $clazz.$alt0)) {
                if (!$curAlt)
                    ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
                else
                    ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            } else if ($curAlt)
                ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
            else {
                ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                $this.$alt0 = 1;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$11;
                    var$4.$this$010 = $this;
                    var$4.$val$curAlt3 = $curAlt;
                    var$4.$val$nb1 = $nb;
                    var$4.$val$clazz = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$10;
                    var$4.$this$011 = $this;
                    var$4.$val$curAlt4 = $curAlt;
                    var$4.$val$nb2 = $nb;
                    var$4.$val$clazz0 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    if (!$curAlt) {
                        $nb = new jur_CharClass$7;
                        $nb.$this$012 = $this;
                        $nb.$val$clazz1 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    } else {
                        $nb = new jur_CharClass$6;
                        $nb.$this$013 = $this;
                        $nb.$val$clazz2 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    }
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$9;
                    $nb.$this$014 = $this;
                    $nb.$val$clazz3 = $clazz;
                    $nb.$val$curAlt5 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$8;
                    $nb.$this$015 = $this;
                    $nb.$val$clazz4 = $clazz;
                    $nb.$val$curAlt6 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
    }
    function jur_CharClass_intersection($this, $clazz) {
        var $curAlt, $nb, var$4;
        if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
            $this.$mayContainSupplCodepoints = 1;
        if ($clazz.$hasUCI0)
            $this.$hasUCI0 = 1;
        $curAlt = $this.$altSurrogates;
        if (!($curAlt ^ $clazz.$altSurrogates)) {
            if (!$curAlt)
                ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            else
                ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        } else if (!$curAlt)
            ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else {
            ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
            $this.$altSurrogates = 0;
        }
        if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
            $curAlt = $this.$alt0;
            if (!($curAlt ^ $clazz.$alt0)) {
                if (!$curAlt)
                    ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                else
                    ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
            } else if (!$curAlt)
                ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
            else {
                ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
                $this.$alt0 = 0;
            }
        } else {
            $curAlt = $this.$alt0;
            $nb = $this.$nonBitSet;
            if ($nb !== null) {
                if (!$curAlt) {
                    var$4 = new jur_CharClass$17;
                    var$4.$this$016 = $this;
                    var$4.$val$curAlt7 = $curAlt;
                    var$4.$val$nb3 = $nb;
                    var$4.$val$clazz5 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                } else {
                    var$4 = new jur_CharClass$16;
                    var$4.$this$017 = $this;
                    var$4.$val$curAlt8 = $curAlt;
                    var$4.$val$nb4 = $nb;
                    var$4.$val$clazz6 = $clazz;
                    jur_AbstractCharClass__init_(var$4);
                    $this.$nonBitSet = var$4;
                }
            } else {
                if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                    if (!$curAlt) {
                        $nb = new jur_CharClass$13;
                        $nb.$this$018 = $this;
                        $nb.$val$clazz7 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    } else {
                        $nb = new jur_CharClass$12;
                        $nb.$this$019 = $this;
                        $nb.$val$clazz8 = $clazz;
                        jur_AbstractCharClass__init_($nb);
                        $this.$nonBitSet = $nb;
                    }
                } else if (!$curAlt) {
                    $nb = new jur_CharClass$15;
                    $nb.$this$020 = $this;
                    $nb.$val$clazz9 = $clazz;
                    $nb.$val$curAlt9 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$14;
                    $nb.$this$021 = $this;
                    $nb.$val$clazz10 = $clazz;
                    $nb.$val$curAlt10 = $curAlt;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
                $this.$hideBits = 1;
            }
        }
    }
    function jur_CharClass_contains($this, $ch) {
        var var$2;
        var$2 = $this.$nonBitSet;
        if (var$2 !== null)
            return $this.$alt0 ^ var$2.$contains($ch);
        return $this.$alt0 ^ ju_BitSet_get($this.$bits, $ch);
    }
    function jur_CharClass_getBits($this) {
        if (!$this.$hideBits)
            return $this.$bits;
        return null;
    }
    function jur_CharClass_getLowHighSurrogates($this) {
        return $this.$lowHighSurrogates;
    }
    function jur_CharClass_getInstance($this) {
        var $bs, $res;
        if ($this.$nonBitSet !== null)
            return $this;
        $bs = jur_CharClass_getBits($this);
        $res = new jur_CharClass$18;
        $res.$this$022 = $this;
        $res.$val$bs = $bs;
        jur_AbstractCharClass__init_($res);
        return jur_AbstractCharClass_setNegative($res, $this.$alt0);
    }
    function jur_CharClass_toString($this) {
        var $temp, $i, var$3;
        $temp = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($temp);
        $i = ju_BitSet_nextSetBit($this.$bits, 0);
        while ($i >= 0) {
            jl_AbstractStringBuilder_append2($temp, jl_Character_toChars($i));
            jl_AbstractStringBuilder_append($temp, 124);
            $i = ju_BitSet_nextSetBit($this.$bits, $i + 1 | 0);
        }
        var$3 = $temp.$length0;
        if (var$3 > 0)
            jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
        return jl_AbstractStringBuilder_toString($temp);
    }
    function jur_CharClass_hasUCI($this) {
        return $this.$hasUCI0;
    }
    function ju_MissingResourceException() {
        var a = this; jl_RuntimeException.call(a);
        a.$className = null;
        a.$key1 = null;
    }
    function jur_QuantifierSet() {
        jur_AbstractSet.call(this);
        this.$innerSet = null;
    }
    function jur_QuantifierSet__init_($this, $innerSet, $next, $type) {
        jur_AbstractSet__init_0($this, $next);
        $this.$innerSet = $innerSet;
        $this.$type1 = $type;
    }
    function jur_QuantifierSet_getInnerSet($this) {
        return $this.$innerSet;
    }
    function jur_QuantifierSet_first($this, $set) {
        return !$this.$innerSet.$first($set) && !$this.$next4.$first($set) ? 0 : 1;
    }
    function jur_QuantifierSet_hasConsumed($this, $mr) {
        return 1;
    }
    function jur_QuantifierSet_processSecondPass($this) {
        var $set;
        $this.$isSecondPassVisited = 1;
        $set = $this.$next4;
        if ($set !== null && !$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next4.$isSecondPassVisited = 1;
                $this.$next4 = $set;
            }
            $this.$next4.$processSecondPass();
        }
        $set = $this.$innerSet;
        if ($set !== null) {
            if (!$set.$isSecondPassVisited) {
                $set = $set.$processBackRefReplacement();
                if ($set !== null) {
                    $this.$innerSet.$isSecondPassVisited = 1;
                    $this.$innerSet = $set;
                }
                $this.$innerSet.$processSecondPass();
            } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
                $this.$innerSet = $set.$next4;
        }
    }
    function jur_LeafQuantifierSet() {
        jur_QuantifierSet.call(this);
        this.$leaf = null;
    }
    function jur_LeafQuantifierSet__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_LeafQuantifierSet();
        jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type) {
        jur_QuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$leaf = $innerSet;
    }
    function jur_LeafQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $i, var$5;
        $i = 0;
        a: {
            while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                var$5 = $this.$leaf.$accepts($stringIndex, $testString);
                if (var$5 <= 0)
                    break a;
                $stringIndex = $stringIndex + var$5 | 0;
                $i = $i + 1 | 0;
            }
        }
        while (true) {
            if ($i < 0)
                return (-1);
            var$5 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if (var$5 >= 0)
                break;
            $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
            $i = $i + (-1) | 0;
        }
        return var$5;
    }
    function jur_CompositeQuantifierSet() {
        jur_LeafQuantifierSet.call(this);
        this.$quantifier = null;
    }
    function jur_CompositeQuantifierSet__init_0(var_0, var_1, var_2, var_3) {
        var var_4 = new jur_CompositeQuantifierSet();
        jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function jur_CompositeQuantifierSet__init_($this, $quant, $innerSet, $next, $type) {
        jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$quantifier = $quant;
    }
    function jur_CompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, $shift;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max1;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while ($i < $max) {
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                            break a;
                        $shift = $this.$leaf.$accepts($stringIndex, $testString);
                        if ($shift < 1)
                            break a;
                        $stringIndex = $stringIndex + $shift | 0;
                        $i = $i + 1 | 0;
                    }
                }
                while (true) {
                    if ($i < $min)
                        return (-1);
                    $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
                    if ($shift >= 0)
                        break;
                    $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
                    $i = $i + (-1) | 0;
                }
                return $shift;
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            $shift = $this.$leaf.$accepts($stringIndex, $testString);
            if ($shift < 1)
                break;
            $stringIndex = $stringIndex + $shift | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_GroupQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet);
    function jur_GroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0)
            return $nextIndex;
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_AltQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_AltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        $shift = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        return $shift;
    }
    function jur_AltQuantifierSet_setNext($this, $next) {
        $this.$next4 = $next;
        $this.$innerSet.$setNext($next);
    }
    var jur_UnifiedQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_UnifiedQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0 && $this.$leaf.$accepts($stringIndex, $testString) > 0) {
            $stringIndex = $stringIndex + $this.$leaf.$charCount0() | 0;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_UnifiedQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $startSearch, $newSearch, $newSearch_0;
        $startSearch = $this.$next4.$find0($stringIndex, $testString, $matchResult);
        if ($startSearch < 0)
            return (-1);
        $newSearch = $startSearch - $this.$leaf.$charCount0() | 0;
        while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
            $newSearch_0 = $newSearch - $this.$leaf.$charCount0() | 0;
            $startSearch = $newSearch;
            $newSearch = $newSearch_0;
        }
        return $startSearch;
    }
    function jur_AbstractCharClass$LazyCharClass() {
        var a = this; jl_Object.call(a);
        a.$posValue = null;
        a.$negValue = null;
    }
    function jur_AbstractCharClass$LazyCharClass_getValue($this, $negative) {
        if (!$negative && $this.$posValue === null)
            $this.$posValue = $this.$computeValue();
        else if ($negative && $this.$negValue === null)
            $this.$negValue = jur_AbstractCharClass_setNegative($this.$computeValue(), 1);
        if ($negative)
            return $this.$negValue;
        return $this.$posValue;
    }
    function jur_Quantifier() {
        var a = this; jur_SpecialToken.call(a);
        a.$min0 = 0;
        a.$max1 = 0;
    }
    function jur_Quantifier_toString($this) {
        var var$1, var$2, var$3, var$4, var$5;
        var$1 = $this.$min0;
        var$2 = $this.$max1;
        var$3 = var$2 != 2147483647 ? jl_Integer_toString(var$2) : $rt_s(3);
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, 123);
        var$5 = jl_StringBuilder_append0(var$4, var$1);
        jl_AbstractStringBuilder_append(var$5, 44);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, var$3), 125);
        return jl_AbstractStringBuilder_toString(var$4);
    }
    var jur_FSet$PossessiveFSet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_FSet$PossessiveFSet_matches($this, $stringIndex, $testString, $matchResult) {
        return $stringIndex;
    }
    function jur_FSet$PossessiveFSet_hasConsumed($this, $mr) {
        return 0;
    }
    function ju_BitSet() {
        var a = this; jl_Object.call(a);
        a.$data2 = null;
        a.$length5 = 0;
    }
    function ju_BitSet__init_() {
        var var_0 = new ju_BitSet();
        ju_BitSet__init_0(var_0);
        return var_0;
    }
    function ju_BitSet__init_0($this) {
        $this.$data2 = $rt_createIntArray(2);
    }
    function ju_BitSet_set($this, $bitIndex) {
        var var$2, $index, var$4;
        if ($bitIndex < 0) {
            var$2 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        $index = $bitIndex / 32 | 0;
        if ($bitIndex >= $this.$length5) {
            ju_BitSet_ensureCapacity($this, $index + 1 | 0);
            $this.$length5 = $bitIndex + 1 | 0;
        }
        var$4 = $this.$data2.data;
        var$4[$index] = var$4[$index] | 1 << ($bitIndex % 32 | 0);
    }
    function ju_BitSet_set0($this, $fromIndex, $toIndex) {
        var $fromDataIndex, $toDataIndex, var$5, $i, var$7;
        if ($fromIndex >= 0) {
            $fromDataIndex = $rt_compare($fromIndex, $toIndex);
            if ($fromDataIndex <= 0) {
                if (!$fromDataIndex)
                    return;
                $fromDataIndex = $fromIndex / 32 | 0;
                $toDataIndex = $toIndex / 32 | 0;
                if ($toIndex > $this.$length5) {
                    ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
                    $this.$length5 = $toIndex;
                }
                if ($fromDataIndex == $toDataIndex) {
                    var$5 = $this.$data2.data;
                    var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
                } else {
                    var$5 = $this.$data2.data;
                    var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
                    $i = $fromDataIndex + 1 | 0;
                    while ($i < $toDataIndex) {
                        $this.$data2.data[$i] = (-1);
                        $i = $i + 1 | 0;
                    }
                    if ($toIndex & 31) {
                        var$5 = $this.$data2.data;
                        var$5[$toDataIndex] = var$5[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
                    }
                }
                return;
            }
        }
        var$7 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$7);
        $rt_throw(var$7);
    }
    function ju_BitSet_trailingZeroBits($this, $num) {
        return (-1) << ($num % 32 | 0);
    }
    function ju_BitSet_trailingOneBits($this, $num) {
        $num = $num % 32 | 0;
        return !$num ? 0 : (-1) >>> (32 - $num | 0) | 0;
    }
    function ju_BitSet_clear($this, $bitIndex) {
        var var$2, $index, var$4, var$5, var$6;
        if ($bitIndex < 0) {
            var$2 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        $index = $bitIndex / 32 | 0;
        var$4 = $this.$data2.data;
        if ($index < var$4.length) {
            var$5 = var$4[$index];
            var$6 = ($bitIndex % 32 | 0) & 31;
            var$4[$index] = var$5 & ((-2) << var$6 | ((-2) >>> (32 - var$6 | 0) | 0));
            if ($bitIndex == ($this.$length5 - 1 | 0))
                ju_BitSet_recalculateLength($this);
        }
    }
    function ju_BitSet_get($this, $bitIndex) {
        var var$2, $index, var$4;
        if ($bitIndex < 0) {
            var$2 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        $index = $bitIndex / 32 | 0;
        var$4 = $this.$data2.data;
        return $index < var$4.length && var$4[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
    }
    function ju_BitSet_nextSetBit($this, $fromIndex) {
        var var$2, $top, $index, var$5, $i;
        if ($fromIndex < 0) {
            var$2 = new jl_IndexOutOfBoundsException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        $top = $this.$length5;
        if ($fromIndex >= $top)
            return (-1);
        $index = $fromIndex / 32 | 0;
        var$5 = $this.$data2.data;
        $i = var$5[$index] >>> ($fromIndex % 32 | 0) | 0;
        if ($i)
            return jl_Integer_numberOfTrailingZeros($i) + $fromIndex | 0;
        $top = ($top + 31 | 0) / 32 | 0;
        $i = $index + 1 | 0;
        while ($i < $top) {
            if (var$5[$i])
                return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$5[$i]) | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function ju_BitSet_ensureCapacity($this, $capacity) {
        var $newArrayLength, var$3, var$4, var$5;
        $newArrayLength = $this.$data2.data.length;
        if ($newArrayLength >= $capacity)
            return;
        $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($newArrayLength * 2 | 0) + 1 | 0);
        var$3 = $this.$data2.data;
        var$4 = $rt_createIntArray($newArrayLength);
        var$5 = var$4.data;
        $capacity = jl_Math_min($newArrayLength, var$3.length);
        $newArrayLength = 0;
        while ($newArrayLength < $capacity) {
            var$5[$newArrayLength] = var$3[$newArrayLength];
            $newArrayLength = $newArrayLength + 1 | 0;
        }
        $this.$data2 = var$4;
    }
    function ju_BitSet_recalculateLength($this) {
        var $top, $i, $sz;
        $top = ($this.$length5 + 31 | 0) / 32 | 0;
        $this.$length5 = $top * 32 | 0;
        $i = $top - 1 | 0;
        a: {
            while (true) {
                if ($i < 0)
                    break a;
                $sz = jl_Integer_numberOfLeadingZeros($this.$data2.data[$i]);
                if ($sz < 32)
                    break;
                $i = $i + (-1) | 0;
                $this.$length5 = $this.$length5 - 32 | 0;
            }
            $this.$length5 = $this.$length5 - $sz | 0;
        }
    }
    function ju_BitSet_and($this, $set) {
        var $i, $i_0, var$4, var$5;
        $i = jl_Math_min($this.$data2.data.length, $set.$data2.data.length);
        $i_0 = 0;
        while ($i_0 < $i) {
            var$4 = $this.$data2.data;
            var$4[$i_0] = var$4[$i_0] & $set.$data2.data[$i_0];
            $i_0 = $i_0 + 1 | 0;
        }
        while (true) {
            var$5 = $this.$data2.data;
            if ($i >= var$5.length)
                break;
            var$5[$i] = 0;
            $i = $i + 1 | 0;
        }
        $this.$length5 = jl_Math_min($this.$length5, $set.$length5);
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_andNot($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_min($this.$data2.data.length, $set.$data2.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data2.data;
            var$4[$i] = var$4[$i] & ($set.$data2.data[$i] ^ (-1));
            $i = $i + 1 | 0;
        }
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_or($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_max($this.$length5, $set.$length5);
        $this.$length5 = $sz;
        ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
        $sz = jl_Math_min($this.$data2.data.length, $set.$data2.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data2.data;
            var$4[$i] = var$4[$i] | $set.$data2.data[$i];
            $i = $i + 1 | 0;
        }
    }
    function ju_BitSet_xor($this, $set) {
        var $sz, $i, var$4;
        $sz = jl_Math_max($this.$length5, $set.$length5);
        $this.$length5 = $sz;
        ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
        $sz = jl_Math_min($this.$data2.data.length, $set.$data2.data.length);
        $i = 0;
        while ($i < $sz) {
            var$4 = $this.$data2.data;
            var$4[$i] = var$4[$i] ^ $set.$data2.data[$i];
            $i = $i + 1 | 0;
        }
        ju_BitSet_recalculateLength($this);
    }
    function ju_BitSet_isEmpty($this) {
        return $this.$length5 ? 0 : 1;
    }
    function jur_LowHighSurrogateRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$surrChars = null;
        a.$alt = 0;
    }
    function jur_CompositeRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$withoutSurrogates = null;
        a.$withSurrogates = null;
    }
    function jur_CompositeRangeSet__init_(var_0, var_1) {
        var var_2 = new jur_CompositeRangeSet();
        jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CompositeRangeSet__init_0($this, $withoutSurrogates, $withSurrogates) {
        jur_AbstractSet__init_($this);
        $this.$withoutSurrogates = $withoutSurrogates;
        $this.$withSurrogates = $withSurrogates;
    }
    function jur_CompositeRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift, var$5, var$6, var$7, var$8;
        $shift = $this.$withoutSurrogates.$matches($stringIndex, $testString, $matchResult);
        if ($shift < 0)
            a: {
                var$5 = $this.$withSurrogates;
                var$6 = $matchResult.$leftBound0;
                $shift = $matchResult.$rightBound0;
                var$7 = $stringIndex + 1 | 0;
                $shift = $rt_compare(var$7, $shift);
                if ($shift > 0) {
                    $matchResult.$hitEnd = 1;
                    $shift = (-1);
                } else {
                    var$8 = jl_String_charAt($testString, $stringIndex);
                    if (!var$5.$surrChars.$contains(var$8))
                        $shift = (-1);
                    else {
                        if (jl_Character_isHighSurrogate(var$8)) {
                            if ($shift < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$7))) {
                                $shift = (-1);
                                break a;
                            }
                        } else if (jl_Character_isLowSurrogate(var$8) && $stringIndex > var$6 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
                            $shift = (-1);
                            break a;
                        }
                        $shift = var$5.$next4.$matches(var$7, $testString, $matchResult);
                    }
                }
            }
        if ($shift >= 0)
            return $shift;
        return (-1);
    }
    function jur_CompositeRangeSet_setNext($this, $next) {
        $this.$next4 = $next;
        $this.$withSurrogates.$next4 = $next;
        $this.$withoutSurrogates.$setNext($next);
    }
    function jur_CompositeRangeSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_CompositeRangeSet_first($this, $set) {
        return 1;
    }
    function jur_SupplRangeSet() {
        var a = this; jur_JointSet.call(a);
        a.$chars = null;
        a.$alt1 = 0;
    }
    function jur_SupplRangeSet__init_(var_0) {
        var var_1 = new jur_SupplRangeSet();
        jur_SupplRangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_SupplRangeSet__init_0($this, $cc) {
        jur_AbstractSet__init_($this);
        $this.$chars = $cc.$getInstance0();
        $this.$alt1 = $cc.$alt0;
    }
    function jur_SupplRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $low, $high, $offset;
        $strLength = $matchResult.$rightBound0;
        if ($stringIndex < $strLength) {
            $low = $stringIndex + 1 | 0;
            $high = jl_String_charAt($testString, $stringIndex);
            if ($this.$contains($high)) {
                $offset = $this.$next4.$matches($low, $testString, $matchResult);
                if ($offset > 0)
                    return $offset;
            }
            if ($low < $strLength) {
                $stringIndex = $low + 1 | 0;
                $low = jl_String_charAt($testString, $low);
                if (jl_Character_isSurrogatePair($high, $low) && $this.$contains(jl_Character_toCodePoint($high, $low)))
                    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            }
        }
        return (-1);
    }
    function jur_SupplRangeSet_contains($this, $ch) {
        return $this.$chars.$contains($ch);
    }
    function jur_SupplRangeSet_first($this, $set) {
        if ($set instanceof jur_SupplCharSet)
            return jur_AbstractCharClass_intersects($this.$chars, $set.$ch1);
        if ($set instanceof jur_CharSet)
            return jur_AbstractCharClass_intersects($this.$chars, $set.$ch2);
        if ($set instanceof jur_SupplRangeSet)
            return jur_AbstractCharClass_intersects0($this.$chars, $set.$chars);
        if (!($set instanceof jur_RangeSet))
            return 1;
        return jur_AbstractCharClass_intersects0($this.$chars, $set.$chars0);
    }
    function jur_SupplRangeSet_getChars($this) {
        return $this.$chars;
    }
    function jur_SupplRangeSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_SupplRangeSet_hasConsumed($this, $mr) {
        return 1;
    }
    var jur_UCISupplRangeSet = $rt_classWithoutFields(jur_SupplRangeSet);
    function jur_UCISupplRangeSet_contains($this, $ch) {
        return $this.$chars.$contains(jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch)));
    }
    function jur_UCIRangeSet() {
        var a = this; jur_LeafSet.call(a);
        a.$chars1 = null;
        a.$alt2 = 0;
    }
    function jur_UCIRangeSet__init_(var_0) {
        var var_1 = new jur_UCIRangeSet();
        jur_UCIRangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCIRangeSet__init_0($this, $cc) {
        jur_LeafSet__init_($this);
        $this.$chars1 = $cc.$getInstance0();
        $this.$alt2 = $cc.$alt0;
    }
    function jur_UCIRangeSet_accepts($this, $strIndex, $testString) {
        return !$this.$chars1.$contains(jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex)))) ? (-1) : 1;
    }
    function jur_RangeSet() {
        var a = this; jur_LeafSet.call(a);
        a.$chars0 = null;
        a.$alt3 = 0;
    }
    function jur_RangeSet__init_(var_0) {
        var var_1 = new jur_RangeSet();
        jur_RangeSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_RangeSet__init_0($this, $cc) {
        jur_LeafSet__init_($this);
        $this.$chars0 = $cc.$getInstance0();
        $this.$alt3 = $cc.$alt0;
    }
    function jur_RangeSet_accepts($this, $strIndex, $testString) {
        return !$this.$chars0.$contains(jl_String_charAt($testString, $strIndex)) ? (-1) : 1;
    }
    function jur_RangeSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return jur_AbstractCharClass_intersects($this.$chars0, $set.$ch2);
        if ($set instanceof jur_RangeSet)
            return jur_AbstractCharClass_intersects0($this.$chars0, $set.$chars0);
        if (!($set instanceof jur_SupplRangeSet)) {
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return 0;
        }
        return jur_AbstractCharClass_intersects0($this.$chars0, $set.$chars);
    }
    function jur_HangulDecomposedCharSet() {
        var a = this; jur_JointSet.call(a);
        a.$decomposedChar = null;
        a.$decomposedCharUTF16 = null;
        a.$decomposedCharLength = 0;
    }
    function jur_HangulDecomposedCharSet__init_(var_0, var_1) {
        var var_2 = new jur_HangulDecomposedCharSet();
        jur_HangulDecomposedCharSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_HangulDecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
        jur_AbstractSet__init_($this);
        $this.$decomposedChar = $decomposedChar;
        $this.$decomposedCharLength = $decomposedCharLength;
    }
    function jur_HangulDecomposedCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_HangulDecomposedCharSet_getDecomposedChar($this) {
        if ($this.$decomposedCharUTF16 === null)
            $this.$decomposedCharUTF16 = jl_String__init_($this.$decomposedChar);
        return $this.$decomposedCharUTF16;
    }
    function jur_HangulDecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound, $decompSyllable, $vIndex, $tIndex, var$8, $curSymb, $lIndex, $i, $decompCurSymb, $syllIndex;
        $rightBound = $matchResult.$rightBound0;
        $decompSyllable = $rt_createIntArray(3);
        $vIndex = (-1);
        $tIndex = (-1);
        if ($strIndex >= $rightBound)
            return (-1);
        var$8 = $strIndex + 1 | 0;
        $curSymb = jl_String_charAt($testString, $strIndex);
        $strIndex = $curSymb - 44032 | 0;
        if ($strIndex >= 0 && $strIndex < 11172) {
            $lIndex = 4352 + ($strIndex / 588 | 0) | 0;
            $i = 4449 + (($strIndex % 588 | 0) / 28 | 0) | 0;
            $strIndex = $strIndex % 28 | 0;
            $decompCurSymb = !$strIndex ? $rt_createIntArrayFromData([$lIndex, $i]) : $rt_createIntArrayFromData([$lIndex, $i, 4519 + $strIndex | 0]);
        } else
            $decompCurSymb = null;
        if ($decompCurSymb !== null) {
            $decompCurSymb = $decompCurSymb.data;
            $i = 0;
            $strIndex = $decompCurSymb.length;
            $syllIndex = $this.$decomposedCharLength;
            if ($strIndex != $syllIndex)
                return (-1);
            while (true) {
                if ($i >= $syllIndex)
                    return $this.$next4.$matches(var$8, $testString, $matchResult);
                if ($decompCurSymb[$i] != $this.$decomposedChar.data[$i])
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        $decompSyllable = $decompSyllable.data;
        $decompSyllable[0] = $curSymb;
        $lIndex = $curSymb - 4352 | 0;
        if ($lIndex >= 0 && $lIndex < 19) {
            if (var$8 < $rightBound) {
                $curSymb = jl_String_charAt($testString, var$8);
                $vIndex = $curSymb - 4449 | 0;
            }
            if ($vIndex >= 0 && $vIndex < 21) {
                $lIndex = var$8 + 1 | 0;
                $decompSyllable[1] = $curSymb;
                if ($lIndex < $rightBound) {
                    $curSymb = jl_String_charAt($testString, $lIndex);
                    $tIndex = $curSymb - 4519 | 0;
                }
                if ($tIndex >= 0 && $tIndex < 28) {
                    a: {
                        $strIndex = $lIndex + 1 | 0;
                        $decompSyllable[2] = $curSymb;
                        if ($this.$decomposedCharLength == 3) {
                            $lIndex = $decompSyllable[0];
                            $decompCurSymb = $this.$decomposedChar.data;
                            if ($lIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1] && $decompSyllable[2] == $decompCurSymb[2]) {
                                $strIndex = $this.$next4.$matches($strIndex, $testString, $matchResult);
                                break a;
                            }
                        }
                        $strIndex = (-1);
                    }
                    return $strIndex;
                }
                b: {
                    if ($this.$decomposedCharLength == 2) {
                        $strIndex = $decompSyllable[0];
                        $decompCurSymb = $this.$decomposedChar.data;
                        if ($strIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1]) {
                            $strIndex = $this.$next4.$matches($lIndex, $testString, $matchResult);
                            break b;
                        }
                    }
                    $strIndex = (-1);
                }
                return $strIndex;
            }
            return (-1);
        }
        return (-1);
    }
    function jur_HangulDecomposedCharSet_first($this, $set) {
        return $set instanceof jur_HangulDecomposedCharSet && !jl_String_equals(jur_HangulDecomposedCharSet_getDecomposedChar($set), jur_HangulDecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
    }
    function jur_HangulDecomposedCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_CharSet() {
        jur_LeafSet.call(this);
        this.$ch2 = 0;
    }
    function jur_CharSet__init_(var_0) {
        var var_1 = new jur_CharSet();
        jur_CharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_CharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch2 = $ch;
    }
    function jur_CharSet_charCount($this) {
        return 1;
    }
    function jur_CharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch2 != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
    }
    function jur_CharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, var$5, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$5 = jl_String_indexOf($testStr, $this.$ch2, $strIndex);
            if (var$5 < 0)
                return (-1);
            var$6 = $this.$next4;
            $strIndex = var$5 + 1 | 0;
            if (var$6.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$5;
    }
    function jur_CharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$5 = jl_String_lastIndexOf0($testStr, $this.$ch2, $lastIndex);
                if (var$5 < 0)
                    break a;
                if (var$5 < $strIndex)
                    break a;
                if ($this.$next4.$matches(var$5 + 1 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$5 + (-1) | 0;
            }
            return var$5;
        }
        return (-1);
    }
    function jur_CharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return $set.$ch2 != $this.$ch2 ? 0 : 1;
        if (!($set instanceof jur_RangeSet)) {
            if ($set instanceof jur_SupplRangeSet)
                return $set.$contains($this.$ch2);
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return 0;
        }
        return jur_RangeSet_accepts($set, 0, jl_Character_toString($this.$ch2)) <= 0 ? 0 : 1;
    }
    function jur_UCICharSet() {
        jur_LeafSet.call(this);
        this.$ch3 = 0;
    }
    function jur_UCICharSet__init_(var_0) {
        var var_1 = new jur_UCICharSet();
        jur_UCICharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCICharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch3 = jl_Character_toLowerCase(jl_Character_toUpperCase($ch));
    }
    function jur_UCICharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch3 != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex))) ? (-1) : 1;
    }
    function jur_CICharSet() {
        var a = this; jur_LeafSet.call(a);
        a.$ch4 = 0;
        a.$supplement = 0;
    }
    function jur_CICharSet__init_(var_0) {
        var var_1 = new jur_CICharSet();
        jur_CICharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_CICharSet__init_0($this, $ch) {
        jur_LeafSet__init_($this);
        $this.$ch4 = $ch;
        $this.$supplement = jur_Pattern_getSupplement($ch);
    }
    function jur_CICharSet_accepts($this, $strIndex, $testString) {
        return $this.$ch4 != jl_String_charAt($testString, $strIndex) && $this.$supplement != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
    }
    function jur_DecomposedCharSet() {
        var a = this; jur_JointSet.call(a);
        a.$readCharsForCodePoint = 0;
        a.$decomposedCharUTF160 = null;
        a.$decomposedChar0 = null;
        a.$decomposedCharLength0 = 0;
    }
    function jur_DecomposedCharSet__init_(var_0, var_1) {
        var var_2 = new jur_DecomposedCharSet();
        jur_DecomposedCharSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_DecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
        jur_AbstractSet__init_($this);
        $this.$readCharsForCodePoint = 1;
        $this.$decomposedChar0 = $decomposedChar;
        $this.$decomposedCharLength0 = $decomposedCharLength;
    }
    function jur_DecomposedCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_DecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
        var $decCodePoint, $rightBound, $curChar, var$7, $decCurCodePoint, var$9, var$10, $readCodePoints;
        $decCodePoint = $rt_createIntArray(4);
        $rightBound = $matchResult.$rightBound0;
        if ($strIndex >= $rightBound)
            return (-1);
        $curChar = jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound);
        var$7 = $strIndex + $this.$readCharsForCodePoint | 0;
        $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
        if ($decCurCodePoint === null) {
            $decCurCodePoint = $decCodePoint.data;
            $strIndex = 1;
            $decCurCodePoint[0] = $curChar;
        } else {
            $strIndex = $decCurCodePoint.data.length;
            jl_System_fastArraycopy($decCurCodePoint, 0, $decCodePoint, 0, $strIndex);
            $strIndex = 0 + $strIndex | 0;
        }
        a: {
            if (var$7 < $rightBound) {
                var$9 = $decCodePoint.data;
                $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                while ($strIndex < 4) {
                    if (!(($curChar != 832 ? 0 : 1) | ($curChar != 833 ? 0 : 1) | ($curChar != 835 ? 0 : 1) | ($curChar != 836 ? 0 : 1))) {
                        var$10 = $strIndex + 1 | 0;
                        var$9[$strIndex] = $curChar;
                    } else {
                        $decCurCodePoint = (jur_Lexer_getDecomposition($curChar)).data;
                        if ($decCurCodePoint.length != 2) {
                            var$10 = $strIndex + 1 | 0;
                            var$9[$strIndex] = $decCurCodePoint[0];
                        } else {
                            $readCodePoints = $strIndex + 1 | 0;
                            var$9[$strIndex] = $decCurCodePoint[0];
                            var$10 = $readCodePoints + 1 | 0;
                            var$9[$readCodePoints] = $decCurCodePoint[1];
                        }
                    }
                    var$7 = var$7 + $this.$readCharsForCodePoint | 0;
                    if (var$7 >= $rightBound) {
                        $strIndex = var$10;
                        break a;
                    }
                    $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                    $strIndex = var$10;
                }
            }
        }
        if ($strIndex != $this.$decomposedCharLength0)
            return (-1);
        $decCurCodePoint = $decCodePoint.data;
        $curChar = 0;
        while (true) {
            if ($curChar >= $strIndex)
                return $this.$next4.$matches(var$7, $testString, $matchResult);
            if ($decCurCodePoint[$curChar] != $this.$decomposedChar0.data[$curChar])
                break;
            $curChar = $curChar + 1 | 0;
        }
        return (-1);
    }
    function jur_DecomposedCharSet_getDecomposedChar($this) {
        var $strBuff, $i;
        if ($this.$decomposedCharUTF160 === null) {
            $strBuff = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($strBuff);
            $i = 0;
            while ($i < $this.$decomposedCharLength0) {
                jl_AbstractStringBuilder_append2($strBuff, jl_Character_toChars($this.$decomposedChar0.data[$i]));
                $i = $i + 1 | 0;
            }
            $this.$decomposedCharUTF160 = jl_AbstractStringBuilder_toString($strBuff);
        }
        return $this.$decomposedCharUTF160;
    }
    function jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound) {
        var $curChar, $low, $curCodePointUTF16;
        $this.$readCharsForCodePoint = 1;
        if ($strIndex >= ($rightBound - 1 | 0))
            $curChar = jl_String_charAt($testString, $strIndex);
        else {
            $rightBound = $strIndex + 1 | 0;
            $curChar = jl_String_charAt($testString, $strIndex);
            $low = jl_String_charAt($testString, $rightBound);
            if (jl_Character_isSurrogatePair($curChar, $low)) {
                $curCodePointUTF16 = $rt_createCharArray(2).data;
                $curCodePointUTF16[0] = $curChar;
                $curCodePointUTF16[1] = $low;
                $curChar = 0 < ($curCodePointUTF16.length - 1 | 0) && jl_Character_isHighSurrogate($curCodePointUTF16[0]) && jl_Character_isLowSurrogate($curCodePointUTF16[1]) ? jl_Character_toCodePoint($curCodePointUTF16[0], $curCodePointUTF16[1]) : $curCodePointUTF16[0];
                $this.$readCharsForCodePoint = 2;
            }
        }
        return $curChar;
    }
    function jur_DecomposedCharSet_first($this, $set) {
        return $set instanceof jur_DecomposedCharSet && !jl_String_equals(jur_DecomposedCharSet_getDecomposedChar($set), jur_DecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
    }
    function jur_DecomposedCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    var jur_UCIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet);
    var jur_CIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet);
    var jur_PossessiveGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_PossessiveGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $stringIndex_0;
        while (true) {
            $stringIndex_0 = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
            if ($stringIndex_0 <= 0)
                break;
            $stringIndex = $stringIndex_0;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PosPlusGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_PosPlusGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex < 0)
            return (-1);
        if ($nextIndex > $stringIndex) {
            while (true) {
                $stringIndex = $this.$innerSet.$matches($nextIndex, $testString, $matchResult);
                if ($stringIndex <= $nextIndex)
                    break;
                $nextIndex = $stringIndex;
            }
            $stringIndex = $nextIndex;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_AltGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_AltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0)
            return $nextIndex;
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_AltGroupQuantifierSet_setNext($this, $next) {
        $this.$next4 = $next;
        $this.$innerSet.$setNext($next);
    }
    var jur_PosAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet);
    function jur_PosAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex <= 0)
            $nextIndex = $stringIndex;
        return $this.$next4.$matches($nextIndex, $testString, $matchResult);
    }
    function jur_PosAltGroupQuantifierSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_CompositeGroupQuantifierSet() {
        var a = this; jur_GroupQuantifierSet.call(a);
        a.$quantifier0 = null;
        a.$setCounter = 0;
    }
    function jur_CompositeGroupQuantifierSet__init_0(var_0, var_1, var_2, var_3, var_4) {
        var var_5 = new jur_CompositeGroupQuantifierSet();
        jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
        return var_5;
    }
    function jur_CompositeGroupQuantifierSet__init_($this, $quant, $innerSet, $next, $type, $setCounter) {
        jur_QuantifierSet__init_($this, $innerSet, $next, $type);
        $this.$quantifier0 = $quant;
        $this.$setCounter = $setCounter;
    }
    function jur_CompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $enterCounter, $nextIndex;
        $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($enterCounter >= $this.$quantifier0.$max1)
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$setCounter;
        $enterCounter = $enterCounter + 1 | 0;
        jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $nextIndex;
        }
        $nextIndex = $this.$setCounter;
        $enterCounter = $enterCounter + (-1) | 0;
        jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
        if ($enterCounter >= $this.$quantifier0.$min0)
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return (-1);
    }
    var jur_PosCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet);
    function jur_PosCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $counter, $max, $nextIndex;
        $counter = 0;
        $max = $this.$quantifier0.$max1;
        a: {
            while (true) {
                $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
                if ($nextIndex <= $stringIndex)
                    break a;
                if ($counter >= $max)
                    break;
                $counter = $counter + 1 | 0;
                $stringIndex = $nextIndex;
            }
        }
        if ($nextIndex < 0 && $counter < $this.$quantifier0.$min0)
            return (-1);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_ReluctantGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet);
    function jur_ReluctantGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $res;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $res = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($res >= 0)
            return $res;
        return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_RelAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet);
    function jur_RelAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $nextIndex;
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $nextIndex = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex < 0)
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        return $nextIndex;
    }
    var jur_RelCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet);
    function jur_RelCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $enterCounter, var$5, $nextIndex;
        $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
        if (!$this.$innerSet.$hasConsumed($matchResult))
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        var$5 = $this.$quantifier0;
        if ($enterCounter >= var$5.$max1) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        }
        if ($enterCounter < var$5.$min0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        } else {
            $nextIndex = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if ($nextIndex >= 0) {
                jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
                return $nextIndex;
            }
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        }
        return $nextIndex;
    }
    var jur_DotAllQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet);
    function jur_DotAllQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength;
        $strLength = $matchResult.$rightBound0;
        if ($strLength > $stringIndex)
            return $this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_DotAllQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength;
        $strLength = $matchResult.$rightBound0;
        if ($this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
            return $stringIndex;
        return (-1);
    }
    function jur_DotQuantifierSet() {
        jur_QuantifierSet.call(this);
        this.$lt = null;
    }
    function jur_DotQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $startSearch;
        $strLength = $matchResult.$rightBound0;
        $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
        if ($startSearch >= 0)
            $strLength = $startSearch;
        if ($strLength > $stringIndex)
            return $this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_DotQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
        var $strLength, $res, $nextSearch, $leftBound;
        $strLength = $matchResult.$rightBound0;
        $res = $this.$next4.$find0($stringIndex, $testString, $matchResult);
        if ($res < 0)
            return (-1);
        $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
        if ($nextSearch >= 0)
            $strLength = $nextSearch;
        $nextSearch = jl_Math_max($res, $this.$next4.$findBack($res, $strLength, $testString, $matchResult));
        if ($nextSearch <= 0)
            $leftBound = $nextSearch ? (-1) : 0;
        else {
            $leftBound = $nextSearch - 1 | 0;
            a: {
                while (true) {
                    if ($leftBound < $stringIndex) {
                        $leftBound = (-1);
                        break a;
                    }
                    if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $leftBound)))
                        break;
                    $leftBound = $leftBound + (-1) | 0;
                }
            }
        }
        if ($leftBound >= $stringIndex)
            $stringIndex = $leftBound >= $nextSearch ? $leftBound : $leftBound + 1 | 0;
        return $stringIndex;
    }
    function jur_DotQuantifierSet_findLineTerminator($this, $i, $to, $testString) {
        while (true) {
            if ($i >= $to)
                return (-1);
            if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $i)))
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    var jur_AbstractLineTerminator = $rt_classWithoutFields();
    var jur_AbstractLineTerminator_unixLT = null;
    var jur_AbstractLineTerminator_unicodeLT = null;
    function jur_AbstractLineTerminator_getInstance($flag) {
        var var$2;
        if (!($flag & 1)) {
            var$2 = jur_AbstractLineTerminator_unicodeLT;
            if (var$2 !== null)
                return var$2;
            var$2 = new jur_AbstractLineTerminator$2;
            jur_AbstractLineTerminator_unicodeLT = var$2;
            return var$2;
        }
        var$2 = jur_AbstractLineTerminator_unixLT;
        if (var$2 !== null)
            return var$2;
        var$2 = new jur_AbstractLineTerminator$1;
        jur_AbstractLineTerminator_unixLT = var$2;
        return var$2;
    }
    var jur_PossessiveQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_PossessiveQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        a: {
            while (true) {
                if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                    break a;
                var$4 = $this.$leaf.$accepts($stringIndex, $testString);
                if (var$4 < 1)
                    break;
                $stringIndex = $stringIndex + var$4 | 0;
            }
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PossessiveAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet);
    function jur_PossessiveAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 >= 1)
                $stringIndex = $stringIndex + var$4 | 0;
        }
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_PossessiveCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet);
    function jur_PossessiveCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, $shift;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max1;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while (true) {
                        if ($i >= $max)
                            break a;
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                            break a;
                        $shift = $this.$leaf.$accepts($stringIndex, $testString);
                        if ($shift < 1)
                            break;
                        $stringIndex = $stringIndex + $shift | 0;
                        $i = $i + 1 | 0;
                    }
                }
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            $shift = $this.$leaf.$accepts($stringIndex, $testString);
            if ($shift < 1)
                break;
            $stringIndex = $stringIndex + $shift | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_ReluctantQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet);
    function jur_ReluctantQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4;
        while (true) {
            var$4 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
            if (var$4 >= 0)
                break;
            if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                var$4 = $this.$leaf.$accepts($stringIndex, $testString);
                $stringIndex = $stringIndex + var$4 | 0;
            }
            if (var$4 < 1)
                return (-1);
        }
        return var$4;
    }
    var jur_ReluctantAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet);
    function jur_ReluctantAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $shift;
        $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $shift;
        return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    var jur_ReluctantCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet);
    function jur_ReluctantCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $min, $max, $i, var$8, var$9;
        var$4 = $this.$quantifier;
        $min = var$4.$min0;
        $max = var$4.$max1;
        $i = 0;
        while (true) {
            if ($i >= $min) {
                a: {
                    while (true) {
                        var$8 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
                        if (var$8 >= 0)
                            break;
                        if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                            var$8 = $this.$leaf.$accepts($stringIndex, $testString);
                            $stringIndex = $stringIndex + var$8 | 0;
                            $i = $i + 1 | 0;
                        }
                        if (var$8 < 1)
                            break a;
                        if ($i > $max)
                            break a;
                    }
                    return var$8;
                }
                return (-1);
            }
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
                $matchResult.$hitEnd = 1;
                return (-1);
            }
            var$9 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$9 < 1)
                break;
            $stringIndex = $stringIndex + var$9 | 0;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_SOLSet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_SOLSet_matches($this, $strIndex, $testString, $matchResult) {
        if ($strIndex && !($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0))
            return (-1);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    function jur_SOLSet_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_WordBoundary() {
        jur_AbstractSet.call(this);
        this.$positive = 0;
    }
    function jur_WordBoundary__init_(var_0) {
        var var_1 = new jur_WordBoundary();
        jur_WordBoundary__init_0(var_1, var_0);
        return var_1;
    }
    function jur_WordBoundary__init_0($this, $positive) {
        jur_AbstractSet__init_($this);
        $this.$positive = $positive;
    }
    function jur_WordBoundary_matches($this, $stringIndex, $testString, $matchResult) {
        var $ch1, $ch2, $leftBound;
        $ch1 = $stringIndex < $matchResult.$rightBound0 ? jl_String_charAt($testString, $stringIndex) : 32;
        $ch2 = !$stringIndex ? 32 : jl_String_charAt($testString, $stringIndex - 1 | 0);
        $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
        return ($ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1) ^ ($ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1) ^ $this.$positive ? (-1) : $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_WordBoundary_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_WordBoundary_isSpace($this, $ch, $index, $leftBound, $testString) {
        var var$5;
        if (!jl_Character_isLetterOrDigit($ch) && $ch != 95) {
            a: {
                if (jl_Character_getType($ch) == 6)
                    while (true) {
                        $index = $index + (-1) | 0;
                        if ($index < $leftBound)
                            break a;
                        var$5 = jl_String_charAt($testString, $index);
                        if (jl_Character_isLetterOrDigit(var$5))
                            return 0;
                        if (jl_Character_getType(var$5) != 6)
                            return 1;
                    }
            }
            return 1;
        }
        return 0;
    }
    var jur_PreviousMatch = $rt_classWithoutFields(jur_AbstractSet);
    function jur_PreviousMatch_matches($this, $stringIndex, $testString, $matchResult) {
        if ($stringIndex != $matchResult.$previousMatch)
            return (-1);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_PreviousMatch_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_EOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter = 0;
    }
    function jur_EOLSet__init_0(var_0) {
        var var_1 = new jur_EOLSet();
        jur_EOLSet__init_(var_1, var_0);
        return var_1;
    }
    function jur_EOLSet__init_($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter = $counter;
    }
    function jur_EOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound, var$5, $ch;
        $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
        if ($strIndex >= $rightBound) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        var$5 = $rightBound - $strIndex | 0;
        if (var$5 == 2 && jl_String_charAt($testString, $strIndex) == 13 && jl_String_charAt($testString, $strIndex + 1 | 0) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        a: {
            if (var$5 == 1) {
                $ch = jl_String_charAt($testString, $strIndex);
                if ($ch == 10)
                    break a;
                if ($ch == 13)
                    break a;
                if ($ch == 133)
                    break a;
                if (($ch | 1) == 8233)
                    break a;
            }
            return (-1);
        }
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    function jur_EOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, (-1));
        return $res;
    }
    var jur_EOISet = $rt_classWithoutFields(jur_AbstractSet);
    function jur_EOISet_matches($this, $stringIndex, $testString, $matchResult) {
        if ($stringIndex < ($matchResult.$transparentBounds ? jl_String_length($testString) : $matchResult.$rightBound0))
            return (-1);
        $matchResult.$hitEnd = 1;
        $matchResult.$requireEnd = 1;
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    function jur_EOISet_hasConsumed($this, $matchResult) {
        return 0;
    }
    function jur_MultiLineSOLSet() {
        jur_AbstractSet.call(this);
        this.$lt0 = null;
    }
    function jur_MultiLineSOLSet_matches($this, $strIndex, $testString, $matchResult) {
        a: {
            if ($strIndex != $matchResult.$rightBound0) {
                if (!$strIndex)
                    break a;
                if ($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0)
                    break a;
                if ($this.$lt0.$isAfterLineTerminator(jl_String_charAt($testString, $strIndex - 1 | 0), jl_String_charAt($testString, $strIndex)))
                    break a;
            }
            return (-1);
        }
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    function jur_MultiLineSOLSet_hasConsumed($this, $matchResult) {
        return 0;
    }
    var jur_DotAllSet = $rt_classWithoutFields(jur_JointSet);
    function jur_DotAllSet__init_() {
        var var_0 = new jur_DotAllSet();
        jur_DotAllSet__init_0(var_0);
        return var_0;
    }
    function jur_DotAllSet__init_0($this) {
        jur_AbstractSet__init_($this);
    }
    function jur_DotAllSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $high, var$7;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        if (var$5 > $strLength) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if (jl_Character_isHighSurrogate($high)) {
            var$7 = $stringIndex + 2 | 0;
            if (var$7 <= $strLength && jl_Character_isSurrogatePair($high, jl_String_charAt($testString, var$5)))
                return $this.$next4.$matches(var$7, $testString, $matchResult);
        }
        return $this.$next4.$matches(var$5, $testString, $matchResult);
    }
    function jur_DotAllSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_DotAllSet_getType($this) {
        return (-2147483602);
    }
    function jur_DotAllSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_DotSet() {
        jur_JointSet.call(this);
        this.$lt1 = null;
    }
    function jur_DotSet__init_(var_0) {
        var var_1 = new jur_DotSet();
        jur_DotSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_DotSet__init_0($this, $lt) {
        jur_AbstractSet__init_($this);
        $this.$lt1 = $lt;
    }
    function jur_DotSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $high, $low;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        if (var$5 > $strLength) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if (jl_Character_isHighSurrogate($high)) {
            $stringIndex = $stringIndex + 2 | 0;
            if ($stringIndex <= $strLength) {
                $low = jl_String_charAt($testString, var$5);
                if (jl_Character_isSurrogatePair($high, $low))
                    return $this.$lt1.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next4.$matches($stringIndex, $testString, $matchResult);
            }
        }
        return $this.$lt1.$isLineTerminator($high) ? (-1) : $this.$next4.$matches(var$5, $testString, $matchResult);
    }
    function jur_DotSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_DotSet_getType($this) {
        return (-2147483602);
    }
    function jur_DotSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_UEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter0 = 0;
    }
    function jur_UEOLSet__init_(var_0) {
        var var_1 = new jur_UEOLSet();
        jur_UEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter0 = $counter;
    }
    function jur_UEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $rightBound;
        $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
        if ($strIndex >= $rightBound) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        if (($rightBound - $strIndex | 0) == 1 && jl_String_charAt($testString, $strIndex) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 1);
            return $this.$next4.$matches($strIndex + 1 | 0, $testString, $matchResult);
        }
        return (-1);
    }
    function jur_UEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter0) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, (-1));
        return $res;
    }
    function jur_UMultiLineEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter1 = 0;
    }
    function jur_UMultiLineEOLSet__init_(var_0) {
        var var_1 = new jur_UMultiLineEOLSet();
        jur_UMultiLineEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UMultiLineEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter1 = $counter;
    }
    function jur_UMultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        if ((!$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$rightBound0 - $strIndex | 0) <= 0) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        if (jl_String_charAt($testString, $strIndex) != 10)
            return (-1);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 1);
        return $this.$next4.$matches($strIndex + 1 | 0, $testString, $matchResult);
    }
    function jur_UMultiLineEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter1) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, (-1));
        return $res;
    }
    function jur_MultiLineEOLSet() {
        jur_AbstractSet.call(this);
        this.$consCounter2 = 0;
    }
    function jur_MultiLineEOLSet__init_(var_0) {
        var var_1 = new jur_MultiLineEOLSet();
        jur_MultiLineEOLSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_MultiLineEOLSet__init_0($this, $counter) {
        jur_AbstractSet__init_($this);
        $this.$consCounter2 = $counter;
    }
    function jur_MultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
        var $strDif, $ch1, $ch2;
        $strDif = !$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$rightBound0 - $strIndex | 0;
        if (!$strDif) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        }
        if ($strDif < 2) {
            $ch1 = jl_String_charAt($testString, $strIndex);
            $ch2 = 97;
        } else {
            $ch1 = jl_String_charAt($testString, $strIndex);
            $ch2 = jl_String_charAt($testString, $strIndex + 1 | 0);
        }
        switch ($ch1) {
            case 10:
            case 133:
            case 8232:
            case 8233:
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                return $this.$next4.$matches($strIndex, $testString, $matchResult);
            case 13:
                if ($ch2 != 10) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                    return $this.$next4.$matches($strIndex, $testString, $matchResult);
                }
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                return $this.$next4.$matches($strIndex, $testString, $matchResult);
            default:
        }
        return (-1);
    }
    function jur_MultiLineEOLSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter2) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, (-1));
        return $res;
    }
    function jur_CIBackReferenceSet() {
        var a = this; jur_JointSet.call(a);
        a.$referencedGroup = 0;
        a.$consCounter3 = 0;
    }
    function jur_CIBackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_CIBackReferenceSet();
        jur_CIBackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_AbstractSet__init_($this);
        $this.$referencedGroup = $groupIndex;
        $this.$consCounter3 = $consCounter;
    }
    function jur_CIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $i, var$6, var$7;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $i = 0;
            while (true) {
                if ($i >= jl_String_length($group)) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                    return $this.$next4.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
                }
                var$6 = jl_String_charAt($group, $i);
                var$7 = $stringIndex + $i | 0;
                if (var$6 != jl_String_charAt($testString, var$7) && jur_Pattern_getSupplement(jl_String_charAt($group, $i)) != jl_String_charAt($testString, var$7))
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        return (-1);
    }
    function jur_CIBackReferenceSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_CIBackReferenceSet_getString($this, $matchResult) {
        var var$2, var$3;
        var$2 = $this.$referencedGroup;
        var$3 = jur_MatchResultImpl_getStart($matchResult, var$2);
        var$2 = jur_MatchResultImpl_getEnd($matchResult, var$2);
        return (var$2 | var$3 | (var$2 - var$3 | 0)) >= 0 && var$2 <= jl_String_length($matchResult.$string2) ? jl_String_substring0($matchResult.$string2, var$3, var$2) : null;
    }
    function jur_CIBackReferenceSet_hasConsumed($this, $matchResult) {
        var $res;
        $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter3) ? 0 : 1;
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, (-1));
        return $res;
    }
    var jur_BackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet);
    function jur_BackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_BackReferenceSet();
        jur_BackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_BackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
    }
    function jur_BackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $shift;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $shift = !jl_String_startsWith0($testString, $group, $stringIndex) ? (-1) : jl_String_length($group);
            if ($shift < 0)
                return (-1);
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, $shift);
            return $this.$next4.$matches($stringIndex + $shift | 0, $testString, $matchResult);
        }
        return (-1);
    }
    function jur_BackReferenceSet_find($this, $strIndex, $testString, $matchResult) {
        var $group, $strLength;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        $strLength = $matchResult.$leftBound0;
        if ($group !== null && ($strIndex + jl_String_length($group) | 0) <= $strLength) {
            while (true) {
                if ($strIndex > $strLength)
                    return (-1);
                $strIndex = jl_String_indexOf1($testString, $group, $strIndex);
                if ($strIndex < 0)
                    return (-1);
                if ($this.$next4.$matches($strIndex + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                    break;
                $strIndex = $strIndex + 1 | 0;
            }
            return $strIndex;
        }
        return (-1);
    }
    function jur_BackReferenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
        var $group, var$6;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group === null)
            return (-1);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_String_lastIndexOf1($testString, $group, $lastIndex);
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                if ($this.$next4.$matches(var$6 + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_BackReferenceSet_first($this, $set) {
        return 1;
    }
    var jur_UCIBackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet);
    function jur_UCIBackReferenceSet__init_(var_0, var_1) {
        var var_2 = new jur_UCIBackReferenceSet();
        jur_UCIBackReferenceSet__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_UCIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
        jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
    }
    function jur_UCIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $group, $i;
        $group = jur_CIBackReferenceSet_getString($this, $matchResult);
        if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
            $i = 0;
            while (true) {
                if ($i >= jl_String_length($group)) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                    return $this.$next4.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
                }
                if (jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($group, $i))) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $stringIndex + $i | 0))))
                    break;
                $i = $i + 1 | 0;
            }
            return (-1);
        }
        return (-1);
    }
    var jl_StringBuffer = $rt_classWithoutFields(jl_AbstractStringBuilder);
    function jl_StringBuffer_insert($this, var$1, var$2, var$3, var$4) {
        jl_AbstractStringBuilder_insert2($this, var$1, var$2, var$3, var$4);
        return $this;
    }
    function jl_StringBuffer_append($this, var$1, var$2, var$3) {
        jl_AbstractStringBuilder_append1($this, var$1, var$2, var$3);
        return $this;
    }
    function jl_StringBuffer_ensureCapacity($this, var$1) {
        jl_AbstractStringBuilder_ensureCapacity($this, var$1);
    }
    function jl_StringBuffer_insert0($this, var$1, var$2) {
        jl_AbstractStringBuilder_insert1($this, var$1, var$2);
        return $this;
    }
    function jur_SequenceSet() {
        var a = this; jur_LeafSet.call(a);
        a.$string0 = null;
        a.$leftToRight = null;
        a.$rightToLeft = null;
    }
    function jur_SequenceSet_accepts($this, $strIndex, $testString) {
        return !jur_SequenceSet_startsWith($this, $testString, $strIndex) ? (-1) : $this.$charCount;
    }
    function jur_SequenceSet_find($this, $strIndex, $testString, $matchResult) {
        var $strLength, var$5, var$6;
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            var$5 = jl_String_charAt($this.$string0, $this.$charCount - 1 | 0);
            a: {
                while (true) {
                    var$6 = $this.$charCount;
                    if ($strIndex > ($strLength - var$6 | 0)) {
                        $strIndex = (-1);
                        break a;
                    }
                    var$6 = jl_String_charAt($testString, ($strIndex + var$6 | 0) - 1 | 0);
                    if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $strIndex))
                        break;
                    $strIndex = $strIndex + jur_SequenceSet$IntHash_get($this.$leftToRight, var$6) | 0;
                }
            }
            if ($strIndex < 0)
                return (-1);
            if ($this.$next4.$matches($strIndex + $this.$charCount | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = $strIndex + 1 | 0;
        }
        return $strIndex;
    }
    function jur_SequenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
        var var$5, var$6;
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$5 = jl_String_charAt($this.$string0, 0);
            var$6 = (jl_String_length($testString) - $lastIndex | 0) - $this.$charCount | 0;
            if (var$6 <= 0)
                $lastIndex = $lastIndex + var$6 | 0;
            a: {
                while (true) {
                    if ($lastIndex < $strIndex) {
                        $lastIndex = (-1);
                        break a;
                    }
                    var$6 = jl_String_charAt($testString, $lastIndex);
                    if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $lastIndex))
                        break;
                    $lastIndex = $lastIndex - jur_SequenceSet$IntHash_get($this.$rightToLeft, var$6) | 0;
                }
            }
            if ($lastIndex < 0)
                return (-1);
            if ($this.$next4.$matches($lastIndex + $this.$charCount | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    function jur_SequenceSet_first($this, $set) {
        var var$2;
        if ($set instanceof jur_CharSet)
            return $set.$ch2 != jl_String_charAt($this.$string0, 0) ? 0 : 1;
        if ($set instanceof jur_RangeSet)
            return jur_RangeSet_accepts($set, 0, jl_String_substring0($this.$string0, 0, 1)) <= 0 ? 0 : 1;
        if (!($set instanceof jur_SupplRangeSet)) {
            if (!($set instanceof jur_SupplCharSet))
                return 1;
            return jl_String_length($this.$string0) > 1 && $set.$ch1 == jl_Character_toCodePoint(jl_String_charAt($this.$string0, 0), jl_String_charAt($this.$string0, 1)) ? 1 : 0;
        }
        a: {
            b: {
                $set = $set;
                if (!$set.$contains(jl_String_charAt($this.$string0, 0))) {
                    if (jl_String_length($this.$string0) <= 1)
                        break b;
                    if (!$set.$contains(jl_Character_toCodePoint(jl_String_charAt($this.$string0, 0), jl_String_charAt($this.$string0, 1))))
                        break b;
                }
                var$2 = 1;
                break a;
            }
            var$2 = 0;
        }
        return var$2;
    }
    function jur_SequenceSet_startsWith($this, $str, $from) {
        var $i;
        $i = 0;
        while ($i < $this.$charCount) {
            if (jl_String_charAt($str, $i + $from | 0) != jl_String_charAt($this.$string0, $i))
                return 0;
            $i = $i + 1 | 0;
        }
        return 1;
    }
    function jur_UCISequenceSet() {
        jur_LeafSet.call(this);
        this.$string3 = null;
    }
    function jur_UCISequenceSet__init_(var_0) {
        var var_1 = new jur_UCISequenceSet();
        jur_UCISequenceSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UCISequenceSet__init_0($this, $substring) {
        var $res, $i, var$4;
        jur_LeafSet__init_($this);
        $res = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($res);
        $i = 0;
        while (true) {
            var$4 = $rt_compare($i, $substring.$length0);
            if (var$4 >= 0) {
                $this.$string3 = jl_AbstractStringBuilder_toString($res);
                $this.$charCount = $res.$length0;
                return;
            }
            if ($i < 0)
                break;
            if (var$4 >= 0)
                break;
            jl_AbstractStringBuilder_append($res, jl_Character_toLowerCase(jl_Character_toUpperCase($substring.$buffer1.data[$i])));
            $i = $i + 1 | 0;
        }
        $substring = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0($substring);
        $rt_throw($substring);
    }
    function jur_UCISequenceSet_accepts($this, $strIndex, $testString) {
        var $i;
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($this.$string3))
                return jl_String_length($this.$string3);
            if (jl_String_charAt($this.$string3, $i) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex + $i | 0))))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    function jur_CISequenceSet() {
        jur_LeafSet.call(this);
        this.$string1 = null;
    }
    function jur_CISequenceSet_accepts($this, $strIndex, $testString) {
        var $i, var$4, var$5;
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($this.$string1))
                return jl_String_length($this.$string1);
            var$4 = jl_String_charAt($this.$string1, $i);
            var$5 = $strIndex + $i | 0;
            if (var$4 != jl_String_charAt($testString, var$5) && jur_Pattern_getSupplement(jl_String_charAt($this.$string1, $i)) != jl_String_charAt($testString, var$5))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var jur_AbstractCharClass$PredefinedCharacterClasses = $rt_classWithoutFields();
    var jur_AbstractCharClass$PredefinedCharacterClasses_space = null;
    var jur_AbstractCharClass$PredefinedCharacterClasses_digit = null;
    var jur_AbstractCharClass$PredefinedCharacterClasses_contents = null;
    function jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit() {
        jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit = $rt_eraseClinit(jur_AbstractCharClass$PredefinedCharacterClasses);
        jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
    }
    function jur_AbstractCharClass$PredefinedCharacterClasses__clinit_() {
        jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_();
        jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_();
        jur_AbstractCharClass$PredefinedCharacterClasses_contents = $rt_createArrayFromData($rt_arraycls(jl_Object), [$rt_createArrayFromData(jl_Object, [$rt_s(422), jur_AbstractCharClass$LazyLower__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(423), jur_AbstractCharClass$LazyUpper__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(424), jur_AbstractCharClass$LazyASCII__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(425), jur_AbstractCharClass$LazyAlpha__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(426), jur_AbstractCharClass$PredefinedCharacterClasses_digit]), $rt_createArrayFromData(jl_Object, [$rt_s(427), jur_AbstractCharClass$LazyAlnum__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(428), jur_AbstractCharClass$LazyPunct__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(429), jur_AbstractCharClass$LazyGraph__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(430), jur_AbstractCharClass$LazyPrint__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(431), jur_AbstractCharClass$LazyBlank__init_()]),
        $rt_createArrayFromData(jl_Object, [$rt_s(432), jur_AbstractCharClass$LazyCntrl__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(433), jur_AbstractCharClass$LazyXDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(434), jur_AbstractCharClass$LazyJavaLowerCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(435), jur_AbstractCharClass$LazyJavaUpperCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(436), jur_AbstractCharClass$LazyJavaWhitespace__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(437), jur_AbstractCharClass$LazyJavaMirrored__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(438), jur_AbstractCharClass$LazyJavaDefined__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(439), jur_AbstractCharClass$LazyJavaDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(440), jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(441), jur_AbstractCharClass$LazyJavaISOControl__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(442),
        jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(443), jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(444), jur_AbstractCharClass$LazyJavaLetter__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(445), jur_AbstractCharClass$LazyJavaLetterOrDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(446), jur_AbstractCharClass$LazyJavaSpaceChar__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(447), jur_AbstractCharClass$LazyJavaTitleCase__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(448), jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(449), jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(450), jur_AbstractCharClass$PredefinedCharacterClasses_space]), $rt_createArrayFromData(jl_Object, [$rt_s(451), jur_AbstractCharClass$LazyWord__init_()]), $rt_createArrayFromData(jl_Object,
        [$rt_s(122), jur_AbstractCharClass$LazyNonWord__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(452), jur_AbstractCharClass$PredefinedCharacterClasses_space]), $rt_createArrayFromData(jl_Object, [$rt_s(136), jur_AbstractCharClass$LazyNonSpace__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(453), jur_AbstractCharClass$PredefinedCharacterClasses_digit]), $rt_createArrayFromData(jl_Object, [$rt_s(137), jur_AbstractCharClass$LazyNonDigit__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(454),
        jur_AbstractCharClass$LazyRange__init_(0, 127)]), $rt_createArrayFromData(jl_Object, [$rt_s(455), jur_AbstractCharClass$LazyRange__init_(128, 255)]), $rt_createArrayFromData(jl_Object, [$rt_s(456), jur_AbstractCharClass$LazyRange__init_(256, 383)]), $rt_createArrayFromData(jl_Object, [$rt_s(457), jur_AbstractCharClass$LazyRange__init_(384, 591)]), $rt_createArrayFromData(jl_Object, [$rt_s(458), jur_AbstractCharClass$LazyRange__init_(592, 687)]), $rt_createArrayFromData(jl_Object, [$rt_s(459), jur_AbstractCharClass$LazyRange__init_(688,
        767)]), $rt_createArrayFromData(jl_Object, [$rt_s(460), jur_AbstractCharClass$LazyRange__init_(768, 879)]), $rt_createArrayFromData(jl_Object, [$rt_s(461), jur_AbstractCharClass$LazyRange__init_(880, 1023)]), $rt_createArrayFromData(jl_Object, [$rt_s(462), jur_AbstractCharClass$LazyRange__init_(1024, 1279)]), $rt_createArrayFromData(jl_Object, [$rt_s(463), jur_AbstractCharClass$LazyRange__init_(1280, 1327)]), $rt_createArrayFromData(jl_Object, [$rt_s(464), jur_AbstractCharClass$LazyRange__init_(1328,
        1423)]), $rt_createArrayFromData(jl_Object, [$rt_s(465), jur_AbstractCharClass$LazyRange__init_(1424, 1535)]), $rt_createArrayFromData(jl_Object, [$rt_s(466), jur_AbstractCharClass$LazyRange__init_(1536, 1791)]), $rt_createArrayFromData(jl_Object, [$rt_s(467), jur_AbstractCharClass$LazyRange__init_(1792, 1871)]), $rt_createArrayFromData(jl_Object, [$rt_s(468), jur_AbstractCharClass$LazyRange__init_(1872, 1919)]), $rt_createArrayFromData(jl_Object, [$rt_s(469), jur_AbstractCharClass$LazyRange__init_(1920,
        1983)]), $rt_createArrayFromData(jl_Object, [$rt_s(470), jur_AbstractCharClass$LazyRange__init_(2304, 2431)]), $rt_createArrayFromData(jl_Object, [$rt_s(471), jur_AbstractCharClass$LazyRange__init_(2432, 2559)]), $rt_createArrayFromData(jl_Object, [$rt_s(472), jur_AbstractCharClass$LazyRange__init_(2560, 2687)]), $rt_createArrayFromData(jl_Object, [$rt_s(473), jur_AbstractCharClass$LazyRange__init_(2688, 2815)]), $rt_createArrayFromData(jl_Object, [$rt_s(474), jur_AbstractCharClass$LazyRange__init_(2816,
        2943)]), $rt_createArrayFromData(jl_Object, [$rt_s(475), jur_AbstractCharClass$LazyRange__init_(2944, 3071)]), $rt_createArrayFromData(jl_Object, [$rt_s(476), jur_AbstractCharClass$LazyRange__init_(3072, 3199)]), $rt_createArrayFromData(jl_Object, [$rt_s(477), jur_AbstractCharClass$LazyRange__init_(3200, 3327)]), $rt_createArrayFromData(jl_Object, [$rt_s(478), jur_AbstractCharClass$LazyRange__init_(3328, 3455)]), $rt_createArrayFromData(jl_Object, [$rt_s(479), jur_AbstractCharClass$LazyRange__init_(3456,
        3583)]), $rt_createArrayFromData(jl_Object, [$rt_s(480), jur_AbstractCharClass$LazyRange__init_(3584, 3711)]), $rt_createArrayFromData(jl_Object, [$rt_s(481), jur_AbstractCharClass$LazyRange__init_(3712, 3839)]), $rt_createArrayFromData(jl_Object, [$rt_s(482), jur_AbstractCharClass$LazyRange__init_(3840, 4095)]), $rt_createArrayFromData(jl_Object, [$rt_s(483), jur_AbstractCharClass$LazyRange__init_(4096, 4255)]), $rt_createArrayFromData(jl_Object, [$rt_s(484), jur_AbstractCharClass$LazyRange__init_(4256,
        4351)]), $rt_createArrayFromData(jl_Object, [$rt_s(485), jur_AbstractCharClass$LazyRange__init_(4352, 4607)]), $rt_createArrayFromData(jl_Object, [$rt_s(486), jur_AbstractCharClass$LazyRange__init_(4608, 4991)]), $rt_createArrayFromData(jl_Object, [$rt_s(487), jur_AbstractCharClass$LazyRange__init_(4992, 5023)]), $rt_createArrayFromData(jl_Object, [$rt_s(488), jur_AbstractCharClass$LazyRange__init_(5024, 5119)]), $rt_createArrayFromData(jl_Object, [$rt_s(489), jur_AbstractCharClass$LazyRange__init_(5120,
        5759)]), $rt_createArrayFromData(jl_Object, [$rt_s(490), jur_AbstractCharClass$LazyRange__init_(5760, 5791)]), $rt_createArrayFromData(jl_Object, [$rt_s(491), jur_AbstractCharClass$LazyRange__init_(5792, 5887)]), $rt_createArrayFromData(jl_Object, [$rt_s(492), jur_AbstractCharClass$LazyRange__init_(5888, 5919)]), $rt_createArrayFromData(jl_Object, [$rt_s(493), jur_AbstractCharClass$LazyRange__init_(5920, 5951)]), $rt_createArrayFromData(jl_Object, [$rt_s(494), jur_AbstractCharClass$LazyRange__init_(5952,
        5983)]), $rt_createArrayFromData(jl_Object, [$rt_s(495), jur_AbstractCharClass$LazyRange__init_(5984, 6015)]), $rt_createArrayFromData(jl_Object, [$rt_s(496), jur_AbstractCharClass$LazyRange__init_(6016, 6143)]), $rt_createArrayFromData(jl_Object, [$rt_s(497), jur_AbstractCharClass$LazyRange__init_(6144, 6319)]), $rt_createArrayFromData(jl_Object, [$rt_s(498), jur_AbstractCharClass$LazyRange__init_(6400, 6479)]), $rt_createArrayFromData(jl_Object, [$rt_s(499), jur_AbstractCharClass$LazyRange__init_(6480,
        6527)]), $rt_createArrayFromData(jl_Object, [$rt_s(500), jur_AbstractCharClass$LazyRange__init_(6528, 6623)]), $rt_createArrayFromData(jl_Object, [$rt_s(501), jur_AbstractCharClass$LazyRange__init_(6624, 6655)]), $rt_createArrayFromData(jl_Object, [$rt_s(502), jur_AbstractCharClass$LazyRange__init_(6656, 6687)]), $rt_createArrayFromData(jl_Object, [$rt_s(503), jur_AbstractCharClass$LazyRange__init_(7424, 7551)]), $rt_createArrayFromData(jl_Object, [$rt_s(504), jur_AbstractCharClass$LazyRange__init_(7552,
        7615)]), $rt_createArrayFromData(jl_Object, [$rt_s(505), jur_AbstractCharClass$LazyRange__init_(7616, 7679)]), $rt_createArrayFromData(jl_Object, [$rt_s(506), jur_AbstractCharClass$LazyRange__init_(7680, 7935)]), $rt_createArrayFromData(jl_Object, [$rt_s(507), jur_AbstractCharClass$LazyRange__init_(7936, 8191)]), $rt_createArrayFromData(jl_Object, [$rt_s(508), jur_AbstractCharClass$LazyRange__init_(8192, 8303)]), $rt_createArrayFromData(jl_Object, [$rt_s(509), jur_AbstractCharClass$LazyRange__init_(8304,
        8351)]), $rt_createArrayFromData(jl_Object, [$rt_s(510), jur_AbstractCharClass$LazyRange__init_(8352, 8399)]), $rt_createArrayFromData(jl_Object, [$rt_s(511), jur_AbstractCharClass$LazyRange__init_(8400, 8447)]), $rt_createArrayFromData(jl_Object, [$rt_s(512), jur_AbstractCharClass$LazyRange__init_(8448, 8527)]), $rt_createArrayFromData(jl_Object, [$rt_s(513), jur_AbstractCharClass$LazyRange__init_(8528, 8591)]), $rt_createArrayFromData(jl_Object, [$rt_s(514), jur_AbstractCharClass$LazyRange__init_(8592,
        8703)]), $rt_createArrayFromData(jl_Object, [$rt_s(515), jur_AbstractCharClass$LazyRange__init_(8704, 8959)]), $rt_createArrayFromData(jl_Object, [$rt_s(516), jur_AbstractCharClass$LazyRange__init_(8960, 9215)]), $rt_createArrayFromData(jl_Object, [$rt_s(517), jur_AbstractCharClass$LazyRange__init_(9216, 9279)]), $rt_createArrayFromData(jl_Object, [$rt_s(518), jur_AbstractCharClass$LazyRange__init_(9280, 9311)]), $rt_createArrayFromData(jl_Object, [$rt_s(519), jur_AbstractCharClass$LazyRange__init_(9312,
        9471)]), $rt_createArrayFromData(jl_Object, [$rt_s(520), jur_AbstractCharClass$LazyRange__init_(9472, 9599)]), $rt_createArrayFromData(jl_Object, [$rt_s(521), jur_AbstractCharClass$LazyRange__init_(9600, 9631)]), $rt_createArrayFromData(jl_Object, [$rt_s(522), jur_AbstractCharClass$LazyRange__init_(9632, 9727)]), $rt_createArrayFromData(jl_Object, [$rt_s(523), jur_AbstractCharClass$LazyRange__init_(9728, 9983)]), $rt_createArrayFromData(jl_Object, [$rt_s(524), jur_AbstractCharClass$LazyRange__init_(9984,
        10175)]), $rt_createArrayFromData(jl_Object, [$rt_s(525), jur_AbstractCharClass$LazyRange__init_(10176, 10223)]), $rt_createArrayFromData(jl_Object, [$rt_s(526), jur_AbstractCharClass$LazyRange__init_(10224, 10239)]), $rt_createArrayFromData(jl_Object, [$rt_s(527), jur_AbstractCharClass$LazyRange__init_(10240, 10495)]), $rt_createArrayFromData(jl_Object, [$rt_s(528), jur_AbstractCharClass$LazyRange__init_(10496, 10623)]), $rt_createArrayFromData(jl_Object, [$rt_s(529), jur_AbstractCharClass$LazyRange__init_(10624,
        10751)]), $rt_createArrayFromData(jl_Object, [$rt_s(530), jur_AbstractCharClass$LazyRange__init_(10752, 11007)]), $rt_createArrayFromData(jl_Object, [$rt_s(531), jur_AbstractCharClass$LazyRange__init_(11008, 11263)]), $rt_createArrayFromData(jl_Object, [$rt_s(532), jur_AbstractCharClass$LazyRange__init_(11264, 11359)]), $rt_createArrayFromData(jl_Object, [$rt_s(533), jur_AbstractCharClass$LazyRange__init_(11392, 11519)]), $rt_createArrayFromData(jl_Object, [$rt_s(534), jur_AbstractCharClass$LazyRange__init_(11520,
        11567)]), $rt_createArrayFromData(jl_Object, [$rt_s(535), jur_AbstractCharClass$LazyRange__init_(11568, 11647)]), $rt_createArrayFromData(jl_Object, [$rt_s(536), jur_AbstractCharClass$LazyRange__init_(11648, 11743)]), $rt_createArrayFromData(jl_Object, [$rt_s(537), jur_AbstractCharClass$LazyRange__init_(11776, 11903)]), $rt_createArrayFromData(jl_Object, [$rt_s(538), jur_AbstractCharClass$LazyRange__init_(11904, 12031)]), $rt_createArrayFromData(jl_Object, [$rt_s(539), jur_AbstractCharClass$LazyRange__init_(12032,
        12255)]), $rt_createArrayFromData(jl_Object, [$rt_s(540), jur_AbstractCharClass$LazyRange__init_(12272, 12287)]), $rt_createArrayFromData(jl_Object, [$rt_s(541), jur_AbstractCharClass$LazyRange__init_(12288, 12351)]), $rt_createArrayFromData(jl_Object, [$rt_s(542), jur_AbstractCharClass$LazyRange__init_(12352, 12447)]), $rt_createArrayFromData(jl_Object, [$rt_s(543), jur_AbstractCharClass$LazyRange__init_(12448, 12543)]), $rt_createArrayFromData(jl_Object, [$rt_s(544), jur_AbstractCharClass$LazyRange__init_(12544,
        12591)]), $rt_createArrayFromData(jl_Object, [$rt_s(545), jur_AbstractCharClass$LazyRange__init_(12592, 12687)]), $rt_createArrayFromData(jl_Object, [$rt_s(546), jur_AbstractCharClass$LazyRange__init_(12688, 12703)]), $rt_createArrayFromData(jl_Object, [$rt_s(547), jur_AbstractCharClass$LazyRange__init_(12704, 12735)]), $rt_createArrayFromData(jl_Object, [$rt_s(548), jur_AbstractCharClass$LazyRange__init_(12736, 12783)]), $rt_createArrayFromData(jl_Object, [$rt_s(549), jur_AbstractCharClass$LazyRange__init_(12784,
        12799)]), $rt_createArrayFromData(jl_Object, [$rt_s(550), jur_AbstractCharClass$LazyRange__init_(12800, 13055)]), $rt_createArrayFromData(jl_Object, [$rt_s(551), jur_AbstractCharClass$LazyRange__init_(13056, 13311)]), $rt_createArrayFromData(jl_Object, [$rt_s(552), jur_AbstractCharClass$LazyRange__init_(13312, 19893)]), $rt_createArrayFromData(jl_Object, [$rt_s(553), jur_AbstractCharClass$LazyRange__init_(19904, 19967)]), $rt_createArrayFromData(jl_Object, [$rt_s(554), jur_AbstractCharClass$LazyRange__init_(19968,
        40959)]), $rt_createArrayFromData(jl_Object, [$rt_s(555), jur_AbstractCharClass$LazyRange__init_(40960, 42127)]), $rt_createArrayFromData(jl_Object, [$rt_s(556), jur_AbstractCharClass$LazyRange__init_(42128, 42191)]), $rt_createArrayFromData(jl_Object, [$rt_s(557), jur_AbstractCharClass$LazyRange__init_(42752, 42783)]), $rt_createArrayFromData(jl_Object, [$rt_s(558), jur_AbstractCharClass$LazyRange__init_(43008, 43055)]), $rt_createArrayFromData(jl_Object, [$rt_s(559), jur_AbstractCharClass$LazyRange__init_(44032,
        55203)]), $rt_createArrayFromData(jl_Object, [$rt_s(560), jur_AbstractCharClass$LazyRange__init_(55296, 56191)]), $rt_createArrayFromData(jl_Object, [$rt_s(561), jur_AbstractCharClass$LazyRange__init_(56192, 56319)]), $rt_createArrayFromData(jl_Object, [$rt_s(562), jur_AbstractCharClass$LazyRange__init_(56320, 57343)]), $rt_createArrayFromData(jl_Object, [$rt_s(563), jur_AbstractCharClass$LazyRange__init_(57344, 63743)]), $rt_createArrayFromData(jl_Object, [$rt_s(564), jur_AbstractCharClass$LazyRange__init_(63744,
        64255)]), $rt_createArrayFromData(jl_Object, [$rt_s(565), jur_AbstractCharClass$LazyRange__init_(64256, 64335)]), $rt_createArrayFromData(jl_Object, [$rt_s(566), jur_AbstractCharClass$LazyRange__init_(64336, 65023)]), $rt_createArrayFromData(jl_Object, [$rt_s(567), jur_AbstractCharClass$LazyRange__init_(65024, 65039)]), $rt_createArrayFromData(jl_Object, [$rt_s(568), jur_AbstractCharClass$LazyRange__init_(65040, 65055)]), $rt_createArrayFromData(jl_Object, [$rt_s(569), jur_AbstractCharClass$LazyRange__init_(65056,
        65071)]), $rt_createArrayFromData(jl_Object, [$rt_s(570), jur_AbstractCharClass$LazyRange__init_(65072, 65103)]), $rt_createArrayFromData(jl_Object, [$rt_s(571), jur_AbstractCharClass$LazyRange__init_(65104, 65135)]), $rt_createArrayFromData(jl_Object, [$rt_s(572), jur_AbstractCharClass$LazyRange__init_(65136, 65279)]), $rt_createArrayFromData(jl_Object, [$rt_s(573), jur_AbstractCharClass$LazyRange__init_(65280, 65519)]), $rt_createArrayFromData(jl_Object, [$rt_s(574), jur_AbstractCharClass$LazyRange__init_(0,
        1114111)]), $rt_createArrayFromData(jl_Object, [$rt_s(575), jur_AbstractCharClass$LazySpecialsBlock__init_()]), $rt_createArrayFromData(jl_Object, [$rt_s(576), jur_AbstractCharClass$LazyCategory__init_(0, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(577), jur_AbstractCharClass$LazyCategoryScope__init_(62, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(578), jur_AbstractCharClass$LazyCategory__init_(1, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(579), jur_AbstractCharClass$LazyCategory__init_(2,
        1)]), $rt_createArrayFromData(jl_Object, [$rt_s(580), jur_AbstractCharClass$LazyCategory__init_(3, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(581), jur_AbstractCharClass$LazyCategory__init_(4, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(582), jur_AbstractCharClass$LazyCategory__init_(5, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(583), jur_AbstractCharClass$LazyCategoryScope__init_(448, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(584), jur_AbstractCharClass$LazyCategory__init_(6, 1)]),
        $rt_createArrayFromData(jl_Object, [$rt_s(585), jur_AbstractCharClass$LazyCategory__init_(7, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(586), jur_AbstractCharClass$LazyCategory__init_(8, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(154), jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(587), jur_AbstractCharClass$LazyCategory__init_(9, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(588), jur_AbstractCharClass$LazyCategory__init_(10, 1)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(589), jur_AbstractCharClass$LazyCategory__init_(11, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(590), jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(591), jur_AbstractCharClass$LazyCategory__init_(12, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(592), jur_AbstractCharClass$LazyCategory__init_(13, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(593), jur_AbstractCharClass$LazyCategory__init_(14, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(594), jur_AbstractCharClass$LazyCategoryScope__init_0(983040, 1, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(595), jur_AbstractCharClass$LazyCategory__init_(15, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(596), jur_AbstractCharClass$LazyCategory__init_(16, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(597), jur_AbstractCharClass$LazyCategory__init_(18, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(598), jur_AbstractCharClass$LazyCategory__init_0(19, 0, 1)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(599), jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(600), jur_AbstractCharClass$LazyCategory__init_(20, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(601), jur_AbstractCharClass$LazyCategory__init_(21, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(602), jur_AbstractCharClass$LazyCategory__init_(22, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(603), jur_AbstractCharClass$LazyCategory__init_(23, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(604), jur_AbstractCharClass$LazyCategory__init_(24, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(605), jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(606), jur_AbstractCharClass$LazyCategory__init_(25, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(607), jur_AbstractCharClass$LazyCategory__init_(26, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(608), jur_AbstractCharClass$LazyCategory__init_(27, 0)]), $rt_createArrayFromData(jl_Object,
        [$rt_s(609), jur_AbstractCharClass$LazyCategory__init_(28, 1)]), $rt_createArrayFromData(jl_Object, [$rt_s(610), jur_AbstractCharClass$LazyCategory__init_(29, 0)]), $rt_createArrayFromData(jl_Object, [$rt_s(611), jur_AbstractCharClass$LazyCategory__init_(30, 0)])]);
    }
    function jur_UCISupplCharSet() {
        jur_LeafSet.call(this);
        this.$ch0 = 0;
    }
    function jur_UCISupplCharSet_accepts($this, $strIndex, $testString) {
        var $low, $high;
        $low = $strIndex + 1 | 0;
        $high = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $low);
        return $this.$ch0 != jl_Character_toLowerCase0(jl_Character_toUpperCase0(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
    }
    function jur_LowSurrogateCharSet() {
        jur_JointSet.call(this);
        this.$low0 = 0;
    }
    function jur_LowSurrogateCharSet__init_(var_0) {
        var var_1 = new jur_LowSurrogateCharSet();
        jur_LowSurrogateCharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_LowSurrogateCharSet__init_0($this, $low) {
        jur_AbstractSet__init_($this);
        $this.$low0 = $low;
    }
    function jur_LowSurrogateCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_LowSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
        var var$4, $low;
        var$4 = $stringIndex + 1 | 0;
        if (var$4 > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $low = jl_String_charAt($testString, $stringIndex);
        if ($stringIndex > $matchResult.$leftBound0 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0)))
            return (-1);
        if ($this.$low0 != $low)
            return (-1);
        return $this.$next4.$matches(var$4, $testString, $matchResult);
    }
    function jur_LowSurrogateCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $startStr, $strLength, var$6, var$7;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $startStr = $matchResult.$leftBound0;
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$6 = jl_String_indexOf($testStr, $this.$low0, $strIndex);
            if (var$6 < 0)
                return (-1);
            if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
                $strIndex = var$6 + 1 | 0;
                continue;
            }
            var$7 = $this.$next4;
            $strIndex = var$6 + 1 | 0;
            if (var$7.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$6;
    }
    function jur_LowSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var $startStr, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        $startStr = $matchResult.$leftBound0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_String_lastIndexOf0($testStr, $this.$low0, $lastIndex);
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
                    $lastIndex = var$6 + (-2) | 0;
                    continue;
                }
                if ($this.$next4.$matches(var$6 + 1 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_LowSurrogateCharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return 0;
        if ($set instanceof jur_RangeSet)
            return 0;
        if ($set instanceof jur_SupplRangeSet)
            return 0;
        if ($set instanceof jur_SupplCharSet)
            return 0;
        if ($set instanceof jur_HighSurrogateCharSet)
            return 0;
        if (!($set instanceof jur_LowSurrogateCharSet))
            return 1;
        return $set.$low0 != $this.$low0 ? 0 : 1;
    }
    function jur_LowSurrogateCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_HighSurrogateCharSet() {
        jur_JointSet.call(this);
        this.$high0 = 0;
    }
    function jur_HighSurrogateCharSet__init_(var_0) {
        var var_1 = new jur_HighSurrogateCharSet();
        jur_HighSurrogateCharSet__init_0(var_1, var_0);
        return var_1;
    }
    function jur_HighSurrogateCharSet__init_0($this, $high) {
        jur_AbstractSet__init_($this);
        $this.$high0 = $high;
    }
    function jur_HighSurrogateCharSet_setNext($this, $next) {
        $this.$next4 = $next;
    }
    function jur_HighSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
        var $strLength, var$5, $low, $high;
        $strLength = $matchResult.$rightBound0;
        var$5 = $stringIndex + 1 | 0;
        $low = $rt_compare(var$5, $strLength);
        if ($low > 0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $high = jl_String_charAt($testString, $stringIndex);
        if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$5)))
            return (-1);
        if ($this.$high0 != $high)
            return (-1);
        return $this.$next4.$matches(var$5, $testString, $matchResult);
    }
    function jur_HighSurrogateCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while (true) {
            if ($strIndex >= $strLength)
                return (-1);
            var$5 = jl_String_indexOf($testStr, $this.$high0, $strIndex);
            if (var$5 < 0)
                return (-1);
            $strIndex = var$5 + 1 | 0;
            if ($strIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $strIndex))) {
                $strIndex = var$5 + 2 | 0;
                continue;
            }
            if ($this.$next4.$matches($strIndex, $testStr, $matchResult) >= 0)
                break;
        }
        return var$5;
    }
    function jur_HighSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var $strLength, var$6;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$6 = jl_String_lastIndexOf0($testStr, $this.$high0, $lastIndex);
                if (var$6 < 0)
                    break a;
                if (var$6 < $strIndex)
                    break a;
                $lastIndex = var$6 + 1 | 0;
                if ($lastIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $lastIndex))) {
                    $lastIndex = var$6 + (-1) | 0;
                    continue;
                }
                if ($this.$next4.$matches($lastIndex, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$6 + (-1) | 0;
            }
            return var$6;
        }
        return (-1);
    }
    function jur_HighSurrogateCharSet_first($this, $set) {
        if ($set instanceof jur_CharSet)
            return 0;
        if ($set instanceof jur_RangeSet)
            return 0;
        if ($set instanceof jur_SupplRangeSet)
            return 0;
        if ($set instanceof jur_SupplCharSet)
            return 0;
        if ($set instanceof jur_LowSurrogateCharSet)
            return 0;
        if (!($set instanceof jur_HighSurrogateCharSet))
            return 1;
        return $set.$high0 != $this.$high0 ? 0 : 1;
    }
    function jur_HighSurrogateCharSet_hasConsumed($this, $matchResult) {
        return 1;
    }
    function jur_SupplCharSet() {
        var a = this; jur_LeafSet.call(a);
        a.$high = 0;
        a.$low = 0;
        a.$ch1 = 0;
    }
    function jur_SupplCharSet_accepts($this, $strIndex, $testString) {
        var $low, $high;
        $low = $strIndex + 1 | 0;
        $high = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $low);
        return $this.$high == $high && $this.$low == $low ? 2 : (-1);
    }
    function jur_SupplCharSet_find($this, $strIndex, $testStr, $matchResult) {
        var $strLength, $ch;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
        $strLength = $matchResult.$rightBound0;
        while ($strIndex < $strLength) {
            $strIndex = jl_String_indexOf($testStr, $this.$high, $strIndex);
            if ($strIndex < 0)
                return (-1);
            $strIndex = $strIndex + 1 | 0;
            if ($strIndex >= $strLength)
                continue;
            $ch = jl_String_charAt($testStr, $strIndex);
            if ($this.$low == $ch && $this.$next4.$matches($strIndex + 1 | 0, $testStr, $matchResult) >= 0)
                return $strIndex + (-1) | 0;
            $strIndex = $strIndex + 1 | 0;
        }
        return (-1);
    }
    function jur_SupplCharSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult) {
        var var$5;
        if (!($testStr instanceof jl_String))
            return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
        a: {
            while (true) {
                if ($lastIndex < $strIndex)
                    return (-1);
                var$5 = jl_String_lastIndexOf0($testStr, $this.$low, $lastIndex) + (-1) | 0;
                if (var$5 < 0)
                    break a;
                if (var$5 < $strIndex)
                    break a;
                if ($this.$high == jl_String_charAt($testStr, var$5) && $this.$next4.$matches(var$5 + 2 | 0, $testStr, $matchResult) >= 0)
                    break;
                $lastIndex = var$5 + (-1) | 0;
            }
            return var$5;
        }
        return (-1);
    }
    function jur_SupplCharSet_first($this, $set) {
        if ($set instanceof jur_SupplCharSet)
            return $set.$ch1 != $this.$ch1 ? 0 : 1;
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains($this.$ch1);
        if ($set instanceof jur_CharSet)
            return 0;
        if (!($set instanceof jur_RangeSet))
            return 1;
        return 0;
    }
    var jur_AbstractLineTerminator$1 = $rt_classWithoutFields(jur_AbstractLineTerminator);
    function jur_AbstractLineTerminator$1_isLineTerminator($this, $ch) {
        return $ch != 10 ? 0 : 1;
    }
    function jur_AbstractLineTerminator$1_isAfterLineTerminator($this, $ch, $ch2) {
        return $ch != 10 ? 0 : 1;
    }
    var jur_AbstractLineTerminator$2 = $rt_classWithoutFields(jur_AbstractLineTerminator);
    function jur_AbstractLineTerminator$2_isLineTerminator($this, $ch) {
        return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
    }
    function jur_AbstractLineTerminator$2_isAfterLineTerminator($this, $ch, $ch2) {
        a: {
            b: {
                if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                    if ($ch != 13)
                        break b;
                    if ($ch2 == 10)
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = 0;
        }
        return $ch;
    }
    function jur_SequenceSet$IntHash() {
        var a = this; jl_Object.call(a);
        a.$table0 = null;
        a.$values0 = null;
        a.$mask = 0;
        a.$size5 = 0;
    }
    function jur_SequenceSet$IntHash__init_(var_0) {
        var var_1 = new jur_SequenceSet$IntHash();
        jur_SequenceSet$IntHash__init_0(var_1, var_0);
        return var_1;
    }
    function jur_SequenceSet$IntHash__init_0($this, $size) {
        var var$2, var$3;
        while (true) {
            var$2 = $this.$mask;
            if ($size < var$2)
                break;
            $this.$mask = var$2 << 1 | 1;
        }
        var$3 = var$2 << 1 | 1;
        $this.$mask = var$3;
        var$3 = var$3 + 1 | 0;
        $this.$table0 = $rt_createIntArray(var$3);
        $this.$values0 = $rt_createIntArray(var$3);
        $this.$size5 = $size;
    }
    function jur_SequenceSet$IntHash_put($this, $key, $value) {
        var $i, var$4, $hashCode, var$6;
        $i = 0;
        var$4 = $this.$mask;
        $hashCode = $key & var$4;
        while (true) {
            var$6 = $this.$table0.data;
            if (!var$6[$hashCode])
                break;
            if (var$6[$hashCode] == $key)
                break;
            $i = ($i + 1 | 0) & var$4;
            $hashCode = ($hashCode + $i | 0) & var$4;
        }
        var$6[$hashCode] = $key;
        $this.$values0.data[$hashCode] = $value;
    }
    function jur_SequenceSet$IntHash_get($this, $key) {
        var var$2, $hashCode, $i, $storedKey;
        var$2 = $this.$mask;
        $hashCode = $key & var$2;
        $i = 0;
        while (true) {
            $storedKey = $this.$table0.data[$hashCode];
            if (!$storedKey)
                break;
            if ($storedKey == $key)
                return $this.$values0.data[$hashCode];
            $i = ($i + 1 | 0) & var$2;
            $hashCode = ($hashCode + $i | 0) & var$2;
        }
        return $this.$size5;
    }
    var jur_IntHash = $rt_classWithoutFields();
    var jur_AbstractCharClass$LazySpace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazySpace__init_() {
        var var_0 = new jur_AbstractCharClass$LazySpace();
        jur_AbstractCharClass$LazySpace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazySpace__init_0($this) {}
    function jur_AbstractCharClass$LazySpace_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 9, 13), 32);
    }
    var jur_AbstractCharClass$LazyDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyDigit();
        jur_AbstractCharClass$LazyDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyDigit_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 48, 57);
    }
    var jur_AbstractCharClass$LazyLower = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyLower__init_() {
        var var_0 = new jur_AbstractCharClass$LazyLower();
        jur_AbstractCharClass$LazyLower__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyLower__init_0($this) {}
    function jur_AbstractCharClass$LazyLower_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 97, 122);
    }
    var jur_AbstractCharClass$LazyUpper = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyUpper__init_() {
        var var_0 = new jur_AbstractCharClass$LazyUpper();
        jur_AbstractCharClass$LazyUpper__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyUpper__init_0($this) {}
    function jur_AbstractCharClass$LazyUpper_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 65, 90);
    }
    var jur_AbstractCharClass$LazyASCII = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyASCII__init_() {
        var var_0 = new jur_AbstractCharClass$LazyASCII();
        jur_AbstractCharClass$LazyASCII__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyASCII__init_0($this) {}
    function jur_AbstractCharClass$LazyASCII_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), 0, 127);
    }
    var jur_AbstractCharClass$LazyAlpha = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyAlpha__init_() {
        var var_0 = new jur_AbstractCharClass$LazyAlpha();
        jur_AbstractCharClass$LazyAlpha__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyAlpha__init_0($this) {}
    function jur_AbstractCharClass$LazyAlpha_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90);
    }
    var jur_AbstractCharClass$LazyAlnum = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlpha);
    function jur_AbstractCharClass$LazyAlnum__init_() {
        var var_0 = new jur_AbstractCharClass$LazyAlnum();
        jur_AbstractCharClass$LazyAlnum__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyAlnum__init_0($this) {}
    function jur_AbstractCharClass$LazyAlnum_computeValue($this) {
        return jur_CharClass_add0(jur_AbstractCharClass$LazyAlpha_computeValue($this), 48, 57);
    }
    var jur_AbstractCharClass$LazyPunct = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyPunct__init_() {
        var var_0 = new jur_AbstractCharClass$LazyPunct();
        jur_AbstractCharClass$LazyPunct__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyPunct__init_0($this) {}
    function jur_AbstractCharClass$LazyPunct_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 33, 64), 91, 96), 123, 126);
    }
    var jur_AbstractCharClass$LazyGraph = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlnum);
    function jur_AbstractCharClass$LazyGraph__init_() {
        var var_0 = new jur_AbstractCharClass$LazyGraph();
        jur_AbstractCharClass$LazyGraph__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyGraph__init_0($this) {}
    function jur_AbstractCharClass$LazyGraph_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_AbstractCharClass$LazyAlnum_computeValue($this), 33, 64), 91, 96), 123, 126);
    }
    var jur_AbstractCharClass$LazyPrint = $rt_classWithoutFields(jur_AbstractCharClass$LazyGraph);
    function jur_AbstractCharClass$LazyPrint__init_() {
        var var_0 = new jur_AbstractCharClass$LazyPrint();
        jur_AbstractCharClass$LazyPrint__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyPrint__init_0($this) {}
    function jur_AbstractCharClass$LazyPrint_computeValue($this) {
        return jur_CharClass_add(jur_AbstractCharClass$LazyGraph_computeValue($this), 32);
    }
    var jur_AbstractCharClass$LazyBlank = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyBlank__init_() {
        var var_0 = new jur_AbstractCharClass$LazyBlank();
        jur_AbstractCharClass$LazyBlank__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyBlank__init_0($this) {}
    function jur_AbstractCharClass$LazyBlank_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_0(), 32), 9);
    }
    var jur_AbstractCharClass$LazyCntrl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyCntrl__init_() {
        var var_0 = new jur_AbstractCharClass$LazyCntrl();
        jur_AbstractCharClass$LazyCntrl__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyCntrl__init_0($this) {}
    function jur_AbstractCharClass$LazyCntrl_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 0, 31), 127);
    }
    var jur_AbstractCharClass$LazyXDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyXDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyXDigit();
        jur_AbstractCharClass$LazyXDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyXDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyXDigit_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 48, 57), 97, 102), 65, 70);
    }
    var jur_AbstractCharClass$LazyJavaLowerCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLowerCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
        jur_AbstractCharClass$LazyJavaLowerCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLowerCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLowerCase_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLowerCase$1;
        $chCl.$this$023 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaUpperCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUpperCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
        jur_AbstractCharClass$LazyJavaUpperCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUpperCase_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUpperCase$1;
        $chCl.$this$024 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaWhitespace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaWhitespace__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
        jur_AbstractCharClass$LazyJavaWhitespace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaWhitespace_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaWhitespace$1;
        var$1.$this$025 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaMirrored = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaMirrored__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
        jur_AbstractCharClass$LazyJavaMirrored__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaMirrored__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaMirrored_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaMirrored$1;
        var$1.$this$026 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaDefined = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaDefined__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaDefined();
        jur_AbstractCharClass$LazyJavaDefined__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaDefined__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaDefined_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaDefined$1;
        $chCl.$this$027 = $this;
        jur_AbstractCharClass__init_($chCl);
        ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaDigit();
        jur_AbstractCharClass$LazyJavaDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaDigit_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaDigit$1;
        $chCl.$this$028 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaIdentifierIgnorable = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
        jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
        $chCl.$this$029 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaISOControl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaISOControl__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
        jur_AbstractCharClass$LazyJavaISOControl__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaISOControl__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaISOControl_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaISOControl$1;
        var$1.$this$030 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaJavaIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
        jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
        $chCl.$this$031 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaJavaIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
        jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
        $chCl.$this$032 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaLetter = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLetter__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLetter();
        jur_AbstractCharClass$LazyJavaLetter__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLetter__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLetter_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLetter$1;
        $chCl.$this$033 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaLetterOrDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
        jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
        $chCl.$this$034 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaSpaceChar = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaSpaceChar__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
        jur_AbstractCharClass$LazyJavaSpaceChar__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaSpaceChar_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1;
        var$1.$this$035 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaTitleCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaTitleCase__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
        jur_AbstractCharClass$LazyJavaTitleCase__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaTitleCase__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaTitleCase_computeValue($this) {
        var var$1;
        var$1 = new jur_AbstractCharClass$LazyJavaTitleCase$1;
        var$1.$this$036 = $this;
        jur_AbstractCharClass__init_(var$1);
        return var$1;
    }
    var jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
        jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
        $chCl.$this$037 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_() {
        var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
        jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0($this) {}
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue($this) {
        var $chCl;
        $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
        $chCl.$this$038 = $this;
        jur_AbstractCharClass__init_($chCl);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazyWord__init_() {
        var var_0 = new jur_AbstractCharClass$LazyWord();
        jur_AbstractCharClass$LazyWord__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyWord__init_0($this) {}
    function jur_AbstractCharClass$LazyWord_computeValue($this) {
        return jur_CharClass_add(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90), 48, 57), 95);
    }
    var jur_AbstractCharClass$LazyNonWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyWord);
    function jur_AbstractCharClass$LazyNonWord__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonWord();
        jur_AbstractCharClass$LazyNonWord__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonWord__init_0($this) {}
    function jur_AbstractCharClass$LazyNonWord_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyWord_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyNonSpace = $rt_classWithoutFields(jur_AbstractCharClass$LazySpace);
    function jur_AbstractCharClass$LazyNonSpace__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonSpace();
        jur_AbstractCharClass$LazyNonSpace__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonSpace__init_0($this) {}
    function jur_AbstractCharClass$LazyNonSpace_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazySpace_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    var jur_AbstractCharClass$LazyNonDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyDigit);
    function jur_AbstractCharClass$LazyNonDigit__init_() {
        var var_0 = new jur_AbstractCharClass$LazyNonDigit();
        jur_AbstractCharClass$LazyNonDigit__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazyNonDigit__init_0($this) {}
    function jur_AbstractCharClass$LazyNonDigit_computeValue($this) {
        var $chCl;
        $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyDigit_computeValue($this), 1);
        $chCl.$mayContainSupplCodepoints = 1;
        return $chCl;
    }
    function jur_AbstractCharClass$LazyRange() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$start10 = 0;
        a.$end3 = 0;
    }
    function jur_AbstractCharClass$LazyRange__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyRange();
        jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyRange__init_0($this, $start, $end) {
        $this.$start10 = $start;
        $this.$end3 = $end;
    }
    function jur_AbstractCharClass$LazyRange_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass__init_0(), $this.$start10, $this.$end3);
    }
    var jur_AbstractCharClass$LazySpecialsBlock = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass);
    function jur_AbstractCharClass$LazySpecialsBlock__init_() {
        var var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
        jur_AbstractCharClass$LazySpecialsBlock__init_0(var_0);
        return var_0;
    }
    function jur_AbstractCharClass$LazySpecialsBlock__init_0($this) {}
    function jur_AbstractCharClass$LazySpecialsBlock_computeValue($this) {
        return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 65279, 65279), 65520, 65533);
    }
    function jur_AbstractCharClass$LazyCategory() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$category = 0;
        a.$mayContainSupplCodepoints0 = 0;
        a.$containsAllSurrogates = 0;
    }
    function jur_AbstractCharClass$LazyCategory__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyCategory();
        jur_AbstractCharClass$LazyCategory__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyCategory__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_AbstractCharClass$LazyCategory();
        jur_AbstractCharClass$LazyCategory__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_AbstractCharClass$LazyCategory__init_1($this, $cat, $mayContainSupplCodepoints) {
        $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
        $this.$category = $cat;
    }
    function jur_AbstractCharClass$LazyCategory__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
        $this.$containsAllSurrogates = $containsAllSurrogates;
        $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
        $this.$category = $cat;
    }
    function jur_AbstractCharClass$LazyCategory_computeValue($this) {
        var $chCl;
        $chCl = jur_UnicodeCategory__init_($this.$category);
        if ($this.$containsAllSurrogates)
            ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints0;
        return $chCl;
    }
    function jur_AbstractCharClass$LazyCategoryScope() {
        var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
        a.$category0 = 0;
        a.$mayContainSupplCodepoints1 = 0;
        a.$containsAllSurrogates0 = 0;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_(var_0, var_1) {
        var var_2 = new jur_AbstractCharClass$LazyCategoryScope();
        jur_AbstractCharClass$LazyCategoryScope__init_1(var_2, var_0, var_1);
        return var_2;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_0(var_0, var_1, var_2) {
        var var_3 = new jur_AbstractCharClass$LazyCategoryScope();
        jur_AbstractCharClass$LazyCategoryScope__init_2(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_1($this, $cat, $mayContainSupplCodepoints) {
        $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
        $this.$category0 = $cat;
    }
    function jur_AbstractCharClass$LazyCategoryScope__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
        $this.$containsAllSurrogates0 = $containsAllSurrogates;
        $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
        $this.$category0 = $cat;
    }
    function jur_AbstractCharClass$LazyCategoryScope_computeValue($this) {
        var $chCl;
        $chCl = new jur_UnicodeCategoryScope;
        jur_UnicodeCategory__init_0($chCl, $this.$category0);
        if ($this.$containsAllSurrogates0)
            ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
        $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints1;
        return $chCl;
    }
    function otciu_UnicodeHelper$Range() {
        var a = this; jl_Object.call(a);
        a.$start4 = 0;
        a.$end1 = 0;
        a.$data = null;
    }
    function otciu_UnicodeHelper$Range__init_(var_0, var_1, var_2) {
        var var_3 = new otciu_UnicodeHelper$Range();
        otciu_UnicodeHelper$Range__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function otciu_UnicodeHelper$Range__init_0($this, $start, $end, $data) {
        $this.$start4 = $start;
        $this.$end1 = $end;
        $this.$data = $data;
    }
    var jl_Float = $rt_classWithoutFields(jl_Number);
    var jl_Float_TYPE = null;
    function jl_Float_floatToIntBits($value) {
        if ($rt_globals.isNaN($value) ? 1 : 0)
            return 2143289344;
        return $rt_floatToRawIntBits($value);
    }
    function jl_Float__clinit_() {
        jl_Float_TYPE = $rt_cls($rt_floatcls());
    }
    function cmml_NextTickListEntry() {
        var a = this; jl_Object.call(a);
        a.$x8 = 0;
        a.$y7 = 0;
        a.$z11 = 0;
        a.$block0 = 0;
        a.$ticks2 = 0;
    }
    function cmmm_HumanoidMob() {
        var a = this; cmmm_Mob.call(a);
        a.$helmet = 0;
        a.$armor = 0;
    }
    function cmmm_HumanoidMob_renderModel($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        var $var9, var$9, var$10, var$11, var$12, var$13, var$14, var$15, $var11, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var11 = $thread.pop();var$15 = $thread.pop();var$14 = $thread.pop();var$13 = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();$var9 = $thread.pop();$var7 = $thread.pop();$var6 = $thread.pop();$var5 = $thread.pop();$var4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $ptr = 1;
        case 1:
            cmmm_Mob_renderModel($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            $var9 = cmmm_ModelManager_getModel(cmmm_Mob_modelCache, $this.$modelName);
            olo_GL11_glEnable(3008);
            if ($this.$allowAlpha)
                olo_GL11_glEnable(2884);
            if ($this.$hasHair) {
                olo_GL11_glDisable(2884);
                var$9 = $var9;
                var$10 = var$9.$headwear;
                var$9 = var$9.$head;
                var$10.$yaw = var$9.$yaw;
                var$10.$pitch = var$9.$pitch;
                cmmm_ModelPart_render(var$10, $var7);
                olo_GL11_glEnable(2884);
            }
            if (!$this.$armor && !$this.$helmet) {
                olo_GL11_glDisable(3008);
                return;
            }
            var$11 = 3553;
            var$9 = $rt_s(612);
            $ptr = 2;
        case 2:
            $tmp = cmmr_TextureManager_load($var1, var$9);
            if ($rt_suspending()) {
                break main;
            }
            var$12 = $tmp;
            olo_GL11_glBindTexture(var$11, var$12);
            olo_GL11_glDisable(2884);
            $var1 = cmmm_ModelManager_getModel(cmmm_Mob_modelCache, $rt_s(297));
            var$9 = $var1.$head;
            var$9.$render5 = $this.$helmet;
            var$10 = $var1.$body;
            var$11 = $this.$armor;
            var$10.$render5 = var$11;
            var$10 = $var1.$rightArm;
            var$10.$render5 = var$11;
            var$13 = $var1.$leftArm;
            var$13.$render5 = var$11;
            var$14 = $var1.$rightLeg;
            var$14.$render5 = 0;
            var$15 = $var1.$leftLeg;
            var$15.$render5 = 0;
            $var11 = $var9;
            $var9 = $var11.$head;
            var$9.$yaw = $var9.$yaw;
            var$9.$pitch = $var9.$pitch;
            $var9 = $var11.$rightArm;
            var$10.$pitch = $var9.$pitch;
            var$10.$roll = $var9.$roll;
            $var9 = $var11.$leftArm;
            var$13.$pitch = $var9.$pitch;
            var$13.$roll = $var9.$roll;
            var$14.$pitch = $var11.$rightLeg.$pitch;
            var$15.$pitch = $var11.$leftLeg.$pitch;
            cmmm_ModelPart_render(var$9, $var7);
            cmmm_ModelPart_render($var1.$body, $var7);
            cmmm_ModelPart_render($var1.$rightArm, $var7);
            cmmm_ModelPart_render($var1.$leftArm, $var7);
            cmmm_ModelPart_render($var1.$rightLeg, $var7);
            cmmm_ModelPart_render($var1.$leftLeg, $var7);
            olo_GL11_glEnable(2884);
            olo_GL11_glDisable(3008);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7, $var9, var$9, var$10, var$11, var$12, var$13, var$14, var$15, $var11, $ptr);
    }
    var cmmm_Zombie = $rt_classWithoutFields(cmmm_HumanoidMob);
    function cmmm_Zombie__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmm_Zombie();
        cmmm_Zombie__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmm_Zombie__init_0($this, $var1, $var2, $var3, $var4) {
        var $var5;
        cmmm_Mob__init_($this, $var1);
        $this.$helmet = jl_Math_random() >= 0.20000000298023224 ? 0 : 1;
        $this.$armor = jl_Math_random() >= 0.20000000298023224 ? 0 : 1;
        $this.$modelName = $rt_s(49);
        cmm_Entity_setPos($this, $var2, $var3, $var4);
        $this.$modelName = $rt_s(300);
        $this.$textureName = $rt_s(613);
        $this.$heightOffset = 1.6200000047683716;
        $var5 = cmmma_BasicAttackAI__init_0();
        $this.$deathScore = 80;
        $var5.$defaultLookAngle = 30;
        $var5.$runSpeed = 1.0;
        $this.$ai = $var5;
    }
    var cmmm_Skeleton = $rt_classWithoutFields(cmmm_Zombie);
    var cmmm_QuadrupedMob = $rt_classWithoutFields(cmmm_Mob);
    function cmmm_QuadrupedMob__init_0(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmm_QuadrupedMob();
        cmmm_QuadrupedMob__init_(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmm_QuadrupedMob__init_($this, $var1, $var2, $var3, $var4) {
        cmmm_Mob__init_($this, $var1);
        cmm_Entity_setSize($this, 1.399999976158142, 1.2000000476837158);
        cmm_Entity_setPos($this, $var2, $var3, $var4);
        $this.$modelName = $rt_s(301);
    }
    var cmmm_Pig = $rt_classWithoutFields(cmmm_QuadrupedMob);
    function cmmm_Pig_die($this, $var1) {
        var $var2, $var3, var$4, var$5, var$6, var$7, var$8;
        if ($var1 !== null)
            $var1.$awardKillScore($this, 10);
        $var2 = jl_Math_random() + jl_Math_random() + 1.0 | 0;
        $var3 = 0;
        while ($var3 < $var2) {
            var$4 = $this.$level2;
            var$5 = new cmmi_Item;
            var$6 = $this.$x;
            var$7 = $this.$y;
            var$8 = $this.$z;
            cmmlt_Block_$callClinit();
            cmmi_Item__init_0(var$5, var$4, var$6, var$7, var$8, cmmlt_Block_BROWN_MUSHROOM.$id);
            cmml_Level_addEntity(var$4, var$5);
            $var3 = $var3 + 1 | 0;
        }
        cmmm_Mob_die($this, $var1);
    }
    var cmmm_Creeper = $rt_classWithoutFields(cmmm_Mob);
    function cmmm_Creeper_getBrightness($this, $var1) {
        var $var2;
        $var2 = (20 - $this.$health | 0) / 20.0;
        return ((cmu_MathHelper_sin($this.$tickCount0 + $var1) * 0.5 + 0.5) * $var2 * 0.5 + 0.25 + $var2 * 0.25) * cmm_Entity_getBrightness($this, $var1);
    }
    var cmmm_Spider = $rt_classWithoutFields(cmmm_QuadrupedMob);
    function cmmm_Spider__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmm_Spider();
        cmmm_Spider__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmm_Spider__init_0($this, $var1, $var2, $var3, $var4) {
        cmmm_QuadrupedMob__init_($this, $var1, $var2, $var3, $var4);
        $this.$heightOffset = 0.7200000286102295;
        $this.$modelName = $rt_s(303);
        $this.$textureName = $rt_s(614);
        cmm_Entity_setSize($this, 1.399999976158142, 0.8999999761581421);
        cmm_Entity_setPos($this, $var2, $var3, $var4);
        $this.$deathScore = 105;
        $this.$bobStrength = 0.0;
        $var1 = new cmmma_JumpAttackAI;
        cmmma_BasicAttackAI__init_($var1);
        $var1.$runSpeed = $var1.$runSpeed * 0.800000011920929;
        $this.$ai = $var1;
    }
    function cmmm_Sheep() {
        var a = this; cmmm_QuadrupedMob.call(a);
        a.$hasFur = 0;
        a.$grazing = 0;
        a.$grazingTime = 0;
        a.$graze = 0.0;
        a.$grazeO = 0.0;
    }
    function cmmm_Sheep__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmm_Sheep();
        cmmm_Sheep__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmm_Sheep__init_0($this, $var1, $var2, $var3, $var4) {
        cmmm_QuadrupedMob__init_($this, $var1, $var2, $var3, $var4);
        $this.$hasFur = 1;
        $this.$grazing = 0;
        $this.$grazingTime = 0;
        cmm_Entity_setSize($this, 1.399999976158142, 1.7200000286102295);
        cmm_Entity_setPos($this, $var2, $var3, $var4);
        $this.$heightOffset = 1.7200000286102295;
        $this.$modelName = $rt_s(302);
        $this.$textureName = $rt_s(615);
        $var1 = new cmmm_Sheep$1;
        cmmma_BasicAI__init_($var1);
        $var1.$sheep0 = $this;
        $this.$ai = $var1;
    }
    function cmmm_Sheep_aiStep($this) {
        var var$1;
        cmmm_Mob_aiStep($this);
        var$1 = $this.$graze;
        $this.$grazeO = var$1;
        if (!$this.$grazing)
            $this.$graze = var$1 - 0.20000000298023224;
        else
            $this.$graze = var$1 + 0.20000000298023224;
        if ($this.$graze < 0.0)
            $this.$graze = 0.0;
        if ($this.$graze > 1.0)
            $this.$graze = 1.0;
    }
    function cmmm_Sheep_die($this, $var1) {
        var $var2, $var3, var$4, var$5, var$6, var$7, var$8;
        if ($var1 !== null)
            $var1.$awardKillScore($this, 10);
        $var2 = jl_Math_random() + jl_Math_random() + 1.0 | 0;
        $var3 = 0;
        while ($var3 < $var2) {
            var$4 = $this.$level2;
            var$5 = new cmmi_Item;
            var$6 = $this.$x;
            var$7 = $this.$y;
            var$8 = $this.$z;
            cmmlt_Block_$callClinit();
            cmmi_Item__init_0(var$5, var$4, var$6, var$7, var$8, cmmlt_Block_BROWN_MUSHROOM.$id);
            cmml_Level_addEntity(var$4, var$5);
            $var3 = $var3 + 1 | 0;
        }
        cmmm_Mob_die($this, $var1);
    }
    function cmmm_Sheep_hurt($this, $var1, $var2) {
        var $var3, var$4, var$5, var$6, var$7, var$8;
        if ($this.$hasFur && $var1 instanceof cmmp_Player) {
            $this.$hasFur = 0;
            $var3 = jl_Math_random() * 3.0 + 1.0 | 0;
            $var2 = 0;
            while ($var2 < $var3) {
                var$4 = $this.$level2;
                var$5 = new cmmi_Item;
                var$6 = $this.$x;
                var$7 = $this.$y;
                var$8 = $this.$z;
                cmmlt_Block_$callClinit();
                cmmi_Item__init_0(var$5, var$4, var$6, var$7, var$8, cmmlt_Block_WHITE_WOOL.$id);
                cmml_Level_addEntity(var$4, var$5);
                $var2 = $var2 + 1 | 0;
            }
        } else
            cmmm_Mob_hurt($this, $var1, $var2);
    }
    function cmmm_Sheep_renderModel($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        var var$8, var$9, $var9, $var10, var$12, var$13, var$14, var$15, var$16, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$16 = $thread.pop();var$15 = $thread.pop();var$14 = $thread.pop();var$13 = $thread.pop();var$12 = $thread.pop();$var10 = $thread.pop();$var9 = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();$var7 = $thread.pop();$var6 = $thread.pop();$var5 = $thread.pop();$var4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$8 = cmmm_ModelManager_getModel(cmmm_Mob_modelCache, $this.$modelName);
            var$9 = var$8.$head1;
            $var9 = var$9.$y4;
            $var10 = var$9.$z7;
            var$12 = $this.$grazeO;
            var$12 = var$12 + ($this.$graze - var$12) * $var3;
            var$9.$y4 = $var9 + var$12 * 8.0;
            var$9.$z7 = $var10 - var$12;
            $ptr = 1;
        case 1:
            cmmm_Mob_renderModel($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7);
            if ($rt_suspending()) {
                break main;
            }
            if (!$this.$hasFur) {
                $var1 = var$8.$head1;
                $var1.$y4 = $var9;
                $var1.$z7 = $var10;
                return;
            }
            var$13 = 3553;
            var$9 = $rt_s(616);
            $ptr = 2;
        case 2:
            $tmp = cmmr_TextureManager_load($var1, var$9);
            if ($rt_suspending()) {
                break main;
            }
            var$14 = $tmp;
            olo_GL11_glBindTexture(var$13, var$14);
            olo_GL11_glDisable(2884);
            $var1 = cmmm_ModelManager_getModel(cmmm_Mob_modelCache, $rt_s(304));
            var$9 = $var1.$head1;
            var$15 = var$8.$head1;
            var$9.$yaw = var$15.$yaw;
            var$9.$pitch = var$15.$pitch;
            var$9.$y4 = var$15.$y4;
            var$9.$x5 = var$15.$x5;
            var$15 = $var1.$body0;
            var$16 = var$8.$body0;
            var$15.$yaw = var$16.$yaw;
            var$15.$pitch = var$16.$pitch;
            $var1.$leg10.$pitch = var$8.$leg10.$pitch;
            $var1.$leg20.$pitch = var$8.$leg20.$pitch;
            $var1.$leg30.$pitch = var$8.$leg30.$pitch;
            $var1.$leg40.$pitch = var$8.$leg40.$pitch;
            cmmm_ModelPart_render(var$9, $var7);
            cmmm_ModelPart_render($var1.$body0, $var7);
            cmmm_ModelPart_render($var1.$leg10, $var7);
            cmmm_ModelPart_render($var1.$leg20, $var7);
            cmmm_ModelPart_render($var1.$leg30, $var7);
            cmmm_ModelPart_render($var1.$leg40, $var7);
            $var1 = var$8.$head1;
            $var1.$y4 = $var9;
            $var1.$z7 = $var10;
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7, var$8, var$9, $var9, $var10, var$12, var$13, var$14, var$15, var$16, $ptr);
    }
    function ju_HashMap$AbstractMapIterator() {
        var a = this; jl_Object.call(a);
        a.$position3 = 0;
        a.$expectedModCount = 0;
        a.$futureEntry = null;
        a.$currentEntry0 = null;
        a.$prevEntry0 = null;
        a.$associatedMap = null;
    }
    function ju_HashMap$AbstractMapIterator_hasNext($this) {
        var var$1, var$2;
        if ($this.$futureEntry !== null)
            return 1;
        while (true) {
            var$1 = $this.$position3;
            var$2 = $this.$associatedMap.$elementData.data;
            if (var$1 >= var$2.length)
                break;
            if (var$2[var$1] !== null)
                return 1;
            $this.$position3 = var$1 + 1 | 0;
        }
        return 0;
    }
    var ju_HashMap$KeyIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator);
    function ju_HashMap$KeyIterator_next($this) {
        var var$1, var$2, var$3, var$4;
        if ($this.$expectedModCount != $this.$associatedMap.$modCount1) {
            var$1 = new ju_ConcurrentModificationException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        if (!ju_HashMap$AbstractMapIterator_hasNext($this)) {
            var$1 = new ju_NoSuchElementException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        var$1 = $this.$futureEntry;
        if (var$1 === null) {
            var$2 = $this.$associatedMap.$elementData.data;
            var$3 = $this.$position3;
            $this.$position3 = var$3 + 1 | 0;
            var$1 = var$2[var$3];
            $this.$currentEntry0 = var$1;
            $this.$futureEntry = var$1.$next2;
            $this.$prevEntry0 = null;
        } else {
            var$4 = $this.$currentEntry0;
            if (var$4 !== null)
                $this.$prevEntry0 = var$4;
            $this.$currentEntry0 = var$1;
            $this.$futureEntry = var$1.$next2;
        }
        return $this.$currentEntry0.$key0;
    }
    var ju_NoSuchElementException = $rt_classWithoutFields(jl_RuntimeException);
    var cmm_StopGameException = $rt_classWithoutFields(jl_Error);
    function cjj_Inflate$Return() {
        var a = this; jl_Exception.call(a);
        a.$r0 = 0;
        a.$this$039 = null;
    }
    function cjj_Inflate$Return__init_(var_0, var_1) {
        var var_2 = new cjj_Inflate$Return();
        cjj_Inflate$Return__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cjj_Inflate$Return__init_0($this, var$1, $r) {
        $this.$this$039 = var$1;
        jl_Throwable__init_0($this);
        $this.$r0 = $r;
    }
    function cjj_GZIPHeader() {
        var a = this; jl_Object.call(a);
        a.$text1 = 0;
        a.$fhcrc = 0;
        a.$time0 = Long_ZERO;
        a.$xflags = 0;
        a.$os = 0;
        a.$extra = null;
        a.$name6 = null;
        a.$comment = null;
        a.$hcrc = 0;
        a.$crc = Long_ZERO;
        a.$done = 0;
        a.$mtime = Long_ZERO;
    }
    function cjj_GZIPHeader__init_() {
        var var_0 = new cjj_GZIPHeader();
        cjj_GZIPHeader__init_0(var_0);
        return var_0;
    }
    function cjj_GZIPHeader__init_0($this) {
        $this.$text1 = 0;
        $this.$fhcrc = 0;
        $this.$os = 255;
        $this.$done = 0;
        $this.$mtime = Long_ZERO;
    }
    function cjj_CRC32() {
        jl_Object.call(this);
        this.$v3 = 0;
    }
    var cjj_CRC32_crc_table = null;
    function cjj_CRC32__init_() {
        var var_0 = new cjj_CRC32();
        cjj_CRC32__init_0(var_0);
        return var_0;
    }
    function cjj_CRC32__init_0($this) {
        $this.$v3 = 0;
    }
    function cjj_CRC32_update($this, $buf, $index, $len) {
        var $c, var$5, var$6, var$7;
        $c = $this.$v3 ^ (-1);
        while (true) {
            $len = $len + (-1) | 0;
            if ($len < 0)
                break;
            var$5 = $buf.data;
            var$6 = cjj_CRC32_crc_table.data;
            var$7 = $index + 1 | 0;
            $c = var$6[($c ^ var$5[$index]) & 255] ^ ($c >>> 8 | 0);
            $index = var$7;
        }
        $this.$v3 = $c ^ (-1);
    }
    function cjj_CRC32_reset($this) {
        $this.$v3 = 0;
    }
    function cjj_CRC32_reset0($this, $vv) {
        $this.$v3 = Long_lo(Long_and($vv, Long_create(4294967295, 0)));
    }
    function cjj_CRC32_getValue($this) {
        return Long_and(Long_fromInt($this.$v3), Long_create(4294967295, 0));
    }
    function cjj_CRC32__clinit_() {
        var var$1, var$2, $n, $k, var$5;
        cjj_CRC32_crc_table = null;
        var$1 = $rt_createIntArray(256);
        var$2 = var$1.data;
        cjj_CRC32_crc_table = var$1;
        $n = 0;
        while ($n < 256) {
            $k = 8;
            var$5 = $n;
            while (true) {
                $k = $k + (-1) | 0;
                if ($k < 0)
                    break;
                if (!(var$5 & 1)) {
                    var$5 = var$5 >>> 1 | 0;
                    continue;
                }
                var$5 = (-306674912) ^ (var$5 >>> 1 | 0);
            }
            var$2[$n] = var$5;
            $n = $n + 1 | 0;
        }
    }
    function cmmi_PrimedTnt() {
        var a = this; cmm_Entity.call(a);
        a.$xd3 = 0.0;
        a.$yd3 = 0.0;
        a.$zd3 = 0.0;
        a.$life = 0;
        a.$defused = 0;
    }
    function cmmi_PrimedTnt__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmi_PrimedTnt();
        cmmi_PrimedTnt__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmi_PrimedTnt__init_0($this, $level1, $x, $y, $z) {
        var $unknown0;
        cmm_Entity__init_($this, $level1);
        $this.$life = 0;
        cmm_Entity_setSize($this, 0.9800000190734863, 0.9800000190734863);
        $this.$heightOffset = $this.$bbHeight / 2.0;
        cmm_Entity_setPos($this, $x, $y, $z);
        $unknown0 = jl_Math_random() * 3.1415927410125732 * 2.0 * 3.1415927410125732 / 180.0;
        $this.$xd3 =  -cmu_MathHelper_sin($unknown0) * 0.019999999552965164;
        $this.$yd3 = 0.20000000298023224;
        $this.$zd3 =  -cmu_MathHelper_cos($unknown0) * 0.019999999552965164;
        $this.$makeStepSound = 0;
        $this.$life = 40;
        $this.$xo = $x;
        $this.$yo = $y;
        $this.$zo = $z;
    }
    function cmmi_PrimedTnt_tick($this) {
        var $radius, $unknown0, $unknown1, $i, $smokeParticle, $random, $unknown2, $unknown3, $unknown4, $unknown5, $terrainParticle, var$12;
        $this.$xo = $this.$x;
        $this.$yo = $this.$y;
        $this.$zo = $this.$z;
        $radius = $this.$yd3 - 0.03999999910593033;
        $this.$yd3 = $radius;
        cmm_Entity_move($this, $this.$xd3, $radius, $this.$zd3);
        $radius = $this.$xd3 * 0.9800000190734863;
        $this.$xd3 = $radius;
        $unknown0 = $this.$yd3 * 0.9800000190734863;
        $this.$yd3 = $unknown0;
        $unknown1 = $this.$zd3 * 0.9800000190734863;
        $this.$zd3 = $unknown1;
        if ($this.$onGround) {
            $this.$xd3 = $radius * 0.699999988079071;
            $this.$zd3 = $unknown1 * 0.699999988079071;
            $this.$yd3 = $unknown0 * (-0.5);
        }
        a: {
            if (!$this.$defused) {
                $i = $this.$life;
                $this.$life = $i - 1 | 0;
                if ($i > 0) {
                    $smokeParticle = new cmmp_SmokeParticle;
                    cmmp_Particle__init_0($smokeParticle, $this.$level2, $this.$x, $this.$y + 0.6000000238418579, $this.$z, 0.0, 0.0, 0.0);
                    $smokeParticle.$xd = $smokeParticle.$xd * 0.10000000149011612;
                    $smokeParticle.$yd = $smokeParticle.$yd * 0.10000000149011612;
                    $smokeParticle.$zd = $smokeParticle.$zd * 0.10000000149011612;
                    $radius = jl_Math_random() * 0.30000001192092896;
                    $smokeParticle.$bCol = $radius;
                    $smokeParticle.$gCol = $radius;
                    $smokeParticle.$rCol = $radius;
                    $smokeParticle.$lifetime = 8.0 / (jl_Math_random() * 0.8 + 0.2) | 0;
                    $smokeParticle.$noPhysics = 1;
                    cmmp_ParticleManager_spawnParticle($this.$level2.$particleEngine, $smokeParticle);
                } else {
                    cmm_Entity_remove($this);
                    $random = new ju_Random;
                    cmml_Level_explode($this.$level2, null, $this.$x, $this.$y, $this.$z, 4.0);
                    $i = 0;
                    while (true) {
                        if ($i >= 100)
                            break a;
                        $unknown0 = ju_Random_nextGaussian($random) * 4.0 / 4.0;
                        $unknown1 = ju_Random_nextGaussian($random) * 4.0 / 4.0;
                        $unknown2 = ju_Random_nextGaussian($random) * 4.0 / 4.0;
                        $unknown3 = cmu_MathHelper_sqrt($unknown0 * $unknown0 + $unknown1 * $unknown1 + $unknown2 * $unknown2);
                        $unknown4 = $unknown0 / $unknown3 / $unknown3;
                        $unknown5 = $unknown1 / $unknown3 / $unknown3;
                        $unknown3 = $unknown2 / $unknown3 / $unknown3;
                        $terrainParticle = new cmmp_TerrainParticle;
                        var$12 = $this.$level2;
                        $unknown0 = $this.$x + $unknown0;
                        $unknown1 = $this.$y + $unknown1;
                        $unknown2 = $this.$z + $unknown2;
                        cmmlt_Block_$callClinit();
                        cmmp_TerrainParticle__init_0($terrainParticle, var$12, $unknown0, $unknown1, $unknown2, $unknown4, $unknown5, $unknown3, cmmlt_Block_TNT);
                        cmmp_ParticleManager_spawnParticle($this.$level2.$particleEngine, $terrainParticle);
                        $i = $i + 1 | 0;
                    }
                }
            }
        }
    }
    function cmmi_PrimedTnt_render($this, $textureManager, $unknown0) {
        var $shapeRenderer, $textureID, $brightness, var$6, var$7, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();$brightness = $thread.pop();$textureID = $thread.pop();$shapeRenderer = $thread.pop();$unknown0 = $thread.pop();$textureManager = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $shapeRenderer = $rt_s(43);
            $ptr = 1;
        case 1:
            $tmp = cmmr_TextureManager_load($textureManager, $shapeRenderer);
            if ($rt_suspending()) {
                break main;
            }
            $textureID = $tmp;
            olo_GL11_glBindTexture(3553, $textureID);
            $brightness = cmml_Level_getBrightness($this.$level2, $this.$x | 0, $this.$y | 0, $this.$z | 0);
            olo_GL11_glPushMatrix();
            olo_GL11_glColor4f($brightness, $brightness, $brightness, 1.0);
            $brightness = $this.$xo;
            $brightness = $brightness + ($this.$x - $brightness) * $unknown0 - 0.5;
            var$6 = $this.$yo;
            var$6 = var$6 + ($this.$y - var$6) * $unknown0 - 0.5;
            var$7 = $this.$zo;
            olo_GL11_glTranslatef($brightness, var$6, var$7 + ($this.$z - var$7) * $unknown0 - 0.5);
            olo_GL11_glPushMatrix();
            cmmr_ShapeRenderer_$callClinit();
            $shapeRenderer = cmmr_ShapeRenderer_instance;
            cmmlt_Block_$callClinit();
            cmmlt_Block_TNT.$renderPreview($shapeRenderer);
            olo_GL11_glDisable(3553);
            olo_GL11_glDisable(2896);
            olo_GL11_glColor4f(1.0, 1.0, 1.0, ((($this.$life / 4 | 0) + 1 | 0) % 2 | 0) * 0.4000000059604645);
            $textureID = $this.$life;
            if ($textureID <= 16)
                olo_GL11_glColor4f(1.0, 1.0, 1.0, (($textureID + 1 | 0) % 2 | 0) * 0.6000000238418579);
            if ($this.$life <= 2)
                olo_GL11_glColor4f(1.0, 1.0, 1.0, 0.8999999761581421);
            olo_GL11_glEnable(3042);
            olo_GL11_glBlendFunc(770, 1);
            cmmlt_Block_TNT.$renderPreview($shapeRenderer);
            olo_GL11_glDisable(3042);
            olo_GL11_glEnable(3553);
            olo_GL11_glEnable(2896);
            olo_GL11_glPopMatrix();
            olo_GL11_glPopMatrix();
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $textureManager, $unknown0, $shapeRenderer, $textureID, $brightness, var$6, var$7, $ptr);
    }
    function cmmi_PrimedTnt_playerTouch($this, $player) {
        var $takeEntityAnim;
        if ($this.$defused) {
            cmmlt_Block_$callClinit();
            if (cmmp_Player_addResource($player, cmmlt_Block_TNT.$id)) {
                $takeEntityAnim = cmmi_TakeEntityAnim__init_($this.$level2, $this, $player);
                cmml_Level_addEntity($this.$level2, $takeEntityAnim);
                cmm_Entity_remove($this);
            }
        }
    }
    function cmmi_PrimedTnt_hurt($this, $entity, $damage) {
        var $item, var$4, var$5, var$6, var$7;
        if (!$this.$removed && $entity instanceof cmmp_Player) {
            cmm_Entity_remove($this);
            $item = new cmmi_Item;
            var$4 = $this.$level2;
            var$5 = $this.$x;
            var$6 = $this.$y;
            var$7 = $this.$z;
            cmmlt_Block_$callClinit();
            cmmi_Item__init_0($item, var$4, var$5, var$6, var$7, cmmlt_Block_TNT.$id);
            cmml_Level_addEntity($this.$level2, $item);
        }
    }
    function cmmi_PrimedTnt_isPickable($this) {
        return $this.$removed ? 0 : 1;
    }
    function jur_AbstractCharClass$1() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$lHS = null;
        a.$this$03 = null;
    }
    function jur_AbstractCharClass$1_contains($this, $ch) {
        var $index;
        $index = $ch - 55296 | 0;
        return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS, $index) : 0;
    }
    function jur_AbstractCharClass$2() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$lHS0 = null;
        a.$val$thisClass = null;
        a.$this$04 = null;
    }
    function jur_AbstractCharClass$2_contains($this, $ch) {
        var $index, $containslHS;
        $index = $ch - 55296 | 0;
        $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS0, $index) : 0;
        return $this.$val$thisClass.$contains($ch) && !$containslHS ? 1 : 0;
    }
    function jur_CharClass$18() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$bs = null;
        a.$this$022 = null;
    }
    function jur_CharClass$18_contains($this, $ch) {
        return $this.$alt0 ^ ju_BitSet_get($this.$val$bs, $ch);
    }
    function jur_CharClass$18_toString($this) {
        var $temp, $i, var$3;
        $temp = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($temp);
        $i = ju_BitSet_nextSetBit($this.$val$bs, 0);
        while ($i >= 0) {
            jl_AbstractStringBuilder_append2($temp, jl_Character_toChars($i));
            jl_AbstractStringBuilder_append($temp, 124);
            $i = ju_BitSet_nextSetBit($this.$val$bs, $i + 1 | 0);
        }
        var$3 = $temp.$length0;
        if (var$3 > 0)
            jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
        return jl_AbstractStringBuilder_toString($temp);
    }
    function jur_CharClass$1() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$cc1 = null;
        a.$this$07 = null;
    }
    function jur_CharClass$1_contains($this, $ch) {
        return $this.$val$cc1.$contains($ch);
    }
    function jur_CharClass$3() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt1 = 0;
        a.$val$cc2 = null;
        a.$this$08 = null;
    }
    function jur_CharClass$3_contains($this, $ch) {
        return !($this.$val$curAlt1 ^ ju_BitSet_get($this.$this$08.$bits, $ch)) && !($this.$val$curAlt1 ^ $this.$this$08.$inverted ^ $this.$val$cc2.$contains($ch)) ? 0 : 1;
    }
    function jur_CharClass$2() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt2 = 0;
        a.$val$cc3 = null;
        a.$this$09 = null;
    }
    function jur_CharClass$2_contains($this, $ch) {
        return !($this.$val$curAlt2 ^ ju_BitSet_get($this.$this$09.$bits, $ch)) && !($this.$val$curAlt2 ^ $this.$this$09.$inverted ^ $this.$val$cc3.$contains($ch)) ? 1 : 0;
    }
    function jur_CharClass$5() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt = 0;
        a.$val$nb = null;
        a.$val$cc = null;
        a.$this$05 = null;
    }
    function jur_CharClass$5_contains($this, $ch) {
        return $this.$val$curAlt ^ (!$this.$val$nb.$contains($ch) && !$this.$val$cc.$contains($ch) ? 0 : 1);
    }
    function jur_CharClass$4() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt0 = 0;
        a.$val$nb0 = null;
        a.$val$cc0 = null;
        a.$this$06 = null;
    }
    function jur_CharClass$4_contains($this, $ch) {
        return $this.$val$curAlt0 ^ (!$this.$val$nb0.$contains($ch) && !$this.$val$cc0.$contains($ch) ? 0 : 1) ? 0 : 1;
    }
    function jur_CharClass$7() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz1 = null;
        a.$this$012 = null;
    }
    function jur_CharClass$7_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz1, $ch);
    }
    function jur_CharClass$6() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz2 = null;
        a.$this$013 = null;
    }
    function jur_CharClass$6_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz2, $ch) ? 0 : 1;
    }
    function jur_CharClass$9() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz3 = null;
        a.$val$curAlt5 = 0;
        a.$this$014 = null;
    }
    function jur_CharClass$9_contains($this, $ch) {
        return !jur_CharClass_contains($this.$val$clazz3, $ch) && !($this.$val$curAlt5 ^ ju_BitSet_get($this.$this$014.$bits, $ch)) ? 0 : 1;
    }
    function jur_CharClass$8() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz4 = null;
        a.$val$curAlt6 = 0;
        a.$this$015 = null;
    }
    function jur_CharClass$8_contains($this, $ch) {
        return !jur_CharClass_contains($this.$val$clazz4, $ch) && !($this.$val$curAlt6 ^ ju_BitSet_get($this.$this$015.$bits, $ch)) ? 1 : 0;
    }
    function jur_CharClass$11() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt3 = 0;
        a.$val$nb1 = null;
        a.$val$clazz = null;
        a.$this$010 = null;
    }
    function jur_CharClass$11_contains($this, $ch) {
        return !($this.$val$curAlt3 ^ $this.$val$nb1.$contains($ch)) && !jur_CharClass_contains($this.$val$clazz, $ch) ? 0 : 1;
    }
    function jur_CharClass$10() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt4 = 0;
        a.$val$nb2 = null;
        a.$val$clazz0 = null;
        a.$this$011 = null;
    }
    function jur_CharClass$10_contains($this, $ch) {
        return !($this.$val$curAlt4 ^ $this.$val$nb2.$contains($ch)) && !jur_CharClass_contains($this.$val$clazz0, $ch) ? 1 : 0;
    }
    function jur_CharClass$13() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz7 = null;
        a.$this$018 = null;
    }
    function jur_CharClass$13_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz7, $ch);
    }
    function jur_CharClass$12() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz8 = null;
        a.$this$019 = null;
    }
    function jur_CharClass$12_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz8, $ch) ? 0 : 1;
    }
    function jur_CharClass$15() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz9 = null;
        a.$val$curAlt9 = 0;
        a.$this$020 = null;
    }
    function jur_CharClass$15_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz9, $ch) && $this.$val$curAlt9 ^ ju_BitSet_get($this.$this$020.$bits, $ch) ? 1 : 0;
    }
    function jur_CharClass$14() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$clazz10 = null;
        a.$val$curAlt10 = 0;
        a.$this$021 = null;
    }
    function jur_CharClass$14_contains($this, $ch) {
        return jur_CharClass_contains($this.$val$clazz10, $ch) && $this.$val$curAlt10 ^ ju_BitSet_get($this.$this$021.$bits, $ch) ? 0 : 1;
    }
    function jur_CharClass$17() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt7 = 0;
        a.$val$nb3 = null;
        a.$val$clazz5 = null;
        a.$this$016 = null;
    }
    function jur_CharClass$17_contains($this, $ch) {
        return $this.$val$curAlt7 ^ $this.$val$nb3.$contains($ch) && jur_CharClass_contains($this.$val$clazz5, $ch) ? 1 : 0;
    }
    function jur_CharClass$16() {
        var a = this; jur_AbstractCharClass.call(a);
        a.$val$curAlt8 = 0;
        a.$val$nb4 = null;
        a.$val$clazz6 = null;
        a.$this$017 = null;
    }
    function jur_CharClass$16_contains($this, $ch) {
        return $this.$val$curAlt8 ^ $this.$val$nb4.$contains($ch) && jur_CharClass_contains($this.$val$clazz6, $ch) ? 0 : 1;
    }
    var ju_ConcurrentModificationException = $rt_classWithoutFields(jl_RuntimeException);
    function cmml_BlockMap$Slot() {
        var a = this; jl_Object.call(a);
        a.$xSlot = 0;
        a.$ySlot = 0;
        a.$zSlot = 0;
        a.$blockMap1 = null;
    }
    function cmml_BlockMap$Slot__init_(var_0, var_1) {
        var var_2 = new cmml_BlockMap$Slot();
        cmml_BlockMap$Slot__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmml_BlockMap$Slot_init($this, $var1, $var2, $var3) {
        var var$4, var$5, var$6, var$7;
        var$4 = $var1 / 16.0 | 0;
        $this.$xSlot = var$4;
        var$5 = $var2 / 16.0 | 0;
        $this.$ySlot = var$5;
        var$6 = $var3 / 16.0 | 0;
        $this.$zSlot = var$6;
        if (var$4 < 0)
            $this.$xSlot = 0;
        if (var$5 < 0)
            $this.$ySlot = 0;
        if (var$6 < 0)
            $this.$zSlot = 0;
        var$4 = $this.$xSlot;
        var$7 = $this.$blockMap1;
        var$5 = var$7.$width2;
        if (var$4 >= var$5)
            $this.$xSlot = var$5 - 1 | 0;
        var$4 = $this.$ySlot;
        var$5 = var$7.$depth0;
        if (var$4 >= var$5)
            $this.$ySlot = var$5 - 1 | 0;
        var$4 = $this.$zSlot;
        var$5 = var$7.$height2;
        if (var$4 >= var$5)
            $this.$zSlot = var$5 - 1 | 0;
        return $this;
    }
    function cmml_BlockMap$Slot_add($this, $var1) {
        var var$2, var$3, var$4, var$5;
        var$2 = $this.$xSlot;
        if (var$2 >= 0) {
            var$3 = $this.$ySlot;
            if (var$3 >= 0) {
                var$4 = $this.$zSlot;
                if (var$4 >= 0) {
                    var$5 = $this.$blockMap1;
                    ju_ArrayList_add(var$5.$entityGrid.data[$rt_imul($rt_imul(var$4, var$5.$depth0) + var$3 | 0, var$5.$width2) + var$2 | 0], $var1);
                }
            }
        }
    }
    function cmml_BlockMap$Slot_remove($this, $var1) {
        var var$2, var$3, var$4, var$5;
        var$2 = $this.$xSlot;
        if (var$2 >= 0) {
            var$3 = $this.$ySlot;
            if (var$3 >= 0) {
                var$4 = $this.$zSlot;
                if (var$4 >= 0) {
                    var$5 = $this.$blockMap1;
                    ju_ArrayList_remove0(var$5.$entityGrid.data[$rt_imul($rt_imul(var$4, var$5.$depth0) + var$3 | 0, var$5.$width2) + var$2 | 0], $var1);
                }
            }
        }
    }
    function cmml_BlockMap$Slot__init_0($this, $var1, $var2) {
        $this.$blockMap1 = $var1;
    }
    var cmml_SyntheticClass = $rt_classWithoutFields();
    function cmmma_BasicAttackAI() {
        cmmma_BasicAI.call(this);
        this.$damage0 = 0;
    }
    function cmmma_BasicAttackAI__init_0() {
        var var_0 = new cmmma_BasicAttackAI();
        cmmma_BasicAttackAI__init_(var_0);
        return var_0;
    }
    function cmmma_BasicAttackAI__init_($this) {
        cmmma_BasicAI__init_($this);
        $this.$damage0 = 6;
    }
    function cmmma_BasicAttackAI_update($this) {
        cmmma_BasicAI_update($this);
        if ($this.$mob.$health > 0)
            cmmma_BasicAttackAI_doAttack($this);
    }
    function cmmma_BasicAttackAI_doAttack($this) {
        var $var1, var$2, $var3, $var4, $var5, var$6, var$7;
        $var1 = $this.$level4.$player0;
        var$2 = $this.$attackTarget;
        if (var$2 !== null && var$2.$removed)
            $this.$attackTarget = null;
        if ($var1 !== null && $this.$attackTarget === null) {
            $var3 = $var1.$x;
            var$2 = $this.$mob;
            $var3 = $var3 - var$2.$x;
            $var4 = $var1.$y - var$2.$y;
            $var5 = $var1.$z - var$2.$z;
            if ($var3 * $var3 + $var4 * $var4 + $var5 * $var5 < 256.0)
                $this.$attackTarget = $var1;
        }
        var$2 = $this.$attackTarget;
        if (var$2 !== null) {
            $var3 = var$2.$x;
            $var1 = $this.$mob;
            $var3 = $var3 - $var1.$x;
            $var4 = var$2.$y - $var1.$y;
            $var5 = var$2.$z - $var1.$z;
            var$6 = $var3 * $var3 + $var4 * $var4 + $var5 * $var5;
            if (var$6 > 1024.0 && !ju_Random_nextInt($this.$random4, 100))
                $this.$attackTarget = null;
            if ($this.$attackTarget !== null) {
                var$7 = cmu_MathHelper_sqrt(var$6);
                $this.$mob.$yRot = jl_Math_atan2($var5, $var3) * 180.0 / 3.1415927410125732 - 90.0;
                $this.$mob.$xRot =  -(jl_Math_atan2($var4, var$7) * 180.0 / 3.1415927410125732);
                if (cmu_MathHelper_sqrt(var$6) < 2.0 && !$this.$attackDelay)
                    $this.$attack($this.$attackTarget);
            }
        }
    }
    function cmmma_BasicAttackAI_attack($this, $var1) {
        var var$2, var$3, var$4, $var2;
        var$2 = $this.$level4;
        var$3 = new cmmm_Vec3D;
        var$4 = $this.$mob;
        cmmm_Vec3D__init_0(var$3, var$4.$x, var$4.$y, var$4.$z);
        if (cmml_Level_clip(var$2, var$3, cmmm_Vec3D__init_($var1.$x, $var1.$y, $var1.$z)) !== null)
            return 0;
        $this.$mob.$attackTime = 5;
        $this.$attackDelay = ju_Random_nextInt($this.$random4, 20) + 10 | 0;
        $var2 = (ju_Random_nextFloat($this.$random4) + ju_Random_nextFloat($this.$random4)) / 2.0 * $this.$damage0 + 1.0 | 0;
        $var1.$hurt($this.$mob, $var2);
        $this.$noActionTime = 0;
        return 1;
    }
    function cmmma_BasicAttackAI_hurt($this, $var1, $var2) {
        cmmma_BasicAI_hurt($this, $var1, $var2);
        if ($var1 instanceof cmmi_Arrow)
            $var1 = $var1.$owner0;
        if ($var1 !== null && !jl_Object_equals(jl_Object_getClass($var1), jl_Object_getClass($this.$mob)))
            $this.$attackTarget = $var1;
    }
    function cmmm_Skeleton$1() {
        cmmma_BasicAttackAI.call(this);
        this.$parent0 = null;
    }
    function cmmm_Skeleton$1_tick($this, $var1, $var2) {
        cmmma_BasicAI_tick($this, $var1, $var2);
        if ($var2.$health > 0 && !ju_Random_nextInt($this.$random4, 30) && $this.$attackTarget !== null) {
            $var2 = $this.$parent0;
            cmml_Level_addEntity($var1, cmmi_Arrow__init_($var1, $var2, $var2.$x, $var2.$y, $var2.$z, $var2.$yRot + 180.0 + jl_Math_random() * 45.0 - 22.5, $var2.$xRot - (jl_Math_random() * 45.0 - 10.0), 1.0));
        }
    }
    function cmmm_Skeleton$1_beforeRemove($this) {
        var var$1, var$2, var$3, var$4;
        var$1 = $this.$parent0;
        var$2 = (jl_Math_random() + jl_Math_random()) * 3.0 + 4.0 | 0;
        var$3 = 0;
        while (var$3 < var$2) {
            var$4 = var$1.$level2;
            cmml_Level_addEntity(var$4, cmmi_Arrow__init_(var$4, var$4.$player0, var$1.$x, var$1.$y - 0.20000000298023224, var$1.$z, jl_Math_random() * 360.0,  -jl_Math_random() * 60.0, 0.4000000059604645));
            var$3 = var$3 + 1 | 0;
        }
    }
    function cmmm_Creeper$1() {
        cmmma_BasicAttackAI.call(this);
        this.$creeper0 = null;
    }
    function cmmm_Creeper$1_attack($this, $var1) {
        if (!cmmma_BasicAttackAI_attack($this, $var1))
            return 0;
        $this.$mob.$hurt($var1, 6);
        return 1;
    }
    function cmmm_Creeper$1_beforeRemove($this) {
        var var$1, var$2, $var2, $var3, $var4, $var5, $var6, $var7, $var8, var$10, var$11, var$12;
        var$1 = $this.$level4;
        var$2 = $this.$mob;
        cmml_Level_explode(var$1, var$2, var$2.$x, var$2.$y, var$2.$z, 4.0);
        $var2 = 0;
        while ($var2 < 500) {
            $var3 = ju_Random_nextGaussian($this.$random4) * 4.0 / 4.0;
            $var4 = ju_Random_nextGaussian($this.$random4) * 4.0 / 4.0;
            $var5 = ju_Random_nextGaussian($this.$random4) * 4.0 / 4.0;
            $var6 = cmu_MathHelper_sqrt($var3 * $var3 + $var4 * $var4 + $var5 * $var5);
            $var7 = $var3 / $var6 / $var6;
            $var8 = $var4 / $var6 / $var6;
            var$10 = $var5 / $var6 / $var6;
            var$11 = $this.$level4;
            var$2 = var$11.$particleEngine;
            var$12 = new cmmp_TerrainParticle;
            var$1 = $this.$mob;
            $var3 = var$1.$x + $var3;
            $var6 = var$1.$y + $var4;
            $var5 = var$1.$z + $var5;
            cmmlt_Block_$callClinit();
            cmmp_TerrainParticle__init_0(var$12, var$11, $var3, $var6, $var5, $var7, $var8, var$10, cmmlt_Block_LEAVES);
            cmmp_ParticleManager_spawnParticle(var$2, var$12);
            $var2 = $var2 + 1 | 0;
        }
    }
    var cmmma_JumpAttackAI = $rt_classWithoutFields(cmmma_BasicAttackAI);
    function cmmma_JumpAttackAI_jumpFromGround($this) {
        var var$1;
        if ($this.$attackTarget === null)
            cmmma_BasicAI_jumpFromGround($this);
        else {
            var$1 = $this.$mob;
            var$1.$xd0 = 0.0;
            var$1.$zd0 = 0.0;
            cmm_Entity_moveRelative(var$1, 0.0, 1.0, 0.6000000238418579);
            $this.$mob.$yd0 = 0.5;
        }
    }
    function cmmm_Sheep$1() {
        cmmma_BasicAI.call(this);
        this.$sheep0 = null;
    }
    function cmmm_Sheep$1_update($this) {
        var $var1, $var2, var$3, $var4, $var3, $var5, var$7;
        $var1 = cmu_MathHelper_sin($this.$sheep0.$yRot * 3.1415927410125732 / 180.0);
        $var2 = cmu_MathHelper_cos($this.$sheep0.$yRot * 3.1415927410125732 / 180.0);
        $var1 = (-0.699999988079071) * $var1;
        $var2 = 0.699999988079071 * $var2;
        var$3 = $this.$mob;
        $var4 = var$3.$x + $var1 | 0;
        $var3 = var$3.$y - 2.0 | 0;
        $var5 = var$3.$z + $var2 | 0;
        if (!$this.$sheep0.$grazing) {
            $var4 = cmml_Level_getTile($this.$level4, $var4, $var3, $var5);
            cmmlt_Block_$callClinit();
            if ($var4 == cmmlt_Block_GRASS.$id) {
                var$3 = $this.$sheep0;
                var$3.$grazing = 1;
                var$3.$grazingTime = 0;
            }
            cmmma_BasicAI_update($this);
        } else {
            var$7 = cmml_Level_getTile($this.$level4, $var4, $var3, $var5);
            cmmlt_Block_$callClinit();
            if (var$7 != cmmlt_Block_GRASS.$id)
                $this.$sheep0.$grazing = 0;
            else {
                var$3 = $this.$sheep0;
                var$7 = var$3.$grazingTime + 1 | 0;
                var$3.$grazingTime = var$7;
                if (var$7 == 60) {
                    cmml_Level_setTile($this.$level4, $var4, $var3, $var5, cmmlt_Block_DIRT.$id);
                    if (!ju_Random_nextInt($this.$random4, 5))
                        $this.$sheep0.$hasFur = 1;
                }
                $this.$xxa0 = 0.0;
                $this.$yya0 = 0.0;
                $this.$mob.$xRot = 40 + ((($this.$sheep0.$grazingTime / 2 | 0) % 2 | 0) * 10 | 0) | 0;
            }
        }
    }
    function ji_ByteArrayOutputStream() {
        var a = this; ji_OutputStream.call(a);
        a.$buf1 = null;
        a.$count3 = 0;
    }
    function ji_ByteArrayOutputStream__init_() {
        var var_0 = new ji_ByteArrayOutputStream();
        ji_ByteArrayOutputStream__init_0(var_0);
        return var_0;
    }
    function ji_ByteArrayOutputStream__init_0($this) {
        $this.$buf1 = $rt_createByteArray(32);
    }
    function ji_ByteArrayOutputStream_write($this, $b, $off, $len) {
        var $i, var$5, var$6, var$7, var$8;
        $i = $this.$count3 + $len | 0;
        var$5 = $this.$buf1.data.length;
        if (var$5 < $i) {
            var$6 = jl_Math_max($i, (var$5 * 3 | 0) / 2 | 0);
            $this.$buf1 = ju_Arrays_copyOf0($this.$buf1, var$6);
        }
        $i = 0;
        while ($i < $len) {
            var$7 = $b.data;
            var$8 = $this.$buf1.data;
            var$6 = $this.$count3;
            $this.$count3 = var$6 + 1 | 0;
            var$5 = $off + 1 | 0;
            var$8[var$6] = var$7[$off];
            $i = $i + 1 | 0;
            $off = var$5;
        }
    }
    function ji_ByteArrayOutputStream_toByteArray($this) {
        return ju_Arrays_copyOf0($this.$buf1, $this.$count3);
    }
    var jl_AbstractStringBuilder$Constants = $rt_classWithoutFields();
    var jl_AbstractStringBuilder$Constants_intPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_longPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null;
    var jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null;
    var jl_AbstractStringBuilder$Constants_floatAnalysisResult = null;
    function jl_AbstractStringBuilder$Constants__clinit_() {
        jl_AbstractStringBuilder$Constants_intPowersOfTen = $rt_createIntArrayFromData([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);
        jl_AbstractStringBuilder$Constants_longPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(1000), Long_fromInt(10000), Long_fromInt(100000), Long_fromInt(1000000), Long_fromInt(10000000), Long_fromInt(100000000), Long_fromInt(1000000000), Long_create(1410065408, 2), Long_create(1215752192, 23), Long_create(3567587328, 232), Long_create(1316134912, 2328), Long_create(276447232, 23283), Long_create(2764472320, 232830), Long_create(1874919424, 2328306),
        Long_create(1569325056, 23283064), Long_create(2808348672, 232830643)]);
        jl_AbstractStringBuilder$Constants_longLogPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(10000), Long_fromInt(100000000), Long_create(1874919424, 2328306)]);
        jl_AbstractStringBuilder$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
        jl_AbstractStringBuilder$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
    }
    var otcit_FloatAnalyzer = $rt_classWithoutFields();
    var otcit_FloatAnalyzer_MAX_MANTISSA = 0;
    var otcit_FloatAnalyzer_mantissa10Table = null;
    var otcit_FloatAnalyzer_exp10Table = null;
    function otcit_FloatAnalyzer_analyze($d, $result) {
        var $bits, $mantissa, $exponent, var$6, $decExponent, $posCmp, $upperPos, $mantissaShift, $decMantissa, $decMantissaHi, $decMantissaLow, $lowerPos, $lowerPos_0, $upperPos_0;
        $bits = jl_Float_floatToIntBits($d);
        $result.$sign = !($bits & (-2147483648)) ? 0 : 1;
        $mantissa = $bits & 8388607;
        $exponent = $bits >> 23 & 255;
        if (!$mantissa && !$exponent) {
            $result.$mantissa = 0;
            $result.$exponent = 0;
            return;
        }
        if ($exponent)
            $bits = $mantissa | 8388608;
        else {
            $bits = $mantissa << 1;
            while (Long_eq(Long_and(Long_fromInt($bits), Long_fromInt(8388608)), Long_ZERO)) {
                $bits = $bits << 1;
                $exponent = $exponent + (-1) | 0;
            }
        }
        var$6 = otcit_FloatAnalyzer_exp10Table.data;
        $mantissa = 0;
        $decExponent = var$6.length;
        if ($mantissa > $decExponent) {
            $result = new jl_IllegalArgumentException;
            jl_Throwable__init_0($result);
            $rt_throw($result);
        }
        $posCmp = $decExponent - 1 | 0;
        a: {
            while (true) {
                if ($mantissa > $posCmp) {
                    $decExponent = ( -$mantissa | 0) - 1 | 0;
                    break a;
                }
                $decExponent = ($mantissa + $posCmp | 0) / 2 | 0;
                $upperPos = var$6[$decExponent];
                if ($upperPos == $exponent)
                    break;
                if ($exponent >= $upperPos)
                    $mantissa = $decExponent + 1 | 0;
                else
                    $posCmp = $decExponent - 1 | 0;
            }
        }
        if ($decExponent < 0)
            $decExponent =  -$decExponent | 0;
        $mantissa = $decExponent + 1 | 0;
        $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
        $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
        if ($decMantissa < otcit_FloatAnalyzer_MAX_MANTISSA) {
            while ($rt_ucmp($decMantissa, otcit_FloatAnalyzer_MAX_MANTISSA) <= 0) {
                $decExponent = $decExponent + (-1) | 0;
                $decMantissa = ($decMantissa * 10 | 0) + 9 | 0;
            }
            var$6 = otcit_FloatAnalyzer_exp10Table.data;
            $mantissa = $decExponent + 1 | 0;
            $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
            $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
        }
        $mantissa = $bits << 1;
        $bits = $mantissa + 1 | 0;
        var$6 = otcit_FloatAnalyzer_mantissa10Table.data;
        $exponent = $decExponent + 1 | 0;
        $posCmp = var$6[$exponent];
        $upperPos = $mantissaShift - 1 | 0;
        $decMantissaHi = otcit_FloatAnalyzer_mulAndShiftRight($bits, $posCmp, $upperPos);
        $decMantissaLow = otcit_FloatAnalyzer_mulAndShiftRight($mantissa - 1 | 0, otcit_FloatAnalyzer_mantissa10Table.data[$exponent], $upperPos);
        $lowerPos = 1;
        while (true) {
            $lowerPos_0 = $lowerPos * 10 | 0;
            if ($rt_ucmp($rt_udiv($decMantissa, $lowerPos_0), $rt_udiv($decMantissaLow, $lowerPos_0)) <= 0)
                break;
            $lowerPos = $lowerPos_0;
        }
        $upperPos = 1;
        while (true) {
            $upperPos_0 = $upperPos * 10 | 0;
            if ($rt_ucmp($rt_udiv($decMantissa, $upperPos_0), $rt_udiv($decMantissaHi, $upperPos_0)) >= 0)
                break;
            $upperPos = $upperPos_0;
        }
        $posCmp = $rt_ucmp($lowerPos, $upperPos);
        $mantissa = $posCmp > 0 ? $rt_imul($rt_udiv($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? $rt_imul($rt_udiv($decMantissa, $upperPos), $upperPos) + $upperPos | 0 : $rt_imul($rt_udiv(($decMantissa + ($upperPos / 2 | 0) | 0), $upperPos), $upperPos);
        if (jl_Long_compareUnsigned(Long_fromInt($mantissa), Long_fromInt(1000000000)) >= 0)
            while (true) {
                $decExponent = $decExponent + 1 | 0;
                $mantissa = $rt_udiv($mantissa, 10);
                if ($rt_ucmp($mantissa, 1000000000) < 0)
                    break;
            }
        else if ($rt_ucmp($mantissa, 100000000) < 0) {
            $decExponent = $decExponent + (-1) | 0;
            $mantissa = $mantissa * 10 | 0;
        }
        $result.$mantissa = $mantissa;
        $result.$exponent = $decExponent - 50 | 0;
    }
    function otcit_FloatAnalyzer_mulAndShiftRight($a, $b, $shift) {
        return Long_lo(Long_shru(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), 32 - $shift | 0));
    }
    function otcit_FloatAnalyzer__clinit_() {
        otcit_FloatAnalyzer_MAX_MANTISSA = $rt_udiv((-1), 10);
        otcit_FloatAnalyzer_mantissa10Table = $rt_createIntArrayFromData([(-18543760), (-873828468), (-1558056233), (-2105438446), (-791721136), (-1492370368), (-2052889754), (-707643228), (-1425108042), (-1999079893), (-621547450), (-1356231419), (-1943978595), (-533385374), (-1285701758), (-1887554866), (-443107408), (-1213479385), (-1829776968), (-350662770), (-1139523676), (-1770612400), (-255999462), (-1063793029), (-1710027882), (-159064234), (-986244846), (-1647989336), (-59802560), (-906835507), (-1584461865),
        (-2126562952), (-825520345), (-1519409735), (-2074521247), (-742253618), (-1452796353), (-2021230542), (-656988489), (-1384584251), (-1966660860), (-569676998), (-1314735058), (-1910781505), (-480270031), (-1243209484), (-1853561046), (-388717296), (-1169967296), (-1794967296), (-294967296), (-1094967296), (-1734967296), (-198967296), (-1018167296), (-1673527296), (-100663296), (-939524096), (-1610612736), (-2147483648), (-858993460), (-1546188227), (-2095944041), (-776530088), (-1480217529), (-2043167483),
        (-692087595), (-1412663535), (-1989124287), (-605618482), (-1343488245), (-1933784055), (-517074110), (-1272652747), (-1877115657), (-426404674), (-1200117198), (-1819087218), (-333559171), (-1125840796), (-1759666096), (-238485376), (-1049781760), (-1698818867), (-141129810), (-971897307), (-1636511305), (-41437710), (-892143627), (-1572708361), (-2117160148), (-810475859), (-1507374147), (-2064892777), (-726848065), (-1440471911), (-2011370988), (-641213203), (-1371964022), (-1956564688)]);
        otcit_FloatAnalyzer_exp10Table = $rt_createIntArrayFromData([(-37), (-34), (-31), (-28), (-24), (-21), (-18), (-14), (-11), (-8), (-4), (-1), 2, 6, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 46, 49, 52, 56, 59, 62, 65, 69, 72, 75, 79, 82, 85, 89, 92, 95, 99, 102, 105, 109, 112, 115, 119, 122, 125, 129, 132, 135, 139, 142, 145, 149, 152, 155, 158, 162, 165, 168, 172, 175, 178, 182, 185, 188, 192, 195, 198, 202, 205, 208, 212, 215, 218, 222, 225, 228, 232, 235, 238, 242, 245, 248, 252, 255, 258, 261, 265,
        268, 271, 275, 278, 281, 285, 288, 291]);
    }
    function otcit_FloatAnalyzer$Result() {
        var a = this; jl_Object.call(a);
        a.$mantissa = 0;
        a.$exponent = 0;
        a.$sign = 0;
    }
    var jl_Long = $rt_classWithoutFields(jl_Number);
    var jl_Long_TYPE = null;
    function jl_Long_compareUnsigned(var$1, var$2) {
        return Long_ucompare(var$1, var$2);
    }
    function jl_Long__clinit_() {
        jl_Long_TYPE = $rt_cls($rt_longcls());
    }
    var otcit_DoubleAnalyzer$Result = $rt_classWithoutFields();
    var jnc_CoderMalfunctionError = $rt_classWithoutFields(jl_Error);
    var jur_BackReferencedSingleSet = $rt_classWithoutFields(jur_SingleSet);
    function jur_BackReferencedSingleSet_find($this, $startSearch, $testString, $matchResult) {
        var $res, $lastIndex, $saveStart;
        $res = 0;
        $lastIndex = $matchResult.$rightBound0;
        a: {
            while (true) {
                if ($startSearch > $lastIndex) {
                    $startSearch = $res;
                    break a;
                }
                $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
                $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
                if ($res >= 0)
                    break;
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
                $startSearch = $startSearch + 1 | 0;
            }
        }
        return $startSearch;
    }
    function jur_BackReferencedSingleSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
        var $res, $saveStart;
        $res = 0;
        a: {
            while (true) {
                if ($startSearch < $stringIndex) {
                    $startSearch = $res;
                    break a;
                }
                $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
                $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
                if ($res >= 0)
                    break;
                jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
                $startSearch = $startSearch + (-1) | 0;
            }
        }
        return $startSearch;
    }
    function jur_BackReferencedSingleSet_processBackRefReplacement($this) {
        return null;
    }
    var otci_Base64Impl = $rt_classWithoutFields();
    var otci_Base64Impl_alphabet = null;
    var otci_Base64Impl_urlAlphabet = null;
    var otci_Base64Impl_reverse = null;
    var otci_Base64Impl_urlReverse = null;
    function otci_Base64Impl_decode($text, $output, $mapping) {
        var $inputSize, $i, $triples, $c, $j, var$9, $a, $b, $c_0, $d, $out, $rem;
        $text = $text.data;
        $inputSize = $text.length;
        $i = $inputSize - 1 | 0;
        while ($i >= 0 && $text[$i] == 61) {
            $inputSize = $inputSize + (-1) | 0;
            $i = $i + (-1) | 0;
        }
        $triples = ($inputSize / 4 | 0) * 4 | 0;
        $c = 0;
        $j = 0;
        while ($c < $triples) {
            var$9 = $output.data;
            $i = $c + 1 | 0;
            $a = otci_Base64Impl_decode0($mapping, $text[$c]);
            $c = $i + 1 | 0;
            $b = otci_Base64Impl_decode0($mapping, $text[$i]);
            $i = $c + 1 | 0;
            $c_0 = otci_Base64Impl_decode0($mapping, $text[$c]);
            $c = $i + 1 | 0;
            $d = otci_Base64Impl_decode0($mapping, $text[$i]);
            $out = $a << 18 | $b << 12 | $c_0 << 6 | $d;
            $i = $j + 1 | 0;
            var$9[$j] = ($out >>> 16 | 0) << 24 >> 24;
            $a = $i + 1 | 0;
            var$9[$i] = ($out >>> 8 | 0) << 24 >> 24;
            $j = $a + 1 | 0;
            var$9[$a] = $out << 24 >> 24;
        }
        $rem = $inputSize - $c | 0;
        if ($rem == 2)
            $output.data[$j] = (otci_Base64Impl_decode0($mapping, $text[$c]) << 2 | (otci_Base64Impl_decode0($mapping, $text[$c + 1 | 0]) >>> 4 | 0)) << 24 >> 24;
        else if ($rem == 3) {
            $output = $output.data;
            $a = otci_Base64Impl_decode0($mapping, $text[$c]);
            $b = otci_Base64Impl_decode0($mapping, $text[$c + 1 | 0]);
            $c = otci_Base64Impl_decode0($mapping, $text[$c + 2 | 0]);
            $output[$j] = ($a << 2 | ($b >>> 4 | 0)) << 24 >> 24;
            $output[$j + 1 | 0] = ($b << 4 | ($c >>> 2 | 0)) << 24 >> 24;
        }
    }
    function otci_Base64Impl_decode0($mapping, $c) {
        return $mapping.data[$c];
    }
    function otci_Base64Impl__clinit_() {
        var var$1, var$2, var$3, $i, $c, $c_0;
        var$1 = $rt_createByteArray(64);
        var$2 = var$1.data;
        otci_Base64Impl_alphabet = var$1;
        var$1 = $rt_createByteArray(64);
        var$3 = var$1.data;
        otci_Base64Impl_urlAlphabet = var$1;
        var$1 = $rt_createIntArray(256);
        otci_Base64Impl_reverse = var$1;
        otci_Base64Impl_urlReverse = $rt_createIntArray(256);
        $i = 0;
        $c = 65;
        while ($c <= 90) {
            $c_0 = $c << 24 >> 24;
            var$2[$i] = $c_0;
            var$3[$i] = $c_0;
            $i = $i + 1 | 0;
            $c = ($c + 1 | 0) & 65535;
        }
        $c = 97;
        while ($c <= 122) {
            $c_0 = $c << 24 >> 24;
            var$2[$i] = $c_0;
            var$3[$i] = $c_0;
            $i = $i + 1 | 0;
            $c = ($c + 1 | 0) & 65535;
        }
        $c_0 = 48;
        while ($c_0 <= 57) {
            $c = $c_0 << 24 >> 24;
            var$2[$i] = $c;
            var$3[$i] = $c;
            $i = $i + 1 | 0;
            $c_0 = ($c_0 + 1 | 0) & 65535;
        }
        var$2[$i] = 43;
        var$3[$i] = 45;
        $i = $i + 1 | 0;
        var$2[$i] = 47;
        var$3[$i] = 95;
        ju_Arrays_fill(var$1, (-1));
        ju_Arrays_fill(otci_Base64Impl_urlReverse, (-1));
        $c_0 = 0;
        while (true) {
            var$1 = otci_Base64Impl_alphabet.data;
            if ($c_0 >= var$1.length)
                break;
            otci_Base64Impl_reverse.data[var$1[$c_0]] = $c_0;
            otci_Base64Impl_urlReverse.data[otci_Base64Impl_urlAlphabet.data[$c_0]] = $c_0;
            $c_0 = $c_0 + 1 | 0;
        }
    }
    function cmmg_OptionsScreen() {
        var a = this; cmmg_GuiScreen.call(a);
        a.$parent2 = null;
        a.$title1 = null;
        a.$settings3 = null;
    }
    function cmmg_OptionsScreen__init_(var_0, var_1) {
        var var_2 = new cmmg_OptionsScreen();
        cmmg_OptionsScreen__init_0(var_2, var_0, var_1);
        return var_2;
    }
    function cmmg_OptionsScreen__init_0($this, $var1, $var2) {
        cmmg_GuiScreen__init_($this);
        $this.$title1 = $rt_s(617);
        $this.$parent2 = $var1;
        $this.$settings3 = $var2;
    }
    function cmmg_OptionsScreen_onOpen($this) {
        var $var1, var$2;
        $var1 = 0;
        while (true) {
            var$2 = $this.$settings3;
            if ($var1 >= var$2.$settingCount)
                break;
            ju_ArrayList_add($this.$buttons, cmmg_OptionButton__init_($var1, (($this.$width4 / 2 | 0) - 155 | 0) + (($var1 % 2 | 0) * 160 | 0) | 0, ($this.$height4 / 6 | 0) + (24 * ($var1 >> 1) | 0) | 0, cmm_GameSettings_getSetting(var$2, $var1)));
            $var1 = $var1 + 1 | 0;
        }
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(100, ($this.$width4 / 2 | 0) - 100 | 0, (($this.$height4 / 6 | 0) + 120 | 0) + 12 | 0, $rt_s(618)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(200, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 6 | 0) + 168 | 0, $rt_s(619)));
    }
    function cmmg_OptionsScreen_onButtonClick($this, $var1) {
        var var$2, var$3, var$4, var$5, var$6, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            if ($var1.$active) {
                var$2 = $var1.$id2;
                if (var$2 < 100) {
                    var$3 = $this.$settings3;
                    var$4 = 1;
                    $ptr = 1;
                    continue main;
                }
                if ($var1.$id2 == 100) {
                    var$3 = $this.$minecraft5;
                    var$5 = new cmmg_ControlsScreen;
                    var$6 = $this.$settings3;
                    cmmg_GuiScreen__init_(var$5);
                    var$5.$title2 = $rt_s(620);
                    var$5.$selected1 = (-1);
                    var$5.$parent3 = $this;
                    var$5.$settings4 = var$6;
                    cmm_Minecraft_setCurrentScreen(var$3, var$5);
                }
                if ($var1.$id2 == 200)
                    cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent2);
            }
            return;
        case 1:
            cmm_GameSettings_toggleSetting(var$3, var$2, var$4);
            if ($rt_suspending()) {
                break main;
            }
            $var1.$text0 = cmm_GameSettings_getSetting($this.$settings3, $var1.$id2);
            if ($var1.$id2 == 100) {
                var$3 = $this.$minecraft5;
                var$5 = new cmmg_ControlsScreen;
                var$6 = $this.$settings3;
                cmmg_GuiScreen__init_(var$5);
                var$5.$title2 = $rt_s(620);
                var$5.$selected1 = (-1);
                var$5.$parent3 = $this;
                var$5.$settings4 = var$6;
                cmm_Minecraft_setCurrentScreen(var$3, var$5);
            }
            if ($var1.$id2 == 200)
                cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent2);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, var$2, var$3, var$4, var$5, var$6, $ptr);
    }
    function cmmg_OptionsScreen_render($this, $var1, $var2) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmmg_Screen_drawFadingBox(0, 0, $this.$width4, $this.$height4, 1610941696, (-1607454624));
            cmmg_Screen_drawCenteredString($this.$fontRenderer0, $this.$title1, $this.$width4 / 2 | 0, 20, 16777215);
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $ptr);
    }
    function cmmg_GenerateLevelScreen() {
        cmmg_GuiScreen.call(this);
        this.$parent4 = null;
    }
    function cmmg_GenerateLevelScreen__init_(var_0) {
        var var_1 = new cmmg_GenerateLevelScreen();
        cmmg_GenerateLevelScreen__init_0(var_1, var_0);
        return var_1;
    }
    function cmmg_GenerateLevelScreen__init_0($this, $var1) {
        cmmg_GuiScreen__init_($this);
        $this.$parent4 = $var1;
    }
    function cmmg_GenerateLevelScreen_onOpen($this) {
        ju_ArrayList_clear($this.$buttons);
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(0, ($this.$width4 / 2 | 0) - 100 | 0, $this.$height4 / 4 | 0, $rt_s(621)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(1, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 24 | 0, $rt_s(622)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(2, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 48 | 0, $rt_s(623)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(3, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 120 | 0, $rt_s(624)));
    }
    function cmmg_GenerateLevelScreen_onButtonClick($this, $var1) {
        var var$2, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$2 = $var1.$id2;
            if (var$2 == 3) {
                cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent4);
                return;
            }
            $var1 = $this.$minecraft5;
            $ptr = 1;
        case 1:
            cmm_Minecraft_generateLevel($var1, var$2);
            if ($rt_suspending()) {
                break main;
            }
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, null);
            cmm_Minecraft_grabMouse($this.$minecraft5);
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, var$2, $ptr);
    }
    function cmmg_GenerateLevelScreen_render($this, $var1, $var2) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmmg_Screen_drawFadingBox(0, 0, $this.$width4, $this.$height4, 1610941696, (-1607454624));
            cmmg_Screen_drawCenteredString($this.$fontRenderer0, $rt_s(625), $this.$width4 / 2 | 0, 40, 16777215);
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $ptr);
    }
    function cmmg_LoadLevelScreen() {
        var a = this; cmmg_GuiScreen.call(a);
        a.$parent5 = null;
        a.$finished0 = 0;
        a.$loaded0 = 0;
        a.$levels = null;
        a.$status0 = null;
        a.$title0 = null;
        a.$frozen = 0;
        a.$saving = 0;
        a.$selectedFile = null;
    }
    function cmmg_LoadLevelScreen__init_0(var_0) {
        var var_1 = new cmmg_LoadLevelScreen();
        cmmg_LoadLevelScreen__init_(var_1, var_0);
        return var_1;
    }
    function cmmg_LoadLevelScreen__init_($this, $var1) {
        cmmg_GuiScreen__init_($this);
        $this.$finished0 = 0;
        $this.$loaded0 = 0;
        $this.$levels = null;
        $this.$status0 = $rt_s(3);
        $this.$title0 = $rt_s(626);
        $this.$frozen = 0;
        $this.$saving = 0;
        $this.$parent5 = $var1;
    }
    function cmmg_LoadLevelScreen_run($this) {
        var var$1, $var2, $var3, var$4, var$5, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();var$1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            a: {
                b: {
                    try {
                        if ($this.$frozen) {
                            try {
                                var$1 = Long_fromInt(100);
                                $ptr = 1;
                                continue main;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_InterruptedException) {
                                    $var2 = $$je;
                                } else {
                                    throw $$e;
                                }
                            }
                            $var2.$printStackTrace();
                        }
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $var3 = $$je;
                            break b;
                        } else {
                            throw $$e;
                        }
                    }
                    c: {
                        try {
                            $this.$status0 = $rt_s(627);
                            var$4 = $this.$levels;
                            var$5 = var$4.data;
                            if (var$5.length < 5)
                                break c;
                            $this.$setLevels(var$4);
                            $this.$loaded0 = 1;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $var3 = $$je;
                                break b;
                            } else {
                                throw $$e;
                            }
                        }
                        return;
                    }
                    try {
                        $this.$status0 = var$5[0];
                        $this.$finished0 = 1;
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $var3 = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                }
                jl_Throwable_printStackTrace($var3);
                $this.$status0 = $rt_s(628);
                $this.$finished0 = 1;
            }
            return;
        case 1:
            a: {
                b: {
                    try {
                        d: {
                            try {
                                jl_Thread_sleep(var$1);
                                if ($rt_suspending()) {
                                    break main;
                                }
                                break d;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_InterruptedException) {
                                    $var2 = $$je;
                                } else {
                                    throw $$e;
                                }
                            }
                            $var2.$printStackTrace();
                        }
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $var3 = $$je;
                            break b;
                        } else {
                            throw $$e;
                        }
                    }
                    e: {
                        try {
                            $this.$status0 = $rt_s(627);
                            var$4 = $this.$levels;
                            var$5 = var$4.data;
                            if (var$5.length < 5)
                                break e;
                            $this.$setLevels(var$4);
                            $this.$loaded0 = 1;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $var3 = $$je;
                                break b;
                            } else {
                                throw $$e;
                            }
                        }
                        return;
                    }
                    try {
                        $this.$status0 = var$5[0];
                        $this.$finished0 = 1;
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $var3 = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                }
                jl_Throwable_printStackTrace($var3);
                $this.$status0 = $rt_s(628);
                $this.$finished0 = 1;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, var$1, $var2, $var3, var$4, var$5, $ptr);
    }
    function cmmg_LoadLevelScreen_setLevels($this, $var1) {
        var $var2, var$3;
        $var2 = 0;
        while ($var2 < 5) {
            var$3 = $var1.data;
            (ju_ArrayList_get($this.$buttons, $var2)).$active = var$3[$var2].$equals($rt_s(87)) ? 0 : 1;
            (ju_ArrayList_get($this.$buttons, $var2)).$text0 = var$3[$var2];
            (ju_ArrayList_get($this.$buttons, $var2)).$visible0 = 1;
            $var2 = $var2 + 1 | 0;
        }
    }
    function cmmg_LoadLevelScreen_onOpen($this) {
        var var$1, $var1;
        var$1 = new jl_Thread;
        jl_Thread_$callClinit();
        jl_Thread__init_2(var$1, $this, null);
        jl_Thread_start(var$1);
        $var1 = 0;
        while ($var1 < 5) {
            ju_ArrayList_add($this.$buttons, cmmg_Button__init_($var1, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 6 | 0) + ($var1 * 24 | 0) | 0, $rt_s(629)));
            (ju_ArrayList_get($this.$buttons, $var1)).$visible0 = 0;
            (ju_ArrayList_get($this.$buttons, $var1)).$active = 0;
            $var1 = $var1 + 1 | 0;
        }
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(5, ($this.$width4 / 2 | 0) - 100 | 0, (($this.$height4 / 6 | 0) + 120 | 0) + 12 | 0, $rt_s(630)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(6, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 6 | 0) + 168 | 0, $rt_s(624)));
    }
    function cmmg_LoadLevelScreen_onButtonClick($this, $var1) {
        var var$2, var$3;
        a: {
            if (!$this.$frozen && $var1.$active) {
                if ($this.$loaded0) {
                    var$2 = $var1.$id2;
                    if (var$2 < 5)
                        $this.$openLevel(var$2);
                }
                b: {
                    if (!$this.$finished0) {
                        if (!$this.$loaded0)
                            break b;
                        if ($var1.$id2 != 5)
                            break b;
                    }
                    $this.$frozen = 1;
                    var$3 = new cmmg_LevelDialog;
                    jl_Thread__init_(var$3);
                    var$3.$screen = $this;
                    var$3.$daemon = 1;
                }
                if (!$this.$finished0) {
                    if (!$this.$loaded0)
                        break a;
                    if ($var1.$id2 != 6)
                        break a;
                }
                cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent5);
            }
        }
    }
    function cmmg_LoadLevelScreen_openLevel($this, $var1) {
        cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent5);
    }
    function cmmg_LoadLevelScreen_openLevel0($this, $var1) {
        cmm_Minecraft_setCurrentScreen($this.$minecraft5, null);
        cmm_Minecraft_grabMouse($this.$minecraft5);
    }
    function cmmg_LoadLevelScreen_render($this, $var1, $var2) {
        var var$3, $var3, $$je, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var3 = $thread.pop();var$3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmmg_Screen_drawFadingBox(0, 0, $this.$width4, $this.$height4, 1610941696, (-1607454624));
            cmmg_Screen_drawCenteredString($this.$fontRenderer0, $this.$title0, $this.$width4 / 2 | 0, 20, 16777215);
            if ($this.$frozen) {
                cmmg_Screen_drawCenteredString($this.$fontRenderer0, $rt_s(631), $this.$width4 / 2 | 0, ($this.$height4 / 2 | 0) - 4 | 0, 16777215);
                try {
                    var$3 = Long_fromInt(20);
                    $ptr = 2;
                    continue main;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $var3 = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $var3.$printStackTrace();
                return;
            }
            if (!$this.$loaded0)
                cmmg_Screen_drawCenteredString($this.$fontRenderer0, $this.$status0, $this.$width4 / 2 | 0, ($this.$height4 / 2 | 0) - 4 | 0, 16777215);
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        case 2:
            a: {
                try {
                    jl_Thread_sleep(var$3);
                    if ($rt_suspending()) {
                        break main;
                    }
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_InterruptedException) {
                        $var3 = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $var3.$printStackTrace();
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, var$3, $var3, $ptr);
    }
    function cmmg_LoadLevelScreen_onClose($this) {}
    function cmmg_LoadLevelScreen_tick($this) {
        var var$1;
        var$1 = $this.$selectedFile;
        if (var$1 !== null) {
            $this.$openLevel0(var$1);
            $this.$selectedFile = null;
        }
    }
    var cmmg_SaveLevelScreen = $rt_classWithoutFields(cmmg_LoadLevelScreen);
    function cmmg_SaveLevelScreen_onOpen($this) {
        cmmg_LoadLevelScreen_onOpen($this);
        (ju_ArrayList_get($this.$buttons, 5)).$text0 = $rt_s(632);
    }
    function cmmg_SaveLevelScreen_setLevels($this, $var1) {
        var $var2, var$3;
        $var2 = 0;
        while ($var2 < 5) {
            var$3 = $var1.data;
            (ju_ArrayList_get($this.$buttons, $var2)).$text0 = var$3[$var2];
            (ju_ArrayList_get($this.$buttons, $var2)).$visible0 = 1;
            (ju_ArrayList_get($this.$buttons, $var2)).$active = $this.$minecraft5.$session.$haspaid;
            $var2 = $var2 + 1 | 0;
        }
    }
    function cmmg_SaveLevelScreen_render($this, $var1, $var2) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            $ptr = 1;
        case 1:
            cmmg_LoadLevelScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            if (!$this.$minecraft5.$session.$haspaid) {
                $var1 = $this.$width4 / 2 | 0;
                cmmg_Screen_drawFadingBox($var1 - 80 | 0, 72, $var1 + 80 | 0, 120, (-536870912), (-536870912));
                cmmg_Screen_drawCenteredString($this.$fontRenderer0, $rt_s(633), $this.$width4 / 2 | 0, 80, 16748688);
                cmmg_Screen_drawCenteredString($this.$fontRenderer0, $rt_s(634), $this.$width4 / 2 | 0, 96, 14712960);
                cmmg_Screen_drawCenteredString($this.$fontRenderer0, $rt_s(635), $this.$width4 / 2 | 0, 104, 14712960);
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $ptr);
    }
    function cmmg_SaveLevelScreen_openLevel($this, $var1) {
        var var$2, var$3, var$4;
        if (!($var1.$getName()).$endsWith($rt_s(636))) {
            var$2 = new ji_File;
            var$3 = $var1.$getParentFile();
            $var1 = $var1.$getName();
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(var$4, $var1), $rt_s(636));
            ji_File__init_1(var$2, var$3, jl_AbstractStringBuilder_toString(var$4));
        }
        cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent5);
    }
    function cmmg_SaveLevelScreen_openLevel0($this, $var1) {
        var var$2, var$3, var$4;
        var$2 = $this.$minecraft5;
        var$3 = new cmmg_LevelNameScreen;
        var$4 = (ju_ArrayList_get($this.$buttons, $var1)).$text0;
        cmmg_GuiScreen__init_(var$3);
        var$3.$title3 = $rt_s(637);
        var$3.$counter0 = 0;
        var$3.$parent6 = $this;
        var$3.$id3 = $var1;
        var$3.$name9 = var$4;
        if (jl_String_equals(var$4, $rt_s(87)))
            var$3.$name9 = $rt_s(3);
        cmm_Minecraft_setCurrentScreen(var$2, var$3);
    }
    var jur_MatchResult = $rt_classWithoutFields(0);
    function jur_Matcher() {
        var a = this; jl_Object.call(a);
        a.$pat = null;
        a.$start2 = null;
        a.$string = null;
        a.$matchResult = null;
        a.$leftBound = 0;
        a.$rightBound = 0;
    }
    function jur_Matcher_find($this, $start) {
        var $stringLength, var$3, var$4;
        $stringLength = jl_String_length($this.$string);
        if ($start >= 0 && $start <= $stringLength) {
            jur_MatchResultImpl_reset($this.$matchResult, null, (-1), (-1));
            var$3 = $this.$matchResult;
            var$3.$mode5 = 1;
            var$3.$startIndex = $start;
            $stringLength = var$3.$previousMatch;
            if ($stringLength < 0)
                $stringLength = $start;
            var$3.$previousMatch = $stringLength;
            $start = $this.$start2.$find0($start, $this.$string, var$3);
            if ($start == (-1))
                $this.$matchResult.$hitEnd = 1;
            if ($start >= 0) {
                var$3 = $this.$matchResult;
                if (var$3.$valid) {
                    var$4 = var$3.$groupBounds.data;
                    if (var$4[0] == (-1)) {
                        $stringLength = var$3.$startIndex;
                        var$4[0] = $stringLength;
                        var$4[1] = $stringLength;
                    }
                    var$3.$previousMatch = jur_MatchResultImpl_end(var$3);
                    return 1;
                }
            }
            $this.$matchResult.$startIndex = (-1);
            return 0;
        }
        var$3 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$3, jl_String_valueOf0($start));
        $rt_throw(var$3);
    }
    function jur_Matcher_start($this) {
        return jur_MatchResultImpl_start0($this.$matchResult, 0);
    }
    function jur_Matcher_end($this) {
        return jur_MatchResultImpl_end0($this.$matchResult, 0);
    }
    function jur_Matcher_hasTransparentBounds($this) {
        return $this.$matchResult.$transparentBounds;
    }
    function jnci_BufferedEncoder$Controller() {
        var a = this; jl_Object.call(a);
        a.$in0 = null;
        a.$out1 = null;
        a.$inPosition = 0;
        a.$outPosition = 0;
    }
    function jnci_BufferedEncoder$Controller_hasMoreOutput($this, $sz) {
        return jn_Buffer_remaining($this.$out1) < $sz ? 0 : 1;
    }
    function jnci_BufferedDecoder$Controller() {
        var a = this; jl_Object.call(a);
        a.$in1 = null;
        a.$out2 = null;
        a.$inPosition0 = 0;
        a.$outPosition0 = 0;
    }
    function jnci_BufferedDecoder$Controller_hasMoreInput($this, $sz) {
        return jn_Buffer_remaining($this.$in1) < $sz ? 0 : 1;
    }
    function jnci_BufferedDecoder$Controller_hasMoreOutput($this, $sz) {
        return jn_Buffer_remaining($this.$out2) < $sz ? 0 : 1;
    }
    var jnc_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException);
    var jnc_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
    function jnc_MalformedInputException() {
        jnc_CharacterCodingException.call(this);
        this.$length3 = 0;
    }
    function jnc_MalformedInputException_getMessage($this) {
        var var$1, var$2;
        var$1 = $this.$length3;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(638)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jnc_UnmappableCharacterException() {
        jnc_CharacterCodingException.call(this);
        this.$length4 = 0;
    }
    function jnc_UnmappableCharacterException_getMessage($this) {
        var var$1, var$2;
        var$1 = $this.$length4;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(639)), var$1);
        return jl_AbstractStringBuilder_toString(var$2);
    }
    function jur_AbstractCharClass$LazyJavaLowerCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$023 = null;
    }
    function jur_AbstractCharClass$LazyJavaLowerCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 2 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$024 = null;
    }
    function jur_AbstractCharClass$LazyJavaUpperCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 1 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace$1() {
        jur_AbstractCharClass.call(this);
        this.$this$025 = null;
    }
    function jur_AbstractCharClass$LazyJavaWhitespace$1_contains($this, $ch) {
        return jl_Character_isWhitespace($ch);
    }
    function jur_AbstractCharClass$LazyJavaMirrored$1() {
        jur_AbstractCharClass.call(this);
        this.$this$026 = null;
    }
    function jur_AbstractCharClass$LazyJavaMirrored$1_contains($this, $ch) {
        return 0;
    }
    function jur_AbstractCharClass$LazyJavaDefined$1() {
        jur_AbstractCharClass.call(this);
        this.$this$027 = null;
    }
    function jur_AbstractCharClass$LazyJavaDefined$1_contains($this, $ch) {
        return !jl_Character_getType($ch) ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaDigit$1() {
        jur_AbstractCharClass.call(this);
        this.$this$028 = null;
    }
    function jur_AbstractCharClass$LazyJavaDigit$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 9 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
        jur_AbstractCharClass.call(this);
        this.$this$029 = null;
    }
    function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains($this, $ch) {
        return jl_Character_isIdentifierIgnorable($ch);
    }
    function jur_AbstractCharClass$LazyJavaISOControl$1() {
        jur_AbstractCharClass.call(this);
        this.$this$030 = null;
    }
    function jur_AbstractCharClass$LazyJavaISOControl$1_contains($this, $ch) {
        a: {
            b: {
                if (!($ch >= 0 && $ch <= 31)) {
                    if ($ch < 127)
                        break b;
                    if ($ch > 159)
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = 0;
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$031 = null;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 23:
                    case 26:
                        break;
                    case 7:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$032 = null;
    }
    function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 23:
                    case 26:
                        break;
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaLetter$1() {
        jur_AbstractCharClass.call(this);
        this.$this$033 = null;
    }
    function jur_AbstractCharClass$LazyJavaLetter$1_contains($this, $ch) {
        a: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                default:
                    $ch = 0;
                    break a;
            }
            $ch = 1;
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
        jur_AbstractCharClass.call(this);
        this.$this$034 = null;
    }
    function jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains($this, $ch) {
        return jl_Character_isLetterOrDigit($ch);
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
        jur_AbstractCharClass.call(this);
        this.$this$035 = null;
    }
    function jur_AbstractCharClass$LazyJavaSpaceChar$1_contains($this, $ch) {
        return jl_Character_isSpaceChar($ch);
    }
    function jur_AbstractCharClass$LazyJavaTitleCase$1() {
        jur_AbstractCharClass.call(this);
        this.$this$036 = null;
    }
    function jur_AbstractCharClass$LazyJavaTitleCase$1_contains($this, $ch) {
        return jl_Character_getType($ch) != 3 ? 0 : 1;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$037 = null;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 23:
                        break;
                    case 7:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
        jur_AbstractCharClass.call(this);
        this.$this$038 = null;
    }
    function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains($this, $ch) {
        a: {
            b: {
                switch (jl_Character_getType($ch)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                        break;
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break b;
                    default:
                        break b;
                }
                $ch = 1;
                break a;
            }
            $ch = jl_Character_isIdentifierIgnorable($ch);
        }
        return $ch;
    }
    function jur_UnicodeCategory() {
        jur_AbstractCharClass.call(this);
        this.$category1 = 0;
    }
    function jur_UnicodeCategory__init_(var_0) {
        var var_1 = new jur_UnicodeCategory();
        jur_UnicodeCategory__init_0(var_1, var_0);
        return var_1;
    }
    function jur_UnicodeCategory__init_0($this, $category) {
        jur_AbstractCharClass__init_($this);
        $this.$category1 = $category;
    }
    function jur_UnicodeCategory_contains($this, $ch) {
        return $this.$alt0 ^ ($this.$category1 != jl_Character_getType($ch & 65535) ? 0 : 1);
    }
    var jur_UnicodeCategoryScope = $rt_classWithoutFields(jur_UnicodeCategory);
    function jur_UnicodeCategoryScope_contains($this, $ch) {
        return $this.$alt0 ^ (!($this.$category1 >> jl_Character_getType($ch & 65535) & 1) ? 0 : 1);
    }
    function otrfm_InMemoryVirtualFile() {
        var a = this; otrfm_AbstractInMemoryVirtualFile.call(a);
        a.$data1 = null;
        a.$size4 = 0;
    }
    function otrfm_InMemoryVirtualFile_isDirectory($this) {
        return 0;
    }
    function otrfm_InMemoryVirtualFile_isFile($this) {
        return 1;
    }
    function otrfm_InMemoryVirtualFile_getChildFile($this, $fileName) {
        $fileName = new jl_UnsupportedOperationException;
        jl_Throwable__init_0($fileName);
        $rt_throw($fileName);
    }
    function otrfm_InMemoryVirtualFile_createAccessor($this, $readable, $writable, $append) {
        var var$4;
        if ($this.$parent === null)
            return null;
        if ($writable && $this.$readOnly3)
            return null;
        var$4 = new otrfm_InMemoryVirtualFile$1;
        var$4.$this$02 = $this;
        var$4.$val$append = $append;
        var$4.$val$writable = $writable;
        if ($append)
            var$4.$pos1 = $this.$size4;
        else if ($writable)
            $this.$size4 = 0;
        return var$4;
    }
    function otrfm_InMemoryVirtualFile_createFile($this, $fileName) {
        var var$2, var$3;
        var$2 = new ji_IOException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(640)), $fileName), $rt_s(641));
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    function cmmg_ControlsScreen() {
        var a = this; cmmg_GuiScreen.call(a);
        a.$parent3 = null;
        a.$title2 = null;
        a.$settings4 = null;
        a.$selected1 = 0;
    }
    function cmmg_ControlsScreen_onOpen($this) {
        var $var1, var$2;
        $var1 = 0;
        while (true) {
            var$2 = $this.$settings4;
            if ($var1 >= var$2.$bindings.data.length)
                break;
            ju_ArrayList_add($this.$buttons, cmmg_OptionButton__init_($var1, (($this.$width4 / 2 | 0) - 155 | 0) + (($var1 % 2 | 0) * 160 | 0) | 0, ($this.$height4 / 6 | 0) + (24 * ($var1 >> 1) | 0) | 0, cmm_GameSettings_getBinding(var$2, $var1)));
            $var1 = $var1 + 1 | 0;
        }
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(200, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 6 | 0) + 168 | 0, $rt_s(619)));
    }
    function cmmg_ControlsScreen_onButtonClick($this, $var1) {
        var $var2, var$3, var$4, var$5;
        $var2 = 0;
        while (true) {
            var$3 = $this.$settings4;
            if ($var2 >= var$3.$bindings.data.length)
                break;
            (ju_ArrayList_get($this.$buttons, $var2)).$text0 = cmm_GameSettings_getBinding($this.$settings4, $var2);
            $var2 = $var2 + 1 | 0;
        }
        var$4 = $var1.$id2;
        if (var$4 == 200)
            cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent3);
        else {
            $this.$selected1 = var$4;
            var$3 = cmm_GameSettings_getBinding(var$3, var$4);
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(326)), var$3), $rt_s(642));
            $var1.$text0 = jl_AbstractStringBuilder_toString(var$5);
        }
    }
    function cmmg_ControlsScreen_onKeyPress($this, $var1, $var2) {
        var var$3, var$4;
        var$3 = $this.$selected1;
        if (var$3 < 0)
            cmmg_GuiScreen_onKeyPress($this, $var1, $var2);
        else {
            var$4 = $this.$settings4;
            var$4.$bindings.data[var$3].$key = $var2;
            cmm_GameSettings_save(var$4);
            (ju_ArrayList_get($this.$buttons, $this.$selected1)).$text0 = cmm_GameSettings_getBinding($this.$settings4, $this.$selected1);
            $this.$selected1 = (-1);
        }
    }
    function cmmg_ControlsScreen_render($this, $var1, $var2) {
        var $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmmg_Screen_drawFadingBox(0, 0, $this.$width4, $this.$height4, 1610941696, (-1607454624));
            cmmg_Screen_drawCenteredString($this.$fontRenderer0, $this.$title2, $this.$width4 / 2 | 0, 20, 16777215);
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $ptr);
    }
    var cmmg_OptionButton = $rt_classWithoutFields(cmmg_Button);
    function cmmg_OptionButton__init_(var_0, var_1, var_2, var_3) {
        var var_4 = new cmmg_OptionButton();
        cmmg_OptionButton__init_0(var_4, var_0, var_1, var_2, var_3);
        return var_4;
    }
    function cmmg_OptionButton__init_0($this, $var1, $var2, $var3, $var4) {
        cmmg_Button__init_2($this, $var1, $var2, $var3, 150, 20, $var4);
    }
    function cmmg_LevelDialog() {
        jl_Thread.call(this);
        this.$screen = null;
    }
    var cmmp_SmokeParticle = $rt_classWithoutFields(cmmp_Particle);
    function cmmp_SmokeParticle_render($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7) {
        cmmp_Particle_render($this, $var1, $var2, $var3, $var4, $var5, $var6, $var7);
    }
    function cmmp_SmokeParticle_tick($this) {
        var var$1, var$2, var$3;
        $this.$xo = $this.$x;
        $this.$yo = $this.$y;
        $this.$zo = $this.$z;
        var$1 = $this.$age0;
        $this.$age0 = var$1 + 1 | 0;
        if (var$1 >= $this.$lifetime)
            cmm_Entity_remove($this);
        $this.$tex = 7 - (($this.$age0 << 3) / $this.$lifetime | 0) | 0;
        var$2 = $this.$yd + 0.004;
        $this.$yd = var$2;
        cmm_Entity_move($this, $this.$xd, var$2, $this.$zd);
        var$2 = $this.$xd * 0.9599999785423279;
        $this.$xd = var$2;
        $this.$yd = $this.$yd * 0.9599999785423279;
        var$3 = $this.$zd * 0.9599999785423279;
        $this.$zd = var$3;
        if ($this.$onGround) {
            $this.$xd = var$2 * 0.699999988079071;
            $this.$zd = var$3 * 0.699999988079071;
        }
    }
    function jur_MatchResultImpl() {
        var a = this; jl_Object.call(a);
        a.$groupBounds = null;
        a.$consumers = null;
        a.$compQuantCounters = null;
        a.$string2 = null;
        a.$groupCount = 0;
        a.$valid = 0;
        a.$leftBound0 = 0;
        a.$rightBound0 = 0;
        a.$startIndex = 0;
        a.$transparentBounds = 0;
        a.$anchoringBounds = 0;
        a.$hitEnd = 0;
        a.$requireEnd = 0;
        a.$previousMatch = 0;
        a.$mode5 = 0;
    }
    function jur_MatchResultImpl_setConsumed($this, $counter, $value) {
        $this.$consumers.data[$counter] = $value;
    }
    function jur_MatchResultImpl_getConsumed($this, $counter) {
        return $this.$consumers.data[$counter];
    }
    function jur_MatchResultImpl_end($this) {
        return jur_MatchResultImpl_end0($this, 0);
    }
    function jur_MatchResultImpl_end0($this, $group) {
        jur_MatchResultImpl_checkGroup($this, $group);
        return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
    }
    function jur_MatchResultImpl_setStart($this, $group, $offset) {
        $this.$groupBounds.data[$group * 2 | 0] = $offset;
    }
    function jur_MatchResultImpl_setEnd($this, $group, $offset) {
        $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
    }
    function jur_MatchResultImpl_getStart($this, $group) {
        return $this.$groupBounds.data[$group * 2 | 0];
    }
    function jur_MatchResultImpl_getEnd($this, $group) {
        return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
    }
    function jur_MatchResultImpl_start($this) {
        return jur_MatchResultImpl_start0($this, 0);
    }
    function jur_MatchResultImpl_start0($this, $group) {
        jur_MatchResultImpl_checkGroup($this, $group);
        return $this.$groupBounds.data[$group * 2 | 0];
    }
    function jur_MatchResultImpl_getEnterCounter($this, $setCounter) {
        return $this.$compQuantCounters.data[$setCounter];
    }
    function jur_MatchResultImpl_setEnterCounter($this, $setCounter, $value) {
        $this.$compQuantCounters.data[$setCounter] = $value;
    }
    function jur_MatchResultImpl_checkGroup($this, $group) {
        var var$2;
        if (!$this.$valid) {
            var$2 = new jl_IllegalStateException;
            jl_Throwable__init_0(var$2);
            $rt_throw(var$2);
        }
        if ($group >= 0 && $group < $this.$groupCount)
            return;
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2, jl_String_valueOf0($group));
        $rt_throw(var$2);
    }
    function jur_MatchResultImpl_reset($this, $newSequence, $leftBound, $rightBound) {
        $this.$valid = 0;
        $this.$mode5 = 2;
        ju_Arrays_fill($this.$groupBounds, (-1));
        ju_Arrays_fill($this.$consumers, (-1));
        if ($newSequence !== null)
            $this.$string2 = $newSequence;
        if ($leftBound >= 0) {
            $this.$leftBound0 = $leftBound;
            $this.$rightBound0 = $rightBound;
        }
        $this.$startIndex = $this.$leftBound0;
    }
    function jur_MatchResultImpl_mode($this) {
        return $this.$mode5;
    }
    function cmmg_LevelNameScreen() {
        var a = this; cmmg_GuiScreen.call(a);
        a.$parent6 = null;
        a.$title3 = null;
        a.$id3 = 0;
        a.$name9 = null;
        a.$counter0 = 0;
    }
    function cmmg_LevelNameScreen_onOpen($this) {
        ju_ArrayList_clear($this.$buttons);
        oli_Keyboard_enableRepeatEvents(1);
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(0, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 120 | 0, $rt_s(643)));
        ju_ArrayList_add($this.$buttons, cmmg_Button__init_(1, ($this.$width4 / 2 | 0) - 100 | 0, ($this.$height4 / 4 | 0) + 144 | 0, $rt_s(624)));
        (ju_ArrayList_get($this.$buttons, 0)).$active = jl_String_length(jl_String_trim($this.$name9)) <= 1 ? 0 : 1;
    }
    function cmmg_LevelNameScreen_onClose($this) {
        oli_Keyboard_enableRepeatEvents(0);
    }
    function cmmg_LevelNameScreen_tick($this) {
        $this.$counter0 = $this.$counter0 + 1 | 0;
    }
    function cmmg_LevelNameScreen_onButtonClick($this, $var1) {
        if ($var1.$active) {
            if (!$var1.$id2 && jl_String_length(jl_String_trim($this.$name9)) > 1) {
                jl_String_trim($this.$name9);
                cmm_Minecraft_setCurrentScreen($this.$minecraft5, null);
                cmm_Minecraft_grabMouse($this.$minecraft5);
            }
            if ($var1.$id2 == 1)
                cmm_Minecraft_setCurrentScreen($this.$minecraft5, $this.$parent6);
        }
    }
    function cmmg_LevelNameScreen_onKeyPress($this, $var1, $var2) {
        var var$3, var$4;
        if ($var2 == 14 && jl_String_length($this.$name9) > 0) {
            var$3 = $this.$name9;
            $this.$name9 = jl_String_substring0(var$3, 0, jl_String_length(var$3) - 1 | 0);
        }
        if (jl_String_indexOf0($rt_s(644), $var1) >= 0 && jl_String_length($this.$name9) < 64) {
            var$3 = $this.$name9;
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$4, var$3), $var1);
            $this.$name9 = jl_AbstractStringBuilder_toString(var$4);
        }
        (ju_ArrayList_get($this.$buttons, 0)).$active = jl_String_length(jl_String_trim($this.$name9)) <= 1 ? 0 : 1;
    }
    function cmmg_LevelNameScreen_render($this, $var1, $var2) {
        var $var3, $var4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$13 = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();$var4 = $thread.pop();$var3 = $thread.pop();$var2 = $thread.pop();$var1 = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            cmmg_Screen_drawFadingBox(0, 0, $this.$width4, $this.$height4, 1610941696, (-1607454624));
            cmmg_Screen_drawCenteredString($this.$fontRenderer0, $this.$title3, $this.$width4 / 2 | 0, 40, 16777215);
            $var3 = ($this.$width4 / 2 | 0) - 100 | 0;
            $var4 = ($this.$height4 / 2 | 0) - 10 | 0;
            var$5 = $var3 - 1 | 0;
            var$6 = $var4 - 1 | 0;
            var$7 = $var3 + 200 | 0;
            var$8 = var$7 + 1 | 0;
            var$9 = $var4 + 20 | 0;
            cmmg_Screen_drawBox(var$5, var$6, var$8, var$9 + 1 | 0, (-6250336));
            cmmg_Screen_drawBox($var3, $var4, var$7, var$9, (-16777216));
            var$10 = $this.$fontRenderer0;
            var$11 = $this.$name9;
            var$12 = ($this.$counter0 / 6 | 0) % 2 | 0 ? $rt_s(3) : $rt_s(325);
            var$13 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$13);
            jl_StringBuilder_append(jl_StringBuilder_append(var$13, var$11), var$12);
            cmmg_FontRenderer_render(var$10, jl_AbstractStringBuilder_toString(var$13), $var3 + 4 | 0, $var4 + 6 | 0, 14737632);
            $ptr = 1;
        case 1:
            cmmg_GuiScreen_render($this, $var1, $var2);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $var1, $var2, $var3, $var4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, $ptr);
    }
    var juf_DoubleSupplier = $rt_classWithoutFields(0);
    function ju_Random$nextGaussian$lambda$_9_0() {
        jl_Object.call(this);
        this.$_03 = null;
    }
    function ju_Random$nextGaussian$lambda$_9_0_getAsDouble(var$0) {
        return ju_Random_nextDouble(var$0.$_03);
    }
    var otci_RandomUtils = $rt_classWithoutFields();
    var jl_StrictMath = $rt_classWithoutFields();
    var otrf_VirtualFileAccessor = $rt_classWithoutFields(0);
    function otrfm_InMemoryVirtualFile$1() {
        var a = this; jl_Object.call(a);
        a.$pos1 = 0;
        a.$val$append = 0;
        a.$val$writable = 0;
        a.$this$02 = null;
    }
    function cmmi_TakeEntityAnim() {
        var a = this; cmm_Entity.call(a);
        a.$time2 = 0;
        a.$item0 = null;
        a.$player4 = null;
        a.$xorg = 0.0;
        a.$yorg = 0.0;
        a.$zorg = 0.0;
    }
    function cmmi_TakeEntityAnim__init_(var_0, var_1, var_2) {
        var var_3 = new cmmi_TakeEntityAnim();
        cmmi_TakeEntityAnim__init_0(var_3, var_0, var_1, var_2);
        return var_3;
    }
    function cmmi_TakeEntityAnim__init_0($this, $level1, $item, $player) {
        cmm_Entity__init_($this, $level1);
        $this.$time2 = 0;
        $this.$item0 = $item;
        $this.$player4 = $player;
        cmm_Entity_setSize($this, 1.0, 1.0);
        $this.$xorg = $item.$x;
        $this.$yorg = $item.$y;
        $this.$zorg = $item.$z;
    }
    function cmmi_TakeEntityAnim_tick($this) {
        var var$1, var$2, var$3, var$4, var$5, var$6, var$7;
        var$1 = $this.$time2 + 1 | 0;
        $this.$time2 = var$1;
        if (var$1 >= 3)
            cmm_Entity_remove($this);
        var$2 = $this.$time2 / 3.0;
        var$2 = var$2 * var$2;
        var$3 = $this.$item0;
        var$4 = var$3.$x;
        var$3.$xo = var$4;
        $this.$xo = var$4;
        var$4 = var$3.$y;
        var$3.$yo = var$4;
        $this.$yo = var$4;
        var$4 = var$3.$z;
        var$3.$zo = var$4;
        $this.$zo = var$4;
        var$4 = $this.$xorg;
        var$5 = $this.$player4;
        var$4 = var$4 + (var$5.$x - var$4) * var$2;
        var$3.$x = var$4;
        $this.$x = var$4;
        var$6 = $this.$yorg;
        var$6 = var$6 + (var$5.$y - 1.0 - var$6) * var$2;
        var$3.$y = var$6;
        $this.$y = var$6;
        var$7 = $this.$zorg;
        var$2 = var$7 + (var$5.$z - var$7) * var$2;
        var$3.$z = var$2;
        $this.$z = var$2;
        cmm_Entity_setPos($this, var$4, var$6, var$2);
    }
    function cmmi_TakeEntityAnim_render($this, $textureManager, $unknown0) {
        var var$3, $ptr, $tmp;
        $ptr = 0;
        if ($rt_resuming()) {
            var $thread = $rt_nativeThread();
            $ptr = $thread.pop();var$3 = $thread.pop();$unknown0 = $thread.pop();$textureManager = $thread.pop();$this = $thread.pop();
        }
        main: while (true) { switch ($ptr) {
        case 0:
            var$3 = $this.$item0;
            $ptr = 1;
        case 1:
            var$3.$render10($textureManager, $unknown0);
            if ($rt_suspending()) {
                break main;
            }
            return;
        default: $rt_invalidPointer();
        }}
        $rt_nativeThread().push($this, $textureManager, $unknown0, var$3, $ptr);
    }
    var jur_IntArrHash = $rt_classWithoutFields();
    $rt_packages([-1, "com", 0, "mojang", 1, "minecraft", 2, "render", 0, "jcraft", 4, "jzlib", -1, "java", 6, "util", 7, "regex", 6, "nio", 9, "charset", 6, "io", 6, "lang", -1, "org", 13, "lwjgl"
    ]);
    $rt_metadata([jl_Object, "Object", 12, 0, [], 0, 3, 0, 0, ["$equals", $rt_wrapFunction1(jl_Object_equals), "$toString", $rt_wrapFunction0(jl_Object_toString)],
    nPm_Client, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jlr_AnnotatedElement, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jlr_Type, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Class, 0, jl_Object, [jlr_AnnotatedElement, jlr_Type], 0, 3, 0, 0, 0,
    otji_JS, 0, jl_Object, [], 4, 0, 0, 0, 0,
    otp_Platform, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_Throwable, 0, jl_Object, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jl_Throwable_getMessage)],
    jl_Exception, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
    jl_RuntimeException, "RuntimeException", 12, jl_Exception, [], 0, 3, 0, 0, 0,
    jl_ClassCastException, "ClassCastException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ji_Serializable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Comparable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_CharSequence, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_String, 0, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, jl_String_$callClinit, ["$equals", $rt_wrapFunction1(jl_String_equals), "$hashCode0", $rt_wrapFunction0(jl_String_hashCode)],
    jl_Error, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
    jl_LinkageError, 0, jl_Error, [], 0, 3, 0, 0, 0,
    jl_NoClassDefFoundError, 0, jl_LinkageError, [], 0, 3, 0, 0, 0,
    jl_Number, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
    jl_Integer, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$hashCode0", $rt_wrapFunction0(jl_Integer_hashCode), "$equals", $rt_wrapFunction1(jl_Integer_equals)],
    jl_AbstractStringBuilder, 0, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, 0, ["$ensureCapacity", $rt_wrapFunction1(jl_AbstractStringBuilder_ensureCapacity), "$toString", $rt_wrapFunction0(jl_AbstractStringBuilder_toString)],
    jl_Appendable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_StringBuilder, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert1", $rt_wrapFunction4(jl_StringBuilder_insert0), "$append3", $rt_wrapFunction3(jl_StringBuilder_append5), "$toString", $rt_wrapFunction0(jl_StringBuilder_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuilder_ensureCapacity), "$insert0", $rt_wrapFunction2(jl_StringBuilder_insert1)],
    jl_IncompatibleClassChangeError, 0, jl_LinkageError, [], 0, 3, 0, 0, 0,
    jl_NoSuchFieldError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0, 0,
    jl_NoSuchMethodError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0, 0,
    m_WebGL, 0, jl_Object, [], 0, 3, 0, 0, 0,
    ol_LWJGLException, "LWJGLException", 14, jl_Exception, [], 0, 3, 0, 0, 0,
    nPm_LWJGLUtil, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_Runnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    cmm_Minecraft, 0, jl_Object, [jl_Runnable], 4, 3, 0, 0, 0,
    olo_Display, 0, jl_Object, [], 0, 3, 0, olo_Display_$callClinit, 0,
    cmm_SessionData, 0, jl_Object, [], 4, 3, 0, cmm_SessionData_$callClinit, 0,
    jl_System, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otci_IntegerUtil, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otj_JSObject, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otjde_EventTarget, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjde_FocusEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_MouseEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_KeyboardEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_LoadEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjde_GamepadEventTarget, 0, jl_Object, [otjde_EventTarget], 3, 3, 0, 0, 0,
    otjb_WindowEventTarget, 0, jl_Object, [otjde_EventTarget, otjde_FocusEventTarget, otjde_MouseEventTarget, otjde_KeyboardEventTarget, otjde_LoadEventTarget, otjde_GamepadEventTarget], 3, 3, 0, 0, 0,
    otjb_StorageProvider, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otjc_JSArrayReader, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otjb_Window, 0, jl_Object, [otj_JSObject, otjb_WindowEventTarget, otjb_StorageProvider, otjc_JSArrayReader], 1, 3, 0, 0, ["$get$exported$0", $rt_wrapFunction1(otjb_Window_get$exported$0), "$addEventListener$exported$1", $rt_wrapFunction2(otjb_Window_addEventListener$exported$1), "$removeEventListener$exported$2", $rt_wrapFunction2(otjb_Window_removeEventListener$exported$2), "$removeEventListener$exported$3", $rt_wrapFunction3(otjb_Window_removeEventListener$exported$3), "$dispatchEvent$exported$4", $rt_wrapFunction1(otjb_Window_dispatchEvent$exported$4),
    "$getLength$exported$5", $rt_wrapFunction0(otjb_Window_getLength$exported$5), "$addEventListener$exported$6", $rt_wrapFunction3(otjb_Window_addEventListener$exported$6)],
    nPm_AssetRepository, 0, jl_Object, [], 0, 3, 0, 0, 0,
    ji_IOException, "IOException", 11, jl_Exception, [], 0, 3, 0, 0, 0,
    cmmg_GameMode, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmg_SurvivalGameMode, 0, cmmg_GameMode, [], 4, 3, 0, 0, 0]);
    $rt_metadata([cmm_Timer, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmm_ProgressBarDisplay, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmr_Renderer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmm_Model, 0, jl_Object, [], 1, 3, 0, 0, 0,
    cmmm_HumanoidModel, 0, cmmm_Model, [], 0, 3, 0, 0, ["$render8", function(var_1, var_2, var_3, var_4, var_5, var_6) { cmmm_HumanoidModel_render(this, var_1, var_2, var_3, var_4, var_5, var_6); }, "$setRotationAngles", function(var_1, var_2, var_3, var_4, var_5, var_6) { cmmm_HumanoidModel_setRotationAngles(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
    jl_Thread, 0, jl_Object, [jl_Runnable], 0, 3, 0, jl_Thread_$callClinit, ["$run", $rt_wrapFunction0(jl_Thread_run)],
    cmm_SleepForeverThread, 0, jl_Thread, [], 0, 3, 0, 0, ["$run", $rt_wrapFunction0(cmm_SleepForeverThread_run)],
    ju_Comparator, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_String$_clinit_$lambda$_93_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
    jl_IndexOutOfBoundsException, "IndexOutOfBoundsException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jlr_Array, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_NullPointerException, "NullPointerException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_ArrayStoreException, "ArrayStoreException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_Character, 0, jl_Object, [jl_Comparable], 0, 3, 0, 0, 0,
    jl_AutoCloseable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ji_Closeable, 0, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
    ji_InputStream, 0, jl_Object, [ji_Closeable], 1, 3, 0, 0, 0,
    ji_ByteArrayInputStream, 0, ji_InputStream, [], 0, 3, 0, 0, ["$read0", $rt_wrapFunction3(ji_ByteArrayInputStream_read), "$available", $rt_wrapFunction0(ji_ByteArrayInputStream_available)],
    ji_FilterInputStream, 0, ji_InputStream, [], 0, 3, 0, 0, 0,
    ji_DataInput, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ji_DataInputStream, 0, ji_FilterInputStream, [ji_DataInput], 0, 3, 0, 0, 0,
    jnc_Charset, 0, jl_Object, [jl_Comparable], 1, 3, 0, 0, 0,
    cjj_InflaterInputStream, 0, ji_FilterInputStream, [], 0, 3, 0, 0, ["$read0", $rt_wrapFunction3(cjj_InflaterInputStream_read), "$available", $rt_wrapFunction0(cjj_InflaterInputStream_available)],
    nPm_GeneralDigest, 0, jl_Object, [], 1, 3, 0, 0, 0,
    nPm_SHA1Digest, 0, nPm_GeneralDigest, [], 0, 3, 0, 0, 0,
    ju_Arrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
    olo_DisplayMode, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otjde_EventListener, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    olo_Display$1, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(olo_Display$1_handleEvent$exported$0)],
    olo_Display$2, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(olo_Display$2_handleEvent$exported$0)],
    olo_Display$3, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(olo_Display$3_handleEvent$exported$0)],
    jur_RandomGenerator, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_Random, 0, jl_Object, [jur_RandomGenerator, ji_Serializable], 0, 3, 0, 0, 0,
    ol_BufferUtils, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmr_HeldBlock, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmm_ModelPart, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_Iterable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_Collection, 0, jl_Object, [jl_Iterable], 3, 3, 0, 0, 0,
    ju_AbstractCollection, 0, jl_Object, [ju_Collection], 1, 3, 0, 0, 0,
    ju_SequencedCollection, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
    ju_List, 0, jl_Object, [ju_SequencedCollection], 3, 3, 0, 0, 0,
    ju_AbstractList, 0, ju_AbstractCollection, [ju_List], 1, 3, 0, 0, 0,
    jl_Cloneable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_RandomAccess, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_ArrayList, 0, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, 0, 0,
    cmmlt_Block, 0, jl_Object, [], 0, 3, 0, cmmlt_Block_$callClinit, ["$isCube", $rt_wrapFunction0(cmmlt_Block_isCube), "$renderFullbright", $rt_wrapFunction1(cmmlt_Block_renderFullbright), "$getBrightness0", $rt_wrapFunction4(cmmlt_Block_getBrightness), "$canRenderSide", function(var_1, var_2, var_3, var_4, var_5) { return cmmlt_Block_canRenderSide(this, var_1, var_2, var_3, var_4, var_5); }, "$getTextureId", $rt_wrapFunction1(cmmlt_Block_getTextureId), "$renderInside", function(var_1, var_2, var_3, var_4,
    var_5) { cmmlt_Block_renderInside(this, var_1, var_2, var_3, var_4, var_5); }, "$getCollisionBox", $rt_wrapFunction3(cmmlt_Block_getCollisionBox), "$isOpaque", $rt_wrapFunction0(cmmlt_Block_isOpaque), "$isSolid0", $rt_wrapFunction0(cmmlt_Block_isSolid), "$update4", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_Block_update(this, var_1, var_2, var_3, var_4, var_5); }, "$spawnBreakParticles", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_Block_spawnBreakParticles(this, var_1, var_2, var_3, var_4,
    var_5); }, "$getLiquidType", $rt_wrapFunction0(cmmlt_Block_getLiquidType), "$onNeighborChange", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_Block_onNeighborChange(this, var_1, var_2, var_3, var_4, var_5); }, "$onPlace", $rt_wrapFunction4(cmmlt_Block_onPlace), "$getTickDelay", $rt_wrapFunction0(cmmlt_Block_getTickDelay), "$onAdded", $rt_wrapFunction4(cmmlt_Block_onAdded), "$onRemoved", $rt_wrapFunction4(cmmlt_Block_onRemoved), "$getDropCount", $rt_wrapFunction0(cmmlt_Block_getDropCount), "$getDrop",
    $rt_wrapFunction0(cmmlt_Block_getDrop), "$onBreak", $rt_wrapFunction4(cmmlt_Block_onBreak), "$dropItems", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_Block_dropItems(this, var_1, var_2, var_3, var_4, var_5); }, "$renderPreview", $rt_wrapFunction1(cmmlt_Block_renderPreview), "$explode", $rt_wrapFunction4(cmmlt_Block_explode), "$render9", function(var_1, var_2, var_3, var_4, var_5) { return cmmlt_Block_render(this, var_1, var_2, var_3, var_4, var_5); }, "$getRenderPass", $rt_wrapFunction0(cmmlt_Block_getRenderPass)],
    otji_JSWrapper, 0, jl_Object, [], 4, 3, 0, otji_JSWrapper_$callClinit, 0,
    m_FramebufferGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    m_RenderbufferGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    oti_AsyncCallback, 0, jl_Object, [], 3, 3, 0, 0, 0]);
    $rt_metadata([otpp_AsyncCallbackWrapper, 0, jl_Object, [oti_AsyncCallback], 0, 0, 0, 0, ["$complete", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_complete), "$error", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_error)],
    otja_XMLHttpRequest, 0, jl_Object, [otj_JSObject, otjde_EventTarget], 1, 3, 0, 0, ["$addEventListener$exported$0", $rt_wrapFunction2(otja_XMLHttpRequest_addEventListener$exported$0), "$removeEventListener$exported$1", $rt_wrapFunction2(otja_XMLHttpRequest_removeEventListener$exported$1), "$removeEventListener$exported$20", $rt_wrapFunction3(otja_XMLHttpRequest_removeEventListener$exported$2), "$dispatchEvent$exported$3", $rt_wrapFunction1(otja_XMLHttpRequest_dispatchEvent$exported$3), "$addEventListener$exported$4",
    $rt_wrapFunction3(otja_XMLHttpRequest_addEventListener$exported$4)],
    otja_ReadyStateChangeHandler, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    nPm_LWJGLUtil$3, 0, jl_Object, [otja_ReadyStateChangeHandler], 0, 0, 0, 0, ["$stateChanged$exported$0", $rt_wrapFunction0(nPm_LWJGLUtil$3_stateChanged$exported$0)],
    ju_Map, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_AbstractMap, 0, jl_Object, [ju_Map], 1, 3, 0, 0, 0,
    ju_HashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, ["$newElementArray", $rt_wrapFunction1(ju_HashMap_newElementArray)],
    jnc_Charset$Charsets, 0, jl_Object, [], 0, 0, 0, jnc_Charset$Charsets_$callClinit, 0,
    jl_IllegalArgumentException, "IllegalArgumentException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnc_UnsupportedCharsetException, "UnsupportedCharsetException", 10, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    ji_Flushable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ji_OutputStream, 0, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
    ji_FilterOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
    ji_PrintStream, 0, ji_FilterOutputStream, [], 0, 3, 0, 0, 0,
    otcic_ConsoleOutputStream, 0, ji_OutputStream, [], 1, 3, 0, 0, 0,
    otcic_StdoutOutputStream, 0, otcic_ConsoleOutputStream, [], 0, 3, 0, 0, ["$write", $rt_wrapFunction3(otcic_StdoutOutputStream_write)],
    otjb_Performance, 0, jl_Object, [otj_JSObject], 4, 3, 0, 0, 0,
    jnc_IllegalCharsetNameException, "IllegalCharsetNameException", 10, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    cjj_ZStream, 0, jl_Object, [], 128, 3, 0, 0, 0,
    cjj_Inflater, 0, cjj_ZStream, [], 4, 3, 0, 0, 0,
    jnci_UTF8Charset, 0, jnc_Charset, [], 0, 3, 0, jnci_UTF8Charset_$callClinit, ["$newDecoder", $rt_wrapFunction0(jnci_UTF8Charset_newDecoder)],
    jn_Buffer, 0, jl_Object, [], 1, 3, 0, 0, 0,
    jn_ByteBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
    jn_ByteOrder, 0, jl_Object, [], 4, 3, 0, jn_ByteOrder_$callClinit, 0,
    jl_Thread$UncaughtExceptionHandler, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_DefaultUncaughtExceptionHandler, 0, jl_Object, [jl_Thread$UncaughtExceptionHandler], 0, 3, 0, 0, 0,
    cmmlt_StoneBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getDrop", $rt_wrapFunction0(cmmlt_StoneBlock_getDrop)],
    jl_Enum, 0, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, 0, 0,
    cmmlt_Tile$SoundType, 0, jl_Enum, [], 12, 3, 0, cmmlt_Tile$SoundType_$callClinit, 0,
    cmmlt_GrassBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getTextureId", $rt_wrapFunction1(cmmlt_GrassBlock_getTextureId), "$update4", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_GrassBlock_update(this, var_1, var_2, var_3, var_4, var_5); }, "$getDrop", $rt_wrapFunction0(cmmlt_GrassBlock_getDrop)],
    cmmlt_DirtBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, 0,
    cmmlt_FlowerBlock, 0, cmmlt_Block, [], 0, 3, 0, 0, ["$update4", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_FlowerBlock_update(this, var_1, var_2, var_3, var_4, var_5); }, "$isOpaque", $rt_wrapFunction0(cmmlt_FlowerBlock_isOpaque), "$isSolid0", $rt_wrapFunction0(cmmlt_FlowerBlock_isSolid), "$renderPreview", $rt_wrapFunction1(cmmlt_FlowerBlock_renderPreview), "$isCube", $rt_wrapFunction0(cmmlt_FlowerBlock_isCube), "$render9", function(var_1, var_2, var_3, var_4, var_5) { return cmmlt_FlowerBlock_render0(this,
    var_1, var_2, var_3, var_4, var_5); }, "$renderFullbright", $rt_wrapFunction1(cmmlt_FlowerBlock_renderFullbright), "$getCollisionBox", $rt_wrapFunction3(cmmlt_FlowerBlock_getCollisionBox)],
    cmmlt_SaplingBlock, 0, cmmlt_FlowerBlock, [], 4, 3, 0, 0, ["$update4", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_SaplingBlock_update(this, var_1, var_2, var_3, var_4, var_5); }],
    cmmlt_LiquidBlock, 0, cmmlt_Block, [], 0, 3, 0, 0, ["$isCube", $rt_wrapFunction0(cmmlt_LiquidBlock_isCube), "$onPlace", $rt_wrapFunction4(cmmlt_LiquidBlock_onPlace), "$update4", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_LiquidBlock_update(this, var_1, var_2, var_3, var_4, var_5); }, "$getBrightness0", $rt_wrapFunction4(cmmlt_LiquidBlock_getBrightness), "$canRenderSide", function(var_1, var_2, var_3, var_4, var_5) { return cmmlt_LiquidBlock_canRenderSide(this, var_1, var_2, var_3, var_4, var_5);
    }, "$renderInside", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_LiquidBlock_renderInside(this, var_1, var_2, var_3, var_4, var_5); }, "$isOpaque", $rt_wrapFunction0(cmmlt_LiquidBlock_isOpaque), "$isSolid0", $rt_wrapFunction0(cmmlt_LiquidBlock_isSolid), "$getLiquidType", $rt_wrapFunction0(cmmlt_LiquidBlock_getLiquidType), "$onNeighborChange", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_LiquidBlock_onNeighborChange(this, var_1, var_2, var_3, var_4, var_5); }, "$getTickDelay", $rt_wrapFunction0(cmmlt_LiquidBlock_getTickDelay),
    "$dropItems", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_LiquidBlock_dropItems(this, var_1, var_2, var_3, var_4, var_5); }, "$onBreak", $rt_wrapFunction4(cmmlt_LiquidBlock_onBreak), "$getDropCount", $rt_wrapFunction0(cmmlt_LiquidBlock_getDropCount), "$getRenderPass", $rt_wrapFunction0(cmmlt_LiquidBlock_getRenderPass), "$getCollisionBox", $rt_wrapFunction3(cmmlt_LiquidBlock_getCollisionBox)],
    cmmll_LiquidType, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmlt_StillLiquidBlock, 0, cmmlt_LiquidBlock, [], 4, 3, 0, 0, ["$update4", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_StillLiquidBlock_update(this, var_1, var_2, var_3, var_4, var_5); }, "$onNeighborChange", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_StillLiquidBlock_onNeighborChange(this, var_1, var_2, var_3, var_4, var_5); }],
    cmmlt_SandBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$onPlace", $rt_wrapFunction4(cmmlt_SandBlock_onPlace), "$onNeighborChange", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_SandBlock_onNeighborChange(this, var_1, var_2, var_3, var_4, var_5); }],
    cmmlt_OreBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getDrop", $rt_wrapFunction0(cmmlt_OreBlock_getDrop), "$getDropCount", $rt_wrapFunction0(cmmlt_OreBlock_getDropCount)],
    cmmlt_WoodBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getDropCount", $rt_wrapFunction0(cmmlt_WoodBlock_getDropCount), "$getDrop", $rt_wrapFunction0(cmmlt_WoodBlock_getDrop), "$getTextureId", $rt_wrapFunction1(cmmlt_WoodBlock_getTextureId)],
    cmmlt_LeavesBaseBlock, 0, cmmlt_Block, [], 0, 3, 0, 0, ["$isSolid0", $rt_wrapFunction0(cmmlt_LeavesBaseBlock_isSolid), "$canRenderSide", function(var_1, var_2, var_3, var_4, var_5) { return cmmlt_LeavesBaseBlock_canRenderSide(this, var_1, var_2, var_3, var_4, var_5); }, "$isOpaque", $rt_wrapFunction0(cmmlt_LeavesBaseBlock_isOpaque)],
    cmmlt_LeavesBlock, 0, cmmlt_LeavesBaseBlock, [], 4, 3, 0, 0, ["$getDropCount", $rt_wrapFunction0(cmmlt_LeavesBlock_getDropCount), "$getDrop", $rt_wrapFunction0(cmmlt_LeavesBlock_getDrop)],
    cmmlt_SpongeBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$onAdded", $rt_wrapFunction4(cmmlt_SpongeBlock_onAdded), "$onRemoved", $rt_wrapFunction4(cmmlt_SpongeBlock_onRemoved)],
    cmmlt_GlassBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$isSolid0", $rt_wrapFunction0(cmmlt_GlassBlock_isSolid), "$canRenderSide", function(var_1, var_2, var_3, var_4, var_5) { return cmmlt_GlassBlock_canRenderSide(this, var_1, var_2, var_3, var_4, var_5); }, "$isOpaque", $rt_wrapFunction0(cmmlt_GlassBlock_isOpaque)],
    cmmlt_MushroomBlock, 0, cmmlt_FlowerBlock, [], 4, 3, 0, 0, ["$update4", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_MushroomBlock_update(this, var_1, var_2, var_3, var_4, var_5); }],
    cmmlt_MetalBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getTextureId", $rt_wrapFunction1(cmmlt_MetalBlock_getTextureId)],
    cmmlt_SlabBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getTextureId", $rt_wrapFunction1(cmmlt_SlabBlock_getTextureId), "$isSolid0", $rt_wrapFunction0(cmmlt_SlabBlock_isSolid), "$onNeighborChange", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_SlabBlock_onNeighborChange(this, var_1, var_2, var_3, var_4, var_5); }, "$onAdded", $rt_wrapFunction4(cmmlt_SlabBlock_onAdded), "$getDrop", $rt_wrapFunction0(cmmlt_SlabBlock_getDrop), "$isCube", $rt_wrapFunction0(cmmlt_SlabBlock_isCube), "$canRenderSide", function(var_1,
    var_2, var_3, var_4, var_5) { return cmmlt_SlabBlock_canRenderSide(this, var_1, var_2, var_3, var_4, var_5); }],
    cmmlt_TNTBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getTextureId", $rt_wrapFunction1(cmmlt_TNTBlock_getTextureId), "$getDropCount", $rt_wrapFunction0(cmmlt_TNTBlock_getDropCount), "$explode", $rt_wrapFunction4(cmmlt_TNTBlock_explode), "$spawnBreakParticles", function(var_1, var_2, var_3, var_4, var_5) { cmmlt_TNTBlock_spawnBreakParticles(this, var_1, var_2, var_3, var_4, var_5); }],
    cmmlt_BookshelfBlock, 0, cmmlt_Block, [], 4, 3, 0, 0, ["$getTextureId", $rt_wrapFunction1(cmmlt_BookshelfBlock_getTextureId), "$getDropCount", $rt_wrapFunction0(cmmlt_BookshelfBlock_getDropCount)],
    jl_InterruptedException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
    otjc_JSWeakMap, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0]);
    $rt_metadata([otjc_JSWeakRef, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSMap, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjc_JSFinalizationRegistryConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
    otji_JSWrapper$_clinit_$lambda$_30_0, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_30_0_accept$exported$0)],
    otjc_JSFinalizationRegistry, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otji_JSWrapper$_clinit_$lambda$_30_1, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_30_1_accept$exported$0)],
    jnc_StandardCharsets, 0, jl_Object, [], 4, 3, 0, jnc_StandardCharsets_$callClinit, 0,
    otjt_ArrayBuffer, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjt_ArrayBufferView, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    otjt_Int16Array, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
    otjt_Int8Array, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
    jn_ByteBufferImpl, 0, jn_ByteBuffer, [], 0, 0, 0, 0, 0,
    jl_Readable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jn_CharBuffer, 0, jn_Buffer, [jl_Comparable, jl_Appendable, jl_CharSequence, jl_Readable], 1, 3, 0, 0, 0,
    cjj_GZIPException, "GZIPException", 5, ji_IOException, [], 0, 3, 0, 0, 0,
    otp_PlatformRunnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otr_EventQueue$Event, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_ThreadInterruptHandler, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jl_Thread$SleepHandler, 0, jl_Object, [otp_PlatformRunnable, otr_EventQueue$Event, jl_ThreadInterruptHandler], 0, 0, 0, 0, ["$run", $rt_wrapFunction0(jl_Thread$SleepHandler_run)],
    jnci_AsciiCharset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_AsciiCharset_newDecoder)],
    jnci_Iso8859Charset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_Iso8859Charset_newDecoder)],
    jnci_UTF16Charset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_UTF16Charset_newDecoder)],
    cjj_Checksum, 0, jl_Object, [], 3, 0, 0, 0, 0,
    cjj_Adler32, 0, jl_Object, [cjj_Checksum], 4, 3, 0, 0, ["$reset1", $rt_wrapFunction1(cjj_Adler32_reset), "$reset0", $rt_wrapFunction0(cjj_Adler32_reset0), "$getValue", $rt_wrapFunction0(cjj_Adler32_getValue), "$update2", $rt_wrapFunction3(cjj_Adler32_update)],
    otjc_JSObjects, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_CloneNotSupportedException, "CloneNotSupportedException", 12, jl_Exception, [], 0, 3, 0, 0, 0,
    ju_Map$Entry, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_MapEntry, 0, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0, 0,
    ju_HashMap$HashEntry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
    jl_StringIndexOutOfBoundsException, "StringIndexOutOfBoundsException", 12, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
    oli_Keyboard, 0, jl_Object, [], 0, 3, 0, oli_Keyboard_$callClinit, 0,
    oli_Mouse, 0, jl_Object, [], 0, 3, 0, 0, 0,
    m_GLEnums, 0, jl_Object, [], 0, 3, 0, 0, 0,
    olo_GL11, 0, m_GLEnums, [], 0, 3, 0, olo_GL11_$callClinit, 0,
    cmm_GameSettings, 0, jl_Object, [], 4, 3, 0, cmm_GameSettings_$callClinit, 0,
    ji_File, 0, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, ji_File_$callClinit, 0,
    cmmr_TextureManager, "TextureManager", 3, jl_Object, [], 0, 3, 0, 0, 0,
    cmmrt_TextureFX, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmrt_TextureLavaFX, 0, cmmrt_TextureFX, [], 4, 3, 0, 0, ["$animate", $rt_wrapFunction0(cmmrt_TextureLavaFX_animate)],
    cmmrt_TextureWaterFX, 0, cmmrt_TextureFX, [], 4, 3, 0, 0, ["$animate", $rt_wrapFunction0(cmmrt_TextureWaterFX_animate)],
    cmmg_FontRenderer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmr_LevelRenderer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmm_Entity, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, ["$remove2", $rt_wrapFunction0(cmm_Entity_remove), "$causeFallDamage", $rt_wrapFunction1(cmm_Entity_causeFallDamage), "$getBrightness1", $rt_wrapFunction1(cmm_Entity_getBrightness), "$render10", $rt_wrapFunction2(cmm_Entity_render), "$playerTouch", $rt_wrapFunction1(cmm_Entity_playerTouch), "$hurt", $rt_wrapFunction2(cmm_Entity_hurt), "$isPickable", $rt_wrapFunction0(cmm_Entity_isPickable), "$isPushable", $rt_wrapFunction0(cmm_Entity_isPushable), "$isShootable",
    $rt_wrapFunction0(cmm_Entity_isShootable), "$awardKillScore", $rt_wrapFunction2(cmm_Entity_awardKillScore)],
    cmmi_Item, 0, cmm_Entity, [], 0, 3, 0, 0, ["$tick", $rt_wrapFunction0(cmmi_Item_tick), "$render10", $rt_wrapFunction2(cmmi_Item_render), "$playerTouch", $rt_wrapFunction1(cmmi_Item_playerTouch)],
    cmmm_ModelManager, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmm_Mob, 0, cmm_Entity, [], 0, 3, 0, 0, ["$isPickable", $rt_wrapFunction0(cmmm_Mob_isPickable), "$isPushable", $rt_wrapFunction0(cmmm_Mob_isPushable), "$tick", $rt_wrapFunction0(cmmm_Mob_tick), "$aiStep", $rt_wrapFunction0(cmmm_Mob_aiStep), "$bindTexture", $rt_wrapFunction1(cmmm_Mob_bindTexture), "$render10", $rt_wrapFunction2(cmmm_Mob_render), "$renderModel", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { cmmm_Mob_renderModel(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }, "$hurt",
    $rt_wrapFunction2(cmmm_Mob_hurt), "$die", $rt_wrapFunction1(cmmm_Mob_die), "$causeFallDamage", $rt_wrapFunction1(cmmm_Mob_causeFallDamage), "$isShootable", $rt_wrapFunction0(cmmm_Mob_isShootable)],
    cmmp_ParticleManager, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmg_Screen, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmg_HUDScreen, 0, cmmg_Screen, [], 4, 3, 0, 0, 0,
    cmmp_Player, 0, cmmm_Mob, [], 0, 3, 0, 0, ["$aiStep", $rt_wrapFunction0(cmmp_Player_aiStep), "$render10", $rt_wrapFunction2(cmmp_Player_render), "$die", $rt_wrapFunction1(cmmp_Player_die), "$remove2", $rt_wrapFunction0(cmmp_Player_remove), "$awardKillScore", $rt_wrapFunction2(cmmp_Player_awardKillScore), "$isShootable", $rt_wrapFunction0(cmmp_Player_isShootable), "$bindTexture", $rt_wrapFunction1(cmmp_Player_bindTexture), "$hurt", $rt_wrapFunction2(cmmp_Player_hurt)]]);
    $rt_metadata([cmu_MathHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmg_CreativeGameMode, 0, cmmg_GameMode, [], 0, 3, 0, 0, 0,
    cmm_MovingObjectPosition, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmml_Level, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
    cmmr_Chunk, 0, jl_Object, [], 4, 3, 0, cmmr_Chunk_$callClinit, 0,
    jl_Math, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmr_Frustrum, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmr_FrustrumImpl, 0, cmmr_Frustrum, [], 4, 3, 0, cmmr_FrustrumImpl_$callClinit, 0,
    cmmr_ChunkDirtyDistanceComparator, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, ["$compare", $rt_wrapFunction2(cmmr_ChunkDirtyDistanceComparator_compare)],
    ju_Collections, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmr_ShapeRenderer, 0, jl_Object, [], 4, 3, 0, cmmr_ShapeRenderer_$callClinit, 0,
    cmmp_Particle, 0, cmm_Entity, [], 0, 3, 0, 0, ["$tick", $rt_wrapFunction0(cmmp_Particle_tick), "$getParticleTexture", $rt_wrapFunction0(cmmp_Particle_getParticleTexture)],
    cmmp_AABB, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
    ji_EOFException, "EOFException", 11, ji_IOException, [], 0, 3, 0, 0, 0,
    cmmm_Vertex, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmm_TexturedQuad, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jl_Thread$start$lambda$_4_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, ["$run", $rt_wrapFunction0(jl_Thread$start$lambda$_4_0_run)],
    otjt_Uint8Array, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
    cjj_Inflate, 0, jl_Object, [], 4, 0, 0, 0, 0,
    oli_Keyboard$1, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Keyboard$1_handleEvent$exported$0)],
    oli_Keyboard$2, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Keyboard$2_handleEvent$exported$0)],
    oli_Keyboard$3, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Keyboard$3_handleEvent$exported$0)],
    oli_Mouse$1, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$1_handleEvent$exported$0)],
    oli_Mouse$2, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$2_handleEvent$exported$0)],
    oli_Mouse$3, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$3_handleEvent$exported$0)],
    oli_Mouse$4, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$4_handleEvent$exported$0)],
    oli_Mouse$5, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$5_handleEvent$exported$0)],
    oli_Mouse$6, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$6_handleEvent$exported$0)],
    oli_Mouse$7, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$7_handleEvent$exported$0)],
    oli_Mouse$8, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(oli_Mouse$8_handleEvent$exported$0)],
    ju_Objects, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmm_KeyBinding, 0, jl_Object, [], 0, 3, 0, 0, 0,
    nPm_BufferedImage, 0, jl_Object, [], 0, 3, 0, 0, 0,
    nPm_ImageIO, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jn_IntBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
    cmmi_ItemModel, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmm_CreeperModel, 0, cmmm_Model, [], 4, 3, 0, 0, ["$render8", function(var_1, var_2, var_3, var_4, var_5, var_6) { cmmm_CreeperModel_render(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
    cmmm_ZombieModel, 0, cmmm_HumanoidModel, [], 0, 3, 0, 0, ["$setRotationAngles", function(var_1, var_2, var_3, var_4, var_5, var_6) { cmmm_ZombieModel_setRotationAngles(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
    cmmm_SkeletonModel, 0, cmmm_ZombieModel, [], 4, 3, 0, 0, 0,
    cmmm_AnimalModel, 0, cmmm_Model, [], 0, 3, 0, 0, ["$render8", function(var_1, var_2, var_3, var_4, var_5, var_6) { cmmm_AnimalModel_render(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
    cmmm_PigModel, 0, cmmm_AnimalModel, [], 4, 3, 0, 0, 0,
    cmmm_SheepModel, 0, cmmm_AnimalModel, [], 4, 3, 0, 0, 0,
    cmmm_SpiderModel, 0, cmmm_Model, [], 4, 3, 0, 0, ["$render8", function(var_1, var_2, var_3, var_4, var_5, var_6) { cmmm_SpiderModel_render(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
    cmmm_SheepFurModel, 0, cmmm_AnimalModel, [], 4, 3, 0, 0, 0,
    olo_Sync, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmm_ChatLine, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmg_GuiScreen, 0, cmmg_Screen, [], 0, 3, 0, 0, ["$onKeyPress", $rt_wrapFunction2(cmmg_GuiScreen_onKeyPress), "$onMouseClick0", $rt_wrapFunction3(cmmg_GuiScreen_onMouseClick), "$onButtonClick", $rt_wrapFunction1(cmmg_GuiScreen_onButtonClick), "$tick", $rt_wrapFunction0(cmmg_GuiScreen_tick), "$onClose", $rt_wrapFunction0(cmmg_GuiScreen_onClose)],
    cmmi_Arrow, 0, cmm_Entity, [], 0, 3, 0, 0, ["$tick", $rt_wrapFunction0(cmmi_Arrow_tick), "$render10", $rt_wrapFunction2(cmmi_Arrow_render), "$playerTouch", $rt_wrapFunction1(cmmi_Arrow_playerTouch), "$awardKillScore", $rt_wrapFunction2(cmmi_Arrow_awardKillScore)],
    cmmg_ChatInputScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_ChatInputScreen_onOpen), "$onClose", $rt_wrapFunction0(cmmg_ChatInputScreen_onClose), "$tick", $rt_wrapFunction0(cmmg_ChatInputScreen_tick), "$onKeyPress", $rt_wrapFunction2(cmmg_ChatInputScreen_onKeyPress), "$render", $rt_wrapFunction2(cmmg_ChatInputScreen_render), "$onMouseClick0", $rt_wrapFunction3(cmmg_ChatInputScreen_onMouseClick)],
    cmmp_Inventory, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0]);
    $rt_metadata([cmmp_WaterDropParticle, 0, cmmp_Particle, [], 0, 3, 0, 0, ["$render2", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { cmmp_WaterDropParticle_render(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }, "$tick", $rt_wrapFunction0(cmmp_WaterDropParticle_tick)],
    cmmm_Vec3D, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmml_BlockMap, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
    oluv_Matrix, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
    oluv_Matrix4f, 0, oluv_Matrix, [ji_Serializable], 0, 3, 0, 0, 0,
    ju_Comparator$NaturalOrder, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, ["$compare", $rt_wrapFunction2(ju_Comparator$NaturalOrder_compare)],
    m_TextureGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    olo_DisplayList, 0, jl_Object, [], 0, 3, 0, 0, 0,
    olo_GL11$ImmediateModeData, 0, jl_Object, [], 0, 0, 0, olo_GL11$ImmediateModeData_$callClinit, 0,
    otcic_StderrOutputStream, 0, otcic_ConsoleOutputStream, [], 0, 3, 0, 0, ["$write", $rt_wrapFunction3(otcic_StderrOutputStream_write)],
    jnc_CodingErrorAction, 0, jl_Object, [], 0, 3, 0, jnc_CodingErrorAction_$callClinit, 0,
    ju_AbstractSequentialList, 0, ju_AbstractList, [], 1, 3, 0, 0, 0,
    ju_Queue, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
    ju_Deque, 0, jl_Object, [ju_Queue, ju_SequencedCollection], 3, 3, 0, 0, 0,
    ju_LinkedList, 0, ju_AbstractSequentialList, [ju_Deque], 0, 3, 0, 0, 0,
    otjt_Int32Array, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
    otjt_Float32Array, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
    oluv_ReadableVector, 0, jl_Object, [], 3, 3, 0, 0, 0,
    oluv_Vector, 0, jl_Object, [ji_Serializable, oluv_ReadableVector], 1, 3, 0, 0, 0,
    oluv_ReadableVector2f, 0, jl_Object, [oluv_ReadableVector], 3, 3, 0, 0, 0,
    oluv_ReadableVector3f, 0, jl_Object, [oluv_ReadableVector2f], 3, 3, 0, 0, 0,
    oluv_WritableVector2f, 0, jl_Object, [], 3, 3, 0, 0, 0,
    oluv_WritableVector3f, 0, jl_Object, [oluv_WritableVector2f], 3, 3, 0, 0, 0,
    oluv_Vector3f, 0, oluv_Vector, [ji_Serializable, oluv_ReadableVector3f, oluv_WritableVector3f], 0, 3, 0, 0, 0,
    oluv_ReadableVector4f, 0, jl_Object, [oluv_ReadableVector3f], 3, 3, 0, 0, 0,
    oluv_WritableVector4f, 0, jl_Object, [oluv_WritableVector3f], 3, 3, 0, 0, 0,
    oluv_Vector4f, 0, oluv_Vector, [ji_Serializable, oluv_ReadableVector4f, oluv_WritableVector4f], 0, 3, 0, 0, 0,
    ji_Reader, 0, jl_Object, [ji_Closeable, jl_Readable], 1, 3, 0, 0, 0,
    ji_InputStreamReader, 0, ji_Reader, [], 0, 3, 0, 0, 0,
    ji_FileReader, 0, ji_InputStreamReader, [], 0, 3, 0, 0, 0,
    ji_BufferedReader, 0, ji_Reader, [], 0, 3, 0, 0, 0,
    jn_FloatBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
    ju_Set, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
    ju_AbstractSet, 0, ju_AbstractCollection, [ju_Set], 1, 3, 0, 0, 0,
    ju_TemplateCollections$AbstractImmutableSet, 0, ju_AbstractSet, [], 1, 0, 0, 0, 0,
    ju_Collections$1, 0, ju_TemplateCollections$AbstractImmutableSet, [], 0, 0, 0, 0, 0,
    ju_TemplateCollections$AbstractImmutableMap, 0, ju_AbstractMap, [], 1, 0, 0, 0, 0,
    ju_Collections$2, 0, ju_TemplateCollections$AbstractImmutableMap, [], 0, 0, 0, 0, 0,
    ju_TemplateCollections$AbstractImmutableList, 0, ju_AbstractList, [ju_RandomAccess], 1, 0, 0, 0, 0,
    ju_Collections$3, 0, ju_TemplateCollections$AbstractImmutableList, [], 0, 0, 0, 0, 0,
    ju_Iterator, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_Collections$4, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
    ju_ListIterator, 0, jl_Object, [ju_Iterator], 3, 3, 0, 0, 0,
    ju_Collections$5, 0, jl_Object, [ju_ListIterator], 0, 0, 0, 0, 0,
    ju_Collections$_clinit_$lambda$_59_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
    m_WebGLShader, 0, jl_Object, [], 0, 3, 0, m_WebGLShader_$callClinit, 0,
    m_BufferArrayGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jn_CharBufferImpl, 0, jn_CharBuffer, [], 1, 0, 0, 0, 0,
    jn_CharBufferOverArray, 0, jn_CharBufferImpl, [], 0, 0, 0, 0, 0,
    jnc_CharsetEncoder, 0, jl_Object, [], 1, 3, 0, 0, 0]);
    $rt_metadata([jnc_CoderResult, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otrf_VirtualFileSystemProvider, 0, jl_Object, [], 4, 3, 0, 0, 0,
    ji_FileInputStream, 0, ji_InputStream, [], 0, 3, 0, 0, 0,
    olo_Sync$RunningAvg, 0, jl_Object, [], 0, 0, 0, 0, 0,
    ol_Sys, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_Thread$switchContext$lambda$_19_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, ["$run", $rt_wrapFunction0(jl_Thread$switchContext$lambda$_19_0_run)],
    m_BufferGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otpp_ResourceAccessor, 0, jl_Object, [], 4, 0, 0, 0, 0,
    otciu_UnicodeHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otciu_CharMapping, 0, jl_Object, [], 0, 3, 0, 0, 0,
    ji_FileNotFoundException, "FileNotFoundException", 11, ji_IOException, [], 0, 3, 0, 0, 0,
    jl_NumberFormatException, "NumberFormatException", 12, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
    m_StreamBuffer, 0, jl_Object, [], 0, 3, 0, 0, 0,
    m_StreamBuffer$IStreamBufferInitializer, 0, jl_Object, [], 3, 3, 0, 0, 0,
    m_WebGLShader$_init_$lambda$_2_0, 0, jl_Object, [m_StreamBuffer$IStreamBufferInitializer], 0, 3, 0, 0, 0,
    jn_IntBufferImpl, 0, jn_IntBuffer, [], 1, 0, 0, 0, 0,
    jn_IntBufferOverArray, 0, jn_IntBufferImpl, [], 0, 0, 0, 0, ["$getElement0", $rt_wrapFunction1(jn_IntBufferOverArray_getElement), "$readOnly2", $rt_wrapFunction0(jn_IntBufferOverArray_readOnly)],
    otci_CharFlow, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otci_Base46, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otrf_VirtualFileSystem, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otrfm_InMemoryVirtualFileSystem, 0, jl_Object, [otrf_VirtualFileSystem], 0, 3, 0, 0, 0,
    nPm_LWJGLUtil$1, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(nPm_LWJGLUtil$1_handleEvent$exported$0)],
    nPm_LWJGLUtil$2, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(nPm_LWJGLUtil$2_handleEvent$exported$0)],
    m_ShaderGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    m_ProgramGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    m_UniformGL, 0, jl_Object, [], 4, 3, 0, 0, 0,
    m_StreamBuffer$StreamBufferInstance, 0, jl_Object, [], 0, 3, 0, 0, 0,
    otrfm_AbstractInMemoryVirtualFile, 0, jl_Object, [], 1, 3, 0, 0, 0,
    otrfm_InMemoryVirtualDirectory, 0, otrfm_AbstractInMemoryVirtualFile, [], 0, 3, 0, 0, ["$isDirectory", $rt_wrapFunction0(otrfm_InMemoryVirtualDirectory_isDirectory), "$isFile", $rt_wrapFunction0(otrfm_InMemoryVirtualDirectory_isFile), "$getChildFile", $rt_wrapFunction1(otrfm_InMemoryVirtualDirectory_getChildFile), "$createAccessor", $rt_wrapFunction3(otrfm_InMemoryVirtualDirectory_createAccessor), "$createFile0", $rt_wrapFunction1(otrfm_InMemoryVirtualDirectory_createFile)],
    jnc_CharsetDecoder, 0, jl_Object, [], 1, 3, 0, 0, 0,
    ju_SequencedMap, 0, jl_Object, [ju_Map], 3, 3, 0, 0, 0,
    ju_LinkedHashMap, 0, ju_HashMap, [ju_SequencedMap], 0, 3, 0, 0, ["$newElementArray", $rt_wrapFunction1(ju_LinkedHashMap_newElementArray)],
    jn_FloatBufferImpl, 0, jn_FloatBuffer, [], 1, 0, 0, 0, 0,
    jn_FloatBufferOverByteBuffer, 0, jn_FloatBufferImpl, [], 1, 0, 0, 0, 0,
    jn_FloatBufferOverByteBufferLittleEndian, 0, jn_FloatBufferOverByteBuffer, [], 0, 0, 0, 0, ["$getElement", $rt_wrapFunction1(jn_FloatBufferOverByteBufferLittleEndian_getElement), "$putElement0", $rt_wrapFunction2(jn_FloatBufferOverByteBufferLittleEndian_putElement)],
    jn_FloatBufferOverByteBufferBigEndian, 0, jn_FloatBufferOverByteBuffer, [], 0, 0, 0, 0, ["$getElement", $rt_wrapFunction1(jn_FloatBufferOverByteBufferBigEndian_getElement), "$putElement0", $rt_wrapFunction2(jn_FloatBufferOverByteBufferBigEndian_putElement)],
    jn_BufferUnderflowException, "BufferUnderflowException", 9, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jn_IntBufferOverByteBuffer, 0, jn_IntBufferImpl, [], 1, 0, 0, 0, ["$readOnly2", $rt_wrapFunction0(jn_IntBufferOverByteBuffer_readOnly)],
    jn_IntBufferOverByteBufferLittleEndian, 0, jn_IntBufferOverByteBuffer, [], 0, 0, 0, 0, ["$getElement0", $rt_wrapFunction1(jn_IntBufferOverByteBufferLittleEndian_getElement), "$putElement", $rt_wrapFunction2(jn_IntBufferOverByteBufferLittleEndian_putElement)],
    jn_IntBufferOverByteBufferBigEndian, 0, jn_IntBufferOverByteBuffer, [], 0, 0, 0, 0, ["$getElement0", $rt_wrapFunction1(jn_IntBufferOverByteBufferBigEndian_getElement), "$putElement", $rt_wrapFunction2(jn_IntBufferOverByteBufferBigEndian_putElement)],
    jnc_CharacterCodingException, 0, ji_IOException, [], 0, 3, 0, 0, 0,
    jl_AssertionError, "AssertionError", 12, jl_Error, [], 0, 3, 0, 0, 0,
    jl_UnsupportedOperationException, "UnsupportedOperationException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jn_ReadOnlyBufferException, "ReadOnlyBufferException", 9, jl_UnsupportedOperationException, [], 0, 3, 0, 0, 0,
    jn_BufferOverflowException, "BufferOverflowException", 9, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ju_LinkedHashMap$LinkedHashMapEntry, 0, ju_HashMap$HashEntry, [], 4, 0, 0, 0, 0,
    cmmlg_LevelGenerator, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmg_PauseScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_PauseScreen_onOpen), "$onButtonClick", $rt_wrapFunction1(cmmg_PauseScreen_onButtonClick), "$render", $rt_wrapFunction2(cmmg_PauseScreen_render)],
    cmmr_ChunkDistanceComparator, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, ["$compare", $rt_wrapFunction2(cmmr_ChunkDistanceComparator_compare)],
    cjj_InfBlocks, 0, jl_Object, [], 4, 0, 0, 0, 0]);
    $rt_metadata([cmml_MobSpawner, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmg_ErrorScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, 0,
    cmmg_GameOverScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_GameOverScreen_onOpen), "$onButtonClick", $rt_wrapFunction1(cmmg_GameOverScreen_onButtonClick), "$render", $rt_wrapFunction2(cmmg_GameOverScreen_render)],
    jnci_BufferedEncoder, 0, jnc_CharsetEncoder, [], 1, 3, 0, 0, 0,
    jnci_UTF8Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, 0,
    jnci_BufferedDecoder, 0, jnc_CharsetDecoder, [], 1, 3, 0, 0, 0,
    jnci_UTF8Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF8Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    jl_NegativeArraySizeException, "NegativeArraySizeException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    cjj_InfTree, 0, jl_Object, [], 4, 0, 0, 0, 0,
    cjj_InfCodes, 0, jl_Object, [], 4, 0, 0, 0, 0,
    ji_Writer, 0, jl_Object, [jl_Appendable, ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
    ji_OutputStreamWriter, 0, ji_Writer, [], 0, 3, 0, 0, 0,
    ji_FileWriter, 0, ji_OutputStreamWriter, [], 0, 3, 0, 0, 0,
    ji_PrintWriter, 0, ji_Writer, [], 0, 3, 0, 0, 0,
    jl_IllegalMonitorStateException, "IllegalMonitorStateException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jl_Object$Monitor, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jl_IllegalStateException, "IllegalStateException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    ji_UTFDataFormatException, "UTFDataFormatException", 11, ji_IOException, [], 0, 3, 0, 0, 0,
    ji_FileOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
    otp_PlatformQueue, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
    jl_Object$monitorExit$lambda$_8_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, ["$run", $rt_wrapFunction0(jl_Object$monitorExit$lambda$_8_0_run)],
    jl_Object$monitorEnterWait$lambda$_6_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, 0,
    jnci_AsciiDecoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_AsciiDecoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    jnci_Iso8859Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_Iso8859Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    jnci_UTF16Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF16Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    ju_AbstractList$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
    cmmlgn_Noise, 0, jl_Object, [], 1, 3, 0, 0, 0,
    cmmlgn_CombinedNoise, 0, cmmlgn_Noise, [], 4, 3, 0, 0, 0,
    cmmlgn_OctaveNoise, 0, cmmlgn_Noise, [], 0, 3, 0, 0, 0,
    cmmp_InputHandler, 0, jl_Object, [], 0, 3, 0, 0, 0,
    cmmp_InputHandlerImpl, 0, cmmp_InputHandler, [], 0, 3, 0, 0, 0,
    ju_HashMap$1, 0, ju_AbstractSet, [], 0, 0, 0, 0, 0,
    cmmp_TerrainParticle, 0, cmmp_Particle, [], 0, 3, 0, 0, ["$getParticleTexture", $rt_wrapFunction0(cmmp_TerrainParticle_getParticleTexture), "$render2", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { cmmp_TerrainParticle_render(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    otcic_Console, 0, jl_Object, [], 4, 3, 0, 0, 0,
    jur_Pattern, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
    ju_LinkedList$SequentialListIterator, 0, jl_Object, [ju_ListIterator], 0, 0, 0, 0, 0,
    ju_LinkedList$Entry, 0, jl_Object, [], 0, 0, 0, 0, 0,
    otrf_VirtualFile, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otrfm_VirtualFileImpl, 0, jl_Object, [otrf_VirtualFile], 0, 3, 0, 0, 0,
    jl_Object$NotifyListener, 0, jl_Object, [otp_PlatformRunnable, otr_EventQueue$Event], 3, 0, 0, 0, 0,
    cmmg_Button, 0, cmmg_Screen, [], 0, 3, 0, 0, 0,
    cmmlgn_PerlinNoise, 0, cmmlgn_Noise, [], 0, 3, 0, 0, 0,
    cmmma_AI, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
    cmmma_BasicAI, 0, cmmma_AI, [], 0, 3, 0, 0, ["$tick0", $rt_wrapFunction2(cmmma_BasicAI_tick), "$jumpFromGround", $rt_wrapFunction0(cmmma_BasicAI_jumpFromGround), "$update0", $rt_wrapFunction0(cmmma_BasicAI_update), "$beforeRemove", $rt_wrapFunction0(cmmma_BasicAI_beforeRemove), "$hurt", $rt_wrapFunction2(cmmma_BasicAI_hurt)],
    cmmp_Player$1, 0, cmmma_BasicAI, [], 0, 3, 0, 0, ["$update0", $rt_wrapFunction0(cmmp_Player$1_update)],
    jl_ClassLoader, 0, jl_Object, [], 1, 3, 0, jl_ClassLoader_$callClinit, 0,
    jur_AbstractSet, 0, jl_Object, [], 1, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_AbstractSet_find), "$findBack", $rt_wrapFunction4(jur_AbstractSet_findBack), "$getType0", $rt_wrapFunction0(jur_AbstractSet_getType), "$setNext", $rt_wrapFunction1(jur_AbstractSet_setNext), "$first", $rt_wrapFunction1(jur_AbstractSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_AbstractSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_AbstractSet_processSecondPass)],
    jl_SystemClassLoader, 0, jl_ClassLoader, [], 0, 0, 0, 0, 0,
    jur_FSet, 0, jur_AbstractSet, [], 0, 0, 0, jur_FSet_$callClinit, ["$matches", $rt_wrapFunction3(jur_FSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_FSet_hasConsumed)],
    jur_Lexer, 0, jl_Object, [], 0, 0, 0, 0, 0]);
    $rt_metadata([jur_PatternSyntaxException, "PatternSyntaxException", 8, jl_IllegalArgumentException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jur_PatternSyntaxException_getMessage)],
    jur_NonCapFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapFSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_NonCapFSet_hasConsumed)],
    jur_AheadFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AheadFSet_matches)],
    jur_BehindFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BehindFSet_matches)],
    jur_AtomicFSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicFSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_AtomicFSet_hasConsumed)],
    jur_FinalSet, 0, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FinalSet_matches)],
    jur_LeafSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafSet_matches), "$charCount0", $rt_wrapFunction0(jur_LeafSet_charCount), "$hasConsumed", $rt_wrapFunction1(jur_LeafSet_hasConsumed)],
    jur_EmptySet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_EmptySet_accepts), "$find0", $rt_wrapFunction3(jur_EmptySet_find), "$findBack", $rt_wrapFunction4(jur_EmptySet_findBack), "$hasConsumed", $rt_wrapFunction1(jur_EmptySet_hasConsumed)],
    jur_JointSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_JointSet_matches), "$setNext", $rt_wrapFunction1(jur_JointSet_setNext), "$first", $rt_wrapFunction1(jur_JointSet_first), "$hasConsumed", $rt_wrapFunction1(jur_JointSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_JointSet_processSecondPass)],
    jur_NonCapJointSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapJointSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_NonCapJointSet_hasConsumed)],
    jur_AtomicJointSet, 0, jur_NonCapJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicJointSet_matches), "$setNext", $rt_wrapFunction1(jur_AtomicJointSet_setNext)],
    jur_PositiveLookAhead, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookAhead_hasConsumed)],
    jur_NegativeLookAhead, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookAhead_hasConsumed)],
    jur_PositiveLookBehind, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookBehind_hasConsumed)],
    jur_NegativeLookBehind, 0, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookBehind_hasConsumed)],
    jur_SingleSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SingleSet_matches), "$find0", $rt_wrapFunction3(jur_SingleSet_find), "$findBack", $rt_wrapFunction4(jur_SingleSet_findBack), "$first", $rt_wrapFunction1(jur_SingleSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_SingleSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_SingleSet_processSecondPass)],
    jur_SpecialToken, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_AbstractCharClass, 0, jur_SpecialToken, [], 1, 0, 0, jur_AbstractCharClass_$callClinit, ["$getBits", $rt_wrapFunction0(jur_AbstractCharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_AbstractCharClass_getInstance), "$hasUCI", $rt_wrapFunction0(jur_AbstractCharClass_hasUCI)],
    jur_CharClass, "CharClass", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass_contains), "$getBits", $rt_wrapFunction0(jur_CharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_CharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_CharClass_getInstance), "$toString", $rt_wrapFunction0(jur_CharClass_toString), "$hasUCI", $rt_wrapFunction0(jur_CharClass_hasUCI)],
    ju_MissingResourceException, "MissingResourceException", 7, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jur_QuantifierSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$first", $rt_wrapFunction1(jur_QuantifierSet_first), "$hasConsumed", $rt_wrapFunction1(jur_QuantifierSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_QuantifierSet_processSecondPass)],
    jur_LeafQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafQuantifierSet_matches)],
    jur_CompositeQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeQuantifierSet_matches)],
    jur_GroupQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_GroupQuantifierSet_matches)],
    jur_AltQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltQuantifierSet_setNext)],
    jur_UnifiedQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UnifiedQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_UnifiedQuantifierSet_find)],
    jur_AbstractCharClass$LazyCharClass, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_Quantifier, "Quantifier", 8, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Quantifier_toString)],
    jur_FSet$PossessiveFSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FSet$PossessiveFSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_FSet$PossessiveFSet_hasConsumed)],
    ju_BitSet, 0, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
    jur_LowHighSurrogateRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, 0,
    jur_CompositeRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeRangeSet_matches), "$setNext", $rt_wrapFunction1(jur_CompositeRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_CompositeRangeSet_hasConsumed), "$first", $rt_wrapFunction1(jur_CompositeRangeSet_first)],
    jur_SupplRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SupplRangeSet_matches), "$contains", $rt_wrapFunction1(jur_SupplRangeSet_contains), "$first", $rt_wrapFunction1(jur_SupplRangeSet_first), "$setNext", $rt_wrapFunction1(jur_SupplRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_SupplRangeSet_hasConsumed)],
    jur_UCISupplRangeSet, 0, jur_SupplRangeSet, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_UCISupplRangeSet_contains)],
    jur_UCIRangeSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCIRangeSet_accepts)],
    jur_RangeSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_RangeSet_accepts), "$first", $rt_wrapFunction1(jur_RangeSet_first)],
    jur_HangulDecomposedCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HangulDecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HangulDecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_HangulDecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HangulDecomposedCharSet_hasConsumed)],
    jur_CharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$charCount0", $rt_wrapFunction0(jur_CharSet_charCount), "$accepts", $rt_wrapFunction2(jur_CharSet_accepts), "$find0", $rt_wrapFunction3(jur_CharSet_find), "$findBack", $rt_wrapFunction4(jur_CharSet_findBack), "$first", $rt_wrapFunction1(jur_CharSet_first)],
    jur_UCICharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCICharSet_accepts)],
    jur_CICharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CICharSet_accepts)],
    jur_DecomposedCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_DecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_DecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_DecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_DecomposedCharSet_hasConsumed)],
    jur_UCIDecomposedCharSet, 0, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
    jur_CIDecomposedCharSet, 0, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
    jur_PossessiveGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet_matches)],
    jur_PosPlusGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet_matches)],
    jur_AltGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltGroupQuantifierSet_setNext)],
    jur_PosAltGroupQuantifierSet, 0, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_PosAltGroupQuantifierSet_setNext)],
    jur_CompositeGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeGroupQuantifierSet_matches)],
    jur_PosCompositeGroupQuantifierSet, 0, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosCompositeGroupQuantifierSet_matches)],
    jur_ReluctantGroupQuantifierSet, 0, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet_matches)]]);
    $rt_metadata([jur_RelAltGroupQuantifierSet, 0, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet_matches)],
    jur_RelCompositeGroupQuantifierSet, 0, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelCompositeGroupQuantifierSet_matches)],
    jur_DotAllQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotAllQuantifierSet_find)],
    jur_DotQuantifierSet, 0, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotQuantifierSet_find)],
    jur_AbstractLineTerminator, 0, jl_Object, [], 1, 0, 0, 0, 0,
    jur_PossessiveQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveQuantifierSet_matches)],
    jur_PossessiveAltQuantifierSet, 0, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet_matches)],
    jur_PossessiveCompositeQuantifierSet, 0, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveCompositeQuantifierSet_matches)],
    jur_ReluctantQuantifierSet, 0, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantQuantifierSet_matches)],
    jur_ReluctantAltQuantifierSet, 0, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet_matches)],
    jur_ReluctantCompositeQuantifierSet, 0, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantCompositeQuantifierSet_matches)],
    jur_SOLSet, 0, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_SOLSet_hasConsumed)],
    jur_WordBoundary, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_WordBoundary_matches), "$hasConsumed", $rt_wrapFunction1(jur_WordBoundary_hasConsumed)],
    jur_PreviousMatch, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PreviousMatch_matches), "$hasConsumed", $rt_wrapFunction1(jur_PreviousMatch_hasConsumed)],
    jur_EOLSet, 0, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOLSet_hasConsumed)],
    jur_EOISet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOISet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOISet_hasConsumed)],
    jur_MultiLineSOLSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineSOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineSOLSet_hasConsumed)],
    jur_DotAllSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllSet_matches), "$setNext", $rt_wrapFunction1(jur_DotAllSet_setNext), "$getType0", $rt_wrapFunction0(jur_DotAllSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotAllSet_hasConsumed)],
    jur_DotSet, 0, jur_JointSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotSet_matches), "$setNext", $rt_wrapFunction1(jur_DotSet_setNext), "$getType0", $rt_wrapFunction0(jur_DotSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotSet_hasConsumed)],
    jur_UEOLSet, 0, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UEOLSet_hasConsumed)],
    jur_UMultiLineEOLSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UMultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UMultiLineEOLSet_hasConsumed)],
    jur_MultiLineEOLSet, 0, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineEOLSet_hasConsumed)],
    jur_CIBackReferenceSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CIBackReferenceSet_matches), "$setNext", $rt_wrapFunction1(jur_CIBackReferenceSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_CIBackReferenceSet_hasConsumed)],
    jur_BackReferenceSet, 0, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BackReferenceSet_matches), "$find0", $rt_wrapFunction3(jur_BackReferenceSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferenceSet_findBack), "$first", $rt_wrapFunction1(jur_BackReferenceSet_first)],
    jur_UCIBackReferenceSet, 0, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UCIBackReferenceSet_matches)],
    jl_StringBuffer, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert1", $rt_wrapFunction4(jl_StringBuffer_insert), "$append3", $rt_wrapFunction3(jl_StringBuffer_append), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuffer_ensureCapacity), "$insert0", $rt_wrapFunction2(jl_StringBuffer_insert0)],
    jur_SequenceSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SequenceSet_accepts), "$find0", $rt_wrapFunction3(jur_SequenceSet_find), "$findBack", $rt_wrapFunction4(jur_SequenceSet_findBack), "$first", $rt_wrapFunction1(jur_SequenceSet_first)],
    jur_UCISequenceSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISequenceSet_accepts)],
    jur_CISequenceSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CISequenceSet_accepts)],
    jur_AbstractCharClass$PredefinedCharacterClasses, 0, jl_Object, [], 4, 0, 0, jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit, 0,
    jur_UCISupplCharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISupplCharSet_accepts)],
    jur_LowSurrogateCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_LowSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_LowSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_LowSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_LowSurrogateCharSet_findBack), "$first", $rt_wrapFunction1(jur_LowSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_LowSurrogateCharSet_hasConsumed)],
    jur_HighSurrogateCharSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HighSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HighSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_HighSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_HighSurrogateCharSet_findBack), "$first", $rt_wrapFunction1(jur_HighSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HighSurrogateCharSet_hasConsumed)],
    jur_SupplCharSet, 0, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SupplCharSet_accepts), "$find0", $rt_wrapFunction3(jur_SupplCharSet_find), "$findBack", $rt_wrapFunction4(jur_SupplCharSet_findBack), "$first", $rt_wrapFunction1(jur_SupplCharSet_first)],
    jur_AbstractLineTerminator$1, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$1_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$1_isAfterLineTerminator)],
    jur_AbstractLineTerminator$2, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$2_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$2_isAfterLineTerminator)],
    jur_SequenceSet$IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
    jur_AbstractCharClass$LazySpace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace_computeValue)],
    jur_AbstractCharClass$LazyDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit_computeValue)],
    jur_AbstractCharClass$LazyLower, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower_computeValue)],
    jur_AbstractCharClass$LazyUpper, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper_computeValue)],
    jur_AbstractCharClass$LazyASCII, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII_computeValue)],
    jur_AbstractCharClass$LazyAlpha, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha_computeValue)],
    jur_AbstractCharClass$LazyAlnum, 0, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum_computeValue)],
    jur_AbstractCharClass$LazyPunct, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct_computeValue)],
    jur_AbstractCharClass$LazyGraph, 0, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph_computeValue)],
    jur_AbstractCharClass$LazyPrint, 0, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint_computeValue)],
    jur_AbstractCharClass$LazyBlank, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank_computeValue)],
    jur_AbstractCharClass$LazyCntrl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl_computeValue)]]);
    $rt_metadata([jur_AbstractCharClass$LazyXDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaLowerCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase_computeValue)],
    jur_AbstractCharClass$LazyJavaUpperCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase_computeValue)],
    jur_AbstractCharClass$LazyJavaWhitespace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace_computeValue)],
    jur_AbstractCharClass$LazyJavaMirrored, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored_computeValue)],
    jur_AbstractCharClass$LazyJavaDefined, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined_computeValue)],
    jur_AbstractCharClass$LazyJavaDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue)],
    jur_AbstractCharClass$LazyJavaISOControl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl_computeValue)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue)],
    jur_AbstractCharClass$LazyJavaLetter, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter_computeValue)],
    jur_AbstractCharClass$LazyJavaLetterOrDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue)],
    jur_AbstractCharClass$LazyJavaSpaceChar, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar_computeValue)],
    jur_AbstractCharClass$LazyJavaTitleCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase_computeValue)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue)],
    jur_AbstractCharClass$LazyWord, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord_computeValue)],
    jur_AbstractCharClass$LazyNonWord, 0, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord_computeValue)],
    jur_AbstractCharClass$LazyNonSpace, 0, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace_computeValue)],
    jur_AbstractCharClass$LazyNonDigit, 0, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit_computeValue)],
    jur_AbstractCharClass$LazyRange, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyRange_computeValue)],
    jur_AbstractCharClass$LazySpecialsBlock, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock_computeValue)],
    jur_AbstractCharClass$LazyCategory, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategory_computeValue)],
    jur_AbstractCharClass$LazyCategoryScope, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategoryScope_computeValue)],
    otciu_UnicodeHelper$Range, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_Float, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
    cmml_NextTickListEntry, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmm_HumanoidMob, 0, cmmm_Mob, [], 0, 3, 0, 0, ["$renderModel", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { cmmm_HumanoidMob_renderModel(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    cmmm_Zombie, 0, cmmm_HumanoidMob, [], 0, 3, 0, 0, 0,
    cmmm_Skeleton, 0, cmmm_Zombie, [], 0, 3, 0, 0, 0,
    cmmm_QuadrupedMob, 0, cmmm_Mob, [], 0, 3, 0, 0, 0,
    cmmm_Pig, 0, cmmm_QuadrupedMob, [], 0, 3, 0, 0, ["$die", $rt_wrapFunction1(cmmm_Pig_die)],
    cmmm_Creeper, 0, cmmm_Mob, [], 0, 3, 0, 0, ["$getBrightness1", $rt_wrapFunction1(cmmm_Creeper_getBrightness)],
    cmmm_Spider, 0, cmmm_QuadrupedMob, [], 0, 3, 0, 0, 0,
    cmmm_Sheep, 0, cmmm_QuadrupedMob, [], 0, 3, 0, 0, ["$aiStep", $rt_wrapFunction0(cmmm_Sheep_aiStep), "$die", $rt_wrapFunction1(cmmm_Sheep_die), "$hurt", $rt_wrapFunction2(cmmm_Sheep_hurt), "$renderModel", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { cmmm_Sheep_renderModel(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
    ju_HashMap$AbstractMapIterator, 0, jl_Object, [], 0, 0, 0, 0, 0,
    ju_HashMap$KeyIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, 0,
    ju_NoSuchElementException, "NoSuchElementException", 7, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    cmm_StopGameException, "StopGameException", 2, jl_Error, [], 0, 3, 0, 0, 0,
    cjj_Inflate$Return, "Inflate$Return", 5, jl_Exception, [], 0, 0, 0, 0, 0,
    cjj_GZIPHeader, 0, jl_Object, [jl_Cloneable], 0, 3, 0, 0, 0,
    cjj_CRC32, 0, jl_Object, [cjj_Checksum], 4, 3, 0, 0, ["$update2", $rt_wrapFunction3(cjj_CRC32_update), "$reset0", $rt_wrapFunction0(cjj_CRC32_reset), "$reset1", $rt_wrapFunction1(cjj_CRC32_reset0), "$getValue", $rt_wrapFunction0(cjj_CRC32_getValue)],
    cmmi_PrimedTnt, 0, cmm_Entity, [], 0, 3, 0, 0, ["$tick", $rt_wrapFunction0(cmmi_PrimedTnt_tick), "$render10", $rt_wrapFunction2(cmmi_PrimedTnt_render), "$playerTouch", $rt_wrapFunction1(cmmi_PrimedTnt_playerTouch), "$hurt", $rt_wrapFunction2(cmmi_PrimedTnt_hurt), "$isPickable", $rt_wrapFunction0(cmmi_PrimedTnt_isPickable)],
    jur_AbstractCharClass$1, "AbstractCharClass$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$1_contains)],
    jur_AbstractCharClass$2, "AbstractCharClass$2", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$2_contains)],
    jur_CharClass$18, "CharClass$18", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$18_contains), "$toString", $rt_wrapFunction0(jur_CharClass$18_toString)],
    jur_CharClass$1, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$1_contains)],
    jur_CharClass$3, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$3_contains)],
    jur_CharClass$2, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$2_contains)]]);
    $rt_metadata([jur_CharClass$5, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$5_contains)],
    jur_CharClass$4, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$4_contains)],
    jur_CharClass$7, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$7_contains)],
    jur_CharClass$6, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$6_contains)],
    jur_CharClass$9, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$9_contains)],
    jur_CharClass$8, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$8_contains)],
    jur_CharClass$11, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$11_contains)],
    jur_CharClass$10, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$10_contains)],
    jur_CharClass$13, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$13_contains)],
    jur_CharClass$12, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$12_contains)],
    jur_CharClass$15, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$15_contains)],
    jur_CharClass$14, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$14_contains)],
    jur_CharClass$17, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$17_contains)],
    jur_CharClass$16, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$16_contains)],
    ju_ConcurrentModificationException, "ConcurrentModificationException", 7, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    cmml_BlockMap$Slot, 0, jl_Object, [ji_Serializable], 0, 0, 0, 0, 0,
    cmml_SyntheticClass, 0, jl_Object, [], 4, 0, 0, 0, 0,
    cmmma_BasicAttackAI, 0, cmmma_BasicAI, [], 0, 3, 0, 0, ["$update0", $rt_wrapFunction0(cmmma_BasicAttackAI_update), "$attack", $rt_wrapFunction1(cmmma_BasicAttackAI_attack), "$hurt", $rt_wrapFunction2(cmmma_BasicAttackAI_hurt)],
    cmmm_Skeleton$1, 0, cmmma_BasicAttackAI, [], 4, 0, 0, 0, ["$tick0", $rt_wrapFunction2(cmmm_Skeleton$1_tick), "$beforeRemove", $rt_wrapFunction0(cmmm_Skeleton$1_beforeRemove)],
    cmmm_Creeper$1, 0, cmmma_BasicAttackAI, [], 4, 0, 0, 0, ["$attack", $rt_wrapFunction1(cmmm_Creeper$1_attack), "$beforeRemove", $rt_wrapFunction0(cmmm_Creeper$1_beforeRemove)],
    cmmma_JumpAttackAI, 0, cmmma_BasicAttackAI, [], 0, 3, 0, 0, ["$jumpFromGround", $rt_wrapFunction0(cmmma_JumpAttackAI_jumpFromGround)],
    cmmm_Sheep$1, 0, cmmma_BasicAI, [], 4, 0, 0, 0, ["$update0", $rt_wrapFunction0(cmmm_Sheep$1_update)],
    ji_ByteArrayOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
    jl_AbstractStringBuilder$Constants, 0, jl_Object, [], 0, 0, 0, 0, 0,
    otcit_FloatAnalyzer, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otcit_FloatAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_Long, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
    otcit_DoubleAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jnc_CoderMalfunctionError, "CoderMalfunctionError", 10, jl_Error, [], 0, 3, 0, 0, 0,
    jur_BackReferencedSingleSet, 0, jur_SingleSet, [], 0, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_BackReferencedSingleSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferencedSingleSet_findBack), "$processBackRefReplacement", $rt_wrapFunction0(jur_BackReferencedSingleSet_processBackRefReplacement)],
    otci_Base64Impl, 0, jl_Object, [], 4, 3, 0, 0, 0,
    cmmg_OptionsScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_OptionsScreen_onOpen), "$onButtonClick", $rt_wrapFunction1(cmmg_OptionsScreen_onButtonClick), "$render", $rt_wrapFunction2(cmmg_OptionsScreen_render)],
    cmmg_GenerateLevelScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_GenerateLevelScreen_onOpen), "$onButtonClick", $rt_wrapFunction1(cmmg_GenerateLevelScreen_onButtonClick), "$render", $rt_wrapFunction2(cmmg_GenerateLevelScreen_render)],
    cmmg_LoadLevelScreen, 0, cmmg_GuiScreen, [jl_Runnable], 0, 3, 0, 0, ["$setLevels", $rt_wrapFunction1(cmmg_LoadLevelScreen_setLevels), "$onOpen", $rt_wrapFunction0(cmmg_LoadLevelScreen_onOpen), "$onButtonClick", $rt_wrapFunction1(cmmg_LoadLevelScreen_onButtonClick), "$openLevel0", $rt_wrapFunction1(cmmg_LoadLevelScreen_openLevel), "$openLevel", $rt_wrapFunction1(cmmg_LoadLevelScreen_openLevel0), "$render", $rt_wrapFunction2(cmmg_LoadLevelScreen_render), "$onClose", $rt_wrapFunction0(cmmg_LoadLevelScreen_onClose),
    "$tick", $rt_wrapFunction0(cmmg_LoadLevelScreen_tick)],
    cmmg_SaveLevelScreen, 0, cmmg_LoadLevelScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_SaveLevelScreen_onOpen), "$setLevels", $rt_wrapFunction1(cmmg_SaveLevelScreen_setLevels), "$render", $rt_wrapFunction2(cmmg_SaveLevelScreen_render), "$openLevel0", $rt_wrapFunction1(cmmg_SaveLevelScreen_openLevel), "$openLevel", $rt_wrapFunction1(cmmg_SaveLevelScreen_openLevel0)],
    jur_MatchResult, 0, jl_Object, [], 3, 3, 0, 0, 0,
    jur_Matcher, 0, jl_Object, [jur_MatchResult], 4, 3, 0, 0, 0,
    jnci_BufferedEncoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jnci_BufferedDecoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jnc_BufferUnderflowException, "BufferUnderflowException", 10, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnc_BufferOverflowException, "BufferOverflowException", 10, jl_RuntimeException, [], 0, 3, 0, 0, 0,
    jnc_MalformedInputException, "MalformedInputException", 10, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_MalformedInputException_getMessage)],
    jnc_UnmappableCharacterException, "UnmappableCharacterException", 10, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_UnmappableCharacterException_getMessage)],
    jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1_contains)],
    jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1_contains)],
    jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1_contains)],
    jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1_contains)],
    jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1_contains)],
    jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1_contains)],
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains)]]);
    $rt_metadata([jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1_contains)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains)],
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains)],
    jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1_contains)],
    jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains)],
    jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1_contains)],
    jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1_contains)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains)],
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains)],
    jur_UnicodeCategory, "UnicodeCategory", 8, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_UnicodeCategory_contains)],
    jur_UnicodeCategoryScope, "UnicodeCategoryScope", 8, jur_UnicodeCategory, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_UnicodeCategoryScope_contains)],
    otrfm_InMemoryVirtualFile, 0, otrfm_AbstractInMemoryVirtualFile, [], 0, 3, 0, 0, ["$isDirectory", $rt_wrapFunction0(otrfm_InMemoryVirtualFile_isDirectory), "$isFile", $rt_wrapFunction0(otrfm_InMemoryVirtualFile_isFile), "$getChildFile", $rt_wrapFunction1(otrfm_InMemoryVirtualFile_getChildFile), "$createAccessor", $rt_wrapFunction3(otrfm_InMemoryVirtualFile_createAccessor), "$createFile0", $rt_wrapFunction1(otrfm_InMemoryVirtualFile_createFile)],
    cmmg_ControlsScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_ControlsScreen_onOpen), "$onButtonClick", $rt_wrapFunction1(cmmg_ControlsScreen_onButtonClick), "$onKeyPress", $rt_wrapFunction2(cmmg_ControlsScreen_onKeyPress), "$render", $rt_wrapFunction2(cmmg_ControlsScreen_render)],
    cmmg_OptionButton, 0, cmmg_Button, [], 4, 3, 0, 0, 0,
    cmmg_LevelDialog, 0, jl_Thread, [], 4, 0, 0, 0, 0,
    cmmp_SmokeParticle, 0, cmmp_Particle, [], 0, 3, 0, 0, ["$render2", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { cmmp_SmokeParticle_render(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }, "$tick", $rt_wrapFunction0(cmmp_SmokeParticle_tick)],
    jur_MatchResultImpl, 0, jl_Object, [jur_MatchResult], 0, 0, 0, 0, 0,
    cmmg_LevelNameScreen, 0, cmmg_GuiScreen, [], 4, 3, 0, 0, ["$onOpen", $rt_wrapFunction0(cmmg_LevelNameScreen_onOpen), "$onClose", $rt_wrapFunction0(cmmg_LevelNameScreen_onClose), "$tick", $rt_wrapFunction0(cmmg_LevelNameScreen_tick), "$onButtonClick", $rt_wrapFunction1(cmmg_LevelNameScreen_onButtonClick), "$onKeyPress", $rt_wrapFunction2(cmmg_LevelNameScreen_onKeyPress), "$render", $rt_wrapFunction2(cmmg_LevelNameScreen_render)],
    juf_DoubleSupplier, 0, jl_Object, [], 3, 3, 0, 0, 0,
    ju_Random$nextGaussian$lambda$_9_0, 0, jl_Object, [juf_DoubleSupplier], 0, 3, 0, 0, 0,
    otci_RandomUtils, 0, jl_Object, [], 0, 3, 0, 0, 0,
    jl_StrictMath, 0, jl_Object, [], 4, 3, 0, 0, 0,
    otrf_VirtualFileAccessor, 0, jl_Object, [], 3, 3, 0, 0, 0,
    otrfm_InMemoryVirtualFile$1, 0, jl_Object, [otrf_VirtualFileAccessor], 0, 0, 0, 0, 0,
    cmmi_TakeEntityAnim, 0, cmm_Entity, [], 0, 3, 0, 0, ["$tick", $rt_wrapFunction0(cmmi_TakeEntityAnim_tick), "$render10", $rt_wrapFunction2(cmmi_TakeEntityAnim_render)],
    jur_IntArrHash, 0, jl_Object, [], 0, 0, 0, 0, 0]);
    function $rt_array(cls, data) {
        this.$monitor = null;
        this.$id$ = 0;
        this.type = cls;
        this.data = data;
        this.constructor = $rt_arraycls(cls);
    }
    $rt_array.prototype = $rt_globals.Object.create(($rt_objcls()).prototype);
    $rt_array.prototype.toString = function() {
        var str = "[";
        for (var i = 0;i < this.data.length;++i) {
            if (i > 0) {
                str += ", ";
            }
            str += this.data[i].toString();
        }
        str += "]";
        return str;
    };
    $rt_setCloneMethod($rt_array.prototype, function() {
        var dataCopy;
        if ('slice' in this.data) {
            dataCopy = this.data.slice();
        } else {
            dataCopy = new this.data.constructor(this.data.length);
            for (var i = 0;i < dataCopy.length;++i) {
                dataCopy[i] = this.data[i];
            }
        }
        return new $rt_array(this.type, dataCopy);
    });
    $rt_stringPool(["Can\'t enter monitor from another thread synchronously", "0", "resources.mc", "", "fuck", "shit", "/", ": ", "\tat ", "Caused by: ", "Patter is null", "String is null", "String is empty", "String contains invalid digits: ", "String contains digits out of radix ", "The value is too big for int type: ", "Illegal radix: ", "null", "false", "true", "overflow-x:hidden;overflow-y:hidden;", "WebGL 2.0 is not supported in your browser :(", "yee", "GL_INVALID_ENUM", "GL_INVALID_VALUE", "GL_INVALID_OPERATION",
    "GL_OUT_OF_MEMORY", "Unknown Error", "CONTEXT_LOST_WEBGL", "########## GL ERROR ##########", "@ ", "Minecraft 0.30", "Pre startup", "Startup", "minecraftclassicforever", "/default.png", "Post startup", "Pre render", "Post render", " fps, ", " chunk updates", "/rock.png", "/particles.png", "/terrain.png", "/clouds.png", "/water.png", "/rain.png", "anonymous", "Spawning..", "humanoid", "title cannot be null", "Game", "Either src or dest is null", "UTF-8", "EAGPKG!!", "invalid epk file", "<file>", " end", "invalid file hash for ",
    "</file>", "step.", "/dirt.png", "main", "End of stream reached", "Malformed UTF-8 sequence", "Should never been thrown", "Stream closed", "footer is not found", "Unexpected end of ZLIB input stream", "object", "function", "string", "number", "undefined", "Index out of bounds", "Replacement preconditions do not hold", "New position ", " is outside of range [0;", "New limit ", "The last byte in src ", " is outside of array of size ", "Length ", " must be non-negative", "Offset ", "BIG_ENDIAN", "LITTLE_ENDIAN",
    "none", "-", "grass", "cloth", "gravel", "stone", "metal", "wood", "US-ASCII", "ISO-8859-1", "UTF-16", "UTF-16BE", "UTF-16LE", "Capacity is negative: ", "The last char in dst ", "Start ", "The last char in src ", " is outside of string of size ", " must be before end ", "keyup", "NONE", "ESCAPE", "1", "2", "3", "4", "5", "6", "7", "8", "9", "MINUS", "EQUALS", "BACK", "TAB", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "LBRACKET", "RBRACKET", "RETURN", "LCONTROL", "A", "S", "D", "F", "G", "H", "J", "K",
    "L", "SEMICOLON", "APOSTROPHE", "GRAVE", "LSHIFT", "BACKSLASH", "Z", "X", "C", "V", "B", "N", "M", "COMMA", "PERIOD", "SLASH", "RSHIFT", "MULTIPLY", "LMENU", "SPACE", "CAPITAL", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "NUMLOCK", "SCROLL", "NUMPAD7", "NUMPAD8", "NUMPAD9", "SUBTRACT", "NUMPAD4", "NUMPAD5", "NUMPAD6", "ADD", "NUMPAD1", "NUMPAD2", "NUMPAD3", "NUMPAD0", "DECIMAL", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "KANA", "F19", "CONVERT", "NOCONVERT", "YEN", "NUMPADEQUALS",
    "CIRCUMFLEX", "AT", "COLON", "UNDERLINE", "KANJI", "STOP", "AX", "UNLABELED", "NUMPADENTER", "RCONTROL", "SECTION", "NUMPADCOMMA", "DIVIDE", "SYSRQ", "RMENU", "FUNCTION", "PAUSE", "HOME", "UP", "PRIOR", "LEFT", "RIGHT", "END", "DOWN", "NEXT", "INSERT", "DELETE", "CLEAR", "LMETA", "RMETA", "APPS", "POWER", "SLEEP", "BUTTON", "mousedown", "wheel", "only GL_QUADS supported in a display list", "vertex format inconsistent in display list", "matrix not supported in display list", "projection matrix stack overflow",
    "texture matrix stack overflow", "modelview matrix stack overflow", "projection matrix stack underflow", "texture matrix stack underflow", "modelview matrix stack underflow", "glTexImage2D: Unsupported Buffer type!", "#version 300 es", "Forward", "Left", "Back", "Right", "Jump", "Build", "Chat", "Toggle fog", "Save location", "Load location", "options.txt", "OFF", "ON", "Music: ", "Sound: ", "Invert mouse: ", "Show FPS: ", "Render distance: ", "View bobbing: ", "3d anaglyph: ", "Limit framerate: ", ":",
    "music", "sound", "invertYMouse", "showFrameRate", "viewDistance", "bobView", "anaglyph3d", "limitFramerate", "key_", "Failed to load options", "music:", "sound:", "invertYMouse:", "showFrameRate:", "viewDistance:", "bobView:", "anaglyph3d:", "limitFramerate:", "Failed to save options", "FAR", "NORMAL", "SHORT", "TINY", "!!", "0123456789abcdef", "humanoid.armor", "creeper", "skeleton", "zombie", "pig", "sheep", "spider", "sheep.fur", "/char.png", "/gui/gui.png", "/gui/icons.png", "0.30", "Score: &e", "Arrows: ",
    "The level is corrupt!", "need dictionary", "unknown compression method", "unknown header flags set", "incorrect data check", "incorrect length check", "incorrect header check", "invalid window size", "bad extra field length", "header crc mismatch", "Suck my dick nigga", "The last int in src ", "/item/arrows.png", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ,.:-_\'*!\\\"#%/()=+?[]{}<>@|$;", "_", "> ", " ", "IGNORE", "REPLACE", "REPORT", "This stream is already closed", "The last float in dst ",
    "\n#define CC_a_color\n", "#define CC_a_normal\n", "#define CC_a_texture0\n", "#define CC_lighting\n", "#define CC_fog\n", "#define CC_alphatest\n", "#define CC_unit0\n", "\n#define CC_VERT\n", "\n\n", "\n", "\n[main.Main.vertexFragmentShader][CC_VERT] ", "broken shader source", "\n#define CC_FRAG\n", "\n[main.Main.vertexFragmentShader][CC_FRAG] ", "a_position", "a_texture0", "a_color", "a_normal", "\n[LINKER] ", "matrix_m", "matrix_p", "matrix_t", "colorUniform", "normalUniform", "light0Pos", "light1Pos",
    "fogColor", "fogMode", "fogStart", "fogEnd", "fogDensity", "fogPremultiply", "alphaTestF", "tex0", "texCoordV0", "precision highp int;\nprecision highp sampler2D;\nprecision highp float;\n\nuniform mat4 matrix_m;\nuniform mat4 matrix_p;\nuniform mat4 matrix_t;\n\n#ifdef CC_VERT\n\nin vec3 a_position;\n#ifdef CC_a_texture0\nin vec2 a_texture0;\n#endif\n#ifdef CC_a_color\nin vec4 a_color;\n#endif\n#ifdef CC_a_normal\nin vec4 a_normal;\n#endif\n\n#ifdef CC_fog\nout vec4 v_position;\n#endif\n#ifdef CC_a_color\nout vec4 v_color;\n#endif\n#ifdef CC_a_normal\nout vec4 v_normal;\n#endif\n#ifdef CC_a_texture0\nout vec2 v_texture0;\n#endif\n\nvoid main(){\n\tvec4 "
    + "pos = matrix_m * vec4(a_position, 1.0);\n#ifdef CC_fog\n\tv_position = pos;\n#endif\n#ifdef CC_a_color\n\tv_color = a_color;\n#endif\n#ifdef CC_a_normal\n\tv_normal = a_normal;\n#endif\n#ifdef CC_a_texture0\n\tv_texture0 = a_texture0;\n#endif\n\tgl_Position = matrix_p * pos;\n}\n\n#endif\n\n#ifdef CC_FRAG\n\n#ifdef CC_unit0\nuniform sampler2D tex0;\n#ifndef CC_a_texture0\nuniform vec2 texCoordV0;\n#endif\n#endif\n#ifdef CC_lighting\nuniform vec3 light0Pos;\nuniform vec3 light1Pos;\nuniform vec3 normalUniform;\n#endif\n#ifdef CC_fog\nuniform ve"
    + "c4 fogColor;\nuniform int fogMode;\nuniform float fogStart;\nuniform float fogEnd;\nuniform float fogDensity;\nuniform float fogPremultiply;\n#endif\nuniform vec4 colorUniform;\n#ifdef CC_alphatest\nuniform float alphaTestF;\n#endif\n\n#ifdef CC_fog\nin vec4 v_position;\n#endif\n#ifdef CC_a_color\nin vec4 v_color;\n#endif\n#ifdef CC_a_normal\nin vec4 v_normal;\n#endif\n#ifdef CC_a_texture0\nin vec2 v_texture0;\n#endif\n\nout vec4 fragColor;\n\n#define TEX_MAT3x2(mat4In) mat3x2(mat4In[0].xy,mat4In[1].xy,mat4In[3].xy)\n\nvoid main(){\n#if"
    + "def CC_a_color\n\tvec4 color = colorUniform * v_color;\n#else\n\tvec4 color = colorUniform;\n#endif\n\t\n#ifdef CC_unit0\n#ifdef CC_a_texture0\n\tcolor *= texture(tex0, (TEX_MAT3x2(matrix_t) * vec3(v_texture0, 1.0)).xy).rgba;\n#else\n\tcolor *= texture(tex0, (TEX_MAT3x2(matrix_t) * vec3(texCoordV0, 1.0)).xy).rgba;\n#endif\n#endif\n\n#ifdef CC_alphatest\n\tif(color.a < alphaTestF){\n\t\tdiscard;\n\t}\n#endif\n\n#ifdef CC_lighting\n#ifdef CC_a_normal\n\tvec3 normal = ((v_normal.xyz - 0.5) * 2.0);\n#else\n\tvec3 normal = normalUniform;\n#endif\n\t"
    + "normal = normalize(mat3(matrix_m) * normal);\n\tfloat ins = max(dot(normal, -light0Pos), 0.0) + max(dot(normal, -light1Pos), 0.0);\n\tcolor.rgb *= min((0.4 + ins * 0.6), 1.0);\n#endif\n\t\n#ifdef CC_fog\n\tfloat dist = sqrt(dot(v_position, v_position));\n\tfloat i = (fogMode == 1) ? clamp((dist - fogStart) / (fogEnd - fogStart), 0.0, 1.0) : clamp(1.0 - exp(-(fogDensity * dist)), 0.0, 1.0);\n\tcolor.rgb = mix(color.rgb, fogColor.xyz, i * fogColor.a);\n#endif\n\t\n\tfragColor = color;\n}\n\n#endif\n", "Action must be non-null",
    "Index ", "array size does not equal image size", "Directory is read-only", "File ", " already exists", "newAction must be non-null", "Generating level", "Raising..", "Eroding..", "Soiling..", "Carving..", "Watering..", "Melting..", "Growing..", "Planting..", "A Nice World", "Diagonal flood!?", "Options...", "Generate new level...", "Save level..", "Load level..", "Back to game", "Save level", "Game menu", "invalid stored block lengths", "invalid block type", "too many length or distance symbols", "invalid bit length repeat",
    "/mob/skeleton.png", "/mob/pig.png", "/mob/creeper.png", "Game over!", "�", "averageCharsPerByte must be positive. Actual value is ", "maxCharsPerByte must be positive. Actual value is ", "The last byte in dst ", "oversubscribed dynamic bit lengths tree", "incomplete dynamic bit lengths tree", "oversubscribed distance tree", "incomplete distance tree", "empty distance tree with lengths", "oversubscribed literal/length tree", "incomplete literal/length tree", "invalid distance code", "invalid literal/length code",
    "Writer already closed", "Invalid file name", "Could not create file", "Directory does not exist", "Is", "In", ", ", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase", "javaUpperCase", "javaWhitespace", "javaMirrored", "javaDefined", "javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart", "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar", "javaTitleCase", "javaUnicodeIdentifierPart",
    "javaUnicodeIdentifierStart", "Space", "w", "s", "d", "BasicLatin", "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement", "Armenian", "Hebrew", "Arabic", "Syriac", "ArabicSupplement", "Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement",
    "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement", "CombiningDiacriticalMarksSupplement", "LatinExtendedAdditional", "GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts", "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms", "Arrows", "MathematicalOperators", "MiscellaneousTechnical",
    "ControlPictures", "OpticalCharacterRecognition", "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns", "SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B", "SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows", "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended", "SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals",
    "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation", "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility", "CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols", "CJKUnifiedIdeographs", "YiSyllables", "YiRadicals", "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates", "LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs",
    "AlphabeticPresentationForms", "ArabicPresentationForms-A", "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all", "Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM", "Mn", "Me", "Mc", "Nd", "Nl", "No", "IsZ", "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "/armor/plate.png", "/mob/zombie.png", "/mob/spider.png",
    "/mob/sheep.png", "/mob/sheep_fur.png", "Options", "Controls...", "Done", "Controls", "Small", "Normal", "Huge", "Cancel", "Generate new level", "Load level", "Getting level list..", "Failed to load levels", "---", "Load file...", "Selecting file..", "Save file...", "Premium only!", "Purchase the game to be able", "to save your levels online.", ".mine", "Enter level name:", "Malformed input of length ", "Unmappable characters of length ", "Can\'t create file ", " since parent path denotes regular file",
    " <", "Save", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ,.:-_\'*!\"#%/()=+?[]{}<>"]);
    jl_String.prototype.toString = function() {
        return $rt_ustr(this);
    };
    jl_String.prototype.valueOf = jl_String.prototype.toString;
    jl_Object.prototype.toString = function() {
        return $rt_ustr(jl_Object_toString(this));
    };
    jl_Object.prototype.__teavm_class__ = function() {
        return $dbg_class(this);
    };
    var Long_eq;
    var Long_ne;
    var Long_gt;
    var Long_ge;
    var Long_lt;
    var Long_le;
    var Long_compare;
    var Long_ucompare;
    var Long_add;
    var Long_sub;
    var Long_inc;
    var Long_dec;
    var Long_mul;
    var Long_div;
    var Long_rem;
    var Long_udiv;
    var Long_urem;
    var Long_neg;
    var Long_and;
    var Long_or;
    var Long_xor;
    var Long_shl;
    var Long_shr;
    var Long_shru;
    var Long_not;
    if (typeof $rt_globals.BigInt !== 'function') {
        Long_eq = function(a, b) {
            return a.hi === b.hi && a.lo === b.lo;
        };
        Long_ne = function(a, b) {
            return a.hi !== b.hi || a.lo !== b.lo;
        };
        Long_gt = function(a, b) {
            if (a.hi < b.hi) {
                return false;
            }
            if (a.hi > b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x > y;
            }
            return (a.lo & 1) > (b.lo & 1);
        };
        Long_ge = function(a, b) {
            if (a.hi < b.hi) {
                return false;
            }
            if (a.hi > b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x >= y;
            }
            return (a.lo & 1) >= (b.lo & 1);
        };
        Long_lt = function(a, b) {
            if (a.hi > b.hi) {
                return false;
            }
            if (a.hi < b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x < y;
            }
            return (a.lo & 1) < (b.lo & 1);
        };
        Long_le = function(a, b) {
            if (a.hi > b.hi) {
                return false;
            }
            if (a.hi < b.hi) {
                return true;
            }
            var x = a.lo >>> 1;
            var y = b.lo >>> 1;
            if (x !== y) {
                return x <= y;
            }
            return (a.lo & 1) <= (b.lo & 1);
        };
        Long_add = function(a, b) {
            if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
                return Long_fromNumber(a.lo + b.lo);
            } else if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) + Long_toNumber(b));
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = a_lolo + b_lolo | 0;
            var lohi = a_lohi + b_lohi + (lolo >> 16) | 0;
            var hilo = a_hilo + b_hilo + (lohi >> 16) | 0;
            var hihi = a_hihi + b_hihi + (hilo >> 16) | 0;
            return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
        };
        Long_inc = function(a) {
            var lo = a.lo + 1 | 0;
            var hi = a.hi;
            if (lo === 0) {
                hi = hi + 1 | 0;
            }
            return new Long(lo, hi);
        };
        Long_dec = function(a) {
            var lo = a.lo - 1 | 0;
            var hi = a.hi;
            if (lo ===  -1) {
                hi = hi - 1 | 0;
            }
            return new Long(lo, hi);
        };
        Long_neg = function(a) {
            return Long_inc(new Long(a.lo ^ 0xFFFFFFFF, a.hi ^ 0xFFFFFFFF));
        };
        Long_sub = function(a, b) {
            if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
                return Long_fromNumber(a.lo - b.lo);
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = a_lolo - b_lolo | 0;
            var lohi = a_lohi - b_lohi + (lolo >> 16) | 0;
            var hilo = a_hilo - b_hilo + (lohi >> 16) | 0;
            var hihi = a_hihi - b_hihi + (hilo >> 16) | 0;
            return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
        };
        Long_compare = function(a, b) {
            var r = a.hi - b.hi;
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        };
        Long_ucompare = function(a, b) {
            var r = $rt_ucmp(a.hi, b.hi);
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        };
        Long_mul = function(a, b) {
            var positive = Long_isNegative(a) === Long_isNegative(b);
            if (Long_isNegative(a)) {
                a = Long_neg(a);
            }
            if (Long_isNegative(b)) {
                b = Long_neg(b);
            }
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            var lolo = 0;
            var lohi = 0;
            var hilo = 0;
            var hihi = 0;
            lolo = a_lolo * b_lolo | 0;
            lohi = lolo >>> 16;
            lohi = (lohi & 0xFFFF) + a_lohi * b_lolo | 0;
            hilo = hilo + (lohi >>> 16) | 0;
            lohi = (lohi & 0xFFFF) + a_lolo * b_lohi | 0;
            hilo = hilo + (lohi >>> 16) | 0;
            hihi = hilo >>> 16;
            hilo = (hilo & 0xFFFF) + a_hilo * b_lolo | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hilo = (hilo & 0xFFFF) + a_lohi * b_lohi | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hilo = (hilo & 0xFFFF) + a_lolo * b_hilo | 0;
            hihi = hihi + (hilo >>> 16) | 0;
            hihi = hihi + a_hihi * b_lolo + a_hilo * b_lohi + a_lohi * b_hilo + a_lolo * b_hihi | 0;
            var result = new Long(lolo & 0xFFFF | lohi << 16, hilo & 0xFFFF | hihi << 16);
            return positive ? result : Long_neg(result);
        };
        Long_div = function(a, b) {
            if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_divRem(a, b))[0];
        };
        Long_udiv = function(a, b) {
            if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_udivRem(a, b))[0];
        };
        Long_rem = function(a, b) {
            if ($rt_globals.Math.abs(a.hi) < Long_MAX_NORMAL && $rt_globals.Math.abs(b.hi) < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) % Long_toNumber(b));
            }
            return (Long_divRem(a, b))[1];
        };
        Long_urem = function(a, b) {
            if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
                return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
            }
            return (Long_udivRem(a, b))[1];
        };
        function Long_divRem(a, b) {
            if (b.lo === 0 && b.hi === 0) {
                throw new $rt_globals.Error("Division by zero");
            }
            var positive = Long_isNegative(a) === Long_isNegative(b);
            if (Long_isNegative(a)) {
                a = Long_neg(a);
            }
            if (Long_isNegative(b)) {
                b = Long_neg(b);
            }
            a = new LongInt(a.lo, a.hi, 0);
            b = new LongInt(b.lo, b.hi, 0);
            var q = LongInt_div(a, b);
            a = new Long(a.lo, a.hi);
            q = new Long(q.lo, q.hi);
            return positive ? [q, a] : [Long_neg(q), Long_neg(a)];
        }
        function Long_udivRem(a, b) {
            if (b.lo === 0 && b.hi === 0) {
                throw new $rt_globals.Error("Division by zero");
            }
            a = new LongInt(a.lo, a.hi, 0);
            b = new LongInt(b.lo, b.hi, 0);
            var q = LongInt_div(a, b);
            a = new Long(a.lo, a.hi);
            q = new Long(q.lo, q.hi);
            return [q, a];
        }
        function Long_shiftLeft16(a) {
            return new Long(a.lo << 16, a.lo >>> 16 | a.hi << 16);
        }
        function Long_shiftRight16(a) {
            return new Long(a.lo >>> 16 | a.hi << 16, a.hi >>> 16);
        }
        Long_and = function(a, b) {
            return new Long(a.lo & b.lo, a.hi & b.hi);
        };
        Long_or = function(a, b) {
            return new Long(a.lo | b.lo, a.hi | b.hi);
        };
        Long_xor = function(a, b) {
            return new Long(a.lo ^ b.lo, a.hi ^ b.hi);
        };
        Long_shl = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo << b, a.lo >>> 32 - b | a.hi << b);
            } else if (b === 32) {
                return new Long(0, a.lo);
            } else {
                return new Long(0, a.lo << b - 32);
            }
        };
        Long_shr = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >> b);
            } else if (b === 32) {
                return new Long(a.hi, a.hi >> 31);
            } else {
                return new Long(a.hi >> b - 32, a.hi >> 31);
            }
        };
        Long_shru = function(a, b) {
            b &= 63;
            if (b === 0) {
                return a;
            } else if (b < 32) {
                return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >>> b);
            } else if (b === 32) {
                return new Long(a.hi, 0);
            } else {
                return new Long(a.hi >>> b - 32, 0);
            }
        };
        Long_not = function(a) {
            return new Long(~a.hi, ~a.lo);
        };
        function LongInt(lo, hi, sup) {
            this.lo = lo;
            this.hi = hi;
            this.sup = sup;
        }
        function LongInt_mul(a, b) {
            var a_lolo = (a.lo & 0xFFFF) * b | 0;
            var a_lohi = (a.lo >>> 16) * b | 0;
            var a_hilo = (a.hi & 0xFFFF) * b | 0;
            var a_hihi = (a.hi >>> 16) * b | 0;
            var sup = a.sup * b | 0;
            a_lohi = a_lohi + (a_lolo >>> 16) | 0;
            a_hilo = a_hilo + (a_lohi >>> 16) | 0;
            a_hihi = a_hihi + (a_hilo >>> 16) | 0;
            sup = sup + (a_hihi >>> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup & 0xFFFF;
        }
        function LongInt_sub(a, b) {
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            a_lolo = a_lolo - b_lolo | 0;
            a_lohi = a_lohi - b_lohi + (a_lolo >> 16) | 0;
            a_hilo = a_hilo - b_hilo + (a_lohi >> 16) | 0;
            a_hihi = a_hihi - b_hihi + (a_hilo >> 16) | 0;
            var sup = a.sup - b.sup + (a_hihi >> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup;
        }
        function LongInt_add(a, b) {
            var a_lolo = a.lo & 0xFFFF;
            var a_lohi = a.lo >>> 16;
            var a_hilo = a.hi & 0xFFFF;
            var a_hihi = a.hi >>> 16;
            var b_lolo = b.lo & 0xFFFF;
            var b_lohi = b.lo >>> 16;
            var b_hilo = b.hi & 0xFFFF;
            var b_hihi = b.hi >>> 16;
            a_lolo = a_lolo + b_lolo | 0;
            a_lohi = a_lohi + b_lohi + (a_lolo >> 16) | 0;
            a_hilo = a_hilo + b_hilo + (a_lohi >> 16) | 0;
            a_hihi = a_hihi + b_hihi + (a_hilo >> 16) | 0;
            var sup = a.sup + b.sup + (a_hihi >> 16) | 0;
            a.lo = a_lolo & 0xFFFF | a_lohi << 16;
            a.hi = a_hilo & 0xFFFF | a_hihi << 16;
            a.sup = sup;
        }
        function LongInt_inc(a) {
            a.lo = a.lo + 1 | 0;
            if (a.lo === 0) {
                a.hi = a.hi + 1 | 0;
                if (a.hi === 0) {
                    a.sup = a.sup + 1 & 0xFFFF;
                }
            }
        }
        function LongInt_dec(a) {
            a.lo = a.lo - 1 | 0;
            if (a.lo ===  -1) {
                a.hi = a.hi - 1 | 0;
                if (a.hi ===  -1) {
                    a.sup = a.sup - 1 & 0xFFFF;
                }
            }
        }
        function LongInt_ucompare(a, b) {
            var r = a.sup - b.sup;
            if (r !== 0) {
                return r;
            }
            r = (a.hi >>> 1) - (b.hi >>> 1);
            if (r !== 0) {
                return r;
            }
            r = (a.hi & 1) - (b.hi & 1);
            if (r !== 0) {
                return r;
            }
            r = (a.lo >>> 1) - (b.lo >>> 1);
            if (r !== 0) {
                return r;
            }
            return (a.lo & 1) - (b.lo & 1);
        }
        function LongInt_numOfLeadingZeroBits(a) {
            var n = 0;
            var d = 16;
            while (d > 0) {
                if (a >>> d !== 0) {
                    a >>>= d;
                    n = n + d | 0;
                }
                d = d / 2 | 0;
            }
            return 31 - n;
        }
        function LongInt_shl(a, b) {
            if (b === 0) {
                return;
            }
            if (b < 32) {
                a.sup = (a.hi >>> 32 - b | a.sup << b) & 0xFFFF;
                a.hi = a.lo >>> 32 - b | a.hi << b;
                a.lo <<= b;
            } else if (b === 32) {
                a.sup = a.hi & 0xFFFF;
                a.hi = a.lo;
                a.lo = 0;
            } else if (b < 64) {
                a.sup = (a.lo >>> 64 - b | a.hi << b - 32) & 0xFFFF;
                a.hi = a.lo << b;
                a.lo = 0;
            } else if (b === 64) {
                a.sup = a.lo & 0xFFFF;
                a.hi = 0;
                a.lo = 0;
            } else {
                a.sup = a.lo << b - 64 & 0xFFFF;
                a.hi = 0;
                a.lo = 0;
            }
        }
        function LongInt_shr(a, b) {
            if (b === 0) {
                return;
            }
            if (b === 32) {
                a.lo = a.hi;
                a.hi = a.sup;
                a.sup = 0;
            } else if (b < 32) {
                a.lo = a.lo >>> b | a.hi << 32 - b;
                a.hi = a.hi >>> b | a.sup << 32 - b;
                a.sup >>>= b;
            } else if (b === 64) {
                a.lo = a.sup;
                a.hi = 0;
                a.sup = 0;
            } else if (b < 64) {
                a.lo = a.hi >>> b - 32 | a.sup << 64 - b;
                a.hi = a.sup >>> b - 32;
                a.sup = 0;
            } else {
                a.lo = a.sup >>> b - 64;
                a.hi = 0;
                a.sup = 0;
            }
        }
        function LongInt_copy(a) {
            return new LongInt(a.lo, a.hi, a.sup);
        }
        function LongInt_div(a, b) {
            var bits = b.hi !== 0 ? LongInt_numOfLeadingZeroBits(b.hi) : LongInt_numOfLeadingZeroBits(b.lo) + 32;
            var sz = 1 + (bits / 16 | 0);
            var dividentBits = bits % 16;
            LongInt_shl(b, bits);
            LongInt_shl(a, dividentBits);
            var q = new LongInt(0, 0, 0);
            while (sz-- > 0) {
                LongInt_shl(q, 16);
                var digitA = (a.hi >>> 16) + 0x10000 * a.sup;
                var digitB = b.hi >>> 16;
                var digit = digitA / digitB | 0;
                var t = LongInt_copy(b);
                LongInt_mul(t, digit);
                if (LongInt_ucompare(t, a) >= 0) {
                    while (LongInt_ucompare(t, a) > 0) {
                        LongInt_sub(t, b);
                         --digit;
                    }
                } else {
                    while (true) {
                        var nextT = LongInt_copy(t);
                        LongInt_add(nextT, b);
                        if (LongInt_ucompare(nextT, a) > 0) {
                            break;
                        }
                        t = nextT;
                        ++digit;
                    }
                }
                LongInt_sub(a, t);
                q.lo |= digit;
                LongInt_shl(a, 16);
            }
            LongInt_shr(a, bits + 16);
            return q;
        }
    } else {
        Long_eq = function(a, b) {
            return a === b;
        };
        Long_ne = function(a, b) {
            return a !== b;
        };
        Long_gt = function(a, b) {
            return a > b;
        };
        Long_ge = function(a, b) {
            return a >= b;
        };
        Long_lt = function(a, b) {
            return a < b;
        };
        Long_le = function(a, b) {
            return a <= b;
        };
        Long_add = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a + b);
        };
        Long_inc = function(a) {
            return $rt_globals.BigInt.asIntN(64, a + 1);
        };
        Long_dec = function(a) {
            return $rt_globals.BigInt.asIntN(64, a - 1);
        };
        Long_neg = function(a) {
            return $rt_globals.BigInt.asIntN(64,  -a);
        };
        Long_sub = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a - b);
        };
        Long_compare = function(a, b) {
            return a < b ?  -1 : a > b ? 1 : 0;
        };
        Long_ucompare = function(a, b) {
            a = $rt_globals.BigInt.asUintN(64, a);
            b = $rt_globals.BigInt.asUintN(64, b);
            return a < b ?  -1 : a > b ? 1 : 0;
        };
        Long_mul = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a * b);
        };
        Long_div = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a / b);
        };
        Long_udiv = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) / $rt_globals.BigInt.asUintN(64, b));
        };
        Long_rem = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a % b);
        };
        Long_urem = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) % $rt_globals.BigInt.asUintN(64, b));
        };
        Long_and = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a & b);
        };
        Long_or = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a | b);
        };
        Long_xor = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a ^ b);
        };
        Long_shl = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a << $rt_globals.BigInt(b & 63));
        };
        Long_shr = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, a >> $rt_globals.BigInt(b & 63));
        };
        Long_shru = function(a, b) {
            return $rt_globals.BigInt.asIntN(64, $rt_globals.BigInt.asUintN(64, a) >> $rt_globals.BigInt(b & 63));
        };
        Long_not = function(a) {
            return $rt_globals.BigInt.asIntN(64, ~a);
        };
    }
    var Long_add = Long_add;

    var Long_sub = Long_sub;

    var Long_mul = Long_mul;

    var Long_div = Long_div;

    var Long_rem = Long_rem;

    var Long_or = Long_or;

    var Long_and = Long_and;

    var Long_xor = Long_xor;

    var Long_shl = Long_shl;

    var Long_shr = Long_shr;

    var Long_shru = Long_shru;

    var Long_compare = Long_compare;

    var Long_eq = Long_eq;

    var Long_ne = Long_ne;

    var Long_lt = Long_lt;

    var Long_le = Long_le;

    var Long_gt = Long_gt;

    var Long_ge = Long_ge;

    var Long_not = Long_not;

    var Long_neg = Long_neg;

    function TeaVMThread(runner) {
        this.status = 3;
        this.stack = [];
        this.suspendCallback = null;
        this.runner = runner;
        this.attribute = null;
        this.completeCallback = null;
    }
    TeaVMThread.prototype.push = function() {
        for (var i = 0;i < arguments.length;++i) {
            this.stack.push(arguments[i]);
        }
        return this;
    };
    TeaVMThread.prototype.s = TeaVMThread.prototype.push;
    TeaVMThread.prototype.pop = function() {
        return this.stack.pop();
    };
    TeaVMThread.prototype.l = TeaVMThread.prototype.pop;
    TeaVMThread.prototype.isResuming = function() {
        return this.status === 2;
    };
    TeaVMThread.prototype.isSuspending = function() {
        return this.status === 1;
    };
    TeaVMThread.prototype.suspend = function(callback) {
        this.suspendCallback = callback;
        this.status = 1;
    };
    TeaVMThread.prototype.start = function(callback) {
        if (this.status !== 3) {
            throw new $rt_globals.Error("Thread already started");
        }
        if ($rt_currentNativeThread !== null) {
            throw new $rt_globals.Error("Another thread is running");
        }
        this.status = 0;
        this.completeCallback = callback ? callback : function(result) {
            if (result instanceof $rt_globals.Error) {
                throw result;
            }
        };
        this.run();
    };
    TeaVMThread.prototype.resume = function() {
        if ($rt_currentNativeThread !== null) {
            throw new $rt_globals.Error("Another thread is running");
        }
        this.status = 2;
        this.run();
    };
    TeaVMThread.prototype.run = function() {
        $rt_currentNativeThread = this;
        var result;
        try {
            result = this.runner();
        } catch (e){
            result = e;
        } finally {
            $rt_currentNativeThread = null;
        }
        if (this.suspendCallback !== null) {
            var self = this;
            var callback = this.suspendCallback;
            this.suspendCallback = null;
            callback(function() {
                self.resume();
            });
        } else if (this.status === 0) {
            this.completeCallback(result);
        }
    };
    function $rt_suspending() {
        var thread = $rt_nativeThread();
        return thread != null && thread.isSuspending();
    }
    function $rt_resuming() {
        var thread = $rt_nativeThread();
        return thread != null && thread.isResuming();
    }
    function $rt_suspend(callback) {
        var nativeThread = $rt_nativeThread();
        if (nativeThread === null) {
            throw new $rt_globals.Error("Suspension point reached from non-threading context (perhaps, from native JS method).");
        }
        return nativeThread.suspend(callback);
    }
    function $rt_startThread(runner, callback) {
        (new TeaVMThread(runner)).start(callback);
    }
    var $rt_currentNativeThread = null;
    function $rt_nativeThread() {
        return $rt_currentNativeThread;
    }
    function $rt_invalidPointer() {
        throw new $rt_globals.Error("Invalid recorded state");
    }
    $rt_exports.main = $rt_mainStarter(nPm_Client_main);
    $rt_exports.main.javaException = $rt_javaException;
    let $rt_jso_marker = $rt_globals.Symbol('jsoClass');
    (function() {
        var c;
        c = otjb_Window.prototype;
        c.removeEventListener = c.$removeEventListener$exported$3;
        c.dispatchEvent = c.$dispatchEvent$exported$4;
        c.get = c.$get$exported$0;
        c.addEventListener = c.$addEventListener$exported$6;
        Object.defineProperty(c, "length", {
            get: c.$getLength$exported$5
        });
        c = olo_Display$1.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = olo_Display$2.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = olo_Display$3.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = otja_XMLHttpRequest.prototype;
        c.removeEventListener = c.$removeEventListener$exported$20;
        c.dispatchEvent = c.$dispatchEvent$exported$3;
        c.addEventListener = c.$addEventListener$exported$4;
        c = nPm_LWJGLUtil$3.prototype;
        c[$rt_jso_marker] = true;
        c.stateChanged = c.$stateChanged$exported$0;
        c = otjb_Performance.prototype;
        c[$rt_jso_marker] = true;
        c = otji_JSWrapper$_clinit_$lambda$_30_0.prototype;
        c[$rt_jso_marker] = true;
        c.accept = c.$accept$exported$0;
        c = otji_JSWrapper$_clinit_$lambda$_30_1.prototype;
        c[$rt_jso_marker] = true;
        c.accept = c.$accept$exported$0;
        c = oli_Keyboard$1.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Keyboard$2.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Keyboard$3.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$1.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$2.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$3.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$4.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$5.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$6.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$7.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = oli_Mouse$8.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = nPm_LWJGLUtil$1.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
        c = nPm_LWJGLUtil$2.prototype;
        c[$rt_jso_marker] = true;
        c.handleEvent = c.$handleEvent$exported$0;
    })();
}));

//# sourceMappingURL=app.js.map